/*! For license information please see tiptap-plugin.webpack.js.LICENSE.txt */
(()=>{var t={48583:(t,e,n)=>{"use strict";var r=n(27418);function o(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0}function i(t){return n.g.Buffer&&"function"==typeof n.g.Buffer.isBuffer?n.g.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var s=n(30069),a=Object.prototype.hasOwnProperty,c=Array.prototype.slice,p="foo"===function(){}.name;function l(t){return Object.prototype.toString.call(t)}function u(t){return!i(t)&&"function"==typeof n.g.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer)))}var h=t.exports=y,d=/\s*function\s+([^\(\s]*)\s*/;function f(t){if(s.isFunction(t)){if(p)return t.name;var e=t.toString().match(d);return e&&e[1]}}function m(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function v(t){if(p||!s.isFunction(t))return s.inspect(t);var e=f(t);return"[Function"+(e?": "+e:"")+"]"}function g(t,e,n,r,o){throw new h.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:o})}function y(t,e){t||g(t,!0,e,"==",h.ok)}function b(t,e,n,r){if(t===e)return!0;if(i(t)&&i(e))return 0===o(t,e);if(s.isDate(t)&&s.isDate(e))return t.getTime()===e.getTime();if(s.isRegExp(t)&&s.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(u(t)&&u(e)&&l(t)===l(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===o(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return!1;var a=(r=r||{actual:[],expected:[]}).actual.indexOf(t);return-1!==a&&a===r.expected.indexOf(e)||(r.actual.push(t),r.expected.push(e),function(t,e,n,r){if(null==t||null==e)return!1;if(s.isPrimitive(t)||s.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var o=w(t),i=w(e);if(o&&!i||!o&&i)return!1;if(o)return b(t=c.call(t),e=c.call(e),n);var a,p,l=k(t),u=k(e);if(l.length!==u.length)return!1;for(l.sort(),u.sort(),p=l.length-1;p>=0;p--)if(l[p]!==u[p])return!1;for(p=l.length-1;p>=0;p--)if(!b(t[a=l[p]],e[a],n,r))return!1;return!0}(t,e,n,r))}return n?t===e:t==e}function w(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function S(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function x(t,e,n,r){var o;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),o=function(t){var e;try{t()}catch(t){e=t}return e}(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!o&&g(o,n,"Missing expected exception"+r);var i="string"==typeof r,a=!t&&o&&!n;if((!t&&s.isError(o)&&i&&S(o,n)||a)&&g(o,n,"Got unwanted exception"+r),t&&o&&n&&!S(o,n)||!t&&o)throw o}h.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=m(v(this.actual),128)+" "+this.operator+" "+m(v(this.expected),128),this.generatedMessage=!0);var e=t.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var n=new Error;if(n.stack){var r=n.stack,o=f(e),i=r.indexOf("\n"+o);if(i>=0){var s=r.indexOf("\n",i+1);r=r.substring(s+1)}this.stack=r}}},s.inherits(h.AssertionError,Error),h.fail=g,h.ok=y,h.equal=function(t,e,n){t!=e&&g(t,e,n,"==",h.equal)},h.notEqual=function(t,e,n){t==e&&g(t,e,n,"!=",h.notEqual)},h.deepEqual=function(t,e,n){b(t,e,!1)||g(t,e,n,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(t,e,n){b(t,e,!0)||g(t,e,n,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(t,e,n){b(t,e,!1)&&g(t,e,n,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function t(e,n,r){b(e,n,!0)&&g(e,n,r,"notDeepStrictEqual",t)},h.strictEqual=function(t,e,n){t!==e&&g(t,e,n,"===",h.strictEqual)},h.notStrictEqual=function(t,e,n){t===e&&g(t,e,n,"!==",h.notStrictEqual)},h.throws=function(t,e,n){x(!0,t,e,n)},h.doesNotThrow=function(t,e,n){x(!1,t,e,n)},h.ifError=function(t){if(t)throw t},h.strict=r((function t(e,n){e||g(e,!0,n,"==",t)}),h,{equal:h.strictEqual,deepEqual:h.deepStrictEqual,notEqual:h.notStrictEqual,notDeepEqual:h.notDeepStrictEqual}),h.strict.strict=h.strict;var k=Object.keys||function(t){var e=[];for(var n in t)a.call(t,n)&&e.push(n);return e}},16076:t=>{"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},52014:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},30069:(t,e,n)=>{var r=n(34155),o=n(25108),i=/%[sdj%]/g;e.format=function(t){if(!y(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(c(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,s=String(t).replace(i,(function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),a=r[n];n<o;a=r[++n])v(a)||!S(a)?s+=" "+a:s+=" "+c(a);return s},e.deprecate=function(t,i){if(b(n.g.process))return function(){return e.deprecate(t,i).apply(this,arguments)};if(!0===r.noDeprecation)return t;var s=!1;return function(){if(!s){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?o.trace(i):o.error(i),s=!0}return t.apply(this,arguments)}};var s,a={};function c(t,n){var r={seen:[],stylize:l};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),m(n)?r.showHidden=n:n&&e._extend(r,n),b(r.showHidden)&&(r.showHidden=!1),b(r.depth)&&(r.depth=2),b(r.colors)&&(r.colors=!1),b(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=p),u(r,t,r.depth)}function p(t,e){var n=c.styles[e];return n?"["+c.colors[n][0]+"m"+t+"["+c.colors[n][1]+"m":t}function l(t,e){return t}function u(t,n,r){if(t.customInspect&&n&&M(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(r,t);return y(o)||(o=u(t,o,r)),o}var i=function(t,e){if(b(e))return t.stylize("undefined","undefined");if(y(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return g(e)?t.stylize(""+e,"number"):m(e)?t.stylize(""+e,"boolean"):v(e)?t.stylize("null","null"):void 0}(t,n);if(i)return i;var s=Object.keys(n),a=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(n)),k(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return h(n);if(0===s.length){if(M(n)){var c=n.name?": "+n.name:"";return t.stylize("[Function"+c+"]","special")}if(w(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(x(n))return t.stylize(Date.prototype.toString.call(n),"date");if(k(n))return h(n)}var p,l="",S=!1,O=["{","}"];return f(n)&&(S=!0,O=["[","]"]),M(n)&&(l=" [Function"+(n.name?": "+n.name:"")+"]"),w(n)&&(l=" "+RegExp.prototype.toString.call(n)),x(n)&&(l=" "+Date.prototype.toUTCString.call(n)),k(n)&&(l=" "+h(n)),0!==s.length||S&&0!=n.length?r<0?w(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),p=S?function(t,e,n,r,o){for(var i=[],s=0,a=e.length;s<a;++s)E(e,String(s))?i.push(d(t,e,n,r,String(s),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(d(t,e,n,r,o,!0))})),i}(t,n,r,a,s):s.map((function(e){return d(t,n,r,a,e,S)})),t.seen.pop(),function(t,e,n){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}(p,l,O)):O[0]+l+O[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function d(t,e,n,r,o,i){var s,a,c;if((c=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?a=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(a=t.stylize("[Setter]","special")),E(r,o)||(s="["+o+"]"),a||(t.seen.indexOf(c.value)<0?(a=v(n)?u(t,c.value,null):u(t,c.value,n-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+a.split("\n").map((function(t){return"   "+t})).join("\n")):a=t.stylize("[Circular]","special")),b(s)){if(i&&o.match(/^\d+$/))return a;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function f(t){return Array.isArray(t)}function m(t){return"boolean"==typeof t}function v(t){return null===t}function g(t){return"number"==typeof t}function y(t){return"string"==typeof t}function b(t){return void 0===t}function w(t){return S(t)&&"[object RegExp]"===O(t)}function S(t){return"object"==typeof t&&null!==t}function x(t){return S(t)&&"[object Date]"===O(t)}function k(t){return S(t)&&("[object Error]"===O(t)||t instanceof Error)}function M(t){return"function"==typeof t}function O(t){return Object.prototype.toString.call(t)}function C(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(b(s)&&(s=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!a[t])if(new RegExp("\\b"+t+"\\b","i").test(s)){var n=r.pid;a[t]=function(){var r=e.format.apply(e,arguments);o.error("%s %d: %s",t,n,r)}}else a[t]=function(){};return a[t]},e.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=f,e.isBoolean=m,e.isNull=v,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=y,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=b,e.isRegExp=w,e.isObject=S,e.isDate=x,e.isError=k,e.isFunction=M,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(52014);var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function N(){var t=new Date,e=[C(t.getHours()),C(t.getMinutes()),C(t.getSeconds())].join(":");return[t.getDate(),T[t.getMonth()],e].join(" ")}function E(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){o.log("%s - %s",N(),e.format.apply(e,arguments))},e.inherits=n(16076),e._extend=function(t,e){if(!e||!S(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}},25108:(t,e,n)=>{var r=n(89539),o=n(48583);function i(){return(new Date).getTime()}var s,a=Array.prototype.slice,c={};s=void 0!==n.g&&n.g.console?n.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var p=[[function(){},"log"],[function(){s.log.apply(s,arguments)},"info"],[function(){s.log.apply(s,arguments)},"warn"],[function(){s.warn.apply(s,arguments)},"error"],[function(t){c[t]=i()},"time"],[function(t){var e=c[t];if(!e)throw new Error("No such label: "+t);delete c[t];var n=i()-e;s.log(t+": "+n+"ms")},"timeEnd"],[function(){var t=new Error;t.name="Trace",t.message=r.format.apply(null,arguments),s.error(t.stack)},"trace"],[function(t){s.log(r.inspect(t)+"\n")},"dir"],[function(t){if(!t){var e=a.call(arguments,1);o.ok(!1,r.format.apply(null,e))}},"assert"]],l=0;l<p.length;l++){var u=p[l],h=u[0],d=u[1];s[d]||(s[d]=h)}t.exports=s},9996:t=>{"use strict";var e=function(t){return function(t){return!!t&&"object"==typeof t}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===n}(t)}(t)},n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(t,e){return!1!==e.clone&&e.isMergeableObject(t)?a((n=t,Array.isArray(n)?[]:{}),t,e):t;var n}function o(t,e,n){return t.concat(e).map((function(t){return r(t,n)}))}function i(t){return Object.keys(t).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter((function(e){return t.propertyIsEnumerable(e)})):[]}(t))}function s(t,e){try{return e in t}catch(t){return!1}}function a(t,n,c){(c=c||{}).arrayMerge=c.arrayMerge||o,c.isMergeableObject=c.isMergeableObject||e,c.cloneUnlessOtherwiseSpecified=r;var p=Array.isArray(n);return p===Array.isArray(t)?p?c.arrayMerge(t,n,c):function(t,e,n){var o={};return n.isMergeableObject(t)&&i(t).forEach((function(e){o[e]=r(t[e],n)})),i(e).forEach((function(i){(function(t,e){return s(t,e)&&!(Object.hasOwnProperty.call(t,e)&&Object.propertyIsEnumerable.call(t,e))})(t,i)||(s(t,i)&&n.isMergeableObject(e[i])?o[i]=function(t,e){if(!e.customMerge)return a;var n=e.customMerge(t);return"function"==typeof n?n:a}(i,n)(t[i],e[i],n):o[i]=r(e[i],n))})),o}(t,n,c):r(n,c)}a.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce((function(t,n){return a(t,n,e)}),{})};var c=a;t.exports=c},27418:t=>{"use strict";var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,i){for(var s,a,c=o(t),p=1;p<arguments.length;p++){for(var l in s=Object(arguments[p]))n.call(s,l)&&(c[l]=s[l]);if(e){a=e(s);for(var u=0;u<a.length;u++)r.call(s,a[u])&&(c[a[u]]=s[a[u]])}}return c}},34155:t=>{var e,n,r=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(t){n=i}}();var a,c=[],p=!1,l=-1;function u(){p&&a&&(p=!1,a.length?c=a.concat(c):l=-1,c.length&&h())}function h(){if(!p){var t=s(u);p=!0;for(var e=c.length;e;){for(a=c,c=[];++l<e;)a&&a[l].run();l=-1,e=c.length}a=null,p=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function f(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||p||s(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},42778:(t,e,n)=>{"use strict";n.d(e,{createParagraphNear:()=>y,deleteSelection:()=>s,exitCode:()=>g,joinBackward:()=>a,joinForward:()=>u,lift:()=>f,liftEmptyBlock:()=>b,newlineInCode:()=>m,selectNodeBackward:()=>p,selectNodeForward:()=>h,selectParentNode:()=>w,setBlockType:()=>k,wrapIn:()=>x});var r=n(21081),o=n(38638),i=n(76922);function s(t,e){return!t.selection.empty&&(e&&e(t.tr.deleteSelection().scrollIntoView()),!0)}function a(t,e,n){var o=t.selection.$cursor;if(!o||(n?!n.endOfTextblock("backward",t):o.parentOffset>0))return!1;var s=l(o);if(!s){var a=o.blockRange(),p=a&&(0,r.k9)(a);return null!=p&&(e&&e(t.tr.lift(a,p).scrollIntoView()),!0)}var u=s.nodeBefore;if(!u.type.spec.isolating&&S(t,s,e))return!0;if(0==o.parent.content.size&&(c(u,"end")||i.NodeSelection.isSelectable(u))){if(e){var h=t.tr.deleteRange(o.before(),o.after());h.setSelection(c(u,"end")?i.Selection.findFrom(h.doc.resolve(h.mapping.map(s.pos,-1)),-1):i.NodeSelection.create(h.doc,s.pos-u.nodeSize)),e(h.scrollIntoView())}return!0}return!(!u.isAtom||s.depth!=o.depth-1||(e&&e(t.tr.delete(s.pos-u.nodeSize,s.pos).scrollIntoView()),0))}function c(t,e,n){for(;t;t="start"==e?t.firstChild:t.lastChild){if(t.isTextblock)return!0;if(n&&1!=t.childCount)return!1}return!1}function p(t,e,n){var r=t.selection,o=r.$head,s=o;if(!r.empty)return!1;if(o.parent.isTextblock){if(n?!n.endOfTextblock("backward",t):o.parentOffset>0)return!1;s=l(o)}var a=s&&s.nodeBefore;return!(!a||!i.NodeSelection.isSelectable(a)||(e&&e(t.tr.setSelection(i.NodeSelection.create(t.doc,s.pos-a.nodeSize)).scrollIntoView()),0))}function l(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){if(t.index(e)>0)return t.doc.resolve(t.before(e+1));if(t.node(e).type.spec.isolating)break}return null}function u(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=d(r);if(!o)return!1;var s=o.nodeAfter;if(S(t,o,e))return!0;if(0==r.parent.content.size&&(c(s,"start")||i.NodeSelection.isSelectable(s))){if(e){var a=t.tr.deleteRange(r.before(),r.after());a.setSelection(c(s,"start")?i.Selection.findFrom(a.doc.resolve(a.mapping.map(o.pos)),1):i.NodeSelection.create(a.doc,a.mapping.map(o.pos))),e(a.scrollIntoView())}return!0}return!(!s.isAtom||o.depth!=r.depth-1||(e&&e(t.tr.delete(o.pos,o.pos+s.nodeSize).scrollIntoView()),0))}function h(t,e,n){var r=t.selection,o=r.$head,s=o;if(!r.empty)return!1;if(o.parent.isTextblock){if(n?!n.endOfTextblock("forward",t):o.parentOffset<o.parent.content.size)return!1;s=d(o)}var a=s&&s.nodeAfter;return!(!a||!i.NodeSelection.isSelectable(a)||(e&&e(t.tr.setSelection(i.NodeSelection.create(t.doc,s.pos)).scrollIntoView()),0))}function d(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){var n=t.node(e);if(t.index(e)+1<n.childCount)return t.doc.resolve(t.after(e+1));if(n.type.spec.isolating)break}return null}function f(t,e){var n=t.selection,o=n.$from,i=n.$to,s=o.blockRange(i),a=s&&(0,r.k9)(s);return null!=a&&(e&&e(t.tr.lift(s,a).scrollIntoView()),!0)}function m(t,e){var n=t.selection,r=n.$head,o=n.$anchor;return!(!r.parent.type.spec.code||!r.sameParent(o)||(e&&e(t.tr.insertText("\n").scrollIntoView()),0))}function v(t){for(var e=0;e<t.edgeCount;e++){var n=t.edge(e).type;if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}function g(t,e){var n=t.selection,r=n.$head,o=n.$anchor;if(!r.parent.type.spec.code||!r.sameParent(o))return!1;var s=r.node(-1),a=r.indexAfter(-1),c=v(s.contentMatchAt(a));if(!s.canReplaceWith(a,a,c))return!1;if(e){var p=r.after(),l=t.tr.replaceWith(p,p,c.createAndFill());l.setSelection(i.Selection.near(l.doc.resolve(p),1)),e(l.scrollIntoView())}return!0}function y(t,e){var n=t.selection,r=n.$from,o=n.$to;if(n instanceof i.AllSelection||r.parent.inlineContent||o.parent.inlineContent)return!1;var s=v(o.parent.contentMatchAt(o.indexAfter()));if(!s||!s.isTextblock)return!1;if(e){var a=(!r.parentOffset&&o.index()<o.parent.childCount?r:o).pos,c=t.tr.insert(a,s.createAndFill());c.setSelection(i.TextSelection.create(c.doc,a+1)),e(c.scrollIntoView())}return!0}function b(t,e){var n=t.selection.$cursor;if(!n||n.parent.content.size)return!1;if(n.depth>1&&n.after()!=n.end(-1)){var o=n.before();if((0,r.Ax)(t.doc,o))return e&&e(t.tr.split(o).scrollIntoView()),!0}var i=n.blockRange(),s=i&&(0,r.k9)(i);return null!=s&&(e&&e(t.tr.lift(i,s).scrollIntoView()),!0)}function w(t,e){var n,r=t.selection,o=r.$from,s=r.to,a=o.sharedDepth(s);return 0!=a&&(n=o.before(a),e&&e(t.tr.setSelection(i.NodeSelection.create(t.doc,n))),!0)}function S(t,e,n){var s,a,p=e.nodeBefore,l=e.nodeAfter;if(p.type.spec.isolating||l.type.spec.isolating)return!1;if(function(t,e,n){var o=e.nodeBefore,i=e.nodeAfter,s=e.index();return!(!(o&&i&&o.type.compatibleContent(i.type))||(!o.content.size&&e.parent.canReplace(s-1,s)?(n&&n(t.tr.delete(e.pos-o.nodeSize,e.pos).scrollIntoView()),0):!e.parent.canReplace(s,s+1)||!i.isTextblock&&!(0,r.Mn)(t.doc,e.pos)||(n&&n(t.tr.clearIncompatible(e.pos,o.type,o.contentMatchAt(o.childCount)).join(e.pos).scrollIntoView()),0)))}(t,e,n))return!0;var u=e.parent.canReplace(e.index(),e.index()+1);if(u&&(s=(a=p.contentMatchAt(p.childCount)).findWrapping(l.type))&&a.matchType(s[0]||l.type).validEnd){if(n){for(var h=e.pos+l.nodeSize,d=o.Fragment.empty,f=s.length-1;f>=0;f--)d=o.Fragment.from(s[f].create(null,d));d=o.Fragment.from(p.copy(d));var m=t.tr.step(new r.FC(e.pos-1,h,e.pos,h,new o.Slice(d,1,0),s.length,!0)),v=h+2*s.length;(0,r.Mn)(m.doc,v)&&m.join(v),n(m.scrollIntoView())}return!0}var g=i.Selection.findFrom(e,1),y=g&&g.$from.blockRange(g.$to),b=y&&(0,r.k9)(y);if(null!=b&&b>=e.depth)return n&&n(t.tr.lift(y,b).scrollIntoView()),!0;if(u&&c(l,"start",!0)&&c(p,"end")){for(var w=p,S=[];S.push(w),!w.isTextblock;)w=w.lastChild;for(var x=l,k=1;!x.isTextblock;x=x.firstChild)k++;if(w.canReplace(w.childCount,w.childCount,x.content)){if(n){for(var M=o.Fragment.empty,O=S.length-1;O>=0;O--)M=o.Fragment.from(S[O].copy(M));n(t.tr.step(new r.FC(e.pos-S.length,e.pos+l.nodeSize,e.pos+k,e.pos+l.nodeSize-k,new o.Slice(M,S.length,0),0,!0)).scrollIntoView())}return!0}}return!1}function x(t,e){return function(n,o){var i=n.selection,s=i.$from,a=i.$to,c=s.blockRange(a),p=c&&(0,r.nd)(c,t,e);return!!p&&(o&&o(n.tr.wrap(c,p).scrollIntoView()),!0)}}function k(t,e){return function(n,r){var o=n.selection,i=o.from,s=o.to,a=!1;return n.doc.nodesBetween(i,s,(function(r,o){if(a)return!1;if(r.isTextblock&&!r.hasMarkup(t,e))if(r.type==t)a=!0;else{var i=n.doc.resolve(o),s=i.index();a=i.parent.canReplaceWith(s,s+1,t)}})),!!a&&(r&&r(n.tr.setBlockType(i,s,t,e).scrollIntoView()),!0)}}function M(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return function(e,n,r){for(var o=0;o<t.length;o++)if(t[o](e,n,r))return!0;return!1}}var O=M(s,a,p),C=M(s,u,h),T={Enter:M(m,y,b,(function(t,e){var n=t.selection,o=n.$from,s=n.$to;if(t.selection instanceof i.NodeSelection&&t.selection.node.isBlock)return!(!o.parentOffset||!(0,r.Ax)(t.doc,o.pos)||(e&&e(t.tr.split(o.pos).scrollIntoView()),0));if(!o.parent.isBlock)return!1;if(e){var a=s.parentOffset==s.parent.content.size,c=t.tr;(t.selection instanceof i.TextSelection||t.selection instanceof i.AllSelection)&&c.deleteSelection();var p=0==o.depth?null:v(o.node(-1).contentMatchAt(o.indexAfter(-1))),l=a&&p?[{type:p}]:null,u=(0,r.Ax)(c.doc,c.mapping.map(o.pos),1,l);if(l||u||!(0,r.Ax)(c.doc,c.mapping.map(o.pos),1,p&&[{type:p}])||(l=[{type:p}],u=!0),u&&(c.split(c.mapping.map(o.pos),1,l),!a&&!o.parentOffset&&o.parent.type!=p)){var h=c.mapping.map(o.before()),d=c.doc.resolve(h);o.node(-1).canReplaceWith(d.index(),d.index()+1,p)&&c.setNodeMarkup(c.mapping.map(o.before()),p)}e(c.scrollIntoView())}return!0})),"Mod-Enter":g,Backspace:O,"Mod-Backspace":O,"Shift-Backspace":O,Delete:C,"Mod-Delete":C,"Mod-a":function(t,e){return e&&e(t.tr.setSelection(new i.AllSelection(t.doc))),!0}},N={"Ctrl-h":T.Backspace,"Alt-Backspace":T["Mod-Backspace"],"Ctrl-d":T.Delete,"Ctrl-Alt-Backspace":T["Mod-Delete"],"Alt-Delete":T["Mod-Delete"],"Alt-d":T["Mod-Delete"]};for(var E in T)N[E]=T[E];"undefined"!=typeof navigator?/Mac|iP(hone|[oa]d)/.test(navigator.platform):"undefined"!=typeof os&&os.platform()},97920:(t,e,n)=>{"use strict";n.d(e,{dropCursor:()=>i});var r=n(76922),o=n(21081);function i(t){return void 0===t&&(t={}),new r.Plugin({view:function(e){return new s(e,t)}})}var s=function(t,e){var n=this;this.editorView=t,this.width=e.width||1,this.color=e.color||"black",this.class=e.class,this.cursorPos=null,this.element=null,this.timeout=null,this.handlers=["dragover","dragend","drop","dragleave"].map((function(e){var r=function(t){return n[e](t)};return t.dom.addEventListener(e,r),{name:e,handler:r}}))};s.prototype.destroy=function(){var t=this;this.handlers.forEach((function(e){var n=e.name,r=e.handler;return t.editorView.dom.removeEventListener(n,r)}))},s.prototype.update=function(t,e){null!=this.cursorPos&&e.doc!=t.state.doc&&(this.cursorPos>t.state.doc.content.size?this.setCursor(null):this.updateOverlay())},s.prototype.setCursor=function(t){t!=this.cursorPos&&(this.cursorPos=t,null==t?(this.element.parentNode.removeChild(this.element),this.element=null):this.updateOverlay())},s.prototype.updateOverlay=function(){var t,e=this.editorView.state.doc.resolve(this.cursorPos);if(!e.parent.inlineContent){var n=e.nodeBefore,r=e.nodeAfter;if(n||r){var o=this.editorView.nodeDOM(this.cursorPos-(n?n.nodeSize:0)).getBoundingClientRect(),i=n?o.bottom:o.top;n&&r&&(i=(i+this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top)/2),t={left:o.left,right:o.right,top:i-this.width/2,bottom:i+this.width/2}}}if(!t){var s=this.editorView.coordsAtPos(this.cursorPos);t={left:s.left-this.width/2,right:s.left+this.width/2,top:s.top,bottom:s.bottom}}var a,c,p=this.editorView.dom.offsetParent;if(this.element||(this.element=p.appendChild(document.createElement("div")),this.class&&(this.element.className=this.class),this.element.style.cssText="position: absolute; z-index: 50; pointer-events: none; background-color: "+this.color),!p||p==document.body&&"static"==getComputedStyle(p).position)a=-pageXOffset,c=-pageYOffset;else{var l=p.getBoundingClientRect();a=l.left-p.scrollLeft,c=l.top-p.scrollTop}this.element.style.left=t.left-a+"px",this.element.style.top=t.top-c+"px",this.element.style.width=t.right-t.left+"px",this.element.style.height=t.bottom-t.top+"px"},s.prototype.scheduleRemoval=function(t){var e=this;clearTimeout(this.timeout),this.timeout=setTimeout((function(){return e.setCursor(null)}),t)},s.prototype.dragover=function(t){if(this.editorView.editable){var e=this.editorView.posAtCoords({left:t.clientX,top:t.clientY});if(e){var n=e.pos;if(this.editorView.dragging&&this.editorView.dragging.slice&&null==(n=(0,o.nj)(this.editorView.state.doc,n,this.editorView.dragging.slice)))return this.setCursor(null);this.setCursor(n),this.scheduleRemoval(5e3)}}},s.prototype.dragend=function(){this.scheduleRemoval(20)},s.prototype.drop=function(){this.scheduleRemoval(20)},s.prototype.dragleave=function(t){t.target!=this.editorView.dom&&this.editorView.dom.contains(t.relatedTarget)||this.setCursor(null)}},9151:(t,e,n)=>{"use strict";n.d(e,{gapCursor:()=>p});var r=n(54751),o=n(76922),i=n(98780),s=n(38638),a=function(t){function e(e){t.call(this,e,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(n,r){var o=n.resolve(r.map(this.head));return e.valid(o)?new e(o):t.near(o)},e.prototype.content=function(){return s.Slice.empty},e.prototype.eq=function(t){return t instanceof e&&t.head==this.head},e.prototype.toJSON=function(){return{type:"gapcursor",pos:this.head}},e.fromJSON=function(t,n){if("number"!=typeof n.pos)throw new RangeError("Invalid input for GapCursor.fromJSON");return new e(t.resolve(n.pos))},e.prototype.getBookmark=function(){return new c(this.anchor)},e.valid=function(t){var e=t.parent;if(e.isTextblock||!function(t){for(var e=t.depth;e>=0;e--){var n=t.index(e);if(0!=n)for(var r=t.node(e).child(n-1);;r=r.lastChild){if(0==r.childCount&&!r.inlineContent||r.isAtom||r.type.spec.isolating)return!0;if(r.inlineContent)return!1}}return!0}(t)||!function(t){for(var e=t.depth;e>=0;e--){var n=t.indexAfter(e),r=t.node(e);if(n!=r.childCount)for(var o=r.child(n);;o=o.firstChild){if(0==o.childCount&&!o.inlineContent||o.isAtom||o.type.spec.isolating)return!0;if(o.inlineContent)return!1}}return!0}(t))return!1;var n=e.type.spec.allowGapCursor;if(null!=n)return n;var r=e.contentMatchAt(t.index()).defaultType;return r&&r.isTextblock},e.findFrom=function(t,n,r){t:for(;;){if(!r&&e.valid(t))return t;for(var i=t.pos,s=null,a=t.depth;;a--){var c=t.node(a);if(n>0?t.indexAfter(a)<c.childCount:t.index(a)>0){s=c.child(n>0?t.indexAfter(a):t.index(a)-1);break}if(0==a)return null;i+=n;var p=t.doc.resolve(i);if(e.valid(p))return p}for(;;){var l=n>0?s.firstChild:s.lastChild;if(!l){if(s.isAtom&&!s.isText&&!o.NodeSelection.isSelectable(s)){t=t.doc.resolve(i+s.nodeSize*n),r=!1;continue t}break}s=l,i+=n;var u=t.doc.resolve(i);if(e.valid(u))return u}return null}},e}(o.Selection);a.prototype.visible=!1,o.Selection.jsonID("gapcursor",a);var c=function(t){this.pos=t};c.prototype.map=function(t){return new c(t.map(this.pos))},c.prototype.resolve=function(t){var e=t.resolve(this.pos);return a.valid(e)?new a(e):o.Selection.near(e)};var p=function(){return new o.Plugin({props:{decorations:d,createSelectionBetween:function(t,e,n){if(e.pos==n.pos&&a.valid(n))return new a(n)},handleClick:h,handleKeyDown:l}})},l=(0,r.keydownHandler)({ArrowLeft:u("horiz",-1),ArrowRight:u("horiz",1),ArrowUp:u("vert",-1),ArrowDown:u("vert",1)});function u(t,e){var n="vert"==t?e>0?"down":"up":e>0?"right":"left";return function(t,r,i){var s=t.selection,c=e>0?s.$to:s.$from,p=s.empty;if(s instanceof o.TextSelection){if(!i.endOfTextblock(n)||0==c.depth)return!1;p=!1,c=t.doc.resolve(e>0?c.after():c.before())}var l=a.findFrom(c,e,p);return!!l&&(r&&r(t.tr.setSelection(new a(l))),!0)}}function h(t,e,n){if(!t.editable)return!1;var r=t.state.doc.resolve(e);if(!a.valid(r))return!1;var i=t.posAtCoords({left:n.clientX,top:n.clientY}).inside;return!(i>-1&&o.NodeSelection.isSelectable(t.state.doc.nodeAt(i))||(t.dispatch(t.state.tr.setSelection(new a(r))),0))}function d(t){if(!(t.selection instanceof a))return null;var e=document.createElement("div");return e.className="ProseMirror-gapcursor",i.DecorationSet.create(t.doc,[i.Decoration.widget(t.selection.head,e,{key:"gapcursor"})])}},36189:(t,e,n)=>{"use strict";n.d(e,{history:()=>x,redo:()=>M,undo:()=>k});var r=200,o=function(){};o.prototype.append=function(t){return t.length?(t=o.from(t),!this.length&&t||t.length<r&&this.leafAppend(t)||this.length<r&&t.leafPrepend(this)||this.appendInner(t)):this},o.prototype.prepend=function(t){return t.length?o.from(t).append(this):this},o.prototype.appendInner=function(t){return new s(this,t)},o.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.length),t>=e?o.empty:this.sliceInner(Math.max(0,t),Math.min(this.length,e))},o.prototype.get=function(t){if(!(t<0||t>=this.length))return this.getInner(t)},o.prototype.forEach=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=this.length),e<=n?this.forEachInner(t,e,n,0):this.forEachInvertedInner(t,e,n,0)},o.prototype.map=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=this.length);var r=[];return this.forEach((function(e,n){return r.push(t(e,n))}),e,n),r},o.from=function(t){return t instanceof o?t:t&&t.length?new i(t):o.empty};var i=function(t){function e(e){t.call(this),this.values=e}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={length:{configurable:!0},depth:{configurable:!0}};return e.prototype.flatten=function(){return this.values},e.prototype.sliceInner=function(t,n){return 0==t&&n==this.length?this:new e(this.values.slice(t,n))},e.prototype.getInner=function(t){return this.values[t]},e.prototype.forEachInner=function(t,e,n,r){for(var o=e;o<n;o++)if(!1===t(this.values[o],r+o))return!1},e.prototype.forEachInvertedInner=function(t,e,n,r){for(var o=e-1;o>=n;o--)if(!1===t(this.values[o],r+o))return!1},e.prototype.leafAppend=function(t){if(this.length+t.length<=r)return new e(this.values.concat(t.flatten()))},e.prototype.leafPrepend=function(t){if(this.length+t.length<=r)return new e(t.flatten().concat(this.values))},n.length.get=function(){return this.values.length},n.depth.get=function(){return 0},Object.defineProperties(e.prototype,n),e}(o);o.empty=new i([]);var s=function(t){function e(e,n){t.call(this),this.left=e,this.right=n,this.length=e.length+n.length,this.depth=Math.max(e.depth,n.depth)+1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flatten=function(){return this.left.flatten().concat(this.right.flatten())},e.prototype.getInner=function(t){return t<this.left.length?this.left.get(t):this.right.get(t-this.left.length)},e.prototype.forEachInner=function(t,e,n,r){var o=this.left.length;return!(e<o&&!1===this.left.forEachInner(t,e,Math.min(n,o),r))&&!(n>o&&!1===this.right.forEachInner(t,Math.max(e-o,0),Math.min(this.length,n)-o,r+o))&&void 0},e.prototype.forEachInvertedInner=function(t,e,n,r){var o=this.left.length;return!(e>o&&!1===this.right.forEachInvertedInner(t,e-o,Math.max(n,o)-o,r+o))&&!(n<o&&!1===this.left.forEachInvertedInner(t,Math.min(e,o),n,r))&&void 0},e.prototype.sliceInner=function(t,e){if(0==t&&e==this.length)return this;var n=this.left.length;return e<=n?this.left.slice(t,e):t>=n?this.right.slice(t-n,e-n):this.left.slice(t,n).append(this.right.slice(0,e-n))},e.prototype.leafAppend=function(t){var n=this.right.leafAppend(t);if(n)return new e(this.left,n)},e.prototype.leafPrepend=function(t){var n=this.left.leafPrepend(t);if(n)return new e(n,this.right)},e.prototype.appendInner=function(t){return this.left.depth>=Math.max(this.right.depth,t.depth)+1?new e(this.left,new e(this.right,t)):new e(this,t)},e}(o);const a=o;var c=n(21081),p=n(76922),l=function(t,e){this.items=t,this.eventCount=e};l.prototype.popEvent=function(t,e){var n=this;if(0==this.eventCount)return null;for(var r,o,i=this.items.length;;i--)if(this.items.get(i-1).selection){--i;break}e&&(r=this.remapping(i,this.items.length),o=r.maps.length);var s,a,c=t.tr,p=[],h=[];return this.items.forEach((function(t,e){if(!t.step)return r||(r=n.remapping(i,e+1),o=r.maps.length),o--,void h.push(t);if(r){h.push(new u(t.map));var d,f=t.step.map(r.slice(o));f&&c.maybeStep(f).doc&&(d=c.mapping.maps[c.mapping.maps.length-1],p.push(new u(d,null,null,p.length+h.length))),o--,d&&r.appendMap(d,o)}else c.maybeStep(t.step);return t.selection?(s=r?t.selection.map(r.slice(o)):t.selection,a=new l(n.items.slice(0,i).append(h.reverse().concat(p)),n.eventCount-1),!1):void 0}),this.items.length,0),{remaining:a,transform:c,selection:s}},l.prototype.addTransform=function(t,e,n,r){for(var o=[],i=this.eventCount,s=this.items,a=!r&&s.length?s.get(s.length-1):null,c=0;c<t.steps.length;c++){var p,h=t.steps[c].invert(t.docs[c]),f=new u(t.mapping.maps[c],h,e);(p=a&&a.merge(f))&&(f=p,c?o.pop():s=s.slice(0,s.length-1)),o.push(f),e&&(i++,e=null),r||(a=f)}var m,v,g,y=i-n.depth;return y>d&&(v=y,(m=s).forEach((function(t,e){if(t.selection&&0==v--)return g=e,!1})),s=m.slice(g),i-=y),new l(s.append(o),i)},l.prototype.remapping=function(t,e){var n=new c.vs;return this.items.forEach((function(e,r){var o=null!=e.mirrorOffset&&r-e.mirrorOffset>=t?n.maps.length-e.mirrorOffset:null;n.appendMap(e.map,o)}),t,e),n},l.prototype.addMaps=function(t){return 0==this.eventCount?this:new l(this.items.append(t.map((function(t){return new u(t)}))),this.eventCount)},l.prototype.rebased=function(t,e){if(!this.eventCount)return this;var n=[],r=Math.max(0,this.items.length-e),o=t.mapping,i=t.steps.length,s=this.eventCount;this.items.forEach((function(t){t.selection&&s--}),r);var a=e;this.items.forEach((function(e){var r=o.getMirror(--a);if(null!=r){i=Math.min(i,r);var c=o.maps[r];if(e.step){var p=t.steps[r].invert(t.docs[r]),l=e.selection&&e.selection.map(o.slice(a+1,r));l&&s++,n.push(new u(c,p,l))}else n.push(new u(c))}}),r);for(var c=[],p=e;p<i;p++)c.push(new u(o.maps[p]));var h=this.items.slice(0,r).append(c).append(n),d=new l(h,s);return d.emptyItemCount()>500&&(d=d.compress(this.items.length-n.length)),d},l.prototype.emptyItemCount=function(){var t=0;return this.items.forEach((function(e){e.step||t++})),t},l.prototype.compress=function(t){void 0===t&&(t=this.items.length);var e=this.remapping(0,t),n=e.maps.length,r=[],o=0;return this.items.forEach((function(i,s){if(s>=t)r.push(i),i.selection&&o++;else if(i.step){var a=i.step.map(e.slice(n)),c=a&&a.getMap();if(n--,c&&e.appendMap(c,n),a){var p=i.selection&&i.selection.map(e.slice(n));p&&o++;var l,h=new u(c.invert(),a,p),d=r.length-1;(l=r.length&&r[d].merge(h))?r[d]=l:r.push(h)}}else i.map&&n--}),this.items.length,0),new l(a.from(r.reverse()),o)},l.empty=new l(a.empty,0);var u=function(t,e,n,r){this.map=t,this.step=e,this.selection=n,this.mirrorOffset=r};u.prototype.merge=function(t){if(this.step&&t.step&&!t.selection){var e=t.step.merge(this.step);if(e)return new u(e.getMap().invert(),e,this.selection)}};var h=function(t,e,n,r){this.done=t,this.undone=e,this.prevRanges=n,this.prevTime=r},d=20;function f(t){var e=[];return t.forEach((function(t,n,r,o){return e.push(r,o)})),e}function m(t,e){if(!t)return null;for(var n=[],r=0;r<t.length;r+=2){var o=e.map(t[r],1),i=e.map(t[r+1],-1);o<=i&&n.push(o,i)}return n}function v(t,e,n,r){var o=b(e),i=w.get(e).spec.config,s=(r?t.undone:t.done).popEvent(e,o);if(s){var a=s.selection.resolve(s.transform.doc),c=(r?t.done:t.undone).addTransform(s.transform,e.selection.getBookmark(),i,o),p=new h(r?c:s.remaining,r?s.remaining:c,null,0);n(s.transform.setSelection(a).setMeta(w,{redo:r,historyState:p}).scrollIntoView())}}var g=!1,y=null;function b(t){var e=t.plugins;if(y!=e){g=!1,y=e;for(var n=0;n<e.length;n++)if(e[n].spec.historyPreserveItems){g=!0;break}}return g}var w=new p.PluginKey("history"),S=new p.PluginKey("closeHistory");function x(t){return t={depth:t&&t.depth||100,newGroupDelay:t&&t.newGroupDelay||500},new p.Plugin({key:w,state:{init:function(){return new h(l.empty,l.empty,null,0)},apply:function(e,n,r){return function(t,e,n,r){var o,i=n.getMeta(w);if(i)return i.historyState;n.getMeta(S)&&(t=new h(t.done,t.undone,null,0));var s=n.getMeta("appendedTransaction");if(0==n.steps.length)return t;if(s&&s.getMeta(w))return s.getMeta(w).redo?new h(t.done.addTransform(n,null,r,b(e)),t.undone,f(n.mapping.maps[n.steps.length-1]),t.prevTime):new h(t.done,t.undone.addTransform(n,null,r,b(e)),null,t.prevTime);if(!1===n.getMeta("addToHistory")||s&&!1===s.getMeta("addToHistory"))return(o=n.getMeta("rebased"))?new h(t.done.rebased(n,o),t.undone.rebased(n,o),m(t.prevRanges,n.mapping),t.prevTime):new h(t.done.addMaps(n.mapping.maps),t.undone.addMaps(n.mapping.maps),m(t.prevRanges,n.mapping),t.prevTime);var a=0==t.prevTime||!s&&(t.prevTime<(n.time||0)-r.newGroupDelay||!function(t,e){if(!e)return!1;if(!t.docChanged)return!0;var n=!1;return t.mapping.maps[0].forEach((function(t,r){for(var o=0;o<e.length;o+=2)t<=e[o+1]&&r>=e[o]&&(n=!0)})),n}(n,t.prevRanges)),c=s?m(t.prevRanges,n.mapping):f(n.mapping.maps[n.steps.length-1]);return new h(t.done.addTransform(n,a?e.selection.getBookmark():null,r,b(e)),l.empty,c,n.time)}(n,r,e,t)}},config:t,props:{handleDOMEvents:{beforeinput:function(t,e){var n="historyUndo"==e.inputType?k(t.state,t.dispatch):"historyRedo"==e.inputType&&M(t.state,t.dispatch);return n&&e.preventDefault(),n}}}})}function k(t,e){var n=w.getState(t);return!(!n||0==n.done.eventCount||(e&&v(n,t,e,!1),0))}function M(t,e){var n=w.getState(t);return!(!n||0==n.undone.eventCount||(e&&v(n,t,e,!0),0))}},54751:(t,e,n)=>{"use strict";n.d(e,{keydownHandler:()=>y,keymap:()=>g});for(var r={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},o={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},i="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),s="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),a="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),c="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),p="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),l=i&&(c||+i[1]<57)||a&&c,u=0;u<10;u++)r[48+u]=r[96+u]=String(u);for(u=1;u<=24;u++)r[u+111]="F"+u;for(u=65;u<=90;u++)r[u]=String.fromCharCode(u+32),o[u]=String.fromCharCode(u);for(var h in r)o.hasOwnProperty(h)||(o[h]=r[h]);var d=n(76922),f="undefined"!=typeof navigator&&/Mac/.test(navigator.platform);function m(t){var e,n,r,o,i=t.split(/-(?!$)/),s=i[i.length-1];"Space"==s&&(s=" ");for(var a=0;a<i.length-1;a++){var c=i[a];if(/^(cmd|meta|m)$/i.test(c))o=!0;else if(/^a(lt)?$/i.test(c))e=!0;else if(/^(c|ctrl|control)$/i.test(c))n=!0;else if(/^s(hift)?$/i.test(c))r=!0;else{if(!/^mod$/i.test(c))throw new Error("Unrecognized modifier name: "+c);f?o=!0:n=!0}}return e&&(s="Alt-"+s),n&&(s="Ctrl-"+s),o&&(s="Meta-"+s),r&&(s="Shift-"+s),s}function v(t,e,n){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==n&&e.shiftKey&&(t="Shift-"+t),t}function g(t){return new d.Plugin({props:{handleKeyDown:y(t)}})}function y(t){var e=function(t){var e=Object.create(null);for(var n in t)e[m(n)]=t[n];return e}(t);return function(t,n){var i,a=function(t){var e=!(l&&(t.ctrlKey||t.altKey||t.metaKey)||(s||p)&&t.shiftKey&&t.key&&1==t.key.length)&&t.key||(t.shiftKey?o:r)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e}(n),c=1==a.length&&" "!=a,u=e[v(a,n,!c)];if(u&&u(t.state,t.dispatch,t))return!0;if(c&&(n.shiftKey||n.altKey||n.metaKey||a.charCodeAt(0)>127)&&(i=r[n.keyCode])&&i!=a){var h=e[v(i,n,!0)];if(h&&h(t.state,t.dispatch,t))return!0}else if(c&&n.shiftKey){var d=e[v(a,n,!0)];if(d&&d(t.state,t.dispatch,t))return!0}return!1}}},38638:(t,e,n)=>{"use strict";function r(t){this.content=t}n.d(e,{DOMParser:()=>st,DOMSerializer:()=>gt,Fragment:()=>a,Mark:()=>h,MarkType:()=>rt,Node:()=>z,NodeRange:()=>_,ReplaceError:()=>d,Schema:()=>ot,Slice:()=>f}),r.prototype={constructor:r,find:function(t){for(var e=0;e<this.content.length;e+=2)if(this.content[e]===t)return e;return-1},get:function(t){var e=this.find(t);return-1==e?void 0:this.content[e+1]},update:function(t,e,n){var o=n&&n!=t?this.remove(n):this,i=o.find(t),s=o.content.slice();return-1==i?s.push(n||t,e):(s[i+1]=e,n&&(s[i]=n)),new r(s)},remove:function(t){var e=this.find(t);if(-1==e)return this;var n=this.content.slice();return n.splice(e,2),new r(n)},addToStart:function(t,e){return new r([t,e].concat(this.remove(t).content))},addToEnd:function(t,e){var n=this.remove(t).content.slice();return n.push(t,e),new r(n)},addBefore:function(t,e,n){var o=this.remove(e),i=o.content.slice(),s=o.find(t);return i.splice(-1==s?i.length:s,0,e,n),new r(i)},forEach:function(t){for(var e=0;e<this.content.length;e+=2)t(this.content[e],this.content[e+1])},prepend:function(t){return(t=r.from(t)).size?new r(t.content.concat(this.subtract(t).content)):this},append:function(t){return(t=r.from(t)).size?new r(this.subtract(t).content.concat(t.content)):this},subtract:function(t){var e=this;t=r.from(t);for(var n=0;n<t.content.length;n+=2)e=e.remove(t.content[n]);return e},get size(){return this.content.length>>1}},r.from=function(t){if(t instanceof r)return t;var e=[];if(t)for(var n in t)e.push(n,t[n]);return new r(e)};const o=r;function i(t,e,n){for(var r=0;;r++){if(r==t.childCount||r==e.childCount)return t.childCount==e.childCount?null:n;var o=t.child(r),s=e.child(r);if(o!=s){if(!o.sameMarkup(s))return n;if(o.isText&&o.text!=s.text){for(var a=0;o.text[a]==s.text[a];a++)n++;return n}if(o.content.size||s.content.size){var c=i(o.content,s.content,n+1);if(null!=c)return c}n+=o.nodeSize}else n+=o.nodeSize}}function s(t,e,n,r){for(var o=t.childCount,i=e.childCount;;){if(0==o||0==i)return o==i?null:{a:n,b:r};var a=t.child(--o),c=e.child(--i),p=a.nodeSize;if(a!=c){if(!a.sameMarkup(c))return{a:n,b:r};if(a.isText&&a.text!=c.text){for(var l=0,u=Math.min(a.text.length,c.text.length);l<u&&a.text[a.text.length-l-1]==c.text[c.text.length-l-1];)l++,n--,r--;return{a:n,b:r}}if(a.content.size||c.content.size){var h=s(a.content,c.content,n-1,r-1);if(h)return h}n-=p,r-=p}else n-=p,r-=p}}var a=function(t,e){if(this.content=t,this.size=e||0,null==e)for(var n=0;n<t.length;n++)this.size+=t[n].nodeSize},c={firstChild:{configurable:!0},lastChild:{configurable:!0},childCount:{configurable:!0}};a.prototype.nodesBetween=function(t,e,n,r,o){void 0===r&&(r=0);for(var i=0,s=0;s<e;i++){var a=this.content[i],c=s+a.nodeSize;if(c>t&&!1!==n(a,r+s,o,i)&&a.content.size){var p=s+1;a.nodesBetween(Math.max(0,t-p),Math.min(a.content.size,e-p),n,r+p)}s=c}},a.prototype.descendants=function(t){this.nodesBetween(0,this.size,t)},a.prototype.textBetween=function(t,e,n,r){var o="",i=!0;return this.nodesBetween(t,e,(function(s,a){s.isText?(o+=s.text.slice(Math.max(t,a)-a,e-a),i=!n):s.isLeaf&&r?(o+="function"==typeof r?r(s):r,i=!n):!i&&s.isBlock&&(o+=n,i=!0)}),0),o},a.prototype.append=function(t){if(!t.size)return this;if(!this.size)return t;var e=this.lastChild,n=t.firstChild,r=this.content.slice(),o=0;for(e.isText&&e.sameMarkup(n)&&(r[r.length-1]=e.withText(e.text+n.text),o=1);o<t.content.length;o++)r.push(t.content[o]);return new a(r,this.size+t.size)},a.prototype.cut=function(t,e){if(null==e&&(e=this.size),0==t&&e==this.size)return this;var n=[],r=0;if(e>t)for(var o=0,i=0;i<e;o++){var s=this.content[o],c=i+s.nodeSize;c>t&&((i<t||c>e)&&(s=s.isText?s.cut(Math.max(0,t-i),Math.min(s.text.length,e-i)):s.cut(Math.max(0,t-i-1),Math.min(s.content.size,e-i-1))),n.push(s),r+=s.nodeSize),i=c}return new a(n,r)},a.prototype.cutByIndex=function(t,e){return t==e?a.empty:0==t&&e==this.content.length?this:new a(this.content.slice(t,e))},a.prototype.replaceChild=function(t,e){var n=this.content[t];if(n==e)return this;var r=this.content.slice(),o=this.size+e.nodeSize-n.nodeSize;return r[t]=e,new a(r,o)},a.prototype.addToStart=function(t){return new a([t].concat(this.content),this.size+t.nodeSize)},a.prototype.addToEnd=function(t){return new a(this.content.concat(t),this.size+t.nodeSize)},a.prototype.eq=function(t){if(this.content.length!=t.content.length)return!1;for(var e=0;e<this.content.length;e++)if(!this.content[e].eq(t.content[e]))return!1;return!0},c.firstChild.get=function(){return this.content.length?this.content[0]:null},c.lastChild.get=function(){return this.content.length?this.content[this.content.length-1]:null},c.childCount.get=function(){return this.content.length},a.prototype.child=function(t){var e=this.content[t];if(!e)throw new RangeError("Index "+t+" out of range for "+this);return e},a.prototype.maybeChild=function(t){return this.content[t]},a.prototype.forEach=function(t){for(var e=0,n=0;e<this.content.length;e++){var r=this.content[e];t(r,n,e),n+=r.nodeSize}},a.prototype.findDiffStart=function(t,e){return void 0===e&&(e=0),i(this,t,e)},a.prototype.findDiffEnd=function(t,e,n){return void 0===e&&(e=this.size),void 0===n&&(n=t.size),s(this,t,e,n)},a.prototype.findIndex=function(t,e){if(void 0===e&&(e=-1),0==t)return l(0,t);if(t==this.size)return l(this.content.length,t);if(t>this.size||t<0)throw new RangeError("Position "+t+" outside of fragment ("+this+")");for(var n=0,r=0;;n++){var o=r+this.child(n).nodeSize;if(o>=t)return o==t||e>0?l(n+1,o):l(n,r);r=o}},a.prototype.toString=function(){return"<"+this.toStringInner()+">"},a.prototype.toStringInner=function(){return this.content.join(", ")},a.prototype.toJSON=function(){return this.content.length?this.content.map((function(t){return t.toJSON()})):null},a.fromJSON=function(t,e){if(!e)return a.empty;if(!Array.isArray(e))throw new RangeError("Invalid input for Fragment.fromJSON");return new a(e.map(t.nodeFromJSON))},a.fromArray=function(t){if(!t.length)return a.empty;for(var e,n=0,r=0;r<t.length;r++){var o=t[r];n+=o.nodeSize,r&&o.isText&&t[r-1].sameMarkup(o)?(e||(e=t.slice(0,r)),e[e.length-1]=o.withText(e[e.length-1].text+o.text)):e&&e.push(o)}return new a(e||t,n)},a.from=function(t){if(!t)return a.empty;if(t instanceof a)return t;if(Array.isArray(t))return this.fromArray(t);if(t.attrs)return new a([t],t.nodeSize);throw new RangeError("Can not convert "+t+" to a Fragment"+(t.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))},Object.defineProperties(a.prototype,c);var p={index:0,offset:0};function l(t,e){return p.index=t,p.offset=e,p}function u(t,e){if(t===e)return!0;if(!t||"object"!=typeof t||!e||"object"!=typeof e)return!1;var n=Array.isArray(t);if(Array.isArray(e)!=n)return!1;if(n){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(!u(t[r],e[r]))return!1}else{for(var o in t)if(!(o in e)||!u(t[o],e[o]))return!1;for(var i in e)if(!(i in t))return!1}return!0}a.empty=new a([],0);var h=function(t,e){this.type=t,this.attrs=e};function d(t){var e=Error.call(this,t);return e.__proto__=d.prototype,e}h.prototype.addToSet=function(t){for(var e,n=!1,r=0;r<t.length;r++){var o=t[r];if(this.eq(o))return t;if(this.type.excludes(o.type))e||(e=t.slice(0,r));else{if(o.type.excludes(this.type))return t;!n&&o.type.rank>this.type.rank&&(e||(e=t.slice(0,r)),e.push(this),n=!0),e&&e.push(o)}}return e||(e=t.slice()),n||e.push(this),e},h.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return t.slice(0,e).concat(t.slice(e+1));return t},h.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return!0;return!1},h.prototype.eq=function(t){return this==t||this.type==t.type&&u(this.attrs,t.attrs)},h.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return t},h.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Mark.fromJSON");var n=t.marks[e.type];if(!n)throw new RangeError("There is no mark type "+e.type+" in this schema");return n.create(e.attrs)},h.sameSet=function(t,e){if(t==e)return!0;if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].eq(e[n]))return!1;return!0},h.setFrom=function(t){if(!t||0==t.length)return h.none;if(t instanceof h)return[t];var e=t.slice();return e.sort((function(t,e){return t.type.rank-e.type.rank})),e},h.none=[],d.prototype=Object.create(Error.prototype),d.prototype.constructor=d,d.prototype.name="ReplaceError";var f=function(t,e,n){this.content=t,this.openStart=e,this.openEnd=n},m={size:{configurable:!0}};function v(t,e,n){var r=t.findIndex(e),o=r.index,i=r.offset,s=t.maybeChild(o),a=t.findIndex(n),c=a.index,p=a.offset;if(i==e||s.isText){if(p!=n&&!t.child(c).isText)throw new RangeError("Removing non-flat range");return t.cut(0,e).append(t.cut(n))}if(o!=c)throw new RangeError("Removing non-flat range");return t.replaceChild(o,s.copy(v(s.content,e-i-1,n-i-1)))}function g(t,e,n,r){var o=t.findIndex(e),i=o.index,s=o.offset,a=t.maybeChild(i);if(s==e||a.isText)return r&&!r.canReplace(i,i,n)?null:t.cut(0,e).append(n).append(t.cut(e));var c=g(a.content,e-s-1,n);return c&&t.replaceChild(i,a.copy(c))}function y(t,e,n){if(n.openStart>t.depth)throw new d("Inserted content deeper than insertion position");if(t.depth-n.openStart!=e.depth-n.openEnd)throw new d("Inconsistent open depths");return b(t,e,n,0)}function b(t,e,n,r){var o=t.index(r),i=t.node(r);if(o==e.index(r)&&r<t.depth-n.openStart){var s=b(t,e,n,r+1);return i.copy(i.content.replaceChild(o,s))}if(n.content.size){if(n.openStart||n.openEnd||t.depth!=r||e.depth!=r){var c=function(t,e){for(var n=e.depth-t.openStart,r=e.node(n).copy(t.content),o=n-1;o>=0;o--)r=e.node(o).copy(a.from(r));return{start:r.resolveNoCache(t.openStart+n),end:r.resolveNoCache(r.content.size-t.openEnd-n)}}(n,t);return M(i,O(t,c.start,c.end,e,r))}var p=t.parent,l=p.content;return M(p,l.cut(0,t.parentOffset).append(n.content).append(l.cut(e.parentOffset)))}return M(i,C(t,e,r))}function w(t,e){if(!e.type.compatibleContent(t.type))throw new d("Cannot join "+e.type.name+" onto "+t.type.name)}function S(t,e,n){var r=t.node(n);return w(r,e.node(n)),r}function x(t,e){var n=e.length-1;n>=0&&t.isText&&t.sameMarkup(e[n])?e[n]=t.withText(e[n].text+t.text):e.push(t)}function k(t,e,n,r){var o=(e||t).node(n),i=0,s=e?e.index(n):o.childCount;t&&(i=t.index(n),t.depth>n?i++:t.textOffset&&(x(t.nodeAfter,r),i++));for(var a=i;a<s;a++)x(o.child(a),r);e&&e.depth==n&&e.textOffset&&x(e.nodeBefore,r)}function M(t,e){if(!t.type.validContent(e))throw new d("Invalid content for node "+t.type.name);return t.copy(e)}function O(t,e,n,r,o){var i=t.depth>o&&S(t,e,o+1),s=r.depth>o&&S(n,r,o+1),c=[];return k(null,t,o,c),i&&s&&e.index(o)==n.index(o)?(w(i,s),x(M(i,O(t,e,n,r,o+1)),c)):(i&&x(M(i,C(t,e,o+1)),c),k(e,n,o,c),s&&x(M(s,C(n,r,o+1)),c)),k(r,null,o,c),new a(c)}function C(t,e,n){var r=[];return k(null,t,n,r),t.depth>n&&x(M(S(t,e,n+1),C(t,e,n+1)),r),k(e,null,n,r),new a(r)}m.size.get=function(){return this.content.size-this.openStart-this.openEnd},f.prototype.insertAt=function(t,e){var n=g(this.content,t+this.openStart,e,null);return n&&new f(n,this.openStart,this.openEnd)},f.prototype.removeBetween=function(t,e){return new f(v(this.content,t+this.openStart,e+this.openStart),this.openStart,this.openEnd)},f.prototype.eq=function(t){return this.content.eq(t.content)&&this.openStart==t.openStart&&this.openEnd==t.openEnd},f.prototype.toString=function(){return this.content+"("+this.openStart+","+this.openEnd+")"},f.prototype.toJSON=function(){if(!this.content.size)return null;var t={content:this.content.toJSON()};return this.openStart>0&&(t.openStart=this.openStart),this.openEnd>0&&(t.openEnd=this.openEnd),t},f.fromJSON=function(t,e){if(!e)return f.empty;var n=e.openStart||0,r=e.openEnd||0;if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid input for Slice.fromJSON");return new f(a.fromJSON(t,e.content),n,r)},f.maxOpen=function(t,e){void 0===e&&(e=!0);for(var n=0,r=0,o=t.firstChild;o&&!o.isLeaf&&(e||!o.type.spec.isolating);o=o.firstChild)n++;for(var i=t.lastChild;i&&!i.isLeaf&&(e||!i.type.spec.isolating);i=i.lastChild)r++;return new f(t,n,r)},Object.defineProperties(f.prototype,m),f.empty=new f(a.empty,0,0);var T=function(t,e,n){this.pos=t,this.path=e,this.depth=e.length/3-1,this.parentOffset=n},N={parent:{configurable:!0},doc:{configurable:!0},textOffset:{configurable:!0},nodeAfter:{configurable:!0},nodeBefore:{configurable:!0}};T.prototype.resolveDepth=function(t){return null==t?this.depth:t<0?this.depth+t:t},N.parent.get=function(){return this.node(this.depth)},N.doc.get=function(){return this.node(0)},T.prototype.node=function(t){return this.path[3*this.resolveDepth(t)]},T.prototype.index=function(t){return this.path[3*this.resolveDepth(t)+1]},T.prototype.indexAfter=function(t){return t=this.resolveDepth(t),this.index(t)+(t!=this.depth||this.textOffset?1:0)},T.prototype.start=function(t){return 0==(t=this.resolveDepth(t))?0:this.path[3*t-1]+1},T.prototype.end=function(t){return t=this.resolveDepth(t),this.start(t)+this.node(t).content.size},T.prototype.before=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position before the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]},T.prototype.after=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position after the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]+this.path[3*t].nodeSize},N.textOffset.get=function(){return this.pos-this.path[this.path.length-1]},N.nodeAfter.get=function(){var t=this.parent,e=this.index(this.depth);if(e==t.childCount)return null;var n=this.pos-this.path[this.path.length-1],r=t.child(e);return n?t.child(e).cut(n):r},N.nodeBefore.get=function(){var t=this.index(this.depth),e=this.pos-this.path[this.path.length-1];return e?this.parent.child(t).cut(0,e):0==t?null:this.parent.child(t-1)},T.prototype.posAtIndex=function(t,e){e=this.resolveDepth(e);for(var n=this.path[3*e],r=0==e?0:this.path[3*e-1]+1,o=0;o<t;o++)r+=n.child(o).nodeSize;return r},T.prototype.marks=function(){var t=this.parent,e=this.index();if(0==t.content.size)return h.none;if(this.textOffset)return t.child(e).marks;var n=t.maybeChild(e-1),r=t.maybeChild(e);if(!n){var o=n;n=r,r=o}for(var i=n.marks,s=0;s<i.length;s++)!1!==i[s].type.spec.inclusive||r&&i[s].isInSet(r.marks)||(i=i[s--].removeFromSet(i));return i},T.prototype.marksAcross=function(t){var e=this.parent.maybeChild(this.index());if(!e||!e.isInline)return null;for(var n=e.marks,r=t.parent.maybeChild(t.index()),o=0;o<n.length;o++)!1!==n[o].type.spec.inclusive||r&&n[o].isInSet(r.marks)||(n=n[o--].removeFromSet(n));return n},T.prototype.sharedDepth=function(t){for(var e=this.depth;e>0;e--)if(this.start(e)<=t&&this.end(e)>=t)return e;return 0},T.prototype.blockRange=function(t,e){if(void 0===t&&(t=this),t.pos<this.pos)return t.blockRange(this);for(var n=this.depth-(this.parent.inlineContent||this.pos==t.pos?1:0);n>=0;n--)if(t.pos<=this.end(n)&&(!e||e(this.node(n))))return new _(this,t,n)},T.prototype.sameParent=function(t){return this.pos-this.parentOffset==t.pos-t.parentOffset},T.prototype.max=function(t){return t.pos>this.pos?t:this},T.prototype.min=function(t){return t.pos<this.pos?t:this},T.prototype.toString=function(){for(var t="",e=1;e<=this.depth;e++)t+=(t?"/":"")+this.node(e).type.name+"_"+this.index(e-1);return t+":"+this.parentOffset},T.resolve=function(t,e){if(!(e>=0&&e<=t.content.size))throw new RangeError("Position "+e+" out of range");for(var n=[],r=0,o=e,i=t;;){var s=i.content.findIndex(o),a=s.index,c=s.offset,p=o-c;if(n.push(i,a,r+c),!p)break;if((i=i.child(a)).isText)break;o=p-1,r+=c+1}return new T(e,n,o)},T.resolveCached=function(t,e){for(var n=0;n<E.length;n++){var r=E[n];if(r.pos==e&&r.doc==t)return r}var o=E[A]=T.resolve(t,e);return A=(A+1)%D,o},Object.defineProperties(T.prototype,N);var E=[],A=0,D=12,_=function(t,e,n){this.$from=t,this.$to=e,this.depth=n},I={start:{configurable:!0},end:{configurable:!0},parent:{configurable:!0},startIndex:{configurable:!0},endIndex:{configurable:!0}};I.start.get=function(){return this.$from.before(this.depth+1)},I.end.get=function(){return this.$to.after(this.depth+1)},I.parent.get=function(){return this.$from.node(this.depth)},I.startIndex.get=function(){return this.$from.index(this.depth)},I.endIndex.get=function(){return this.$to.indexAfter(this.depth)},Object.defineProperties(_.prototype,I);var P=Object.create(null),z=function(t,e,n,r){this.type=t,this.attrs=e,this.content=n||a.empty,this.marks=r||h.none},R={nodeSize:{configurable:!0},childCount:{configurable:!0},textContent:{configurable:!0},firstChild:{configurable:!0},lastChild:{configurable:!0},isBlock:{configurable:!0},isTextblock:{configurable:!0},inlineContent:{configurable:!0},isInline:{configurable:!0},isText:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};R.nodeSize.get=function(){return this.isLeaf?1:2+this.content.size},R.childCount.get=function(){return this.content.childCount},z.prototype.child=function(t){return this.content.child(t)},z.prototype.maybeChild=function(t){return this.content.maybeChild(t)},z.prototype.forEach=function(t){this.content.forEach(t)},z.prototype.nodesBetween=function(t,e,n,r){void 0===r&&(r=0),this.content.nodesBetween(t,e,n,r,this)},z.prototype.descendants=function(t){this.nodesBetween(0,this.content.size,t)},R.textContent.get=function(){return this.textBetween(0,this.content.size,"")},z.prototype.textBetween=function(t,e,n,r){return this.content.textBetween(t,e,n,r)},R.firstChild.get=function(){return this.content.firstChild},R.lastChild.get=function(){return this.content.lastChild},z.prototype.eq=function(t){return this==t||this.sameMarkup(t)&&this.content.eq(t.content)},z.prototype.sameMarkup=function(t){return this.hasMarkup(t.type,t.attrs,t.marks)},z.prototype.hasMarkup=function(t,e,n){return this.type==t&&u(this.attrs,e||t.defaultAttrs||P)&&h.sameSet(this.marks,n||h.none)},z.prototype.copy=function(t){return void 0===t&&(t=null),t==this.content?this:new this.constructor(this.type,this.attrs,t,this.marks)},z.prototype.mark=function(t){return t==this.marks?this:new this.constructor(this.type,this.attrs,this.content,t)},z.prototype.cut=function(t,e){return 0==t&&e==this.content.size?this:this.copy(this.content.cut(t,e))},z.prototype.slice=function(t,e,n){if(void 0===e&&(e=this.content.size),void 0===n&&(n=!1),t==e)return f.empty;var r=this.resolve(t),o=this.resolve(e),i=n?0:r.sharedDepth(e),s=r.start(i),a=r.node(i).content.cut(r.pos-s,o.pos-s);return new f(a,r.depth-i,o.depth-i)},z.prototype.replace=function(t,e,n){return y(this.resolve(t),this.resolve(e),n)},z.prototype.nodeAt=function(t){for(var e=this;;){var n=e.content.findIndex(t),r=n.index,o=n.offset;if(!(e=e.maybeChild(r)))return null;if(o==t||e.isText)return e;t-=o+1}},z.prototype.childAfter=function(t){var e=this.content.findIndex(t),n=e.index,r=e.offset;return{node:this.content.maybeChild(n),index:n,offset:r}},z.prototype.childBefore=function(t){if(0==t)return{node:null,index:0,offset:0};var e=this.content.findIndex(t),n=e.index,r=e.offset;if(r<t)return{node:this.content.child(n),index:n,offset:r};var o=this.content.child(n-1);return{node:o,index:n-1,offset:r-o.nodeSize}},z.prototype.resolve=function(t){return T.resolveCached(this,t)},z.prototype.resolveNoCache=function(t){return T.resolve(this,t)},z.prototype.rangeHasMark=function(t,e,n){var r=!1;return e>t&&this.nodesBetween(t,e,(function(t){return n.isInSet(t.marks)&&(r=!0),!r})),r},R.isBlock.get=function(){return this.type.isBlock},R.isTextblock.get=function(){return this.type.isTextblock},R.inlineContent.get=function(){return this.type.inlineContent},R.isInline.get=function(){return this.type.isInline},R.isText.get=function(){return this.type.isText},R.isLeaf.get=function(){return this.type.isLeaf},R.isAtom.get=function(){return this.type.isAtom},z.prototype.toString=function(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);var t=this.type.name;return this.content.size&&(t+="("+this.content.toStringInner()+")"),F(this.marks,t)},z.prototype.contentMatchAt=function(t){var e=this.type.contentMatch.matchFragment(this.content,0,t);if(!e)throw new Error("Called contentMatchAt on a node with invalid content");return e},z.prototype.canReplace=function(t,e,n,r,o){void 0===n&&(n=a.empty),void 0===r&&(r=0),void 0===o&&(o=n.childCount);var i=this.contentMatchAt(t).matchFragment(n,r,o),s=i&&i.matchFragment(this.content,e);if(!s||!s.validEnd)return!1;for(var c=r;c<o;c++)if(!this.type.allowsMarks(n.child(c).marks))return!1;return!0},z.prototype.canReplaceWith=function(t,e,n,r){if(r&&!this.type.allowsMarks(r))return!1;var o=this.contentMatchAt(t).matchType(n),i=o&&o.matchFragment(this.content,e);return!!i&&i.validEnd},z.prototype.canAppend=function(t){return t.content.size?this.canReplace(this.childCount,this.childCount,t.content):this.type.compatibleContent(t.type)},z.prototype.check=function(){if(!this.type.validContent(this.content))throw new RangeError("Invalid content for node "+this.type.name+": "+this.content.toString().slice(0,50));for(var t=h.none,e=0;e<this.marks.length;e++)t=this.marks[e].addToSet(t);if(!h.sameSet(t,this.marks))throw new RangeError("Invalid collection of marks for node "+this.type.name+": "+this.marks.map((function(t){return t.type.name})));this.content.forEach((function(t){return t.check()}))},z.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return this.content.size&&(t.content=this.content.toJSON()),this.marks.length&&(t.marks=this.marks.map((function(t){return t.toJSON()}))),t},z.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Node.fromJSON");var n=null;if(e.marks){if(!Array.isArray(e.marks))throw new RangeError("Invalid mark data for Node.fromJSON");n=e.marks.map(t.markFromJSON)}if("text"==e.type){if("string"!=typeof e.text)throw new RangeError("Invalid text node in JSON");return t.text(e.text,n)}var r=a.fromJSON(t,e.content);return t.nodeType(e.type).create(e.attrs,r,n)},Object.defineProperties(z.prototype,R);var j=function(t){function e(e,n,r,o){if(t.call(this,e,n,null,o),!r)throw new RangeError("Empty text nodes are not allowed");this.text=r}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={textContent:{configurable:!0},nodeSize:{configurable:!0}};return e.prototype.toString=function(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):F(this.marks,JSON.stringify(this.text))},n.textContent.get=function(){return this.text},e.prototype.textBetween=function(t,e){return this.text.slice(t,e)},n.nodeSize.get=function(){return this.text.length},e.prototype.mark=function(t){return t==this.marks?this:new e(this.type,this.attrs,this.text,t)},e.prototype.withText=function(t){return t==this.text?this:new e(this.type,this.attrs,t,this.marks)},e.prototype.cut=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.text.length),0==t&&e==this.text.length?this:this.withText(this.text.slice(t,e))},e.prototype.eq=function(t){return this.sameMarkup(t)&&this.text==t.text},e.prototype.toJSON=function(){var e=t.prototype.toJSON.call(this);return e.text=this.text,e},Object.defineProperties(e.prototype,n),e}(z);function F(t,e){for(var n=t.length-1;n>=0;n--)e=t[n].type.name+"("+e+")";return e}var B=function(t){this.validEnd=t,this.next=[],this.wrapCache=[]},$={inlineContent:{configurable:!0},defaultType:{configurable:!0},edgeCount:{configurable:!0}};B.parse=function(t,e){var n=new L(t,e);if(null==n.next)return B.empty;var r=H(n);n.next&&n.err("Unexpected trailing text");var o,i,s=(o=function(t){var e=[[]];return o(function t(e,i){if("choice"==e.type)return e.exprs.reduce((function(e,n){return e.concat(t(n,i))}),[]);if("seq"==e.type)for(var s=0;;s++){var a=t(e.exprs[s],i);if(s==e.exprs.length-1)return a;o(a,i=n())}else{if("star"==e.type){var c=n();return r(i,c),o(t(e.expr,c),c),[r(c)]}if("plus"==e.type){var p=n();return o(t(e.expr,i),p),o(t(e.expr,p),p),[r(p)]}if("opt"==e.type)return[r(i)].concat(t(e.expr,i));if("range"==e.type){for(var l=i,u=0;u<e.min;u++){var h=n();o(t(e.expr,l),h),l=h}if(-1==e.max)o(t(e.expr,l),l);else for(var d=e.min;d<e.max;d++){var f=n();r(l,f),o(t(e.expr,l),f),l=f}return[r(l)]}if("name"==e.type)return[r(i,null,e.value)]}}(t,0),n()),e;function n(){return e.push([])-1}function r(t,n,r){var o={term:r,to:n};return e[t].push(o),o}function o(t,e){t.forEach((function(t){return t.to=e}))}}(r),i=Object.create(null),function t(e){var n=[];e.forEach((function(t){o[t].forEach((function(t){var e=t.term,r=t.to;if(e){var i=n.indexOf(e),s=i>-1&&n[i+1];G(o,r).forEach((function(t){s||n.push(e,s=[]),-1==s.indexOf(t)&&s.push(t)}))}}))}));for(var r=i[e.join(",")]=new B(e.indexOf(o.length-1)>-1),s=0;s<n.length;s+=2){var a=n[s+1].sort(U);r.next.push(n[s],i[a.join(",")]||t(a))}return r}(G(o,0)));return function(t,e){for(var n=0,r=[t];n<r.length;n++){for(var o=r[n],i=!o.validEnd,s=[],a=0;a<o.next.length;a+=2){var c=o.next[a],p=o.next[a+1];s.push(c.name),!i||c.isText||c.hasRequiredAttrs()||(i=!1),-1==r.indexOf(p)&&r.push(p)}i&&e.err("Only non-generatable nodes ("+s.join(", ")+") in a required position (see https://prosemirror.net/docs/guide/#generatable)")}}(s,n),s},B.prototype.matchType=function(t){for(var e=0;e<this.next.length;e+=2)if(this.next[e]==t)return this.next[e+1];return null},B.prototype.matchFragment=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.childCount);for(var r=this,o=e;r&&o<n;o++)r=r.matchType(t.child(o).type);return r},$.inlineContent.get=function(){var t=this.next[0];return!!t&&t.isInline},$.defaultType.get=function(){for(var t=0;t<this.next.length;t+=2){var e=this.next[t];if(!e.isText&&!e.hasRequiredAttrs())return e}},B.prototype.compatible=function(t){for(var e=0;e<this.next.length;e+=2)for(var n=0;n<t.next.length;n+=2)if(this.next[e]==t.next[n])return!0;return!1},B.prototype.fillBefore=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=0);var r=[this];return function o(i,s){var c=i.matchFragment(t,n);if(c&&(!e||c.validEnd))return a.from(s.map((function(t){return t.createAndFill()})));for(var p=0;p<i.next.length;p+=2){var l=i.next[p],u=i.next[p+1];if(!l.isText&&!l.hasRequiredAttrs()&&-1==r.indexOf(u)){r.push(u);var h=o(u,s.concat(l));if(h)return h}}}(this,[])},B.prototype.findWrapping=function(t){for(var e=0;e<this.wrapCache.length;e+=2)if(this.wrapCache[e]==t)return this.wrapCache[e+1];var n=this.computeWrapping(t);return this.wrapCache.push(t,n),n},B.prototype.computeWrapping=function(t){for(var e=Object.create(null),n=[{match:this,type:null,via:null}];n.length;){var r=n.shift(),o=r.match;if(o.matchType(t)){for(var i=[],s=r;s.type;s=s.via)i.push(s.type);return i.reverse()}for(var a=0;a<o.next.length;a+=2){var c=o.next[a];c.isLeaf||c.hasRequiredAttrs()||c.name in e||r.type&&!o.next[a+1].validEnd||(n.push({match:c.contentMatch,type:c,via:r}),e[c.name]=!0)}}},$.edgeCount.get=function(){return this.next.length>>1},B.prototype.edge=function(t){var e=t<<1;if(e>=this.next.length)throw new RangeError("There's no "+t+"th edge in this content match");return{type:this.next[e],next:this.next[e+1]}},B.prototype.toString=function(){var t=[];return function e(n){t.push(n);for(var r=1;r<n.next.length;r+=2)-1==t.indexOf(n.next[r])&&e(n.next[r])}(this),t.map((function(e,n){for(var r=n+(e.validEnd?"*":" ")+" ",o=0;o<e.next.length;o+=2)r+=(o?", ":"")+e.next[o].name+"->"+t.indexOf(e.next[o+1]);return r})).join("\n")},Object.defineProperties(B.prototype,$),B.empty=new B(!0);var L=function(t,e){this.string=t,this.nodeTypes=e,this.inline=null,this.pos=0,this.tokens=t.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.shift()},V={next:{configurable:!0}};function H(t){var e=[];do{e.push(J(t))}while(t.eat("|"));return 1==e.length?e[0]:{type:"choice",exprs:e}}function J(t){var e=[];do{e.push(q(t))}while(t.next&&")"!=t.next&&"|"!=t.next);return 1==e.length?e[0]:{type:"seq",exprs:e}}function q(t){for(var e=function(t){if(t.eat("(")){var e=H(t);return t.eat(")")||t.err("Missing closing paren"),e}if(!/\W/.test(t.next)){var n=function(t,e){var n=t.nodeTypes,r=n[e];if(r)return[r];var o=[];for(var i in n){var s=n[i];s.groups.indexOf(e)>-1&&o.push(s)}return 0==o.length&&t.err("No node type or group '"+e+"' found"),o}(t,t.next).map((function(e){return null==t.inline?t.inline=e.isInline:t.inline!=e.isInline&&t.err("Mixing inline and block content"),{type:"name",value:e}}));return t.pos++,1==n.length?n[0]:{type:"choice",exprs:n}}t.err("Unexpected token '"+t.next+"'")}(t);;)if(t.eat("+"))e={type:"plus",expr:e};else if(t.eat("*"))e={type:"star",expr:e};else if(t.eat("?"))e={type:"opt",expr:e};else{if(!t.eat("{"))break;e=K(t,e)}return e}function W(t){/\D/.test(t.next)&&t.err("Expected number, got '"+t.next+"'");var e=Number(t.next);return t.pos++,e}function K(t,e){var n=W(t),r=n;return t.eat(",")&&(r="}"!=t.next?W(t):-1),t.eat("}")||t.err("Unclosed braced range"),{type:"range",min:n,max:r,expr:e}}function U(t,e){return e-t}function G(t,e){var n=[];return function e(r){var o=t[r];if(1==o.length&&!o[0].term)return e(o[0].to);n.push(r);for(var i=0;i<o.length;i++){var s=o[i],a=s.term,c=s.to;a||-1!=n.indexOf(c)||e(c)}}(e),n.sort(U)}function Z(t){var e=Object.create(null);for(var n in t){var r=t[n];if(!r.hasDefault)return null;e[n]=r.default}return e}function X(t,e){var n=Object.create(null);for(var r in t){var o=e&&e[r];if(void 0===o){var i=t[r];if(!i.hasDefault)throw new RangeError("No value supplied for attribute "+r);o=i.default}n[r]=o}return n}function Y(t){var e=Object.create(null);if(t)for(var n in t)e[n]=new et(t[n]);return e}V.next.get=function(){return this.tokens[this.pos]},L.prototype.eat=function(t){return this.next==t&&(this.pos++||!0)},L.prototype.err=function(t){throw new SyntaxError(t+" (in content expression '"+this.string+"')")},Object.defineProperties(L.prototype,V);var Q=function(t,e,n){this.name=t,this.schema=e,this.spec=n,this.groups=n.group?n.group.split(" "):[],this.attrs=Y(n.attrs),this.defaultAttrs=Z(this.attrs),this.contentMatch=null,this.markSet=null,this.inlineContent=null,this.isBlock=!(n.inline||"text"==t),this.isText="text"==t},tt={isInline:{configurable:!0},isTextblock:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};tt.isInline.get=function(){return!this.isBlock},tt.isTextblock.get=function(){return this.isBlock&&this.inlineContent},tt.isLeaf.get=function(){return this.contentMatch==B.empty},tt.isAtom.get=function(){return this.isLeaf||this.spec.atom},Q.prototype.hasRequiredAttrs=function(){for(var t in this.attrs)if(this.attrs[t].isRequired)return!0;return!1},Q.prototype.compatibleContent=function(t){return this==t||this.contentMatch.compatible(t.contentMatch)},Q.prototype.computeAttrs=function(t){return!t&&this.defaultAttrs?this.defaultAttrs:X(this.attrs,t)},Q.prototype.create=function(t,e,n){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new z(this,this.computeAttrs(t),a.from(e),h.setFrom(n))},Q.prototype.createChecked=function(t,e,n){if(e=a.from(e),!this.validContent(e))throw new RangeError("Invalid content for node "+this.name);return new z(this,this.computeAttrs(t),e,h.setFrom(n))},Q.prototype.createAndFill=function(t,e,n){if(t=this.computeAttrs(t),(e=a.from(e)).size){var r=this.contentMatch.fillBefore(e);if(!r)return null;e=r.append(e)}var o=this.contentMatch.matchFragment(e).fillBefore(a.empty,!0);return o?new z(this,t,e.append(o),h.setFrom(n)):null},Q.prototype.validContent=function(t){var e=this.contentMatch.matchFragment(t);if(!e||!e.validEnd)return!1;for(var n=0;n<t.childCount;n++)if(!this.allowsMarks(t.child(n).marks))return!1;return!0},Q.prototype.allowsMarkType=function(t){return null==this.markSet||this.markSet.indexOf(t)>-1},Q.prototype.allowsMarks=function(t){if(null==this.markSet)return!0;for(var e=0;e<t.length;e++)if(!this.allowsMarkType(t[e].type))return!1;return!0},Q.prototype.allowedMarks=function(t){if(null==this.markSet)return t;for(var e,n=0;n<t.length;n++)this.allowsMarkType(t[n].type)?e&&e.push(t[n]):e||(e=t.slice(0,n));return e?e.length?e:h.empty:t},Q.compile=function(t,e){var n=Object.create(null);t.forEach((function(t,r){return n[t]=new Q(t,e,r)}));var r=e.spec.topNode||"doc";if(!n[r])throw new RangeError("Schema is missing its top node type ('"+r+"')");if(!n.text)throw new RangeError("Every schema needs a 'text' type");for(var o in n.text.attrs)throw new RangeError("The text node type should not have attributes");return n},Object.defineProperties(Q.prototype,tt);var et=function(t){this.hasDefault=Object.prototype.hasOwnProperty.call(t,"default"),this.default=t.default},nt={isRequired:{configurable:!0}};nt.isRequired.get=function(){return!this.hasDefault},Object.defineProperties(et.prototype,nt);var rt=function(t,e,n,r){this.name=t,this.schema=n,this.spec=r,this.attrs=Y(r.attrs),this.rank=e,this.excluded=null;var o=Z(this.attrs);this.instance=o&&new h(this,o)};rt.prototype.create=function(t){return!t&&this.instance?this.instance:new h(this,X(this.attrs,t))},rt.compile=function(t,e){var n=Object.create(null),r=0;return t.forEach((function(t,o){return n[t]=new rt(t,r++,e,o)})),n},rt.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)t[e].type==this&&(t=t.slice(0,e).concat(t.slice(e+1)),e--);return t},rt.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t[e]},rt.prototype.excludes=function(t){return this.excluded.indexOf(t)>-1};var ot=function(t){for(var e in this.spec={},t)this.spec[e]=t[e];this.spec.nodes=o.from(t.nodes),this.spec.marks=o.from(t.marks),this.nodes=Q.compile(this.spec.nodes,this),this.marks=rt.compile(this.spec.marks,this);var n=Object.create(null);for(var r in this.nodes){if(r in this.marks)throw new RangeError(r+" can not be both a node and a mark");var i=this.nodes[r],s=i.spec.content||"",a=i.spec.marks;i.contentMatch=n[s]||(n[s]=B.parse(s,this.nodes)),i.inlineContent=i.contentMatch.inlineContent,i.markSet="_"==a?null:a?it(this,a.split(" ")):""!=a&&i.inlineContent?null:[]}for(var c in this.marks){var p=this.marks[c],l=p.spec.excludes;p.excluded=null==l?[p]:""==l?[]:it(this,l.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached=Object.create(null),this.cached.wrappings=Object.create(null)};function it(t,e){for(var n=[],r=0;r<e.length;r++){var o=e[r],i=t.marks[o],s=i;if(i)n.push(i);else for(var a in t.marks){var c=t.marks[a];("_"==o||c.spec.group&&c.spec.group.split(" ").indexOf(o)>-1)&&n.push(s=c)}if(!s)throw new SyntaxError("Unknown mark type: '"+e[r]+"'")}return n}ot.prototype.node=function(t,e,n,r){if("string"==typeof t)t=this.nodeType(t);else{if(!(t instanceof Q))throw new RangeError("Invalid node type: "+t);if(t.schema!=this)throw new RangeError("Node type from different schema used ("+t.name+")")}return t.createChecked(e,n,r)},ot.prototype.text=function(t,e){var n=this.nodes.text;return new j(n,n.defaultAttrs,t,h.setFrom(e))},ot.prototype.mark=function(t,e){return"string"==typeof t&&(t=this.marks[t]),t.create(e)},ot.prototype.nodeFromJSON=function(t){return z.fromJSON(this,t)},ot.prototype.markFromJSON=function(t){return h.fromJSON(this,t)},ot.prototype.nodeType=function(t){var e=this.nodes[t];if(!e)throw new RangeError("Unknown node type: "+t);return e};var st=function(t,e){var n=this;this.schema=t,this.rules=e,this.tags=[],this.styles=[],e.forEach((function(t){t.tag?n.tags.push(t):t.style&&n.styles.push(t)})),this.normalizeLists=!this.tags.some((function(e){if(!/^(ul|ol)\b/.test(e.tag)||!e.node)return!1;var n=t.nodes[e.node];return n.contentMatch.matchType(n)}))};st.prototype.parse=function(t,e){void 0===e&&(e={});var n=new ht(this,e,!1);return n.addAll(t,null,e.from,e.to),n.finish()},st.prototype.parseSlice=function(t,e){void 0===e&&(e={});var n=new ht(this,e,!0);return n.addAll(t,null,e.from,e.to),f.maxOpen(n.finish())},st.prototype.matchTag=function(t,e,n){for(var r=n?this.tags.indexOf(n)+1:0;r<this.tags.length;r++){var o=this.tags[r];if(ft(t,o.tag)&&(void 0===o.namespace||t.namespaceURI==o.namespace)&&(!o.context||e.matchesContext(o.context))){if(o.getAttrs){var i=o.getAttrs(t);if(!1===i)continue;o.attrs=i}return o}}},st.prototype.matchStyle=function(t,e,n,r){for(var o=r?this.styles.indexOf(r)+1:0;o<this.styles.length;o++){var i=this.styles[o];if(!(0!=i.style.indexOf(t)||i.context&&!n.matchesContext(i.context)||i.style.length>t.length&&(61!=i.style.charCodeAt(t.length)||i.style.slice(t.length+1)!=e))){if(i.getAttrs){var s=i.getAttrs(e);if(!1===s)continue;i.attrs=s}return i}}},st.schemaRules=function(t){var e=[];function n(t){for(var n=null==t.priority?50:t.priority,r=0;r<e.length;r++){var o=e[r];if((null==o.priority?50:o.priority)<n)break}e.splice(r,0,t)}var r,o=function(e){var r=t.marks[e].spec.parseDOM;r&&r.forEach((function(t){n(t=mt(t)),t.mark=e}))};for(var i in t.marks)o(i);for(var s in t.nodes)r=void 0,(r=t.nodes[s].spec.parseDOM)&&r.forEach((function(t){n(t=mt(t)),t.node=s}));return e},st.fromSchema=function(t){return t.cached.domParser||(t.cached.domParser=new st(t,st.schemaRules(t)))};var at={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},ct={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},pt={ol:!0,ul:!0};function lt(t){return(t?1:0)|("full"===t?2:0)}var ut=function(t,e,n,r,o,i,s){this.type=t,this.attrs=e,this.solid=o,this.match=i||(4&s?null:t.contentMatch),this.options=s,this.content=[],this.marks=n,this.activeMarks=h.none,this.pendingMarks=r,this.stashMarks=[]};ut.prototype.findWrapping=function(t){if(!this.match){if(!this.type)return[];var e=this.type.contentMatch.fillBefore(a.from(t));if(!e){var n,r=this.type.contentMatch;return(n=r.findWrapping(t.type))?(this.match=r,n):null}this.match=this.type.contentMatch.matchFragment(e)}return this.match.findWrapping(t.type)},ut.prototype.finish=function(t){if(!(1&this.options)){var e,n=this.content[this.content.length-1];n&&n.isText&&(e=/[ \t\r\n\u000c]+$/.exec(n.text))&&(n.text.length==e[0].length?this.content.pop():this.content[this.content.length-1]=n.withText(n.text.slice(0,n.text.length-e[0].length)))}var r=a.from(this.content);return!t&&this.match&&(r=r.append(this.match.fillBefore(a.empty,!0))),this.type?this.type.create(this.attrs,r,this.marks):r},ut.prototype.popFromStashMark=function(t){for(var e=this.stashMarks.length-1;e>=0;e--)if(t.eq(this.stashMarks[e]))return this.stashMarks.splice(e,1)[0]},ut.prototype.applyPending=function(t){for(var e=0,n=this.pendingMarks;e<n.length;e++){var r=n[e];(this.type?this.type.allowsMarkType(r.type):vt(r.type,t))&&!r.isInSet(this.activeMarks)&&(this.activeMarks=r.addToSet(this.activeMarks),this.pendingMarks=r.removeFromSet(this.pendingMarks))}},ut.prototype.inlineContext=function(t){return this.type?this.type.inlineContent:this.content.length?this.content[0].isInline:t.parentNode&&!at.hasOwnProperty(t.parentNode.nodeName.toLowerCase())};var ht=function(t,e,n){this.parser=t,this.options=e,this.isOpen=n;var r,o=e.topNode,i=lt(e.preserveWhitespace)|(n?4:0);r=o?new ut(o.type,o.attrs,h.none,h.none,!0,e.topMatch||o.type.contentMatch,i):new ut(n?null:t.schema.topNodeType,null,h.none,h.none,!0,null,i),this.nodes=[r],this.open=0,this.find=e.findPositions,this.needsBlock=!1},dt={top:{configurable:!0},currentPos:{configurable:!0}};function ft(t,e){return(t.matches||t.msMatchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector).call(t,e)}function mt(t){var e={};for(var n in t)e[n]=t[n];return e}function vt(t,e){var n=e.schema.nodes,r=function(r){var o=n[r];if(o.allowsMarkType(t)){var i=[],s=function(t){i.push(t);for(var n=0;n<t.edgeCount;n++){var r=t.edge(n),o=r.type,a=r.next;if(o==e)return!0;if(i.indexOf(a)<0&&s(a))return!0}};return s(o.contentMatch)?{v:!0}:void 0}};for(var o in n){var i=r(o);if(i)return i.v}}dt.top.get=function(){return this.nodes[this.open]},ht.prototype.addDOM=function(t){if(3==t.nodeType)this.addTextNode(t);else if(1==t.nodeType){var e=t.getAttribute("style"),n=e?this.readStyles(function(t){for(var e,n=/\s*([\w-]+)\s*:\s*([^;]+)/g,r=[];e=n.exec(t);)r.push(e[1],e[2].trim());return r}(e)):null,r=this.top;if(null!=n)for(var o=0;o<n.length;o++)this.addPendingMark(n[o]);if(this.addElement(t),null!=n)for(var i=0;i<n.length;i++)this.removePendingMark(n[i],r)}},ht.prototype.addTextNode=function(t){var e=t.nodeValue,n=this.top;if(2&n.options||n.inlineContext(t)||/[^ \t\r\n\u000c]/.test(e)){if(1&n.options)e=2&n.options?e.replace(/\r\n?/g,"\n"):e.replace(/\r?\n|\r/g," ");else if(e=e.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(e)&&this.open==this.nodes.length-1){var r=n.content[n.content.length-1],o=t.previousSibling;(!r||o&&"BR"==o.nodeName||r.isText&&/[ \t\r\n\u000c]$/.test(r.text))&&(e=e.slice(1))}e&&this.insertNode(this.parser.schema.text(e)),this.findInText(t)}else this.findInside(t)},ht.prototype.addElement=function(t,e){var n,r=t.nodeName.toLowerCase();pt.hasOwnProperty(r)&&this.parser.normalizeLists&&function(t){for(var e=t.firstChild,n=null;e;e=e.nextSibling){var r=1==e.nodeType?e.nodeName.toLowerCase():null;r&&pt.hasOwnProperty(r)&&n?(n.appendChild(e),e=n):"li"==r?n=e:r&&(n=null)}}(t);var o=this.options.ruleFromNode&&this.options.ruleFromNode(t)||(n=this.parser.matchTag(t,this,e));if(o?o.ignore:ct.hasOwnProperty(r))this.findInside(t),this.ignoreFallback(t);else if(!o||o.skip||o.closeParent){o&&o.closeParent?this.open=Math.max(0,this.open-1):o&&o.skip.nodeType&&(t=o.skip);var i,s=this.top,a=this.needsBlock;if(at.hasOwnProperty(r))i=!0,s.type||(this.needsBlock=!0);else if(!t.firstChild)return void this.leafFallback(t);this.addAll(t),i&&this.sync(s),this.needsBlock=a}else this.addElementByRule(t,o,!1===o.consuming?n:null)},ht.prototype.leafFallback=function(t){"BR"==t.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(t.ownerDocument.createTextNode("\n"))},ht.prototype.ignoreFallback=function(t){"BR"!=t.nodeName||this.top.type&&this.top.type.inlineContent||this.findPlace(this.parser.schema.text("-"))},ht.prototype.readStyles=function(t){var e=h.none;t:for(var n=0;n<t.length;n+=2)for(var r=null;;){var o=this.parser.matchStyle(t[n],t[n+1],this,r);if(!o)continue t;if(o.ignore)return null;if(e=this.parser.schema.marks[o.mark].create(o.attrs).addToSet(e),!1!==o.consuming)break;r=o}return e},ht.prototype.addElementByRule=function(t,e,n){var r,o,i,s=this;e.node?(o=this.parser.schema.nodes[e.node]).isLeaf?this.insertNode(o.create(e.attrs))||this.leafFallback(t):r=this.enter(o,e.attrs,e.preserveWhitespace):(i=this.parser.schema.marks[e.mark].create(e.attrs),this.addPendingMark(i));var a=this.top;if(o&&o.isLeaf)this.findInside(t);else if(n)this.addElement(t,n);else if(e.getContent)this.findInside(t),e.getContent(t,this.parser.schema).forEach((function(t){return s.insertNode(t)}));else{var c=e.contentElement;"string"==typeof c?c=t.querySelector(c):"function"==typeof c&&(c=c(t)),c||(c=t),this.findAround(t,c,!0),this.addAll(c,r)}r&&(this.sync(a),this.open--),i&&this.removePendingMark(i,a)},ht.prototype.addAll=function(t,e,n,r){for(var o=n||0,i=n?t.childNodes[n]:t.firstChild,s=null==r?null:t.childNodes[r];i!=s;i=i.nextSibling,++o)this.findAtPoint(t,o),this.addDOM(i),e&&at.hasOwnProperty(i.nodeName.toLowerCase())&&this.sync(e);this.findAtPoint(t,o)},ht.prototype.findPlace=function(t){for(var e,n,r=this.open;r>=0;r--){var o=this.nodes[r],i=o.findWrapping(t);if(i&&(!e||e.length>i.length)&&(e=i,n=o,!i.length))break;if(o.solid)break}if(!e)return!1;this.sync(n);for(var s=0;s<e.length;s++)this.enterInner(e[s],null,!1);return!0},ht.prototype.insertNode=function(t){if(t.isInline&&this.needsBlock&&!this.top.type){var e=this.textblockFromContext();e&&this.enterInner(e)}if(this.findPlace(t)){this.closeExtra();var n=this.top;n.applyPending(t.type),n.match&&(n.match=n.match.matchType(t.type));for(var r=n.activeMarks,o=0;o<t.marks.length;o++)n.type&&!n.type.allowsMarkType(t.marks[o].type)||(r=t.marks[o].addToSet(r));return n.content.push(t.mark(r)),!0}return!1},ht.prototype.enter=function(t,e,n){var r=this.findPlace(t.create(e));return r&&this.enterInner(t,e,!0,n),r},ht.prototype.enterInner=function(t,e,n,r){this.closeExtra();var o=this.top;o.applyPending(t),o.match=o.match&&o.match.matchType(t,e);var i=null==r?-5&o.options:lt(r);4&o.options&&0==o.content.length&&(i|=4),this.nodes.push(new ut(t,e,o.activeMarks,o.pendingMarks,n,null,i)),this.open++},ht.prototype.closeExtra=function(t){var e=this.nodes.length-1;if(e>this.open){for(;e>this.open;e--)this.nodes[e-1].content.push(this.nodes[e].finish(t));this.nodes.length=this.open+1}},ht.prototype.finish=function(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)},ht.prototype.sync=function(t){for(var e=this.open;e>=0;e--)if(this.nodes[e]==t)return void(this.open=e)},dt.currentPos.get=function(){this.closeExtra();for(var t=0,e=this.open;e>=0;e--){for(var n=this.nodes[e].content,r=n.length-1;r>=0;r--)t+=n[r].nodeSize;e&&t++}return t},ht.prototype.findAtPoint=function(t,e){if(this.find)for(var n=0;n<this.find.length;n++)this.find[n].node==t&&this.find[n].offset==e&&(this.find[n].pos=this.currentPos)},ht.prototype.findInside=function(t){if(this.find)for(var e=0;e<this.find.length;e++)null==this.find[e].pos&&1==t.nodeType&&t.contains(this.find[e].node)&&(this.find[e].pos=this.currentPos)},ht.prototype.findAround=function(t,e,n){if(t!=e&&this.find)for(var r=0;r<this.find.length;r++)null==this.find[r].pos&&1==t.nodeType&&t.contains(this.find[r].node)&&e.compareDocumentPosition(this.find[r].node)&(n?2:4)&&(this.find[r].pos=this.currentPos)},ht.prototype.findInText=function(t){if(this.find)for(var e=0;e<this.find.length;e++)this.find[e].node==t&&(this.find[e].pos=this.currentPos-(t.nodeValue.length-this.find[e].offset))},ht.prototype.matchesContext=function(t){var e=this;if(t.indexOf("|")>-1)return t.split(/\s*\|\s*/).some(this.matchesContext,this);var n=t.split("/"),r=this.options.context,o=!(this.isOpen||r&&r.parent.type!=this.nodes[0].type),i=-(r?r.depth+1:0)+(o?0:1),s=function(t,a){for(;t>=0;t--){var c=n[t];if(""==c){if(t==n.length-1||0==t)continue;for(;a>=i;a--)if(s(t-1,a))return!0;return!1}var p=a>0||0==a&&o?e.nodes[a].type:r&&a>=i?r.node(a-i).type:null;if(!p||p.name!=c&&-1==p.groups.indexOf(c))return!1;a--}return!0};return s(n.length-1,this.open)},ht.prototype.textblockFromContext=function(){var t=this.options.context;if(t)for(var e=t.depth;e>=0;e--){var n=t.node(e).contentMatchAt(t.indexAfter(e)).defaultType;if(n&&n.isTextblock&&n.defaultAttrs)return n}for(var r in this.parser.schema.nodes){var o=this.parser.schema.nodes[r];if(o.isTextblock&&o.defaultAttrs)return o}},ht.prototype.addPendingMark=function(t){var e=function(t,e){for(var n=0;n<e.length;n++)if(t.eq(e[n]))return e[n]}(t,this.top.pendingMarks);e&&this.top.stashMarks.push(e),this.top.pendingMarks=t.addToSet(this.top.pendingMarks)},ht.prototype.removePendingMark=function(t,e){for(var n=this.open;n>=0;n--){var r=this.nodes[n];if(r.pendingMarks.lastIndexOf(t)>-1)r.pendingMarks=t.removeFromSet(r.pendingMarks);else{r.activeMarks=t.removeFromSet(r.activeMarks);var o=r.popFromStashMark(t);o&&r.type&&r.type.allowsMarkType(o.type)&&(r.activeMarks=o.addToSet(r.activeMarks))}if(r==e)break}},Object.defineProperties(ht.prototype,dt);var gt=function(t,e){this.nodes=t||{},this.marks=e||{}};function yt(t){var e={};for(var n in t){var r=t[n].spec.toDOM;r&&(e[n]=r)}return e}function bt(t){return t.document||window.document}gt.prototype.serializeFragment=function(t,e,n){var r=this;void 0===e&&(e={}),n||(n=bt(e).createDocumentFragment());var o=n,i=null;return t.forEach((function(t){if(i||t.marks.length){i||(i=[]);for(var n=0,s=0;n<i.length&&s<t.marks.length;){var a=t.marks[s];if(r.marks[a.type.name]){if(!a.eq(i[n])||!1===a.type.spec.spanning)break;n+=2,s++}else s++}for(;n<i.length;)o=i.pop(),i.pop();for(;s<t.marks.length;){var c=t.marks[s++],p=r.serializeMark(c,t.isInline,e);p&&(i.push(c,o),o.appendChild(p.dom),o=p.contentDOM||p.dom)}}o.appendChild(r.serializeNodeInner(t,e))})),n},gt.prototype.serializeNodeInner=function(t,e){void 0===e&&(e={});var n=gt.renderSpec(bt(e),this.nodes[t.type.name](t)),r=n.dom,o=n.contentDOM;if(o){if(t.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");e.onContent?e.onContent(t,o,e):this.serializeFragment(t.content,e,o)}return r},gt.prototype.serializeNode=function(t,e){void 0===e&&(e={});for(var n=this.serializeNodeInner(t,e),r=t.marks.length-1;r>=0;r--){var o=this.serializeMark(t.marks[r],t.isInline,e);o&&((o.contentDOM||o.dom).appendChild(n),n=o.dom)}return n},gt.prototype.serializeMark=function(t,e,n){void 0===n&&(n={});var r=this.marks[t.type.name];return r&&gt.renderSpec(bt(n),r(t,e))},gt.renderSpec=function(t,e,n){if(void 0===n&&(n=null),"string"==typeof e)return{dom:t.createTextNode(e)};if(null!=e.nodeType)return{dom:e};if(e.dom&&null!=e.dom.nodeType)return e;var r=e[0],o=r.indexOf(" ");o>0&&(n=r.slice(0,o),r=r.slice(o+1));var i=null,s=n?t.createElementNS(n,r):t.createElement(r),a=e[1],c=1;if(a&&"object"==typeof a&&null==a.nodeType&&!Array.isArray(a))for(var p in c=2,a)if(null!=a[p]){var l=p.indexOf(" ");l>0?s.setAttributeNS(p.slice(0,l),p.slice(l+1),a[p]):s.setAttribute(p,a[p])}for(var u=c;u<e.length;u++){var h=e[u];if(0===h){if(u<e.length-1||u>c)throw new RangeError("Content hole must be the only child of its parent node");return{dom:s,contentDOM:s}}var d=gt.renderSpec(t,h,n),f=d.dom,m=d.contentDOM;if(s.appendChild(f),m){if(i)throw new RangeError("Multiple content holes");i=m}}return{dom:s,contentDOM:i}},gt.fromSchema=function(t){return t.cached.domSerializer||(t.cached.domSerializer=new gt(this.nodesFromSchema(t),this.marksFromSchema(t)))},gt.nodesFromSchema=function(t){var e=yt(t.nodes);return e.text||(e.text=function(t){return t.text}),e},gt.marksFromSchema=function(t){return yt(t.marks)}},74465:(t,e,n)=>{"use strict";n.d(e,{liftListItem:()=>s,sinkListItem:()=>a,wrapInList:()=>i});var r=n(21081),o=n(38638);function i(t,e){return function(n,i){var s=n.selection,a=s.$from,c=s.$to,p=a.blockRange(c),l=!1,u=p;if(!p)return!1;if(p.depth>=2&&a.node(p.depth-1).type.compatibleContent(t)&&0==p.startIndex){if(0==a.index(p.depth-1))return!1;var h=n.doc.resolve(p.start-2);u=new o.NodeRange(h,h,p.depth),p.endIndex<p.parent.childCount&&(p=new o.NodeRange(a,n.doc.resolve(c.end(p.depth)),p.depth)),l=!0}var d=(0,r.nd)(u,t,e,p);return!!d&&(i&&i(function(t,e,n,i,s){for(var a=o.Fragment.empty,c=n.length-1;c>=0;c--)a=o.Fragment.from(n[c].type.create(n[c].attrs,a));t.step(new r.FC(e.start-(i?2:0),e.end,e.start,e.end,new o.Slice(a,0,0),n.length,!0));for(var p=0,l=0;l<n.length;l++)n[l].type==s&&(p=l+1);for(var u=n.length-p,h=e.start+n.length-(i?2:0),d=e.parent,f=e.startIndex,m=e.endIndex,v=!0;f<m;f++,v=!1)!v&&(0,r.Ax)(t.doc,h,u)&&(t.split(h,u),h+=2*u),h+=d.child(f).nodeSize;return t}(n.tr,p,d,l,t).scrollIntoView()),!0)}}function s(t){return function(e,n){var i=e.selection,s=i.$from,a=i.$to,c=s.blockRange(a,(function(e){return e.childCount&&e.firstChild.type==t}));return!!c&&(!n||(s.node(c.depth-1).type==t?function(t,e,n,i){var s=t.tr,a=i.end,c=i.$to.end(i.depth);return a<c&&(s.step(new r.FC(a-1,c,a,c,new o.Slice(o.Fragment.from(n.create(null,i.parent.copy())),1,0),1,!0)),i=new o.NodeRange(s.doc.resolve(i.$from.pos),s.doc.resolve(c),i.depth)),e(s.lift(i,(0,r.k9)(i)).scrollIntoView()),!0}(e,n,t,c):function(t,e,n){for(var i=t.tr,s=n.parent,a=n.end,c=n.endIndex-1,p=n.startIndex;c>p;c--)a-=s.child(c).nodeSize,i.delete(a-1,a+1);var l=i.doc.resolve(n.start),u=l.nodeAfter;if(i.mapping.map(n.end)!=n.start+l.nodeAfter.nodeSize)return!1;var h=0==n.startIndex,d=n.endIndex==s.childCount,f=l.node(-1),m=l.index(-1);if(!f.canReplace(m+(h?0:1),m+1,u.content.append(d?o.Fragment.empty:o.Fragment.from(s))))return!1;var v=l.pos,g=v+u.nodeSize;return i.step(new r.FC(v-(h?1:0),g+(d?1:0),v+1,g-1,new o.Slice((h?o.Fragment.empty:o.Fragment.from(s.copy(o.Fragment.empty))).append(d?o.Fragment.empty:o.Fragment.from(s.copy(o.Fragment.empty))),h?0:1,d?0:1),h?0:1)),e(i.scrollIntoView()),!0}(e,n,c)))}}function a(t){return function(e,n){var i=e.selection,s=i.$from,a=i.$to,c=s.blockRange(a,(function(e){return e.childCount&&e.firstChild.type==t}));if(!c)return!1;var p=c.startIndex;if(0==p)return!1;var l=c.parent,u=l.child(p-1);if(u.type!=t)return!1;if(n){var h=u.lastChild&&u.lastChild.type==l.type,d=o.Fragment.from(h?t.create():null),f=new o.Slice(o.Fragment.from(t.create(null,o.Fragment.from(l.type.create(null,d)))),h?3:1,0),m=c.start,v=c.end;n(e.tr.step(new r.FC(m-(h?3:1),v,m,v,f,1,!0)).scrollIntoView())}return!0}}},76922:(t,e,n)=>{"use strict";n.d(e,{AllSelection:()=>d,EditorState:()=>x,NodeSelection:()=>u,Plugin:()=>C,PluginKey:()=>E,Selection:()=>s,TextSelection:()=>p});var r=n(38638),o=n(21081),i=Object.create(null),s=function(t,e,n){this.ranges=n||[new c(t.min(e),t.max(e))],this.$anchor=t,this.$head=e},a={anchor:{configurable:!0},head:{configurable:!0},from:{configurable:!0},to:{configurable:!0},$from:{configurable:!0},$to:{configurable:!0},empty:{configurable:!0}};a.anchor.get=function(){return this.$anchor.pos},a.head.get=function(){return this.$head.pos},a.from.get=function(){return this.$from.pos},a.to.get=function(){return this.$to.pos},a.$from.get=function(){return this.ranges[0].$from},a.$to.get=function(){return this.ranges[0].$to},a.empty.get=function(){for(var t=this.ranges,e=0;e<t.length;e++)if(t[e].$from.pos!=t[e].$to.pos)return!1;return!0},s.prototype.content=function(){return this.$from.node(0).slice(this.from,this.to,!0)},s.prototype.replace=function(t,e){void 0===e&&(e=r.Slice.empty);for(var n=e.content.lastChild,o=null,i=0;i<e.openEnd;i++)o=n,n=n.lastChild;for(var s=t.steps.length,a=this.ranges,c=0;c<a.length;c++){var p=a[c],l=p.$from,u=p.$to,h=t.mapping.slice(s);t.replaceRange(h.map(l.pos),h.map(u.pos),c?r.Slice.empty:e),0==c&&v(t,s,(n?n.isInline:o&&o.isTextblock)?-1:1)}},s.prototype.replaceWith=function(t,e){for(var n=t.steps.length,r=this.ranges,o=0;o<r.length;o++){var i=r[o],s=i.$from,a=i.$to,c=t.mapping.slice(n),p=c.map(s.pos),l=c.map(a.pos);o?t.deleteRange(p,l):(t.replaceRangeWith(p,l,e),v(t,n,e.isInline?-1:1))}},s.findFrom=function(t,e,n){var r=t.parent.inlineContent?new p(t):m(t.node(0),t.parent,t.pos,t.index(),e,n);if(r)return r;for(var o=t.depth-1;o>=0;o--){var i=e<0?m(t.node(0),t.node(o),t.before(o+1),t.index(o),e,n):m(t.node(0),t.node(o),t.after(o+1),t.index(o)+1,e,n);if(i)return i}},s.near=function(t,e){return void 0===e&&(e=1),this.findFrom(t,e)||this.findFrom(t,-e)||new d(t.node(0))},s.atStart=function(t){return m(t,t,0,0,1)||new d(t)},s.atEnd=function(t){return m(t,t,t.content.size,t.childCount,-1)||new d(t)},s.fromJSON=function(t,e){if(!e||!e.type)throw new RangeError("Invalid input for Selection.fromJSON");var n=i[e.type];if(!n)throw new RangeError("No selection type "+e.type+" defined");return n.fromJSON(t,e)},s.jsonID=function(t,e){if(t in i)throw new RangeError("Duplicate use of selection JSON ID "+t);return i[t]=e,e.prototype.jsonID=t,e},s.prototype.getBookmark=function(){return p.between(this.$anchor,this.$head).getBookmark()},Object.defineProperties(s.prototype,a),s.prototype.visible=!0;var c=function(t,e){this.$from=t,this.$to=e},p=function(t){function e(e,n){void 0===n&&(n=e),t.call(this,e,n)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={$cursor:{configurable:!0}};return n.$cursor.get=function(){return this.$anchor.pos==this.$head.pos?this.$head:null},e.prototype.map=function(n,r){var o=n.resolve(r.map(this.head));if(!o.parent.inlineContent)return t.near(o);var i=n.resolve(r.map(this.anchor));return new e(i.parent.inlineContent?i:o,o)},e.prototype.replace=function(e,n){if(void 0===n&&(n=r.Slice.empty),t.prototype.replace.call(this,e,n),n==r.Slice.empty){var o=this.$from.marksAcross(this.$to);o&&e.ensureMarks(o)}},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor&&t.head==this.head},e.prototype.getBookmark=function(){return new l(this.anchor,this.head)},e.prototype.toJSON=function(){return{type:"text",anchor:this.anchor,head:this.head}},e.fromJSON=function(t,n){if("number"!=typeof n.anchor||"number"!=typeof n.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new e(t.resolve(n.anchor),t.resolve(n.head))},e.create=function(t,e,n){void 0===n&&(n=e);var r=t.resolve(e);return new this(r,n==e?r:t.resolve(n))},e.between=function(n,r,o){var i=n.pos-r.pos;if(o&&!i||(o=i>=0?1:-1),!r.parent.inlineContent){var s=t.findFrom(r,o,!0)||t.findFrom(r,-o,!0);if(!s)return t.near(r,o);r=s.$head}return n.parent.inlineContent||(0==i||(n=(t.findFrom(n,-o,!0)||t.findFrom(n,o,!0)).$anchor).pos<r.pos!=i<0)&&(n=r),new e(n,r)},Object.defineProperties(e.prototype,n),e}(s);s.jsonID("text",p);var l=function(t,e){this.anchor=t,this.head=e};l.prototype.map=function(t){return new l(t.map(this.anchor),t.map(this.head))},l.prototype.resolve=function(t){return p.between(t.resolve(this.anchor),t.resolve(this.head))};var u=function(t){function e(e){var n=e.nodeAfter,r=e.node(0).resolve(e.pos+n.nodeSize);t.call(this,e,r),this.node=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(n,r){var o=r.mapResult(this.anchor),i=o.deleted,s=o.pos,a=n.resolve(s);return i?t.near(a):new e(a)},e.prototype.content=function(){return new r.Slice(r.Fragment.from(this.node),0,0)},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor},e.prototype.toJSON=function(){return{type:"node",anchor:this.anchor}},e.prototype.getBookmark=function(){return new h(this.anchor)},e.fromJSON=function(t,n){if("number"!=typeof n.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new e(t.resolve(n.anchor))},e.create=function(t,e){return new this(t.resolve(e))},e.isSelectable=function(t){return!t.isText&&!1!==t.type.spec.selectable},e}(s);u.prototype.visible=!1,s.jsonID("node",u);var h=function(t){this.anchor=t};h.prototype.map=function(t){var e=t.mapResult(this.anchor),n=e.deleted,r=e.pos;return n?new l(r,r):new h(r)},h.prototype.resolve=function(t){var e=t.resolve(this.anchor),n=e.nodeAfter;return n&&u.isSelectable(n)?new u(e):s.near(e)};var d=function(t){function e(e){t.call(this,e.resolve(0),e.resolve(e.content.size))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.replace=function(e,n){if(void 0===n&&(n=r.Slice.empty),n==r.Slice.empty){e.delete(0,e.doc.content.size);var o=t.atStart(e.doc);o.eq(e.selection)||e.setSelection(o)}else t.prototype.replace.call(this,e,n)},e.prototype.toJSON=function(){return{type:"all"}},e.fromJSON=function(t){return new e(t)},e.prototype.map=function(t){return new e(t)},e.prototype.eq=function(t){return t instanceof e},e.prototype.getBookmark=function(){return f},e}(s);s.jsonID("all",d);var f={map:function(){return this},resolve:function(t){return new d(t)}};function m(t,e,n,r,o,i){if(e.inlineContent)return p.create(t,n);for(var s=r-(o>0?0:1);o>0?s<e.childCount:s>=0;s+=o){var a=e.child(s);if(a.isAtom){if(!i&&u.isSelectable(a))return u.create(t,n-(o<0?a.nodeSize:0))}else{var c=m(t,a,n+o,o<0?a.childCount:0,o,i);if(c)return c}n+=a.nodeSize*o}}function v(t,e,n){var r=t.steps.length-1;if(!(r<e)){var i,a=t.steps[r];(a instanceof o.Pu||a instanceof o.FC)&&(t.mapping.maps[r].forEach((function(t,e,n,r){null==i&&(i=r)})),t.setSelection(s.near(t.doc.resolve(i),n)))}}var g=function(t){function e(e){t.call(this,e.doc),this.time=Date.now(),this.curSelection=e.selection,this.curSelectionFor=0,this.storedMarks=e.storedMarks,this.updated=0,this.meta=Object.create(null)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={selection:{configurable:!0},selectionSet:{configurable:!0},storedMarksSet:{configurable:!0},isGeneric:{configurable:!0},scrolledIntoView:{configurable:!0}};return n.selection.get=function(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection},e.prototype.setSelection=function(t){if(t.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=t,this.curSelectionFor=this.steps.length,this.updated=-3&(1|this.updated),this.storedMarks=null,this},n.selectionSet.get=function(){return(1&this.updated)>0},e.prototype.setStoredMarks=function(t){return this.storedMarks=t,this.updated|=2,this},e.prototype.ensureMarks=function(t){return r.Mark.sameSet(this.storedMarks||this.selection.$from.marks(),t)||this.setStoredMarks(t),this},e.prototype.addStoredMark=function(t){return this.ensureMarks(t.addToSet(this.storedMarks||this.selection.$head.marks()))},e.prototype.removeStoredMark=function(t){return this.ensureMarks(t.removeFromSet(this.storedMarks||this.selection.$head.marks()))},n.storedMarksSet.get=function(){return(2&this.updated)>0},e.prototype.addStep=function(e,n){t.prototype.addStep.call(this,e,n),this.updated=-3&this.updated,this.storedMarks=null},e.prototype.setTime=function(t){return this.time=t,this},e.prototype.replaceSelection=function(t){return this.selection.replace(this,t),this},e.prototype.replaceSelectionWith=function(t,e){var n=this.selection;return!1!==e&&(t=t.mark(this.storedMarks||(n.empty?n.$from.marks():n.$from.marksAcross(n.$to)||r.Mark.none))),n.replaceWith(this,t),this},e.prototype.deleteSelection=function(){return this.selection.replace(this),this},e.prototype.insertText=function(t,e,n){void 0===n&&(n=e);var r=this.doc.type.schema;if(null==e)return t?this.replaceSelectionWith(r.text(t),!0):this.deleteSelection();if(!t)return this.deleteRange(e,n);var o=this.storedMarks;if(!o){var i=this.doc.resolve(e);o=n==e?i.marks():i.marksAcross(this.doc.resolve(n))}return this.replaceRangeWith(e,n,r.text(t,o)),this.selection.empty||this.setSelection(s.near(this.selection.$to)),this},e.prototype.setMeta=function(t,e){return this.meta["string"==typeof t?t:t.key]=e,this},e.prototype.getMeta=function(t){return this.meta["string"==typeof t?t:t.key]},n.isGeneric.get=function(){for(var t in this.meta)return!1;return!0},e.prototype.scrollIntoView=function(){return this.updated|=4,this},n.scrolledIntoView.get=function(){return(4&this.updated)>0},Object.defineProperties(e.prototype,n),e}(o.wx);function y(t,e){return e&&t?t.bind(e):t}var b=function(t,e,n){this.name=t,this.init=y(e.init,n),this.apply=y(e.apply,n)},w=[new b("doc",{init:function(t){return t.doc||t.schema.topNodeType.createAndFill()},apply:function(t){return t.doc}}),new b("selection",{init:function(t,e){return t.selection||s.atStart(e.doc)},apply:function(t){return t.selection}}),new b("storedMarks",{init:function(t){return t.storedMarks||null},apply:function(t,e,n,r){return r.selection.$cursor?t.storedMarks:null}}),new b("scrollToSelection",{init:function(){return 0},apply:function(t,e){return t.scrolledIntoView?e+1:e}})],S=function(t,e){var n=this;this.schema=t,this.fields=w.concat(),this.plugins=[],this.pluginsByKey=Object.create(null),e&&e.forEach((function(t){if(n.pluginsByKey[t.key])throw new RangeError("Adding different instances of a keyed plugin ("+t.key+")");n.plugins.push(t),n.pluginsByKey[t.key]=t,t.spec.state&&n.fields.push(new b(t.key,t.spec.state,t))}))},x=function(t){this.config=t},k={schema:{configurable:!0},plugins:{configurable:!0},tr:{configurable:!0}};k.schema.get=function(){return this.config.schema},k.plugins.get=function(){return this.config.plugins},x.prototype.apply=function(t){return this.applyTransaction(t).state},x.prototype.filterTransaction=function(t,e){void 0===e&&(e=-1);for(var n=0;n<this.config.plugins.length;n++)if(n!=e){var r=this.config.plugins[n];if(r.spec.filterTransaction&&!r.spec.filterTransaction.call(r,t,this))return!1}return!0},x.prototype.applyTransaction=function(t){if(!this.filterTransaction(t))return{state:this,transactions:[]};for(var e=[t],n=this.applyInner(t),r=null;;){for(var o=!1,i=0;i<this.config.plugins.length;i++){var s=this.config.plugins[i];if(s.spec.appendTransaction){var a=r?r[i].n:0,c=r?r[i].state:this,p=a<e.length&&s.spec.appendTransaction.call(s,a?e.slice(a):e,c,n);if(p&&n.filterTransaction(p,i)){if(p.setMeta("appendedTransaction",t),!r){r=[];for(var l=0;l<this.config.plugins.length;l++)r.push(l<i?{state:n,n:e.length}:{state:this,n:0})}e.push(p),n=n.applyInner(p),o=!0}r&&(r[i]={state:n,n:e.length})}}if(!o)return{state:n,transactions:e}}},x.prototype.applyInner=function(t){if(!t.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");for(var e=new x(this.config),n=this.config.fields,r=0;r<n.length;r++){var o=n[r];e[o.name]=o.apply(t,this[o.name],this,e)}for(var i=0;i<M.length;i++)M[i](this,t,e);return e},k.tr.get=function(){return new g(this)},x.create=function(t){for(var e=new S(t.doc?t.doc.type.schema:t.schema,t.plugins),n=new x(e),r=0;r<e.fields.length;r++)n[e.fields[r].name]=e.fields[r].init(t,n);return n},x.prototype.reconfigure=function(t){for(var e=new S(this.schema,t.plugins),n=e.fields,r=new x(e),o=0;o<n.length;o++){var i=n[o].name;r[i]=this.hasOwnProperty(i)?this[i]:n[o].init(t,r)}return r},x.prototype.toJSON=function(t){var e={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(e.storedMarks=this.storedMarks.map((function(t){return t.toJSON()}))),t&&"object"==typeof t)for(var n in t){if("doc"==n||"selection"==n)throw new RangeError("The JSON fields `doc` and `selection` are reserved");var r=t[n],o=r.spec.state;o&&o.toJSON&&(e[n]=o.toJSON.call(r,this[r.key]))}return e},x.fromJSON=function(t,e,n){if(!e)throw new RangeError("Invalid input for EditorState.fromJSON");if(!t.schema)throw new RangeError("Required config field 'schema' missing");var o=new S(t.schema,t.plugins),i=new x(o);return o.fields.forEach((function(o){if("doc"==o.name)i.doc=r.Node.fromJSON(t.schema,e.doc);else if("selection"==o.name)i.selection=s.fromJSON(i.doc,e.selection);else if("storedMarks"==o.name)e.storedMarks&&(i.storedMarks=e.storedMarks.map(t.schema.markFromJSON));else{if(n)for(var a in n){var c=n[a],p=c.spec.state;if(c.key==o.name&&p&&p.fromJSON&&Object.prototype.hasOwnProperty.call(e,a))return void(i[o.name]=p.fromJSON.call(c,t,e[a],i))}i[o.name]=o.init(t,i)}})),i},x.addApplyListener=function(t){M.push(t)},x.removeApplyListener=function(t){var e=M.indexOf(t);e>-1&&M.splice(e,1)},Object.defineProperties(x.prototype,k);var M=[];function O(t,e,n){for(var r in t){var o=t[r];o instanceof Function?o=o.bind(e):"handleDOMEvents"==r&&(o=O(o,e,{})),n[r]=o}return n}var C=function(t){this.props={},t.props&&O(t.props,this,this.props),this.spec=t,this.key=t.key?t.key.key:N("plugin")};C.prototype.getState=function(t){return t[this.key]};var T=Object.create(null);function N(t){return t in T?t+"$"+ ++T[t]:(T[t]=0,t+"$")}var E=function(t){void 0===t&&(t="key"),this.key=N(t)};E.prototype.get=function(t){return t.config.pluginsByKey[this.key]},E.prototype.getState=function(t){return t[this.key]}},21081:(t,e,n)=>{"use strict";n.d(e,{vs:()=>c,FC:()=>g,Pu:()=>v,wx:()=>l,Mn:()=>M,Ax:()=>k,nj:()=>O,nd:()=>S,k9:()=>w});var r=n(38638),o=Math.pow(2,16);function i(t){return 65535&t}var s=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=null),this.pos=t,this.deleted=e,this.recover=n},a=function(t,e){void 0===e&&(e=!1),this.ranges=t,this.inverted=e};a.prototype.recover=function(t){var e=0,n=i(t);if(!this.inverted)for(var r=0;r<n;r++)e+=this.ranges[3*r+2]-this.ranges[3*r+1];return this.ranges[3*n]+e+function(t){return(t-(65535&t))/o}(t)},a.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},a.prototype.map=function(t,e){return void 0===e&&(e=1),this._map(t,e,!0)},a.prototype._map=function(t,e,n){for(var r=0,i=this.inverted?2:1,a=this.inverted?1:2,c=0;c<this.ranges.length;c+=3){var p=this.ranges[c]-(this.inverted?r:0);if(p>t)break;var l=this.ranges[c+i],u=this.ranges[c+a],h=p+l;if(t<=h){var d=p+r+((l?t==p?-1:t==h?1:e:e)<0?0:u);return n?d:new s(d,e<0?t!=p:t!=h,c/3+(t-p)*o)}r+=u-l}return n?t+r:new s(t+r)},a.prototype.touches=function(t,e){for(var n=0,r=i(e),o=this.inverted?2:1,s=this.inverted?1:2,a=0;a<this.ranges.length;a+=3){var c=this.ranges[a]-(this.inverted?n:0);if(c>t)break;var p=this.ranges[a+o];if(t<=c+p&&a==3*r)return!0;n+=this.ranges[a+s]-p}return!1},a.prototype.forEach=function(t){for(var e=this.inverted?2:1,n=this.inverted?1:2,r=0,o=0;r<this.ranges.length;r+=3){var i=this.ranges[r],s=i-(this.inverted?o:0),a=i+(this.inverted?0:o),c=this.ranges[r+e],p=this.ranges[r+n];t(s,s+c,a,a+p),o+=p-c}},a.prototype.invert=function(){return new a(this.ranges,!this.inverted)},a.prototype.toString=function(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)},a.offset=function(t){return 0==t?a.empty:new a(t<0?[0,-t,0]:[0,0,t])},a.empty=new a([]);var c=function(t,e,n,r){this.maps=t||[],this.from=n||0,this.to=null==r?this.maps.length:r,this.mirror=e};function p(t){var e=Error.call(this,t);return e.__proto__=p.prototype,e}c.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.maps.length),new c(this.maps,this.mirror,t,e)},c.prototype.copy=function(){return new c(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)},c.prototype.appendMap=function(t,e){this.to=this.maps.push(t),null!=e&&this.setMirror(this.maps.length-1,e)},c.prototype.appendMapping=function(t){for(var e=0,n=this.maps.length;e<t.maps.length;e++){var r=t.getMirror(e);this.appendMap(t.maps[e],null!=r&&r<e?n+r:null)}},c.prototype.getMirror=function(t){if(this.mirror)for(var e=0;e<this.mirror.length;e++)if(this.mirror[e]==t)return this.mirror[e+(e%2?-1:1)]},c.prototype.setMirror=function(t,e){this.mirror||(this.mirror=[]),this.mirror.push(t,e)},c.prototype.appendMappingInverted=function(t){for(var e=t.maps.length-1,n=this.maps.length+t.maps.length;e>=0;e--){var r=t.getMirror(e);this.appendMap(t.maps[e].invert(),null!=r&&r>e?n-r-1:null)}},c.prototype.invert=function(){var t=new c;return t.appendMappingInverted(this),t},c.prototype.map=function(t,e){if(void 0===e&&(e=1),this.mirror)return this._map(t,e,!0);for(var n=this.from;n<this.to;n++)t=this.maps[n].map(t,e);return t},c.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},c.prototype._map=function(t,e,n){for(var r=!1,o=null,i=this.from;i<this.to;i++){var a=this.maps[i],c=o&&o[i];if(null!=c&&a.touches(t,c))t=a.recover(c);else{var p=a.mapResult(t,e);if(null!=p.recover){var l=this.getMirror(i);if(null!=l&&l>i&&l<this.to){if(p.deleted){i=l,t=this.maps[l].recover(p.recover);continue}(o||(o=Object.create(null)))[l]=p.recover}}p.deleted&&(r=!0),t=p.pos}}return n?t:new s(t,r)},p.prototype=Object.create(Error.prototype),p.prototype.constructor=p,p.prototype.name="TransformError";var l=function(t){this.doc=t,this.steps=[],this.docs=[],this.mapping=new c},u={before:{configurable:!0},docChanged:{configurable:!0}};function h(){throw new Error("Override me")}u.before.get=function(){return this.docs.length?this.docs[0]:this.doc},l.prototype.step=function(t){var e=this.maybeStep(t);if(e.failed)throw new p(e.failed);return this},l.prototype.maybeStep=function(t){var e=t.apply(this.doc);return e.failed||this.addStep(t,e.doc),e},u.docChanged.get=function(){return this.steps.length>0},l.prototype.addStep=function(t,e){this.docs.push(this.doc),this.steps.push(t),this.mapping.appendMap(t.getMap()),this.doc=e},Object.defineProperties(l.prototype,u);var d=Object.create(null),f=function(){};f.prototype.apply=function(t){return h()},f.prototype.getMap=function(){return a.empty},f.prototype.invert=function(t){return h()},f.prototype.map=function(t){return h()},f.prototype.merge=function(t){return null},f.prototype.toJSON=function(){return h()},f.fromJSON=function(t,e){if(!e||!e.stepType)throw new RangeError("Invalid input for Step.fromJSON");var n=d[e.stepType];if(!n)throw new RangeError("No step type "+e.stepType+" defined");return n.fromJSON(t,e)},f.jsonID=function(t,e){if(t in d)throw new RangeError("Duplicate use of step JSON ID "+t);return d[t]=e,e.prototype.jsonID=t,e};var m=function(t,e){this.doc=t,this.failed=e};m.ok=function(t){return new m(t,null)},m.fail=function(t){return new m(null,t)},m.fromReplace=function(t,e,n,o){try{return m.ok(t.replace(e,n,o))}catch(t){if(t instanceof r.ReplaceError)return m.fail(t.message);throw t}};var v=function(t){function e(e,n,r,o){t.call(this),this.from=e,this.to=n,this.slice=r,this.structure=!!o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){return this.structure&&y(t,this.from,this.to)?m.fail("Structure replace would overwrite content"):m.fromReplace(t,this.from,this.to,this.slice)},e.prototype.getMap=function(){return new a([this.from,this.to-this.from,this.slice.size])},e.prototype.invert=function(t){return new e(this.from,this.from+this.slice.size,t.slice(this.from,this.to))},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted?null:new e(n.pos,Math.max(n.pos,r.pos),this.slice)},e.prototype.merge=function(t){if(!(t instanceof e)||t.structure!=this.structure)return null;if(this.from+this.slice.size!=t.from||this.slice.openEnd||t.slice.openStart){if(t.to!=this.from||this.slice.openStart||t.slice.openEnd)return null;var n=this.slice.size+t.slice.size==0?r.Slice.empty:new r.Slice(t.slice.content.append(this.slice.content),t.slice.openStart,this.slice.openEnd);return new e(t.from,this.to,n,this.structure)}var o=this.slice.size+t.slice.size==0?r.Slice.empty:new r.Slice(this.slice.content.append(t.slice.content),this.slice.openStart,t.slice.openEnd);return new e(this.from,this.to+(t.to-t.from),o,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new e(n.from,n.to,r.Slice.fromJSON(t,n.slice),!!n.structure)},e}(f);f.jsonID("replace",v);var g=function(t){function e(e,n,r,o,i,s,a){t.call(this),this.from=e,this.to=n,this.gapFrom=r,this.gapTo=o,this.slice=i,this.insert=s,this.structure=!!a}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){if(this.structure&&(y(t,this.from,this.gapFrom)||y(t,this.gapTo,this.to)))return m.fail("Structure gap-replace would overwrite content");var e=t.slice(this.gapFrom,this.gapTo);if(e.openStart||e.openEnd)return m.fail("Gap is not a flat range");var n=this.slice.insertAt(this.insert,e.content);return n?m.fromReplace(t,this.from,this.to,n):m.fail("Content does not fit in gap")},e.prototype.getMap=function(){return new a([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])},e.prototype.invert=function(t){var n=this.gapTo-this.gapFrom;return new e(this.from,this.from+this.slice.size+n,this.from+this.insert,this.from+this.insert+n,t.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1),o=t.map(this.gapFrom,-1),i=t.map(this.gapTo,1);return n.deleted&&r.deleted||o<n.pos||i>r.pos?null:new e(n.pos,r.pos,o,i,this.slice,this.insert,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to||"number"!=typeof n.gapFrom||"number"!=typeof n.gapTo||"number"!=typeof n.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new e(n.from,n.to,n.gapFrom,n.gapTo,r.Slice.fromJSON(t,n.slice),n.insert,!!n.structure)},e}(f);function y(t,e,n){for(var r=t.resolve(e),o=n-e,i=r.depth;o>0&&i>0&&r.indexAfter(i)==r.node(i).childCount;)i--,o--;if(o>0)for(var s=r.node(i).maybeChild(r.indexAfter(i));o>0;){if(!s||s.isLeaf)return!0;s=s.firstChild,o--}return!1}function b(t,e,n){return(0==e||t.canReplace(e,t.childCount))&&(n==t.childCount||t.canReplace(0,n))}function w(t){for(var e=t.parent.content.cutByIndex(t.startIndex,t.endIndex),n=t.depth;;--n){var r=t.$from.node(n),o=t.$from.index(n),i=t.$to.indexAfter(n);if(n<t.depth&&r.canReplace(o,i,e))return n;if(0==n||r.type.spec.isolating||!b(r,o,i))break}}function S(t,e,n,r){void 0===r&&(r=t);var o=function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.contentMatchAt(r).findWrapping(e);if(!i)return null;var s=i.length?i[0]:e;return n.canReplaceWith(r,o,s)?i:null}(t,e),i=o&&function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.child(r),s=e.contentMatch.findWrapping(i.type);if(!s)return null;for(var a=(s.length?s[s.length-1]:e).contentMatch,c=r;a&&c<o;c++)a=a.matchType(n.child(c).type);return a&&a.validEnd?s:null}(r,e);return i?o.map(x).concat({type:e,attrs:n}).concat(i.map(x)):null}function x(t){return{type:t,attrs:null}}function k(t,e,n,r){void 0===n&&(n=1);var o=t.resolve(e),i=o.depth-n,s=r&&r[r.length-1]||o.parent;if(i<0||o.parent.type.spec.isolating||!o.parent.canReplace(o.index(),o.parent.childCount)||!s.type.validContent(o.parent.content.cutByIndex(o.index(),o.parent.childCount)))return!1;for(var a=o.depth-1,c=n-2;a>i;a--,c--){var p=o.node(a),l=o.index(a);if(p.type.spec.isolating)return!1;var u=p.content.cutByIndex(l,p.childCount),h=r&&r[c]||p;if(h!=p&&(u=u.replaceChild(0,h.type.create(h.attrs))),!p.canReplace(l+1,p.childCount)||!h.type.validContent(u))return!1}var d=o.indexAfter(i),f=r&&r[0];return o.node(i).canReplaceWith(d,d,f?f.type:o.node(i+1).type)}function M(t,e){var n,r,o=t.resolve(e),i=o.index();return n=o.nodeBefore,r=o.nodeAfter,n&&r&&!n.isLeaf&&n.canAppend(r)&&o.parent.canReplace(i,i+1)}function O(t,e,n){var r=t.resolve(e);if(!n.content.size)return e;for(var o=n.content,i=0;i<n.openStart;i++)o=o.firstChild.content;for(var s=1;s<=(0==n.openStart&&n.size?2:1);s++)for(var a=r.depth;a>=0;a--){var c=a==r.depth?0:r.pos<=(r.start(a+1)+r.end(a+1))/2?-1:1,p=r.index(a)+(c>0?1:0);if(1==s?r.node(a).canReplace(p,p,o):r.node(a).contentMatchAt(p).findWrapping(o.firstChild.type))return 0==c?r.pos:c<0?r.before(a+1):r.after(a+1)}return null}function C(t,e,n){for(var o=[],i=0;i<t.childCount;i++){var s=t.child(i);s.content.size&&(s=s.copy(C(s.content,e,s))),s.isInline&&(s=e(s,n,i)),o.push(s)}return r.Fragment.fromArray(o)}f.jsonID("replaceAround",g),l.prototype.lift=function(t,e){for(var n=t.$from,o=t.$to,i=t.depth,s=n.before(i+1),a=o.after(i+1),c=s,p=a,l=r.Fragment.empty,u=0,h=i,d=!1;h>e;h--)d||n.index(h)>0?(d=!0,l=r.Fragment.from(n.node(h).copy(l)),u++):c--;for(var f=r.Fragment.empty,m=0,v=i,y=!1;v>e;v--)y||o.after(v+1)<o.end(v)?(y=!0,f=r.Fragment.from(o.node(v).copy(f)),m++):p++;return this.step(new g(c,p,s,a,new r.Slice(l.append(f),u,m),l.size-u,!0))},l.prototype.wrap=function(t,e){for(var n=r.Fragment.empty,o=e.length-1;o>=0;o--)n=r.Fragment.from(e[o].type.create(e[o].attrs,n));var i=t.start,s=t.end;return this.step(new g(i,s,i,s,new r.Slice(n,0,0),e.length,!0))},l.prototype.setBlockType=function(t,e,n,o){var i=this;if(void 0===e&&(e=t),!n.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");var s=this.steps.length;return this.doc.nodesBetween(t,e,(function(t,e){if(t.isTextblock&&!t.hasMarkup(n,o)&&function(t,e,n){var r=t.resolve(e),o=r.index();return r.parent.canReplaceWith(o,o+1,n)}(i.doc,i.mapping.slice(s).map(e),n)){i.clearIncompatible(i.mapping.slice(s).map(e,1),n);var a=i.mapping.slice(s),c=a.map(e,1),p=a.map(e+t.nodeSize,1);return i.step(new g(c,p,c+1,p-1,new r.Slice(r.Fragment.from(n.create(o,null,t.marks)),0,0),1,!0)),!1}})),this},l.prototype.setNodeMarkup=function(t,e,n,o){var i=this.doc.nodeAt(t);if(!i)throw new RangeError("No node at given position");e||(e=i.type);var s=e.create(n,null,o||i.marks);if(i.isLeaf)return this.replaceWith(t,t+i.nodeSize,s);if(!e.validContent(i.content))throw new RangeError("Invalid content for node type "+e.name);return this.step(new g(t,t+i.nodeSize,t+1,t+i.nodeSize-1,new r.Slice(r.Fragment.from(s),0,0),1,!0))},l.prototype.split=function(t,e,n){void 0===e&&(e=1);for(var o=this.doc.resolve(t),i=r.Fragment.empty,s=r.Fragment.empty,a=o.depth,c=o.depth-e,p=e-1;a>c;a--,p--){i=r.Fragment.from(o.node(a).copy(i));var l=n&&n[p];s=r.Fragment.from(l?l.type.create(l.attrs,s):o.node(a).copy(s))}return this.step(new v(t,t,new r.Slice(i.append(s),e,e),!0))},l.prototype.join=function(t,e){void 0===e&&(e=1);var n=new v(t-e,t+e,r.Slice.empty,!0);return this.step(n)};var T=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),o=t.resolve(this.from),i=o.node(o.sharedDepth(this.to)),s=new r.Slice(C(n.content,(function(t,n){return n.type.allowsMarkType(e.mark.type)?t.mark(e.mark.addToSet(t.marks)):t}),i),n.openStart,n.openEnd);return m.fromReplace(t,this.from,this.to,s)},e.prototype.invert=function(){return new N(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(f);f.jsonID("addMark",T);var N=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),o=new r.Slice(C(n.content,(function(t){return t.mark(e.mark.removeFromSet(t.marks))})),n.openStart,n.openEnd);return m.fromReplace(t,this.from,this.to,o)},e.prototype.invert=function(){return new T(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(f);function E(t,e,n){return!n.openStart&&!n.openEnd&&t.start()==e.start()&&t.parent.canReplace(t.index(),e.index(),n.content)}f.jsonID("removeMark",N),l.prototype.addMark=function(t,e,n){var r=this,o=[],i=[],s=null,a=null;return this.doc.nodesBetween(t,e,(function(r,c,p){if(r.isInline){var l=r.marks;if(!n.isInSet(l)&&p.type.allowsMarkType(n.type)){for(var u=Math.max(c,t),h=Math.min(c+r.nodeSize,e),d=n.addToSet(l),f=0;f<l.length;f++)l[f].isInSet(d)||(s&&s.to==u&&s.mark.eq(l[f])?s.to=h:o.push(s=new N(u,h,l[f])));a&&a.to==u?a.to=h:i.push(a=new T(u,h,n))}}})),o.forEach((function(t){return r.step(t)})),i.forEach((function(t){return r.step(t)})),this},l.prototype.removeMark=function(t,e,n){var o=this;void 0===n&&(n=null);var i=[],s=0;return this.doc.nodesBetween(t,e,(function(o,a){if(o.isInline){s++;var c=null;if(n instanceof r.MarkType){var p=n.isInSet(o.marks);p&&(c=[p])}else n?n.isInSet(o.marks)&&(c=[n]):c=o.marks;if(c&&c.length)for(var l=Math.min(a+o.nodeSize,e),u=0;u<c.length;u++){for(var h=c[u],d=void 0,f=0;f<i.length;f++){var m=i[f];m.step==s-1&&h.eq(i[f].style)&&(d=m)}d?(d.to=l,d.step=s):i.push({style:h,from:Math.max(a,t),to:l,step:s})}}})),i.forEach((function(t){return o.step(new N(t.from,t.to,t.style))})),this},l.prototype.clearIncompatible=function(t,e,n){void 0===n&&(n=e.contentMatch);for(var o=this.doc.nodeAt(t),i=[],s=t+1,a=0;a<o.childCount;a++){var c=o.child(a),p=s+c.nodeSize,l=n.matchType(c.type,c.attrs);if(l){n=l;for(var u=0;u<c.marks.length;u++)e.allowsMarkType(c.marks[u].type)||this.step(new N(s,p,c.marks[u]))}else i.push(new v(s,p,r.Slice.empty));s=p}if(!n.validEnd){var h=n.fillBefore(r.Fragment.empty,!0);this.replace(s,s,new r.Slice(h,0,0))}for(var d=i.length-1;d>=0;d--)this.step(i[d]);return this},l.prototype.replace=function(t,e,n){void 0===e&&(e=t),void 0===n&&(n=r.Slice.empty);var o=function(t,e,n,o){if(void 0===n&&(n=e),void 0===o&&(o=r.Slice.empty),e==n&&!o.size)return null;var i=t.resolve(e),s=t.resolve(n);return E(i,s,o)?new v(e,n,o):new A(i,s,o).fit()}(this.doc,t,e,n);return o&&this.step(o),this},l.prototype.replaceWith=function(t,e,n){return this.replace(t,e,new r.Slice(r.Fragment.from(n),0,0))},l.prototype.delete=function(t,e){return this.replace(t,e,r.Slice.empty)},l.prototype.insert=function(t,e){return this.replaceWith(t,t,e)};var A=function(t,e,n){this.$to=e,this.$from=t,this.unplaced=n,this.frontier=[];for(var o=0;o<=t.depth;o++){var i=t.node(o);this.frontier.push({type:i.type,match:i.contentMatchAt(t.indexAfter(o))})}this.placed=r.Fragment.empty;for(var s=t.depth;s>0;s--)this.placed=r.Fragment.from(t.node(s).copy(this.placed))},D={depth:{configurable:!0}};function _(t,e,n){return 0==e?t.cutByIndex(n):t.replaceChild(0,t.firstChild.copy(_(t.firstChild.content,e-1,n)))}function I(t,e,n){return 0==e?t.append(n):t.replaceChild(t.childCount-1,t.lastChild.copy(I(t.lastChild.content,e-1,n)))}function P(t,e){for(var n=0;n<e;n++)t=t.firstChild.content;return t}function z(t,e,n){if(e<=0)return t;var o=t.content;return e>1&&(o=o.replaceChild(0,z(o.firstChild,e-1,1==o.childCount?n-1:0))),e>0&&(o=t.type.contentMatch.fillBefore(o).append(o),n<=0&&(o=o.append(t.type.contentMatch.matchFragment(o).fillBefore(r.Fragment.empty,!0)))),t.copy(o)}function R(t,e,n,r,o){var i=t.node(e),s=o?t.indexAfter(e):t.index(e);if(s==i.childCount&&!n.compatibleContent(i.type))return null;var a=r.fillBefore(i.content,!0,s);return a&&!function(t,e,n){for(var r=n;r<e.childCount;r++)if(!t.allowsMarks(e.child(r).marks))return!0;return!1}(n,i.content,s)?a:null}function j(t,e,n,o,i){if(e<n){var s=t.firstChild;t=t.replaceChild(0,s.copy(j(s.content,e+1,n,o,s)))}if(e>o){var a=i.contentMatchAt(0),c=a.fillBefore(t).append(t);t=c.append(a.matchFragment(c).fillBefore(r.Fragment.empty,!0))}return t}function F(t,e){for(var n=[],r=Math.min(t.depth,e.depth);r>=0;r--){var o=t.start(r);if(o<t.pos-(t.depth-r)||e.end(r)>e.pos+(e.depth-r)||t.node(r).type.spec.isolating||e.node(r).type.spec.isolating)break;o==e.start(r)&&n.push(r)}return n}D.depth.get=function(){return this.frontier.length-1},A.prototype.fit=function(){for(;this.unplaced.size;){var t=this.findFittable();t?this.placeNodes(t):this.openMore()||this.dropNode()}var e=this.mustMoveInline(),n=this.placed.size-this.depth-this.$from.depth,o=this.$from,i=e<0?this.$to:o.doc.resolve(e);if(this.close(i)){for(var s=this.placed,a=o.depth,c=i.depth;a&&c&&1==s.childCount;)s=s.firstChild.content,a--,c--;var p=new r.Slice(s,a,c);if(e>-1)return new g(o.pos,e,this.$to.pos,this.$to.end(),p,n);if(p.size||o.pos!=this.$to.pos)return new v(o.pos,i.pos,p)}return null},A.prototype.findFittable=function(){for(var t=1;t<=2;t++)for(var e=this.unplaced.openStart;e>=0;e--)for(var n=void 0,o=(e?(n=P(this.unplaced.content,e-1).firstChild).content:this.unplaced.content).firstChild,i=this.depth;i>=0;i--){var s=this.frontier[i],a=s.type,c=s.match,p=void 0,l=void 0;if(1==t&&(o?c.matchType(o.type)||(l=c.fillBefore(r.Fragment.from(o),!1)):a.compatibleContent(n.type)))return{sliceDepth:e,frontierDepth:i,parent:n,inject:l};if(2==t&&o&&(p=c.findWrapping(o.type)))return{sliceDepth:e,frontierDepth:i,parent:n,wrap:p};if(n&&c.matchType(n.type))break}},A.prototype.openMore=function(){var t=this.unplaced,e=t.content,n=t.openStart,o=t.openEnd,i=P(e,n);return!(!i.childCount||i.firstChild.isLeaf||(this.unplaced=new r.Slice(e,n+1,Math.max(o,i.size+n>=e.size-o?n+1:0)),0))},A.prototype.dropNode=function(){var t=this.unplaced,e=t.content,n=t.openStart,o=t.openEnd,i=P(e,n);if(i.childCount<=1&&n>0){var s=e.size-n<=n+i.size;this.unplaced=new r.Slice(_(e,n-1,1),n-1,s?n-1:o)}else this.unplaced=new r.Slice(_(e,n,1),n,o)},A.prototype.placeNodes=function(t){for(var e=t.sliceDepth,n=t.frontierDepth,o=t.parent,i=t.inject,s=t.wrap;this.depth>n;)this.closeFrontierNode();if(s)for(var a=0;a<s.length;a++)this.openFrontierNode(s[a]);var c=this.unplaced,p=o?o.content:c.content,l=c.openStart-e,u=0,h=[],d=this.frontier[n],f=d.match,m=d.type;if(i){for(var v=0;v<i.childCount;v++)h.push(i.child(v));f=f.matchFragment(i)}for(var g=p.size+e-(c.content.size-c.openEnd);u<p.childCount;){var y=p.child(u),b=f.matchType(y.type);if(!b)break;(++u>1||0==l||y.content.size)&&(f=b,h.push(z(y.mark(m.allowedMarks(y.marks)),1==u?l:0,u==p.childCount?g:-1)))}var w=u==p.childCount;w||(g=-1),w&&g<0&&o&&o.type==this.frontier[this.depth].type?this.closeFrontierNode():this.frontier[n].match=f;for(var S=0,x=p;S<g;S++){var k=x.lastChild;this.frontier.push({type:k.type,match:k.contentMatchAt(k.childCount)}),x=k.content}this.unplaced=w?0==e?r.Slice.empty:new r.Slice(_(c.content,e-1,1),e-1,g<0?c.openEnd:e-1):new r.Slice(_(c.content,e,u),c.openStart,c.openEnd),this.placed=I(this.placed,n,r.Fragment.from(h))},A.prototype.mustMoveInline=function(){if(!this.$to.parent.isTextblock)return-1;var t,e=this.frontier[this.depth];if(!e.type.isTextblock||!R(this.$to,this.$to.depth,e.type,e.match,!1)||this.$to.depth==this.depth&&(t=this.findCloseLevel(this.$to))&&t.depth==this.depth)return-1;for(var n=this.$to.depth,r=this.$to.after(n);n>1&&r==this.$to.end(--n);)++r;return r},A.prototype.findCloseLevel=function(t){t:for(var e=Math.min(this.depth,t.depth);e>=0;e--){var n=this.frontier[e],r=n.match,o=R(t,e,n.type,r,!1);if(o){for(var i=e-1;i>=0;i--){var s=this.frontier[i],a=s.match,c=R(t,i,s.type,a,!0);if(!c||c.childCount)continue t}return{depth:e,fit:o}}}},A.prototype.close=function(t){var e=this.findCloseLevel(t);if(!e)return!1;for(;this.depth>e.depth;)this.closeFrontierNode();e.fit.childCount&&(this.placed=I(this.placed,e.depth,e.fit));for(var n=e.depth+1;n<=t.depth;n++){var r=t.node(n),o=r.type.contentMatch.fillBefore(r.content,!0,t.index(n));this.openFrontierNode(r.type,r.attrs,o)}return!0},A.prototype.openFrontierNode=function(t,e,n){var o=this.frontier[this.depth];o.match=o.match.matchType(t),this.placed=I(this.placed,this.depth,r.Fragment.from(t.create(e,n))),this.frontier.push({type:t,match:t.contentMatch})},A.prototype.closeFrontierNode=function(){var t=this.frontier.pop().match.fillBefore(r.Fragment.empty,!0);t.childCount&&(this.placed=I(this.placed,this.frontier.length,t))},Object.defineProperties(A.prototype,D),l.prototype.replaceRange=function(t,e,n){if(!n.size)return this.deleteRange(t,e);var o=this.doc.resolve(t),i=this.doc.resolve(e);if(E(o,i,n))return this.step(new v(t,e,n));var s=F(o,this.doc.resolve(e));0==s[s.length-1]&&s.pop();var a=-(o.depth+1);s.unshift(a);for(var c=o.depth,p=o.pos-1;c>0;c--,p--){var l=o.node(c).type.spec;if(l.defining||l.isolating)break;s.indexOf(c)>-1?a=c:o.before(c)==p&&s.splice(1,0,-c)}for(var u=s.indexOf(a),h=[],d=n.openStart,f=n.content,m=0;;m++){var g=f.firstChild;if(h.push(g),m==n.openStart)break;f=g.content}d>0&&h[d-1].type.spec.defining&&o.node(u).type!=h[d-1].type?d-=1:d>=2&&h[d-1].isTextblock&&h[d-2].type.spec.defining&&o.node(u).type!=h[d-2].type&&(d-=2);for(var y=n.openStart;y>=0;y--){var b=(y+d+1)%(n.openStart+1),w=h[b];if(w)for(var S=0;S<s.length;S++){var x=s[(S+u)%s.length],k=!0;x<0&&(k=!1,x=-x);var M=o.node(x-1),O=o.index(x-1);if(M.canReplaceWith(O,O,w.type,w.marks))return this.replace(o.before(x),k?i.after(x):e,new r.Slice(j(n.content,0,n.openStart,b),b,n.openEnd))}}for(var C=this.steps.length,T=s.length-1;T>=0&&(this.replace(t,e,n),!(this.steps.length>C));T--){var N=s[T];T<0||(t=o.before(N),e=i.after(N))}return this},l.prototype.replaceRangeWith=function(t,e,n){if(!n.isInline&&t==e&&this.doc.resolve(t).parent.content.size){var o=function(t,e,n){var r=t.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),n))return e;if(0==r.parentOffset)for(var o=r.depth-1;o>=0;o--){var i=r.index(o);if(r.node(o).canReplaceWith(i,i,n))return r.before(o+1);if(i>0)return null}if(r.parentOffset==r.parent.content.size)for(var s=r.depth-1;s>=0;s--){var a=r.indexAfter(s);if(r.node(s).canReplaceWith(a,a,n))return r.after(s+1);if(a<r.node(s).childCount)return null}}(this.doc,t,n.type);null!=o&&(t=e=o)}return this.replaceRange(t,e,new r.Slice(r.Fragment.from(n),0,0))},l.prototype.deleteRange=function(t,e){for(var n=this.doc.resolve(t),r=this.doc.resolve(e),o=F(n,r),i=0;i<o.length;i++){var s=o[i],a=i==o.length-1;if(a&&0==s||n.node(s).type.contentMatch.validEnd)return this.delete(n.start(s),r.end(s));if(s>0&&(a||n.node(s-1).canReplace(n.index(s-1),r.indexAfter(s-1))))return this.delete(n.before(s),r.after(s))}for(var c=1;c<=n.depth&&c<=r.depth;c++)if(t-n.start(c)==n.depth-c&&e>n.end(c)&&r.end(c)-e!=r.depth-c)return this.delete(n.before(c),e);return this.delete(t,e)}},98780:(t,e,n)=>{"use strict";n.d(e,{Decoration:()=>Ne,DecorationSet:()=>_e,EditorView:()=>He});var r=n(76922),o=n(38638),i=n(21081),s=n(25108),a={};if("undefined"!=typeof navigator&&"undefined"!=typeof document){var c=/Edge\/(\d+)/.exec(navigator.userAgent),p=/MSIE \d/.test(navigator.userAgent),l=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),u=a.ie=!!(p||l||c);a.ie_version=p?document.documentMode||6:l?+l[1]:c?+c[1]:null,a.gecko=!u&&/gecko\/(\d+)/i.test(navigator.userAgent),a.gecko_version=a.gecko&&+(/Firefox\/(\d+)/.exec(navigator.userAgent)||[0,0])[1];var h=!u&&/Chrome\/(\d+)/.exec(navigator.userAgent);a.chrome=!!h,a.chrome_version=h&&+h[1],a.safari=!u&&/Apple Computer/.test(navigator.vendor),a.ios=a.safari&&(/Mobile\/\w+/.test(navigator.userAgent)||navigator.maxTouchPoints>2),a.mac=a.ios||/Mac/.test(navigator.platform),a.android=/Android \d/.test(navigator.userAgent),a.webkit="webkitFontSmoothing"in document.documentElement.style,a.webkit_version=a.webkit&&+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]}var d=function(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e},f=function(t){var e=t.assignedSlot||t.parentNode;return e&&11==e.nodeType?e.host:e},m=null,v=function(t,e,n){var r=m||(m=document.createRange());return r.setEnd(t,null==n?t.nodeValue.length:n),r.setStart(t,e||0),r},g=function(t,e,n,r){return n&&(b(t,e,n,r,-1)||b(t,e,n,r,1))},y=/^(img|br|input|textarea|hr)$/i;function b(t,e,n,r,o){for(;;){if(t==n&&e==r)return!0;if(e==(o<0?0:w(t))){var i=t.parentNode;if(1!=i.nodeType||S(t)||y.test(t.nodeName)||"false"==t.contentEditable)return!1;e=d(t)+(o<0?0:1),t=i}else{if(1!=t.nodeType)return!1;if("false"==(t=t.childNodes[e+(o<0?-1:0)]).contentEditable)return!1;e=o<0?w(t):0}}}function w(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function S(t){for(var e,n=t;n&&!(e=n.pmViewDesc);n=n.parentNode);return e&&e.node&&e.node.isBlock&&(e.dom==t||e.contentDOM==t)}var x=function(t){var e=t.isCollapsed;return e&&a.chrome&&t.rangeCount&&!t.getRangeAt(0).collapsed&&(e=!1),e};function k(t,e){var n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=t,n.key=n.code=e,n}function M(t){return{left:0,right:t.documentElement.clientWidth,top:0,bottom:t.documentElement.clientHeight}}function O(t,e){return"number"==typeof t?t:t[e]}function C(t){var e=t.getBoundingClientRect(),n=e.width/t.offsetWidth||1,r=e.height/t.offsetHeight||1;return{left:e.left,right:e.left+t.clientWidth*n,top:e.top,bottom:e.top+t.clientHeight*r}}function T(t,e,n){for(var r=t.someProp("scrollThreshold")||0,o=t.someProp("scrollMargin")||5,i=t.dom.ownerDocument,s=n||t.dom;s;s=f(s))if(1==s.nodeType){var a=s==i.body||1!=s.nodeType,c=a?M(i):C(s),p=0,l=0;if(e.top<c.top+O(r,"top")?l=-(c.top-e.top+O(o,"top")):e.bottom>c.bottom-O(r,"bottom")&&(l=e.bottom-c.bottom+O(o,"bottom")),e.left<c.left+O(r,"left")?p=-(c.left-e.left+O(o,"left")):e.right>c.right-O(r,"right")&&(p=e.right-c.right+O(o,"right")),p||l)if(a)i.defaultView.scrollBy(p,l);else{var u=s.scrollLeft,h=s.scrollTop;l&&(s.scrollTop+=l),p&&(s.scrollLeft+=p);var d=s.scrollLeft-u,m=s.scrollTop-h;e={left:e.left-d,top:e.top-m,right:e.right-d,bottom:e.bottom-m}}if(a)break}}function N(t){for(var e=[],n=t.ownerDocument;t&&(e.push({dom:t,top:t.scrollTop,left:t.scrollLeft}),t!=n);t=f(t));return e}function E(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=r.dom,i=r.top,s=r.left;o.scrollTop!=i+e&&(o.scrollTop=i+e),o.scrollLeft!=s&&(o.scrollLeft=s)}}var A=null;function D(t,e){for(var n,r,o=2e8,i=0,s=e.top,a=e.top,c=t.firstChild,p=0;c;c=c.nextSibling,p++){var l=void 0;if(1==c.nodeType)l=c.getClientRects();else{if(3!=c.nodeType)continue;l=v(c).getClientRects()}for(var u=0;u<l.length;u++){var h=l[u];if(h.top<=s&&h.bottom>=a){s=Math.max(h.bottom,s),a=Math.min(h.top,a);var d=h.left>e.left?h.left-e.left:h.right<e.left?e.left-h.right:0;if(d<o){n=c,o=d,r=d&&3==n.nodeType?{left:h.right<e.left?h.right:h.left,top:e.top}:e,1==c.nodeType&&d&&(i=p+(e.left>=(h.left+h.right)/2?1:0));continue}}!n&&(e.left>=h.right&&e.top>=h.top||e.left>=h.left&&e.top>=h.bottom)&&(i=p+1)}}return n&&3==n.nodeType?function(t,e){for(var n=t.nodeValue.length,r=document.createRange(),o=0;o<n;o++){r.setEnd(t,o+1),r.setStart(t,o);var i=z(r,1);if(i.top!=i.bottom&&_(e,i))return{node:t,offset:o+(e.left>=(i.left+i.right)/2?1:0)}}return{node:t,offset:0}}(n,r):!n||o&&1==n.nodeType?{node:t,offset:i}:D(n,r)}function _(t,e){return t.left>=e.left-1&&t.left<=e.right+1&&t.top>=e.top-1&&t.top<=e.bottom+1}function I(t,e,n){var r=t.childNodes.length;if(r&&n.top<n.bottom)for(var o=Math.max(0,Math.min(r-1,Math.floor(r*(e.top-n.top)/(n.bottom-n.top))-2)),i=o;;){var s=t.childNodes[i];if(1==s.nodeType)for(var a=s.getClientRects(),c=0;c<a.length;c++){var p=a[c];if(_(e,p))return I(s,e,p)}if((i=(i+1)%r)==o)break}return t}function P(t,e){var n,r,o,i,s=t.dom.ownerDocument;if(s.caretPositionFromPoint)try{var c=s.caretPositionFromPoint(e.left,e.top);c&&(o=(n=c).offsetNode,i=n.offset)}catch(t){}if(!o&&s.caretRangeFromPoint){var p=s.caretRangeFromPoint(e.left,e.top);p&&(o=(r=p).startContainer,i=r.startOffset)}var l,u=(t.root.elementFromPoint?t.root:s).elementFromPoint(e.left,e.top+1);if(!u||!t.dom.contains(1!=u.nodeType?u.parentNode:u)){var h=t.dom.getBoundingClientRect();if(!_(e,h))return null;if(!(u=I(t.dom,e,h)))return null}if(a.safari)for(var d=u;o&&d;d=f(d))d.draggable&&(o=i=null);if(u=function(t,e){var n=t.parentNode;return n&&/^li$/i.test(n.nodeName)&&e.left<t.getBoundingClientRect().left?n:t}(u,e),o){if(a.gecko&&1==o.nodeType&&(i=Math.min(i,o.childNodes.length))<o.childNodes.length){var m,v=o.childNodes[i];"IMG"==v.nodeName&&(m=v.getBoundingClientRect()).right<=e.left&&m.bottom>e.top&&i++}o==t.dom&&i==o.childNodes.length-1&&1==o.lastChild.nodeType&&e.top>o.lastChild.getBoundingClientRect().bottom?l=t.state.doc.content.size:0!=i&&1==o.nodeType&&"BR"==o.childNodes[i-1].nodeName||(l=function(t,e,n,r){for(var o=-1,i=e;i!=t.dom;){var s=t.docView.nearestDesc(i,!0);if(!s)return null;if(s.node.isBlock&&s.parent){var a=s.dom.getBoundingClientRect();if(a.left>r.left||a.top>r.top)o=s.posBefore;else{if(!(a.right<r.left||a.bottom<r.top))break;o=s.posAfter}}i=s.dom.parentNode}return o>-1?o:t.docView.posFromDOM(e,n)}(t,o,i,e))}null==l&&(l=function(t,e,n){var r=D(e,n),o=r.node,i=r.offset,s=-1;if(1==o.nodeType&&!o.firstChild){var a=o.getBoundingClientRect();s=a.left!=a.right&&n.left>(a.left+a.right)/2?1:-1}return t.docView.posFromDOM(o,i,s)}(t,u,e));var g=t.docView.nearestDesc(u,!0);return{pos:l,inside:g?g.posAtStart-g.border:-1}}function z(t,e){var n=t.getClientRects();return n.length?n[e<0?0:n.length-1]:t.getBoundingClientRect()}var R=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;function j(t,e,n){var r=t.docView.domFromPos(e,n<0?-1:1),o=r.node,i=r.offset,s=a.webkit||a.gecko;if(3==o.nodeType){if(!s||!R.test(o.nodeValue)&&(n<0?i:i!=o.nodeValue.length)){var c=i,p=i,l=n<0?1:-1;return n<0&&!i?(p++,l=-1):n>=0&&i==o.nodeValue.length?(c--,l=1):n<0?c--:p++,F(z(v(o,c,p),l),l<0)}var u=z(v(o,i,i),n);if(a.gecko&&i&&/\s/.test(o.nodeValue[i-1])&&i<o.nodeValue.length){var h=z(v(o,i-1,i-1),-1);if(h.top==u.top){var d=z(v(o,i,i+1),-1);if(d.top!=u.top)return F(d,d.left<h.left)}}return u}if(!t.state.doc.resolve(e).parent.inlineContent){if(i&&(n<0||i==w(o))){var f=o.childNodes[i-1];if(1==f.nodeType)return B(f.getBoundingClientRect(),!1)}if(i<w(o)){var m=o.childNodes[i];if(1==m.nodeType)return B(m.getBoundingClientRect(),!0)}return B(o.getBoundingClientRect(),n>=0)}if(i&&(n<0||i==w(o))){var g=o.childNodes[i-1],y=3==g.nodeType?v(g,w(g)-(s?0:1)):1!=g.nodeType||"BR"==g.nodeName&&g.nextSibling?null:g;if(y)return F(z(y,1),!1)}if(i<w(o)){for(var b=o.childNodes[i];b.pmViewDesc&&b.pmViewDesc.ignoreForCoords;)b=b.nextSibling;var S=b?3==b.nodeType?v(b,0,s?0:1):1==b.nodeType?b:null:null;if(S)return F(z(S,-1),!0)}return F(z(3==o.nodeType?v(o):o,-n),n>=0)}function F(t,e){if(0==t.width)return t;var n=e?t.left:t.right;return{top:t.top,bottom:t.bottom,left:n,right:n}}function B(t,e){if(0==t.height)return t;var n=e?t.top:t.bottom;return{top:n,bottom:n,left:t.left,right:t.right}}function $(t,e,n){var r=t.state,o=t.root.activeElement;r!=e&&t.updateState(e),o!=t.dom&&t.focus();try{return n()}finally{r!=e&&t.updateState(r),o!=t.dom&&o&&o.focus()}}var L=/[\u0590-\u08ac]/,V=null,H=null,J=!1;var q=function(t,e,n,r){this.parent=t,this.children=e,this.dom=n,n.pmViewDesc=this,this.contentDOM=r,this.dirty=0},W={size:{configurable:!0},border:{configurable:!0},posBefore:{configurable:!0},posAtStart:{configurable:!0},posAfter:{configurable:!0},posAtEnd:{configurable:!0},contentLost:{configurable:!0},domAtom:{configurable:!0},ignoreForCoords:{configurable:!0}};q.prototype.matchesWidget=function(){return!1},q.prototype.matchesMark=function(){return!1},q.prototype.matchesNode=function(){return!1},q.prototype.matchesHack=function(t){return!1},q.prototype.parseRule=function(){return null},q.prototype.stopEvent=function(){return!1},W.size.get=function(){for(var t=0,e=0;e<this.children.length;e++)t+=this.children[e].size;return t},W.border.get=function(){return 0},q.prototype.destroy=function(){this.parent=null,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=null);for(var t=0;t<this.children.length;t++)this.children[t].destroy()},q.prototype.posBeforeChild=function(t){for(var e=0,n=this.posAtStart;e<this.children.length;e++){var r=this.children[e];if(r==t)return n;n+=r.size}},W.posBefore.get=function(){return this.parent.posBeforeChild(this)},W.posAtStart.get=function(){return this.parent?this.parent.posBeforeChild(this)+this.border:0},W.posAfter.get=function(){return this.posBefore+this.size},W.posAtEnd.get=function(){return this.posAtStart+this.size-2*this.border},q.prototype.localPosFromDOM=function(t,e,n){if(this.contentDOM&&this.contentDOM.contains(1==t.nodeType?t:t.parentNode)){if(n<0){var r,o;if(t==this.contentDOM)r=t.childNodes[e-1];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;r=t.previousSibling}for(;r&&(!(o=r.pmViewDesc)||o.parent!=this);)r=r.previousSibling;return r?this.posBeforeChild(o)+o.size:this.posAtStart}var i,s;if(t==this.contentDOM)i=t.childNodes[e];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;i=t.nextSibling}for(;i&&(!(s=i.pmViewDesc)||s.parent!=this);)i=i.nextSibling;return i?this.posBeforeChild(s):this.posAtEnd}var a;if(t==this.dom&&this.contentDOM)a=e>d(this.contentDOM);else if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))a=2&t.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==e)for(var c=t;;c=c.parentNode){if(c==this.dom){a=!1;break}if(c.parentNode.firstChild!=c)break}if(null==a&&e==t.childNodes.length)for(var p=t;;p=p.parentNode){if(p==this.dom){a=!0;break}if(p.parentNode.lastChild!=p)break}}return(null==a?n>0:a)?this.posAtEnd:this.posAtStart},q.prototype.nearestDesc=function(t,e){for(var n=!0,r=t;r;r=r.parentNode){var o=this.getDesc(r);if(o&&(!e||o.node)){if(!n||!o.nodeDOM||(1==o.nodeDOM.nodeType?o.nodeDOM.contains(1==t.nodeType?t:t.parentNode):o.nodeDOM==t))return o;n=!1}}},q.prototype.getDesc=function(t){for(var e=t.pmViewDesc,n=e;n;n=n.parent)if(n==this)return e},q.prototype.posFromDOM=function(t,e,n){for(var r=t;r;r=r.parentNode){var o=this.getDesc(r);if(o)return o.localPosFromDOM(t,e,n)}return-1},q.prototype.descAt=function(t){for(var e=0,n=0;e<this.children.length;e++){var r=this.children[e],o=n+r.size;if(n==t&&o!=n){for(;!r.border&&r.children.length;)r=r.children[0];return r}if(t<o)return r.descAt(t-n-r.border);n=o}},q.prototype.domFromPos=function(t,e){if(!this.contentDOM)return{node:this.dom,offset:0};for(var n=0,r=0,o=0;n<this.children.length;n++){var i=this.children[n],s=o+i.size;if(s>t||i instanceof tt){r=t-o;break}o=s}if(r)return this.children[n].domFromPos(r-this.children[n].border,e);for(var a=void 0;n&&!(a=this.children[n-1]).size&&a instanceof U&&a.widget.type.side>=0;n--);if(e<=0){for(var c,p=!0;(c=n?this.children[n-1]:null)&&c.dom.parentNode!=this.contentDOM;n--,p=!1);return c&&e&&p&&!c.border&&!c.domAtom?c.domFromPos(c.size,e):{node:this.contentDOM,offset:c?d(c.dom)+1:0}}for(var l,u=!0;(l=n<this.children.length?this.children[n]:null)&&l.dom.parentNode!=this.contentDOM;n++,u=!1);return l&&u&&!l.border&&!l.domAtom?l.domFromPos(0,e):{node:this.contentDOM,offset:l?d(l.dom):this.contentDOM.childNodes.length}},q.prototype.parseRange=function(t,e,n){if(void 0===n&&(n=0),0==this.children.length)return{node:this.contentDOM,from:t,to:e,fromOffset:0,toOffset:this.contentDOM.childNodes.length};for(var r=-1,o=-1,i=n,s=0;;s++){var a=this.children[s],c=i+a.size;if(-1==r&&t<=c){var p=i+a.border;if(t>=p&&e<=c-a.border&&a.node&&a.contentDOM&&this.contentDOM.contains(a.contentDOM))return a.parseRange(t,e,p);t=i;for(var l=s;l>0;l--){var u=this.children[l-1];if(u.size&&u.dom.parentNode==this.contentDOM&&!u.emptyChildAt(1)){r=d(u.dom)+1;break}t-=u.size}-1==r&&(r=0)}if(r>-1&&(c>e||s==this.children.length-1)){e=c;for(var h=s+1;h<this.children.length;h++){var f=this.children[h];if(f.size&&f.dom.parentNode==this.contentDOM&&!f.emptyChildAt(-1)){o=d(f.dom);break}e+=f.size}-1==o&&(o=this.contentDOM.childNodes.length);break}i=c}return{node:this.contentDOM,from:t,to:e,fromOffset:r,toOffset:o}},q.prototype.emptyChildAt=function(t){if(this.border||!this.contentDOM||!this.children.length)return!1;var e=this.children[t<0?0:this.children.length-1];return 0==e.size||e.emptyChildAt(t)},q.prototype.domAfterPos=function(t){var e=this.domFromPos(t,0),n=e.node,r=e.offset;if(1!=n.nodeType||r==n.childNodes.length)throw new RangeError("No node after pos "+t);return n.childNodes[r]},q.prototype.setSelection=function(t,e,n,r){for(var o=Math.min(t,e),i=Math.max(t,e),s=0,c=0;s<this.children.length;s++){var p=this.children[s],l=c+p.size;if(o>c&&i<l)return p.setSelection(t-c-p.border,e-c-p.border,n,r);c=l}var u=this.domFromPos(t,t?-1:1),h=e==t?u:this.domFromPos(e,e?-1:1),f=n.getSelection(),m=!1;if((a.gecko||a.safari)&&t==e){var v=u.node,y=u.offset;if(3==v.nodeType){if((m=y&&"\n"==v.nodeValue[y-1])&&y==v.nodeValue.length)for(var b=v,w=void 0;b;b=b.parentNode){if(w=b.nextSibling){"BR"==w.nodeName&&(u=h={node:w.parentNode,offset:d(w)+1});break}var S=b.pmViewDesc;if(S&&S.node&&S.node.isBlock)break}}else{var x=v.childNodes[y-1];m=x&&("BR"==x.nodeName||"false"==x.contentEditable)}}if(a.gecko&&f.focusNode&&f.focusNode!=h.node&&1==f.focusNode.nodeType){var k=f.focusNode.childNodes[f.focusOffset];k&&"false"==k.contentEditable&&(r=!0)}if(r||m&&a.safari||!g(u.node,u.offset,f.anchorNode,f.anchorOffset)||!g(h.node,h.offset,f.focusNode,f.focusOffset)){var M=!1;if((f.extend||t==e)&&!m){f.collapse(u.node,u.offset);try{t!=e&&f.extend(h.node,h.offset),M=!0}catch(t){if(!(t instanceof DOMException))throw t}}if(!M){if(t>e){var O=u;u=h,h=O}var C=document.createRange();C.setEnd(h.node,h.offset),C.setStart(u.node,u.offset),f.removeAllRanges(),f.addRange(C)}}},q.prototype.ignoreMutation=function(t){return!this.contentDOM&&"selection"!=t.type},W.contentLost.get=function(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)},q.prototype.markDirty=function(t,e){for(var n=0,r=0;r<this.children.length;r++){var o=this.children[r],i=n+o.size;if(n==i?t<=i&&e>=n:t<i&&e>n){var s=n+o.border,a=i-o.border;if(t>=s&&e<=a)return this.dirty=t==n||e==i?2:1,void(t!=s||e!=a||!o.contentLost&&o.dom.parentNode==this.contentDOM?o.markDirty(t-s,e-s):o.dirty=3);o.dirty=o.dom==o.contentDOM&&o.dom.parentNode==this.contentDOM?2:3}n=i}this.dirty=2},q.prototype.markParentsDirty=function(){for(var t=1,e=this.parent;e;e=e.parent,t++){var n=1==t?2:1;e.dirty<n&&(e.dirty=n)}},W.domAtom.get=function(){return!1},W.ignoreForCoords.get=function(){return!1},Object.defineProperties(q.prototype,W);var K=[],U=function(t){function e(e,n,r,o){var i,s=n.type.toDOM;if("function"==typeof s&&(s=s(r,(function(){return i?i.parent?i.parent.posBeforeChild(i):void 0:o}))),!n.type.spec.raw){if(1!=s.nodeType){var a=document.createElement("span");a.appendChild(s),s=a}s.contentEditable=!1,s.classList.add("ProseMirror-widget")}t.call(this,e,K,s,null),this.widget=n,i=this}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={domAtom:{configurable:!0}};return e.prototype.matchesWidget=function(t){return 0==this.dirty&&t.type.eq(this.widget.type)},e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.stopEvent=function(t){var e=this.widget.spec.stopEvent;return!!e&&e(t)},e.prototype.ignoreMutation=function(t){return"selection"!=t.type||this.widget.spec.ignoreSelection},n.domAtom.get=function(){return!0},Object.defineProperties(e.prototype,n),e}(q),G=function(t){function e(e,n,r,o){t.call(this,e,K,n,null),this.textDOM=r,this.text=o}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0}};return n.size.get=function(){return this.text.length},e.prototype.localPosFromDOM=function(t,e){return t!=this.textDOM?this.posAtStart+(e?this.size:0):this.posAtStart+e},e.prototype.domFromPos=function(t){return{node:this.textDOM,offset:t}},e.prototype.ignoreMutation=function(t){return"characterData"===t.type&&t.target.nodeValue==t.oldValue},Object.defineProperties(e.prototype,n),e}(q),Z=function(t){function e(e,n,r,o){t.call(this,e,[],r,o),this.mark=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.create=function(t,n,r,i){var s=i.nodeViews[n.type.name],a=s&&s(n,i,r);return a&&a.dom||(a=o.DOMSerializer.renderSpec(document,n.type.spec.toDOM(n,r))),new e(t,n,a.dom,a.contentDOM||a.dom)},e.prototype.parseRule=function(){return{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM}},e.prototype.matchesMark=function(t){return 3!=this.dirty&&this.mark.eq(t)},e.prototype.markDirty=function(e,n){if(t.prototype.markDirty.call(this,e,n),0!=this.dirty){for(var r=this.parent;!r.node;)r=r.parent;r.dirty<this.dirty&&(r.dirty=this.dirty),this.dirty=0}},e.prototype.slice=function(t,n,r){var o=e.create(this.parent,this.mark,!0,r),i=this.children,s=this.size;n<s&&(i=dt(i,n,s,r)),t>0&&(i=dt(i,0,t,r));for(var a=0;a<i.length;a++)i[a].parent=o;return o.children=i,o},e}(q),X=function(t){function e(e,n,r,o,i,s,a,c,p){t.call(this,e,n.isLeaf?K:[],i,s),this.nodeDOM=a,this.node=n,this.outerDeco=r,this.innerDeco=o,s&&this.updateChildren(c,p)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0},border:{configurable:!0},domAtom:{configurable:!0}};return e.create=function(t,n,r,i,s,a){var c,p,l=s.nodeViews[n.type.name],u=l&&l(n,s,(function(){return p?p.parent?p.parent.posBeforeChild(p):void 0:a}),r,i),h=u&&u.dom,d=u&&u.contentDOM;if(n.isText)if(h){if(3!=h.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else h=document.createTextNode(n.text);else h||(h=(c=o.DOMSerializer.renderSpec(document,n.type.spec.toDOM(n))).dom,d=c.contentDOM);d||n.isText||"BR"==h.nodeName||(h.hasAttribute("contenteditable")||(h.contentEditable=!1),n.type.spec.draggable&&(h.draggable=!0));var f=h;return h=ct(h,r,n),u?p=new et(t,n,r,i,h,d,f,u,s,a+1):n.isText?new Q(t,n,r,i,h,f,s):new e(t,n,r,i,h,d,f,s,a+1)},e.prototype.parseRule=function(){var t=this;if(this.node.type.spec.reparseInView)return null;var e={node:this.node.type.name,attrs:this.node.attrs};return this.node.type.spec.code&&(e.preserveWhitespace="full"),this.contentDOM&&!this.contentLost?e.contentElement=this.contentDOM:e.getContent=function(){return t.contentDOM?o.Fragment.empty:t.node.content},e},e.prototype.matchesNode=function(t,e,n){return 0==this.dirty&&t.eq(this.node)&&pt(e,this.outerDeco)&&n.eq(this.innerDeco)},n.size.get=function(){return this.node.nodeSize},n.border.get=function(){return this.node.isLeaf?0:1},e.prototype.updateChildren=function(t,e){var n=this,r=this.node.inlineContent,i=e,s=t.composing&&this.localCompositionInfo(t,e),c=s&&s.pos>-1?s:null,p=s&&s.pos<0,l=new ut(this,c&&c.node);!function(t,e,n,r){var o=e.locals(t),i=0;if(0!=o.length)for(var s=0,a=[],c=null,p=0;;){if(s<o.length&&o[s].to==i){for(var l=o[s++],u=void 0;s<o.length&&o[s].to==i;)(u||(u=[l])).push(o[s++]);if(u){u.sort(ht);for(var h=0;h<u.length;h++)n(u[h],p,!!c)}else n(l,p,!!c)}var d=void 0,f=void 0;if(c)f=-1,d=c,c=null;else{if(!(p<t.childCount))break;f=p,d=t.child(p++)}for(var m=0;m<a.length;m++)a[m].to<=i&&a.splice(m--,1);for(;s<o.length&&o[s].from<=i&&o[s].to>i;)a.push(o[s++]);var v=i+d.nodeSize;if(d.isText){var g=v;s<o.length&&o[s].from<g&&(g=o[s].from);for(var y=0;y<a.length;y++)a[y].to<g&&(g=a[y].to);g<v&&(c=d.cut(g-i),d=d.cut(0,g-i),v=g,f=-1)}r(d,a.length?d.isInline&&!d.isLeaf?a.filter((function(t){return!t.inline})):a.slice():K,e.forChild(i,d),f),i=v}else for(var b=0;b<t.childCount;b++){var w=t.child(b);r(w,o,e.forChild(i,w),b),i+=w.nodeSize}}(this.node,this.innerDeco,(function(e,s,a){e.spec.marks?l.syncToMarks(e.spec.marks,r,t):e.type.side>=0&&!a&&l.syncToMarks(s==n.node.childCount?o.Mark.none:n.node.child(s).marks,r,t),l.placeWidget(e,t,i)}),(function(e,n,o,a){var c;l.syncToMarks(e.marks,r,t),l.findNodeMatch(e,n,o,a)||p&&t.state.selection.from>i&&t.state.selection.to<i+e.nodeSize&&(c=l.findIndexWithChild(s.node))>-1&&l.updateNodeAt(e,n,o,c,t)||l.updateNextNode(e,n,o,t,a)||l.addNode(e,n,o,t,i),i+=e.nodeSize})),l.syncToMarks(K,r,t),this.node.isTextblock&&l.addTextblockHacks(),l.destroyRest(),(l.changed||2==this.dirty)&&(c&&this.protectLocalComposition(t,c),nt(this.contentDOM,this.children,t),a.ios&&function(t){if("UL"==t.nodeName||"OL"==t.nodeName){var e=t.style.cssText;t.style.cssText=e+"; list-style: square !important",window.getComputedStyle(t).listStyle,t.style.cssText=e}}(this.dom))},e.prototype.localCompositionInfo=function(t,e){var n=t.state.selection,o=n.from,i=n.to;if(!(!(t.state.selection instanceof r.TextSelection)||o<e||i>e+this.node.content.size)){var s=t.root.getSelection(),a=function(t,e){for(;;){if(3==t.nodeType)return t;if(1==t.nodeType&&e>0){if(t.childNodes.length>e&&3==t.childNodes[e].nodeType)return t.childNodes[e];e=w(t=t.childNodes[e-1])}else{if(!(1==t.nodeType&&e<t.childNodes.length))return null;t=t.childNodes[e],e=0}}}(s.focusNode,s.focusOffset);if(a&&this.dom.contains(a.parentNode)){if(this.node.inlineContent){var c=a.nodeValue,p=function(t,e,n,r){for(var o=0,i=0;o<t.childCount&&i<=r;){var s=t.child(o++),a=i;if(i+=s.nodeSize,s.isText){for(var c=s.text;o<t.childCount;){var p=t.child(o++);if(i+=p.nodeSize,!p.isText)break;c+=p.text}if(i>=n){var l=c.lastIndexOf(e,r-a);if(l>=0&&l+e.length+a>=n)return a+l}}}return-1}(this.node.content,c,o-e,i-e);return p<0?null:{node:a,pos:p,text:c}}return{node:a,pos:-1}}}},e.prototype.protectLocalComposition=function(t,e){var n=e.node,r=e.pos,o=e.text;if(!this.getDesc(n)){for(var i=n;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=null)}var s=new G(this,i,n,o);t.compositionNodes.push(s),this.children=dt(this.children,r,r+o.length,t,s)}},e.prototype.update=function(t,e,n,r){return!(3==this.dirty||!t.sameMarkup(this.node)||(this.updateInner(t,e,n,r),0))},e.prototype.updateInner=function(t,e,n,r){this.updateOuterDeco(e),this.node=t,this.innerDeco=n,this.contentDOM&&this.updateChildren(r,this.posAtStart),this.dirty=0},e.prototype.updateOuterDeco=function(t){if(!pt(t,this.outerDeco)){var e=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=st(this.dom,this.nodeDOM,it(this.outerDeco,this.node,e),it(t,this.node,e)),this.dom!=n&&(n.pmViewDesc=null,this.dom.pmViewDesc=this),this.outerDeco=t}},e.prototype.selectNode=function(){this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)},e.prototype.deselectNode=function(){this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||this.dom.removeAttribute("draggable")},n.domAtom.get=function(){return this.node.isAtom},Object.defineProperties(e.prototype,n),e}(q);function Y(t,e,n,r,o){return ct(r,e,t),new X(null,t,e,n,r,r,r,o,0)}var Q=function(t){function e(e,n,r,o,i,s,a){t.call(this,e,n,r,o,i,null,s,a)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={domAtom:{configurable:!0}};return e.prototype.parseRule=function(){for(var t=this.nodeDOM.parentNode;t&&t!=this.dom&&!t.pmIsDeco;)t=t.parentNode;return{skip:t||!0}},e.prototype.update=function(t,e,n,r){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!t.sameMarkup(this.node)||(this.updateOuterDeco(e),0==this.dirty&&t.text==this.node.text||t.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=t.text,r.trackWrites==this.nodeDOM&&(r.trackWrites=null)),this.node=t,this.dirty=0,0))},e.prototype.inParent=function(){for(var t=this.parent.contentDOM,e=this.nodeDOM;e;e=e.parentNode)if(e==t)return!0;return!1},e.prototype.domFromPos=function(t){return{node:this.nodeDOM,offset:t}},e.prototype.localPosFromDOM=function(e,n,r){return e==this.nodeDOM?this.posAtStart+Math.min(n,this.node.text.length):t.prototype.localPosFromDOM.call(this,e,n,r)},e.prototype.ignoreMutation=function(t){return"characterData"!=t.type&&"selection"!=t.type},e.prototype.slice=function(t,n,r){var o=this.node.cut(t,n),i=document.createTextNode(o.text);return new e(this.parent,o,this.outerDeco,this.innerDeco,i,i,r)},e.prototype.markDirty=function(e,n){t.prototype.markDirty.call(this,e,n),this.dom==this.nodeDOM||0!=e&&n!=this.nodeDOM.nodeValue.length||(this.dirty=3)},n.domAtom.get=function(){return!1},Object.defineProperties(e.prototype,n),e}(X),tt=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={domAtom:{configurable:!0},ignoreForCoords:{configurable:!0}};return e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.matchesHack=function(t){return 0==this.dirty&&this.dom.nodeName==t},n.domAtom.get=function(){return!0},n.ignoreForCoords.get=function(){return"IMG"==this.dom.nodeName},Object.defineProperties(e.prototype,n),e}(q),et=function(t){function e(e,n,r,o,i,s,a,c,p,l){t.call(this,e,n,r,o,i,s,a,p,l),this.spec=c}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.update=function(e,n,r,o){if(3==this.dirty)return!1;if(this.spec.update){var i=this.spec.update(e,n,r);return i&&this.updateInner(e,n,r,o),i}return!(!this.contentDOM&&!e.isLeaf)&&t.prototype.update.call(this,e,n,r,o)},e.prototype.selectNode=function(){this.spec.selectNode?this.spec.selectNode():t.prototype.selectNode.call(this)},e.prototype.deselectNode=function(){this.spec.deselectNode?this.spec.deselectNode():t.prototype.deselectNode.call(this)},e.prototype.setSelection=function(e,n,r,o){this.spec.setSelection?this.spec.setSelection(e,n,r):t.prototype.setSelection.call(this,e,n,r,o)},e.prototype.destroy=function(){this.spec.destroy&&this.spec.destroy(),t.prototype.destroy.call(this)},e.prototype.stopEvent=function(t){return!!this.spec.stopEvent&&this.spec.stopEvent(t)},e.prototype.ignoreMutation=function(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):t.prototype.ignoreMutation.call(this,e)},e}(X);function nt(t,e,n){for(var r=t.firstChild,o=!1,i=0;i<e.length;i++){var s=e[i],a=s.dom;if(a.parentNode==t){for(;a!=r;)r=lt(r),o=!0;r=r.nextSibling}else o=!0,t.insertBefore(a,r);if(s instanceof Z){var c=r?r.previousSibling:t.lastChild;nt(s.contentDOM,s.children,n),r=c?c.nextSibling:t.firstChild}}for(;r;)r=lt(r),o=!0;o&&n.trackWrites==t&&(n.trackWrites=null)}function rt(t){t&&(this.nodeName=t)}rt.prototype=Object.create(null);var ot=[new rt];function it(t,e,n){if(0==t.length)return ot;for(var r=n?ot[0]:new rt,o=[r],i=0;i<t.length;i++){var s=t[i].type.attrs;if(s)for(var a in s.nodeName&&o.push(r=new rt(s.nodeName)),s){var c=s[a];null!=c&&(n&&1==o.length&&o.push(r=new rt(e.isInline?"span":"div")),"class"==a?r.class=(r.class?r.class+" ":"")+c:"style"==a?r.style=(r.style?r.style+";":"")+c:"nodeName"!=a&&(r[a]=c))}}return o}function st(t,e,n,r){if(n==ot&&r==ot)return e;for(var o=e,i=0;i<r.length;i++){var s=r[i],a=n[i];if(i){var c=void 0;a&&a.nodeName==s.nodeName&&o!=t&&(c=o.parentNode)&&c.tagName.toLowerCase()==s.nodeName||((c=document.createElement(s.nodeName)).pmIsDeco=!0,c.appendChild(o),a=ot[0]),o=c}at(o,a||ot[0],s)}return o}function at(t,e,n){for(var r in e)"class"==r||"style"==r||"nodeName"==r||r in n||t.removeAttribute(r);for(var o in n)"class"!=o&&"style"!=o&&"nodeName"!=o&&n[o]!=e[o]&&t.setAttribute(o,n[o]);if(e.class!=n.class){for(var i=e.class?e.class.split(" ").filter(Boolean):K,s=n.class?n.class.split(" ").filter(Boolean):K,a=0;a<i.length;a++)-1==s.indexOf(i[a])&&t.classList.remove(i[a]);for(var c=0;c<s.length;c++)-1==i.indexOf(s[c])&&t.classList.add(s[c])}if(e.style!=n.style){if(e.style)for(var p,l=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;p=l.exec(e.style);)t.style.removeProperty(p[1]);n.style&&(t.style.cssText+=n.style)}}function ct(t,e,n){return st(t,t,ot,it(e,n,1!=t.nodeType))}function pt(t,e){if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].type.eq(e[n].type))return!1;return!0}function lt(t){var e=t.nextSibling;return t.parentNode.removeChild(t),e}var ut=function(t,e){this.top=t,this.lock=e,this.index=0,this.stack=[],this.changed=!1,this.preMatch=function(t,e){for(var n=t.childCount,r=e.length,o=new Map;n>0&&r>0;r--){var i=e[r-1],s=i.node;if(s){if(s!=t.child(n-1))break;--n,o.set(i,n)}}return{index:n,matched:o}}(t.node.content,t.children)};function ht(t,e){return t.type.side-e.type.side}function dt(t,e,n,r,o){for(var i=[],s=0,a=0;s<t.length;s++){var c=t[s],p=a,l=a+=c.size;p>=n||l<=e?i.push(c):(p<e&&i.push(c.slice(0,e-p,r)),o&&(i.push(o),o=null),l>n&&i.push(c.slice(n-p,c.size,r)))}return i}function ft(t,e){var n=t.root.getSelection(),o=t.state.doc;if(!n.focusNode)return null;var i=t.docView.nearestDesc(n.focusNode),s=i&&0==i.size,a=t.docView.posFromDOM(n.focusNode,n.focusOffset);if(a<0)return null;var c,p,l=o.resolve(a);if(x(n)){for(c=l;i&&!i.node;)i=i.parent;if(i&&i.node.isAtom&&r.NodeSelection.isSelectable(i.node)&&i.parent&&(!i.node.isInline||!function(t,e,n){for(var r=0==e,o=e==w(t);r||o;){if(t==n)return!0;var i=d(t);if(!(t=t.parentNode))return!1;r=r&&0==i,o=o&&i==w(t)}}(n.focusNode,n.focusOffset,i.dom))){var u=i.posBefore;p=new r.NodeSelection(a==u?l:o.resolve(u))}}else{var h=t.docView.posFromDOM(n.anchorNode,n.anchorOffset);if(h<0)return null;c=o.resolve(h)}return p||(p=kt(t,c,l,"pointer"==e||t.state.selection.head<l.pos&&!s?1:-1)),p}function mt(t){return t.editable?t.hasFocus():Mt(t)&&document.activeElement&&document.activeElement.contains(t.dom)}function vt(t,e){var n=t.state.selection;if(St(t,n),mt(t)){if(!e&&t.mouseDown&&t.mouseDown.allowDefault)return t.mouseDown.delayedSelectionSync=!0,void t.domObserver.setCurSelection();if(t.domObserver.disconnectSelection(),t.cursorWrapper)!function(t){var e=t.root.getSelection(),n=document.createRange(),r=t.cursorWrapper.dom,o="IMG"==r.nodeName;o?n.setEnd(r.parentNode,d(r)+1):n.setEnd(r,0),n.collapse(!1),e.removeAllRanges(),e.addRange(n),!o&&!t.state.selection.visible&&a.ie&&a.ie_version<=11&&(r.disabled=!0,r.disabled=!1)}(t);else{var o,i,s=n.anchor,c=n.head;!gt||n instanceof r.TextSelection||(n.$from.parent.inlineContent||(o=yt(t,n.from)),n.empty||n.$from.parent.inlineContent||(i=yt(t,n.to))),t.docView.setSelection(s,c,t.root,e),gt&&(o&&wt(o),i&&wt(i)),n.visible?t.dom.classList.remove("ProseMirror-hideselection"):(t.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(t){var e=t.dom.ownerDocument;e.removeEventListener("selectionchange",t.hideSelectionGuard);var n=t.root.getSelection(),r=n.anchorNode,o=n.anchorOffset;e.addEventListener("selectionchange",t.hideSelectionGuard=function(){n.anchorNode==r&&n.anchorOffset==o||(e.removeEventListener("selectionchange",t.hideSelectionGuard),setTimeout((function(){mt(t)&&!t.state.selection.visible||t.dom.classList.remove("ProseMirror-hideselection")}),20))})}(t))}t.domObserver.setCurSelection(),t.domObserver.connectSelection()}}ut.prototype.destroyBetween=function(t,e){if(t!=e){for(var n=t;n<e;n++)this.top.children[n].destroy();this.top.children.splice(t,e-t),this.changed=!0}},ut.prototype.destroyRest=function(){this.destroyBetween(this.index,this.top.children.length)},ut.prototype.syncToMarks=function(t,e,n){for(var r=0,o=this.stack.length>>1,i=Math.min(o,t.length);r<i&&(r==o-1?this.top:this.stack[r+1<<1]).matchesMark(t[r])&&!1!==t[r].type.spec.spanning;)r++;for(;r<o;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),o--;for(;o<t.length;){this.stack.push(this.top,this.index+1);for(var s=-1,a=this.index;a<Math.min(this.index+3,this.top.children.length);a++)if(this.top.children[a].matchesMark(t[o])){s=a;break}if(s>-1)s>this.index&&(this.changed=!0,this.destroyBetween(this.index,s)),this.top=this.top.children[this.index];else{var c=Z.create(this.top,t[o],e,n);this.top.children.splice(this.index,0,c),this.top=c,this.changed=!0}this.index=0,o++}},ut.prototype.findNodeMatch=function(t,e,n,r){var o=this.top.children,i=-1;if(r>=this.preMatch.index){for(var s=this.index;s<o.length;s++)if(o[s].matchesNode(t,e,n)){i=s;break}}else for(var a=this.index,c=Math.min(o.length,a+1);a<c;a++){var p=o[a];if(p.matchesNode(t,e,n)&&!this.preMatch.matched.has(p)){i=a;break}}return!(i<0||(this.destroyBetween(this.index,i),this.index++,0))},ut.prototype.updateNodeAt=function(t,e,n,r,o){return!!this.top.children[r].update(t,e,n,o)&&(this.destroyBetween(this.index,r),this.index=r+1,!0)},ut.prototype.findIndexWithChild=function(t){for(;;){var e=t.parentNode;if(!e)return-1;if(e==this.top.contentDOM){var n=t.pmViewDesc;if(n)for(var r=this.index;r<this.top.children.length;r++)if(this.top.children[r]==n)return r;return-1}t=e}},ut.prototype.updateNextNode=function(t,e,n,r,o){for(var i=this.index;i<this.top.children.length;i++){var s=this.top.children[i];if(s instanceof X){var a=this.preMatch.matched.get(s);if(null!=a&&a!=o)return!1;var c=s.dom;if((!this.lock||!(c==this.lock||1==c.nodeType&&c.contains(this.lock.parentNode))||t.isText&&s.node&&s.node.isText&&s.nodeDOM.nodeValue==t.text&&3!=s.dirty&&pt(e,s.outerDeco))&&s.update(t,e,n,r))return this.destroyBetween(this.index,i),s.dom!=c&&(this.changed=!0),this.index++,!0;break}}return!1},ut.prototype.addNode=function(t,e,n,r,o){this.top.children.splice(this.index++,0,X.create(this.top,t,e,n,r,o)),this.changed=!0},ut.prototype.placeWidget=function(t,e,n){var r=this.index<this.top.children.length?this.top.children[this.index]:null;if(!r||!r.matchesWidget(t)||t!=r.widget&&r.widget.type.toDOM.parentNode){var o=new U(this.top,t,e,n);this.top.children.splice(this.index++,0,o),this.changed=!0}else this.index++},ut.prototype.addTextblockHacks=function(){for(var t=this.top.children[this.index-1];t instanceof Z;)t=t.children[t.children.length-1];t&&t instanceof Q&&!/\n$/.test(t.node.text)||((a.safari||a.chrome)&&t&&"false"==t.dom.contentEditable&&this.addHackNode("IMG"),this.addHackNode("BR"))},ut.prototype.addHackNode=function(t){if(this.index<this.top.children.length&&this.top.children[this.index].matchesHack(t))this.index++;else{var e=document.createElement(t);"IMG"==t&&(e.className="ProseMirror-separator"),"BR"==t&&(e.className="ProseMirror-trailingBreak"),this.top.children.splice(this.index++,0,new tt(this.top,K,e,null)),this.changed=!0}};var gt=a.safari||a.chrome&&a.chrome_version<63;function yt(t,e){var n=t.docView.domFromPos(e,0),r=n.node,o=n.offset,i=o<r.childNodes.length?r.childNodes[o]:null,s=o?r.childNodes[o-1]:null;if(a.safari&&i&&"false"==i.contentEditable)return bt(i);if(!(i&&"false"!=i.contentEditable||s&&"false"!=s.contentEditable)){if(i)return bt(i);if(s)return bt(s)}}function bt(t){return t.contentEditable="true",a.safari&&t.draggable&&(t.draggable=!1,t.wasDraggable=!0),t}function wt(t){t.contentEditable="false",t.wasDraggable&&(t.draggable=!0,t.wasDraggable=null)}function St(t,e){if(e instanceof r.NodeSelection){var n=t.docView.descAt(e.from);n!=t.lastSelectedViewDesc&&(xt(t),n&&n.selectNode(),t.lastSelectedViewDesc=n)}else xt(t)}function xt(t){t.lastSelectedViewDesc&&(t.lastSelectedViewDesc.parent&&t.lastSelectedViewDesc.deselectNode(),t.lastSelectedViewDesc=null)}function kt(t,e,n,o){return t.someProp("createSelectionBetween",(function(r){return r(t,e,n)}))||r.TextSelection.between(e,n,o)}function Mt(t){var e=t.root.getSelection();if(!e.anchorNode)return!1;try{return t.dom.contains(3==e.anchorNode.nodeType?e.anchorNode.parentNode:e.anchorNode)&&(t.editable||t.dom.contains(3==e.focusNode.nodeType?e.focusNode.parentNode:e.focusNode))}catch(t){return!1}}function Ot(t,e){var n=t.selection,o=n.$anchor,i=n.$head,s=e>0?o.max(i):o.min(i),a=s.parent.inlineContent?s.depth?t.doc.resolve(e>0?s.after():s.before()):null:s;return a&&r.Selection.findFrom(a,e)}function Ct(t,e){return t.dispatch(t.state.tr.setSelection(e).scrollIntoView()),!0}function Tt(t,e,n){var o=t.state.selection;if(!(o instanceof r.TextSelection)){if(o instanceof r.NodeSelection&&o.node.isInline)return Ct(t,new r.TextSelection(e>0?o.$to:o.$from));var i=Ot(t.state,e);return!!i&&Ct(t,i)}if(!o.empty||n.indexOf("s")>-1)return!1;if(t.endOfTextblock(e>0?"right":"left")){var s=Ot(t.state,e);return!!(s&&s instanceof r.NodeSelection)&&Ct(t,s)}if(!(a.mac&&n.indexOf("m")>-1)){var c,p=o.$head,l=p.textOffset?null:e<0?p.nodeBefore:p.nodeAfter;if(!l||l.isText)return!1;var u=e<0?p.pos-l.nodeSize:p.pos;return!!(l.isAtom||(c=t.docView.descAt(u))&&!c.contentDOM)&&(r.NodeSelection.isSelectable(l)?Ct(t,new r.NodeSelection(e<0?t.state.doc.resolve(p.pos-l.nodeSize):p)):!!a.webkit&&Ct(t,new r.TextSelection(t.state.doc.resolve(e<0?u:u+l.nodeSize))))}}function Nt(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Et(t){var e=t.pmViewDesc;return e&&0==e.size&&(t.nextSibling||"BR"!=t.nodeName)}function At(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){var o,i,s=!1;for(a.gecko&&1==n.nodeType&&r<Nt(n)&&Et(n.childNodes[r])&&(s=!0);;)if(r>0){if(1!=n.nodeType)break;var c=n.childNodes[r-1];if(Et(c))o=n,i=--r;else{if(3!=c.nodeType)break;r=(n=c).nodeValue.length}}else{if(_t(n))break;for(var p=n.previousSibling;p&&Et(p);)o=n.parentNode,i=d(p),p=p.previousSibling;if(p)r=Nt(n=p);else{if((n=n.parentNode)==t.dom)break;r=0}}s?It(t,e,n,r):o&&It(t,e,o,i)}}function Dt(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){for(var o,i,s=Nt(n);;)if(r<s){if(1!=n.nodeType)break;if(!Et(n.childNodes[r]))break;o=n,i=++r}else{if(_t(n))break;for(var a=n.nextSibling;a&&Et(a);)o=a.parentNode,i=d(a)+1,a=a.nextSibling;if(a)r=0,s=Nt(n=a);else{if((n=n.parentNode)==t.dom)break;r=s=0}}o&&It(t,e,o,i)}}function _t(t){var e=t.pmViewDesc;return e&&e.node&&e.node.isBlock}function It(t,e,n,r){if(x(e)){var o=document.createRange();o.setEnd(n,r),o.setStart(n,r),e.removeAllRanges(),e.addRange(o)}else e.extend&&e.extend(n,r);t.domObserver.setCurSelection();var i=t.state;setTimeout((function(){t.state==i&&vt(t)}),50)}function Pt(t,e,n){var o=t.state.selection;if(o instanceof r.TextSelection&&!o.empty||n.indexOf("s")>-1)return!1;if(a.mac&&n.indexOf("m")>-1)return!1;var i=o.$from,s=o.$to;if(!i.parent.inlineContent||t.endOfTextblock(e<0?"up":"down")){var c=Ot(t.state,e);if(c&&c instanceof r.NodeSelection)return Ct(t,c)}if(!i.parent.inlineContent){var p=e<0?i:s,l=o instanceof r.AllSelection?r.Selection.near(p,e):r.Selection.findFrom(p,e);return!!l&&Ct(t,l)}return!1}function zt(t,e){if(!(t.state.selection instanceof r.TextSelection))return!0;var n=t.state.selection,o=n.$head,i=n.$anchor,s=n.empty;if(!o.sameParent(i))return!0;if(!s)return!1;if(t.endOfTextblock(e>0?"forward":"backward"))return!0;var a=!o.textOffset&&(e<0?o.nodeBefore:o.nodeAfter);if(a&&!a.isText){var c=t.state.tr;return e<0?c.delete(o.pos-a.nodeSize,o.pos):c.delete(o.pos,o.pos+a.nodeSize),t.dispatch(c),!0}return!1}function Rt(t,e,n){t.domObserver.stop(),e.contentEditable=n,t.domObserver.start()}function jt(t){var e=t.pmViewDesc;if(e)return e.parseRule();if("BR"==t.nodeName&&t.parentNode){if(a.safari&&/^(ul|ol)$/i.test(t.parentNode.nodeName)){var n=document.createElement("div");return n.appendChild(document.createElement("li")),{skip:n}}if(t.parentNode.lastChild==t||a.safari&&/^(tr|table)$/i.test(t.parentNode.nodeName))return{ignore:!0}}else if("IMG"==t.nodeName&&t.getAttribute("mark-placeholder"))return{ignore:!0}}function Ft(t,e,n){return Math.max(n.anchor,n.head)>e.content.size?null:kt(t,e.resolve(n.anchor),e.resolve(n.head))}function Bt(t,e,n){for(var r=t.depth,o=e?t.end():t.pos;r>0&&(e||t.indexAfter(r)==t.node(r).childCount);)r--,o++,e=!1;if(n)for(var i=t.node(r).maybeChild(t.indexAfter(r));i&&!i.isLeaf;)i=i.firstChild,o++;return o}function $t(t,e){for(var n=[],r=e.content,i=e.openStart,s=e.openEnd;i>1&&s>1&&1==r.childCount&&1==r.firstChild.childCount;){i--,s--;var a=r.firstChild;n.push(a.type.name,a.attrs!=a.type.defaultAttrs?a.attrs:null),r=a.content}var c=t.someProp("clipboardSerializer")||o.DOMSerializer.fromSchema(t.state.schema),p=Gt(),l=p.createElement("div");l.appendChild(c.serializeFragment(r,{document:p}));for(var u,h=l.firstChild;h&&1==h.nodeType&&(u=Kt[h.nodeName.toLowerCase()]);){for(var d=u.length-1;d>=0;d--){for(var f=p.createElement(u[d]);l.firstChild;)f.appendChild(l.firstChild);l.appendChild(f),"tbody"!=u[d]&&(i++,s++)}h=l.firstChild}return h&&1==h.nodeType&&h.setAttribute("data-pm-slice",i+" "+s+" "+JSON.stringify(n)),{dom:l,text:t.someProp("clipboardTextSerializer",(function(t){return t(e)}))||e.content.textBetween(0,e.content.size,"\n\n")}}function Lt(t,e,n,r,i){var s,c,p=i.parent.type.spec.code;if(!n&&!e)return null;var l=e&&(r||p||!n);if(l){if(t.someProp("transformPastedText",(function(t){e=t(e,p||r)})),p)return e?new o.Slice(o.Fragment.from(t.state.schema.text(e.replace(/\r\n?/g,"\n"))),0,0):o.Slice.empty;var u=t.someProp("clipboardTextParser",(function(t){return t(e,i,r)}));if(u)c=u;else{var h=i.marks(),d=t.state.schema,f=o.DOMSerializer.fromSchema(d);s=document.createElement("div"),e.split(/(?:\r\n?|\n)+/).forEach((function(t){var e=s.appendChild(document.createElement("p"));t&&e.appendChild(f.serializeNode(d.text(t,h)))}))}}else t.someProp("transformPastedHTML",(function(t){n=t(n)})),s=function(t){var e=/^(\s*<meta [^>]*>)*/.exec(t);e&&(t=t.slice(e[0].length));var n,r=Gt().createElement("div"),o=/<([a-z][^>\s]+)/i.exec(t);if((n=o&&Kt[o[1].toLowerCase()])&&(t=n.map((function(t){return"<"+t+">"})).join("")+t+n.map((function(t){return"</"+t+">"})).reverse().join("")),r.innerHTML=t,n)for(var i=0;i<n.length;i++)r=r.querySelector(n[i])||r;return r}(n),a.webkit&&function(t){for(var e=t.querySelectorAll(a.chrome?"span:not([class]):not([style])":"span.Apple-converted-space"),n=0;n<e.length;n++){var r=e[n];1==r.childNodes.length&&" "==r.textContent&&r.parentNode&&r.parentNode.replaceChild(t.ownerDocument.createTextNode(" "),r)}}(s);var m=s&&s.querySelector("[data-pm-slice]"),v=m&&/^(\d+) (\d+) (.*)/.exec(m.getAttribute("data-pm-slice"));if(!c){var g=t.someProp("clipboardParser")||t.someProp("domParser")||o.DOMParser.fromSchema(t.state.schema);c=g.parseSlice(s,{preserveWhitespace:!(!l&&!v),context:i})}if(v)c=function(t,e){if(!t.size)return t;var n,r=t.content.firstChild.type.schema;try{n=JSON.parse(e)}catch(e){return t}for(var i=t.content,s=t.openStart,a=t.openEnd,c=n.length-2;c>=0;c-=2){var p=r.nodes[n[c]];if(!p||p.hasRequiredAttrs())break;i=o.Fragment.from(p.create(n[c+1],i)),s++,a++}return new o.Slice(i,s,a)}(Wt(c,+v[1],+v[2]),v[3]);else if((c=o.Slice.maxOpen(function(t,e){if(t.childCount<2)return t;for(var n=function(n){var r=e.node(n).contentMatchAt(e.index(n)),i=void 0,s=[];if(t.forEach((function(t){if(s){var e,n=r.findWrapping(t.type);if(!n)return s=null;if(e=s.length&&i.length&&Ht(n,i,t,s[s.length-1],0))s[s.length-1]=e;else{s.length&&(s[s.length-1]=Jt(s[s.length-1],i.length));var o=Vt(t,n);s.push(o),r=r.matchType(o.type,o.attrs),i=n}}})),s)return{v:o.Fragment.from(s)}},r=e.depth;r>=0;r--){var i=n(r);if(i)return i.v}return t}(c.content,i),!0)).openStart||c.openEnd){for(var y=0,b=0,w=c.content.firstChild;y<c.openStart&&!w.type.spec.isolating;y++,w=w.firstChild);for(var S=c.content.lastChild;b<c.openEnd&&!S.type.spec.isolating;b++,S=S.lastChild);c=Wt(c,y,b)}return t.someProp("transformPasted",(function(t){c=t(c)})),c}function Vt(t,e,n){void 0===n&&(n=0);for(var r=e.length-1;r>=n;r--)t=e[r].create(null,o.Fragment.from(t));return t}function Ht(t,e,n,r,i){if(i<t.length&&i<e.length&&t[i]==e[i]){var s=Ht(t,e,n,r.lastChild,i+1);if(s)return r.copy(r.content.replaceChild(r.childCount-1,s));if(r.contentMatchAt(r.childCount).matchType(i==t.length-1?n.type:t[i+1]))return r.copy(r.content.append(o.Fragment.from(Vt(n,t,i+1))))}}function Jt(t,e){if(0==e)return t;var n=t.content.replaceChild(t.childCount-1,Jt(t.lastChild,e-1)),r=t.contentMatchAt(t.childCount).fillBefore(o.Fragment.empty,!0);return t.copy(n.append(r))}function qt(t,e,n,r,i,s){var a=e<0?t.firstChild:t.lastChild,c=a.content;return i<r-1&&(c=qt(c,e,n,r,i+1,s)),i>=n&&(c=e<0?a.contentMatchAt(0).fillBefore(c,t.childCount>1||s<=i).append(c):c.append(a.contentMatchAt(a.childCount).fillBefore(o.Fragment.empty,!0))),t.replaceChild(e<0?0:t.childCount-1,a.copy(c))}function Wt(t,e,n){return e<t.openStart&&(t=new o.Slice(qt(t.content,-1,e,t.openStart,0,t.openEnd),e,t.openEnd)),n<t.openEnd&&(t=new o.Slice(qt(t.content,1,n,t.openEnd,0,0),t.openStart,n)),t}var Kt={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]},Ut=null;function Gt(){return Ut||(Ut=document.implementation.createHTMLDocument("title"))}var Zt={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},Xt=a.ie&&a.ie_version<=11,Yt=function(){this.anchorNode=this.anchorOffset=this.focusNode=this.focusOffset=null};Yt.prototype.set=function(t){this.anchorNode=t.anchorNode,this.anchorOffset=t.anchorOffset,this.focusNode=t.focusNode,this.focusOffset=t.focusOffset},Yt.prototype.eq=function(t){return t.anchorNode==this.anchorNode&&t.anchorOffset==this.anchorOffset&&t.focusNode==this.focusNode&&t.focusOffset==this.focusOffset};var Qt=function(t,e){var n=this;this.view=t,this.handleDOMChange=e,this.queue=[],this.flushingSoon=-1,this.observer=window.MutationObserver&&new window.MutationObserver((function(t){for(var e=0;e<t.length;e++)n.queue.push(t[e]);a.ie&&a.ie_version<=11&&t.some((function(t){return"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length}))?n.flushSoon():n.flush()})),this.currentSelection=new Yt,Xt&&(this.onCharData=function(t){n.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),n.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.suppressingSelectionUpdates=!1};Qt.prototype.flushSoon=function(){var t=this;this.flushingSoon<0&&(this.flushingSoon=window.setTimeout((function(){t.flushingSoon=-1,t.flush()}),20))},Qt.prototype.forceFlush=function(){this.flushingSoon>-1&&(window.clearTimeout(this.flushingSoon),this.flushingSoon=-1,this.flush())},Qt.prototype.start=function(){this.observer&&this.observer.observe(this.view.dom,Zt),Xt&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()},Qt.prototype.stop=function(){var t=this;if(this.observer){var e=this.observer.takeRecords();if(e.length){for(var n=0;n<e.length;n++)this.queue.push(e[n]);window.setTimeout((function(){return t.flush()}),20)}this.observer.disconnect()}Xt&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()},Qt.prototype.connectSelection=function(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)},Qt.prototype.disconnectSelection=function(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)},Qt.prototype.suppressSelectionUpdates=function(){var t=this;this.suppressingSelectionUpdates=!0,setTimeout((function(){return t.suppressingSelectionUpdates=!1}),50)},Qt.prototype.onSelectionChange=function(){if((!(t=this.view).editable||t.root.activeElement==t.dom)&&Mt(t)){var t;if(this.suppressingSelectionUpdates)return vt(this.view);if(a.ie&&a.ie_version<=11&&!this.view.state.selection.empty){var e=this.view.root.getSelection();if(e.focusNode&&g(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset))return this.flushSoon()}this.flush()}},Qt.prototype.setCurSelection=function(){this.currentSelection.set(this.view.root.getSelection())},Qt.prototype.ignoreSelectionChange=function(t){if(0==t.rangeCount)return!0;var e=t.getRangeAt(0).commonAncestorContainer,n=this.view.docView.nearestDesc(e);return n&&n.ignoreMutation({type:"selection",target:3==e.nodeType?e.parentNode:e})?(this.setCurSelection(),!0):void 0},Qt.prototype.flush=function(){if(this.view.docView&&!(this.flushingSoon>-1)){var t=this.observer?this.observer.takeRecords():[];this.queue.length&&(t=this.queue.concat(t),this.queue.length=0);var e=this.view.root.getSelection(),n=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(e)&&Mt(this.view)&&!this.ignoreSelectionChange(e),r=-1,o=-1,i=!1,c=[];if(this.view.editable)for(var p=0;p<t.length;p++){var l=this.registerMutation(t[p],c);l&&(r=r<0?l.from:Math.min(l.from,r),o=o<0?l.to:Math.max(l.to,o),l.typeOver&&(i=!0))}if(a.gecko&&c.length>1){var u=c.filter((function(t){return"BR"==t.nodeName}));if(2==u.length){var h=u[0],d=u[1];h.parentNode&&h.parentNode.parentNode==d.parentNode?d.remove():h.remove()}}(r>-1||n)&&(r>-1&&(this.view.docView.markDirty(r,o),f=this.view,te||(te=!0,"normal"==getComputedStyle(f.dom).whiteSpace&&s.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."))),this.handleDOMChange(r,o,i,c),this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(e)||vt(this.view),this.currentSelection.set(e))}var f},Qt.prototype.registerMutation=function(t,e){if(e.indexOf(t.target)>-1)return null;var n=this.view.docView.nearestDesc(t.target);if("attributes"==t.type&&(n==this.view.docView||"contenteditable"==t.attributeName||"style"==t.attributeName&&!t.oldValue&&!t.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(t))return null;if("childList"==t.type){for(var r=0;r<t.addedNodes.length;r++)e.push(t.addedNodes[r]);if(n.contentDOM&&n.contentDOM!=n.dom&&!n.contentDOM.contains(t.target))return{from:n.posBefore,to:n.posAfter};var o=t.previousSibling,i=t.nextSibling;if(a.ie&&a.ie_version<=11&&t.addedNodes.length)for(var s=0;s<t.addedNodes.length;s++){var c=t.addedNodes[s],p=c.previousSibling,l=c.nextSibling;(!p||Array.prototype.indexOf.call(t.addedNodes,p)<0)&&(o=p),(!l||Array.prototype.indexOf.call(t.addedNodes,l)<0)&&(i=l)}var u=o&&o.parentNode==t.target?d(o)+1:0,h=n.localPosFromDOM(t.target,u,-1),f=i&&i.parentNode==t.target?d(i):t.target.childNodes.length;return{from:h,to:n.localPosFromDOM(t.target,f,1)}}return"attributes"==t.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:{from:n.posAtStart,to:n.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}};var te=!1,ee={},ne={};function re(t,e){t.lastSelectionOrigin=e,t.lastSelectionTime=Date.now()}function oe(t){t.someProp("handleDOMEvents",(function(e){for(var n in e)t.eventHandlers[n]||t.dom.addEventListener(n,t.eventHandlers[n]=function(e){return ie(t,e)})}))}function ie(t,e){return t.someProp("handleDOMEvents",(function(n){var r=n[e.type];return!!r&&(r(t,e)||e.defaultPrevented)}))}function se(t){return{left:t.clientX,top:t.clientY}}function ae(t,e,n,r,o){if(-1==r)return!1;for(var i=t.state.doc.resolve(r),s=function(r){if(t.someProp(e,(function(e){return r>i.depth?e(t,n,i.nodeAfter,i.before(r),o,!0):e(t,n,i.node(r),i.before(r),o,!1)})))return{v:!0}},a=i.depth+1;a>0;a--){var c=s(a);if(c)return c.v}return!1}function ce(t,e,n){t.focused||t.focus();var r=t.state.tr.setSelection(e);"pointer"==n&&r.setMeta("pointer",!0),t.dispatch(r)}function pe(t,e,n,r){return ae(t,"handleDoubleClickOn",e,n,r)||t.someProp("handleDoubleClick",(function(n){return n(t,e,r)}))}function le(t,e,n,o){return ae(t,"handleTripleClickOn",e,n,o)||t.someProp("handleTripleClick",(function(n){return n(t,e,o)}))||function(t,e,n){if(0!=n.button)return!1;var o=t.state.doc;if(-1==e)return!!o.inlineContent&&(ce(t,r.TextSelection.create(o,0,o.content.size),"pointer"),!0);for(var i=o.resolve(e),s=i.depth+1;s>0;s--){var a=s>i.depth?i.nodeAfter:i.node(s),c=i.before(s);if(a.inlineContent)ce(t,r.TextSelection.create(o,c+1,c+1+a.content.size),"pointer");else{if(!r.NodeSelection.isSelectable(a))continue;ce(t,r.NodeSelection.create(o,c),"pointer")}return!0}}(t,n,o)}function ue(t){return ye(t)}ne.keydown=function(t,e){if(t.shiftKey=16==e.keyCode||e.shiftKey,!fe(t,e))if(229!=e.keyCode&&t.domObserver.forceFlush(),t.lastKeyCode=e.keyCode,t.lastKeyCodeTime=Date.now(),!a.ios||13!=e.keyCode||e.ctrlKey||e.altKey||e.metaKey)t.someProp("handleKeyDown",(function(n){return n(t,e)}))||function(t,e){var n=e.keyCode,r=function(t){var e="";return t.ctrlKey&&(e+="c"),t.metaKey&&(e+="m"),t.altKey&&(e+="a"),t.shiftKey&&(e+="s"),e}(e);return 8==n||a.mac&&72==n&&"c"==r?zt(t,-1)||At(t):46==n||a.mac&&68==n&&"c"==r?zt(t,1)||Dt(t):13==n||27==n||(37==n?Tt(t,-1,r)||At(t):39==n?Tt(t,1,r)||Dt(t):38==n?Pt(t,-1,r)||At(t):40==n?function(t){if(a.safari&&!(t.state.selection.$head.parentOffset>0)){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n&&1==n.nodeType&&0==r&&n.firstChild&&"false"==n.firstChild.contentEditable){var o=n.firstChild;Rt(t,o,!0),setTimeout((function(){return Rt(t,o,!1)}),20)}}}(t)||Pt(t,1,r)||Dt(t):r==(a.mac?"m":"c")&&(66==n||73==n||89==n||90==n))}(t,e)?e.preventDefault():re(t,"key");else{var n=Date.now();t.lastIOSEnter=n,t.lastIOSEnterFallbackTimeout=setTimeout((function(){t.lastIOSEnter==n&&(t.someProp("handleKeyDown",(function(e){return e(t,k(13,"Enter"))})),t.lastIOSEnter=0)}),200)}},ne.keyup=function(t,e){16==e.keyCode&&(t.shiftKey=!1)},ne.keypress=function(t,e){if(!(fe(t,e)||!e.charCode||e.ctrlKey&&!e.altKey||a.mac&&e.metaKey))if(t.someProp("handleKeyPress",(function(n){return n(t,e)})))e.preventDefault();else{var n=t.state.selection;if(!(n instanceof r.TextSelection&&n.$from.sameParent(n.$to))){var o=String.fromCharCode(e.charCode);t.someProp("handleTextInput",(function(e){return e(t,n.$from.pos,n.$to.pos,o)}))||t.dispatch(t.state.tr.insertText(o).scrollIntoView()),e.preventDefault()}}};var he=a.mac?"metaKey":"ctrlKey";ee.mousedown=function(t,e){t.shiftKey=e.shiftKey;var n=ue(t),r=Date.now(),o="singleClick";r-t.lastClick.time<500&&function(t,e){var n=e.x-t.clientX,r=e.y-t.clientY;return n*n+r*r<100}(e,t.lastClick)&&!e[he]&&("singleClick"==t.lastClick.type?o="doubleClick":"doubleClick"==t.lastClick.type&&(o="tripleClick")),t.lastClick={time:r,x:e.clientX,y:e.clientY,type:o};var i=t.posAtCoords(se(e));i&&("singleClick"==o?(t.mouseDown&&t.mouseDown.done(),t.mouseDown=new de(t,i,e,n)):("doubleClick"==o?pe:le)(t,i.pos,i.inside,e)?e.preventDefault():re(t,"pointer"))};var de=function(t,e,n,o){var i,s,c=this;if(this.view=t,this.startDoc=t.state.doc,this.pos=e,this.event=n,this.flushed=o,this.selectNode=n[he],this.allowDefault=n.shiftKey,this.delayedSelectionSync=!1,e.inside>-1)i=t.state.doc.nodeAt(e.inside),s=e.inside;else{var p=t.state.doc.resolve(e.pos);i=p.parent,s=p.depth?p.before():0}this.mightDrag=null;var l=o?null:n.target,u=l?t.docView.nearestDesc(l,!0):null;this.target=u?u.dom:null;var h=t.state.selection;(0==n.button&&i.type.spec.draggable&&!1!==i.type.spec.selectable||h instanceof r.NodeSelection&&h.from<=s&&h.to>s)&&(this.mightDrag={node:i,pos:s,addAttr:this.target&&!this.target.draggable,setUneditable:this.target&&a.gecko&&!this.target.hasAttribute("contentEditable")}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((function(){c.view.mouseDown==c&&c.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),t.root.addEventListener("mouseup",this.up=this.up.bind(this)),t.root.addEventListener("mousemove",this.move=this.move.bind(this)),re(t,"pointer")};function fe(t,e){return!!t.composing||!!(a.safari&&Math.abs(e.timeStamp-t.compositionEndedAt)<500)&&(t.compositionEndedAt=-2e8,!0)}de.prototype.done=function(){var t=this;this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&this.target.removeAttribute("draggable"),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.delayedSelectionSync&&setTimeout((function(){return vt(t.view)})),this.view.mouseDown=null},de.prototype.up=function(t){if(this.done(),this.view.dom.contains(3==t.target.nodeType?t.target.parentNode:t.target)){var e=this.pos;this.view.state.doc!=this.startDoc&&(e=this.view.posAtCoords(se(t))),this.allowDefault||!e?re(this.view,"pointer"):function(t,e,n,o,i){return ae(t,"handleClickOn",e,n,o)||t.someProp("handleClick",(function(n){return n(t,e,o)}))||(i?function(t,e){if(-1==e)return!1;var n,o,i=t.state.selection;i instanceof r.NodeSelection&&(n=i.node);for(var s=t.state.doc.resolve(e),a=s.depth+1;a>0;a--){var c=a>s.depth?s.nodeAfter:s.node(a);if(r.NodeSelection.isSelectable(c)){o=n&&i.$from.depth>0&&a>=i.$from.depth&&s.before(i.$from.depth+1)==i.$from.pos?s.before(i.$from.depth):s.before(a);break}}return null!=o&&(ce(t,r.NodeSelection.create(t.state.doc,o),"pointer"),!0)}(t,n):function(t,e){if(-1==e)return!1;var n=t.state.doc.resolve(e),o=n.nodeAfter;return!!(o&&o.isAtom&&r.NodeSelection.isSelectable(o))&&(ce(t,new r.NodeSelection(n),"pointer"),!0)}(t,n))}(this.view,e.pos,e.inside,t,this.selectNode)?t.preventDefault():0==t.button&&(this.flushed||a.safari&&this.mightDrag&&!this.mightDrag.node.isAtom||a.chrome&&!(this.view.state.selection instanceof r.TextSelection)&&Math.min(Math.abs(e.pos-this.view.state.selection.from),Math.abs(e.pos-this.view.state.selection.to))<=2)?(ce(this.view,r.Selection.near(this.view.state.doc.resolve(e.pos)),"pointer"),t.preventDefault()):re(this.view,"pointer")}},de.prototype.move=function(t){!this.allowDefault&&(Math.abs(this.event.x-t.clientX)>4||Math.abs(this.event.y-t.clientY)>4)&&(this.allowDefault=!0),re(this.view,"pointer"),0==t.buttons&&this.done()},ee.touchdown=function(t){ue(t),re(t,"pointer")},ee.contextmenu=function(t){return ue(t)};var me=a.android?5e3:-1;function ve(t,e){clearTimeout(t.composingTimeout),e>-1&&(t.composingTimeout=setTimeout((function(){return ye(t)}),e))}function ge(t){var e;for(t.composing&&(t.composing=!1,t.compositionEndedAt=((e=document.createEvent("Event")).initEvent("event",!0,!0),e.timeStamp));t.compositionNodes.length>0;)t.compositionNodes.pop().markParentsDirty()}function ye(t,e){if(t.domObserver.forceFlush(),ge(t),e||t.docView.dirty){var n=ft(t);return n&&!n.eq(t.state.selection)?t.dispatch(t.state.tr.setSelection(n)):t.updateState(t.state),!0}return!1}ne.compositionstart=ne.compositionupdate=function(t){if(!t.composing){t.domObserver.flush();var e=t.state,n=e.selection.$from;if(e.selection.empty&&(e.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((function(t){return!1===t.type.spec.inclusive}))))t.markCursor=t.state.storedMarks||n.marks(),ye(t,!0),t.markCursor=null;else if(ye(t),a.gecko&&e.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length)for(var r=t.root.getSelection(),o=r.focusNode,i=r.focusOffset;o&&1==o.nodeType&&0!=i;){var s=i<0?o.lastChild:o.childNodes[i-1];if(!s)break;if(3==s.nodeType){r.collapse(s,s.nodeValue.length);break}o=s,i=-1}t.composing=!0}ve(t,me)},ne.compositionend=function(t,e){t.composing&&(t.composing=!1,t.compositionEndedAt=e.timeStamp,ve(t,20))};var be=a.ie&&a.ie_version<15||a.ios&&a.webkit_version<604;function we(t,e,n,r){var i=Lt(t,e,n,t.shiftKey,t.state.selection.$from);if(t.someProp("handlePaste",(function(e){return e(t,r,i||o.Slice.empty)})))return!0;if(!i)return!1;var s=function(t){return 0==t.openStart&&0==t.openEnd&&1==t.content.childCount?t.content.firstChild:null}(i),a=s?t.state.tr.replaceSelectionWith(s,t.shiftKey):t.state.tr.replaceSelection(i);return t.dispatch(a.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste")),!0}ee.copy=ne.cut=function(t,e){var n=t.state.selection,r="cut"==e.type;if(!n.empty){var o=be?null:e.clipboardData,i=$t(t,n.content()),s=i.dom,a=i.text;o?(e.preventDefault(),o.clearData(),o.setData("text/html",s.innerHTML),o.setData("text/plain",a)):function(t,e){if(t.dom.parentNode){var n=t.dom.parentNode.appendChild(document.createElement("div"));n.appendChild(e),n.style.cssText="position: fixed; left: -10000px; top: 10px";var r=getSelection(),o=document.createRange();o.selectNodeContents(e),t.dom.blur(),r.removeAllRanges(),r.addRange(o),setTimeout((function(){n.parentNode&&n.parentNode.removeChild(n),t.focus()}),50)}}(t,s),r&&t.dispatch(t.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))}},ne.paste=function(t,e){var n=be?null:e.clipboardData;n&&we(t,n.getData("text/plain"),n.getData("text/html"),e)?e.preventDefault():function(t,e){if(t.dom.parentNode){var n=t.shiftKey||t.state.selection.$from.parent.type.spec.code,r=t.dom.parentNode.appendChild(document.createElement(n?"textarea":"div"));n||(r.contentEditable="true"),r.style.cssText="position: fixed; left: -10000px; top: 10px",r.focus(),setTimeout((function(){t.focus(),r.parentNode&&r.parentNode.removeChild(r),n?we(t,r.value,null,e):we(t,r.textContent,r.innerHTML,e)}),50)}}(t,e)};var Se=function(t,e){this.slice=t,this.move=e},xe=a.mac?"altKey":"ctrlKey";for(var ke in ee.dragstart=function(t,e){var n=t.mouseDown;if(n&&n.done(),e.dataTransfer){var o=t.state.selection,i=o.empty?null:t.posAtCoords(se(e));if(i&&i.pos>=o.from&&i.pos<=(o instanceof r.NodeSelection?o.to-1:o.to));else if(n&&n.mightDrag)t.dispatch(t.state.tr.setSelection(r.NodeSelection.create(t.state.doc,n.mightDrag.pos)));else if(e.target&&1==e.target.nodeType){var s=t.docView.nearestDesc(e.target,!0);s&&s.node.type.spec.draggable&&s!=t.docView&&t.dispatch(t.state.tr.setSelection(r.NodeSelection.create(t.state.doc,s.posBefore)))}var a=t.state.selection.content(),c=$t(t,a),p=c.dom,l=c.text;e.dataTransfer.clearData(),e.dataTransfer.setData(be?"Text":"text/html",p.innerHTML),e.dataTransfer.effectAllowed="copyMove",be||e.dataTransfer.setData("text/plain",l),t.dragging=new Se(a,!e[xe])}},ee.dragend=function(t){var e=t.dragging;window.setTimeout((function(){t.dragging==e&&(t.dragging=null)}),50)},ne.dragover=ne.dragenter=function(t,e){return e.preventDefault()},ne.drop=function(t,e){var n=t.dragging;if(t.dragging=null,e.dataTransfer){var s=t.posAtCoords(se(e));if(s){var a=t.state.doc.resolve(s.pos);if(a){var c=n&&n.slice;c?t.someProp("transformPasted",(function(t){c=t(c)})):c=Lt(t,e.dataTransfer.getData(be?"Text":"text/plain"),be?null:e.dataTransfer.getData("text/html"),!1,a);var p=n&&!e[xe];if(t.someProp("handleDrop",(function(n){return n(t,e,c||o.Slice.empty,p)})))e.preventDefault();else if(c){e.preventDefault();var l=c?(0,i.nj)(t.state.doc,a.pos,c):a.pos;null==l&&(l=a.pos);var u=t.state.tr;p&&u.deleteSelection();var h=u.mapping.map(l),d=0==c.openStart&&0==c.openEnd&&1==c.content.childCount,f=u.doc;if(d?u.replaceRangeWith(h,h,c.content.firstChild):u.replaceRange(h,h,c),!u.doc.eq(f)){var m=u.doc.resolve(h);if(d&&r.NodeSelection.isSelectable(c.content.firstChild)&&m.nodeAfter&&m.nodeAfter.sameMarkup(c.content.firstChild))u.setSelection(new r.NodeSelection(m));else{var v=u.mapping.map(l);u.mapping.maps[u.mapping.maps.length-1].forEach((function(t,e,n,r){return v=r})),u.setSelection(kt(t,m,u.doc.resolve(v)))}t.focus(),t.dispatch(u.setMeta("uiEvent","drop"))}}}}}},ee.focus=function(t){t.focused||(t.domObserver.stop(),t.dom.classList.add("ProseMirror-focused"),t.domObserver.start(),t.focused=!0,setTimeout((function(){t.docView&&t.hasFocus()&&!t.domObserver.currentSelection.eq(t.root.getSelection())&&vt(t)}),20))},ee.blur=function(t,e){t.focused&&(t.domObserver.stop(),t.dom.classList.remove("ProseMirror-focused"),t.domObserver.start(),e.relatedTarget&&t.dom.contains(e.relatedTarget)&&t.domObserver.currentSelection.set({}),t.focused=!1)},ee.beforeinput=function(t,e){if(a.chrome&&a.android&&"deleteContentBackward"==e.inputType){var n=t.domChangeCount;setTimeout((function(){if(t.domChangeCount==n&&(t.dom.blur(),t.focus(),!t.someProp("handleKeyDown",(function(e){return e(t,k(8,"Backspace"))})))){var e=t.state.selection.$cursor;e&&e.pos>0&&t.dispatch(t.state.tr.delete(e.pos-1,e.pos).scrollIntoView())}}),50)}},ne)ee[ke]=ne[ke];function Me(t,e){if(t==e)return!0;for(var n in t)if(t[n]!==e[n])return!1;for(var r in e)if(!(r in t))return!1;return!0}var Oe=function(t,e){this.spec=e||De,this.side=this.spec.side||0,this.toDOM=t};Oe.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,this.side<0?-1:1),i=o.pos;return o.deleted?null:new Ne(i-n,i-n,this)},Oe.prototype.valid=function(){return!0},Oe.prototype.eq=function(t){return this==t||t instanceof Oe&&(this.spec.key&&this.spec.key==t.spec.key||this.toDOM==t.toDOM&&Me(this.spec,t.spec))};var Ce=function(t,e){this.spec=e||De,this.attrs=t};Ce.prototype.map=function(t,e,n,r){var o=t.map(e.from+r,this.spec.inclusiveStart?-1:1)-n,i=t.map(e.to+r,this.spec.inclusiveEnd?1:-1)-n;return o>=i?null:new Ne(o,i,this)},Ce.prototype.valid=function(t,e){return e.from<e.to},Ce.prototype.eq=function(t){return this==t||t instanceof Ce&&Me(this.attrs,t.attrs)&&Me(this.spec,t.spec)},Ce.is=function(t){return t.type instanceof Ce};var Te=function(t,e){this.spec=e||De,this.attrs=t};Te.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,1);if(o.deleted)return null;var i=t.mapResult(e.to+r,-1);return i.deleted||i.pos<=o.pos?null:new Ne(o.pos-n,i.pos-n,this)},Te.prototype.valid=function(t,e){var n,r=t.content.findIndex(e.from),o=r.index,i=r.offset;return i==e.from&&!(n=t.child(o)).isText&&i+n.nodeSize==e.to},Te.prototype.eq=function(t){return this==t||t instanceof Te&&Me(this.attrs,t.attrs)&&Me(this.spec,t.spec)};var Ne=function(t,e,n){this.from=t,this.to=e,this.type=n},Ee={spec:{configurable:!0},inline:{configurable:!0}};Ne.prototype.copy=function(t,e){return new Ne(t,e,this.type)},Ne.prototype.eq=function(t,e){return void 0===e&&(e=0),this.type.eq(t.type)&&this.from+e==t.from&&this.to+e==t.to},Ne.prototype.map=function(t,e,n){return this.type.map(t,this,e,n)},Ne.widget=function(t,e,n){return new Ne(t,t,new Oe(e,n))},Ne.inline=function(t,e,n,r){return new Ne(t,e,new Ce(n,r))},Ne.node=function(t,e,n,r){return new Ne(t,e,new Te(n,r))},Ee.spec.get=function(){return this.type.spec},Ee.inline.get=function(){return this.type instanceof Ce},Object.defineProperties(Ne.prototype,Ee);var Ae=[],De={},_e=function(t,e){this.local=t&&t.length?t:Ae,this.children=e&&e.length?e:Ae};_e.create=function(t,e){return e.length?Fe(e,t,0,De):Ie},_e.prototype.find=function(t,e,n){var r=[];return this.findInner(null==t?0:t,null==e?1e9:e,r,0,n),r},_e.prototype.findInner=function(t,e,n,r,o){for(var i=0;i<this.local.length;i++){var s=this.local[i];s.from<=e&&s.to>=t&&(!o||o(s.spec))&&n.push(s.copy(s.from+r,s.to+r))}for(var a=0;a<this.children.length;a+=3)if(this.children[a]<e&&this.children[a+1]>t){var c=this.children[a]+1;this.children[a+2].findInner(t-c,e-c,n,r+c,o)}},_e.prototype.map=function(t,e,n){return this==Ie||0==t.maps.length?this:this.mapInner(t,e,0,0,n||De)},_e.prototype.mapInner=function(t,e,n,r,o){for(var i,s=0;s<this.local.length;s++){var a=this.local[s].map(t,n,r);a&&a.type.valid(e,a)?(i||(i=[])).push(a):o.onRemove&&o.onRemove(this.local[s].spec)}return this.children.length?function(t,e,n,r,o,i,s){for(var a=t.slice(),c=function(t,e,n,r){for(var s=0;s<a.length;s+=3){var c=a[s+1],p=void 0;-1==c||t>c+i||(e>=a[s]+i?a[s+1]=-1:n>=o&&(p=r-n-(e-t))&&(a[s]+=p,a[s+1]+=p))}},p=0;p<n.maps.length;p++)n.maps[p].forEach(c);for(var l=!1,u=0;u<a.length;u+=3)if(-1==a[u+1]){var h=n.map(t[u]+i),d=h-o;if(d<0||d>=r.content.size){l=!0;continue}var f=n.map(t[u+1]+i,-1)-o,m=r.content.findIndex(d),v=m.index,g=m.offset,y=r.maybeChild(v);if(y&&g==d&&g+y.nodeSize==f){var b=a[u+2].mapInner(n,y,h+1,t[u]+i+1,s);b!=Ie?(a[u]=d,a[u+1]=f,a[u+2]=b):(a[u+1]=-2,l=!0)}else l=!0}if(l){var w=Fe(function(t,e,n,r,o,i,s){function a(t,e){for(var i=0;i<t.local.length;i++){var c=t.local[i].map(r,o,e);c?n.push(c):s.onRemove&&s.onRemove(t.local[i].spec)}for(var p=0;p<t.children.length;p+=3)a(t.children[p+2],t.children[p]+e+1)}for(var c=0;c<t.length;c+=3)-1==t[c+1]&&a(t[c+2],e[c]+i+1);return n}(a,t,e||[],n,o,i,s),r,0,s);e=w.local;for(var S=0;S<a.length;S+=3)a[S+1]<0&&(a.splice(S,3),S-=3);for(var x=0,k=0;x<w.children.length;x+=3){for(var M=w.children[x];k<a.length&&a[k]<M;)k+=3;a.splice(k,0,w.children[x],w.children[x+1],w.children[x+2])}}return new _e(e&&e.sort(Be),a)}(this.children,i,t,e,n,r,o):i?new _e(i.sort(Be)):Ie},_e.prototype.add=function(t,e){return e.length?this==Ie?_e.create(t,e):this.addInner(t,e,0):this},_e.prototype.addInner=function(t,e,n){var r,o=this,i=0;t.forEach((function(t,s){var a,c=s+n;if(a=Re(e,t,c)){for(r||(r=o.children.slice());i<r.length&&r[i]<s;)i+=3;r[i]==s?r[i+2]=r[i+2].addInner(t,a,c+1):r.splice(i,0,s,s+t.nodeSize,Fe(a,t,c+1,De)),i+=3}}));for(var s=ze(i?je(e):e,-n),a=0;a<s.length;a++)s[a].type.valid(t,s[a])||s.splice(a--,1);return new _e(s.length?this.local.concat(s).sort(Be):this.local,r||this.children)},_e.prototype.remove=function(t){return 0==t.length||this==Ie?this:this.removeInner(t,0)},_e.prototype.removeInner=function(t,e){for(var n=this.children,r=this.local,o=0;o<n.length;o+=3){for(var i=void 0,s=n[o]+e,a=n[o+1]+e,c=0,p=void 0;c<t.length;c++)(p=t[c])&&p.from>s&&p.to<a&&(t[c]=null,(i||(i=[])).push(p));if(i){n==this.children&&(n=this.children.slice());var l=n[o+2].removeInner(i,s+1);l!=Ie?n[o+2]=l:(n.splice(o,3),o-=3)}}if(r.length)for(var u=0,h=void 0;u<t.length;u++)if(h=t[u])for(var d=0;d<r.length;d++)r[d].eq(h,e)&&(r==this.local&&(r=this.local.slice()),r.splice(d--,1));return n==this.children&&r==this.local?this:r.length||n.length?new _e(r,n):Ie},_e.prototype.forChild=function(t,e){if(this==Ie)return this;if(e.isLeaf)return _e.empty;for(var n,r,o=0;o<this.children.length;o+=3)if(this.children[o]>=t){this.children[o]==t&&(n=this.children[o+2]);break}for(var i=t+1,s=i+e.content.size,a=0;a<this.local.length;a++){var c=this.local[a];if(c.from<s&&c.to>i&&c.type instanceof Ce){var p=Math.max(i,c.from)-i,l=Math.min(s,c.to)-i;p<l&&(r||(r=[])).push(c.copy(p,l))}}if(r){var u=new _e(r.sort(Be));return n?new Pe([u,n]):u}return n||Ie},_e.prototype.eq=function(t){if(this==t)return!0;if(!(t instanceof _e)||this.local.length!=t.local.length||this.children.length!=t.children.length)return!1;for(var e=0;e<this.local.length;e++)if(!this.local[e].eq(t.local[e]))return!1;for(var n=0;n<this.children.length;n+=3)if(this.children[n]!=t.children[n]||this.children[n+1]!=t.children[n+1]||!this.children[n+2].eq(t.children[n+2]))return!1;return!0},_e.prototype.locals=function(t){return $e(this.localsInner(t))},_e.prototype.localsInner=function(t){if(this==Ie)return Ae;if(t.inlineContent||!this.local.some(Ce.is))return this.local;for(var e=[],n=0;n<this.local.length;n++)this.local[n].type instanceof Ce||e.push(this.local[n]);return e};var Ie=new _e;_e.empty=Ie,_e.removeOverlap=$e;var Pe=function(t){this.members=t};function ze(t,e){if(!e||!t.length)return t;for(var n=[],r=0;r<t.length;r++){var o=t[r];n.push(new Ne(o.from+e,o.to+e,o.type))}return n}function Re(t,e,n){if(e.isLeaf)return null;for(var r=n+e.nodeSize,o=null,i=0,s=void 0;i<t.length;i++)(s=t[i])&&s.from>n&&s.to<r&&((o||(o=[])).push(s),t[i]=null);return o}function je(t){for(var e=[],n=0;n<t.length;n++)null!=t[n]&&e.push(t[n]);return e}function Fe(t,e,n,r){var o=[],i=!1;e.forEach((function(e,s){var a=Re(t,e,s+n);if(a){i=!0;var c=Fe(a,e,n+s+1,r);c!=Ie&&o.push(s,s+e.nodeSize,c)}}));for(var s=ze(i?je(t):t,-n).sort(Be),a=0;a<s.length;a++)s[a].type.valid(e,s[a])||(r.onRemove&&r.onRemove(s[a].spec),s.splice(a--,1));return s.length||o.length?new _e(s,o):Ie}function Be(t,e){return t.from-e.from||t.to-e.to}function $e(t){for(var e=t,n=0;n<e.length-1;n++){var r=e[n];if(r.from!=r.to)for(var o=n+1;o<e.length;o++){var i=e[o];if(i.from!=r.from){i.from<r.to&&(e==t&&(e=t.slice()),e[n]=r.copy(r.from,i.from),Le(e,o,r.copy(i.from,r.to)));break}i.to!=r.to&&(e==t&&(e=t.slice()),e[o]=i.copy(i.from,r.to),Le(e,o+1,i.copy(r.to,i.to)))}}return e}function Le(t,e,n){for(;e<t.length&&Be(n,t[e])>0;)e++;t.splice(e,0,n)}function Ve(t){var e=[];return t.someProp("decorations",(function(n){var r=n(t.state);r&&r!=Ie&&e.push(r)})),t.cursorWrapper&&e.push(_e.create(t.state.doc,[t.cursorWrapper.deco])),Pe.from(e)}Pe.prototype.map=function(t,e){var n=this.members.map((function(n){return n.map(t,e,De)}));return Pe.from(n)},Pe.prototype.forChild=function(t,e){if(e.isLeaf)return _e.empty;for(var n=[],r=0;r<this.members.length;r++){var o=this.members[r].forChild(t,e);o!=Ie&&(o instanceof Pe?n=n.concat(o.members):n.push(o))}return Pe.from(n)},Pe.prototype.eq=function(t){if(!(t instanceof Pe)||t.members.length!=this.members.length)return!1;for(var e=0;e<this.members.length;e++)if(!this.members[e].eq(t.members[e]))return!1;return!0},Pe.prototype.locals=function(t){for(var e,n=!0,r=0;r<this.members.length;r++){var o=this.members[r].localsInner(t);if(o.length)if(e){n&&(e=e.slice(),n=!1);for(var i=0;i<o.length;i++)e.push(o[i])}else e=o}return e?$e(n?e:e.sort(Be)):Ae},Pe.from=function(t){switch(t.length){case 0:return Ie;case 1:return t[0];default:return new Pe(t)}};var He=function(t,e){this._props=e,this.state=e.state,this.directPlugins=e.plugins||[],this.directPlugins.forEach(Ge),this.dispatch=this.dispatch.bind(this),this._root=null,this.focused=!1,this.trackWrites=null,this.dom=t&&t.mount||document.createElement("div"),t&&(t.appendChild?t.appendChild(this.dom):t.apply?t(this.dom):t.mount&&(this.mounted=!0)),this.editable=Ke(this),this.markCursor=null,this.cursorWrapper=null,We(this),this.nodeViews=Ue(this),this.docView=Y(this.state.doc,qe(this),Ve(this),this.dom,this),this.lastSelectedViewDesc=null,this.dragging=null,function(t){t.shiftKey=!1,t.mouseDown=null,t.lastKeyCode=null,t.lastKeyCodeTime=0,t.lastClick={time:0,x:0,y:0,type:""},t.lastSelectionOrigin=null,t.lastSelectionTime=0,t.lastIOSEnter=0,t.lastIOSEnterFallbackTimeout=null,t.lastAndroidDelete=0,t.composing=!1,t.composingTimeout=null,t.compositionNodes=[],t.compositionEndedAt=-2e8,t.domObserver=new Qt(t,(function(e,n,i,s){return function(t,e,n,i,s){if(e<0){var c=t.lastSelectionTime>Date.now()-50?t.lastSelectionOrigin:null,p=ft(t,c);if(p&&!t.state.selection.eq(p)){var l=t.state.tr.setSelection(p);"pointer"==c?l.setMeta("pointer",!0):"key"==c&&l.scrollIntoView(),t.dispatch(l)}}else{var u=t.state.doc.resolve(e),h=u.sharedDepth(n);e=u.before(h+1),n=t.state.doc.resolve(n).after(h+1);var d=t.state.selection,f=function(t,e,n){var r=t.docView.parseRange(e,n),i=r.node,s=r.fromOffset,c=r.toOffset,p=r.from,l=r.to,u=t.root.getSelection(),h=null,d=u.anchorNode;if(d&&t.dom.contains(1==d.nodeType?d:d.parentNode)&&(h=[{node:d,offset:u.anchorOffset}],x(u)||h.push({node:u.focusNode,offset:u.focusOffset})),a.chrome&&8===t.lastKeyCode)for(var f=c;f>s;f--){var m=i.childNodes[f-1],v=m.pmViewDesc;if("BR"==m.nodeName&&!v){c=f;break}if(!v||v.size)break}var g=t.state.doc,y=t.someProp("domParser")||o.DOMParser.fromSchema(t.state.schema),b=g.resolve(p),w=null,S=y.parse(i,{topNode:b.parent,topMatch:b.parent.contentMatchAt(b.index()),topOpen:!0,from:s,to:c,preserveWhitespace:!b.parent.type.spec.code||"full",editableContent:!0,findPositions:h,ruleFromNode:jt,context:b});if(h&&null!=h[0].pos){var k=h[0].pos,M=h[1]&&h[1].pos;null==M&&(M=k),w={anchor:k+p,head:M+p}}return{doc:S,sel:w,from:p,to:l}}(t,e,n);if(a.chrome&&t.cursorWrapper&&f.sel&&f.sel.anchor==t.cursorWrapper.deco.from){var m=t.cursorWrapper.deco.type.toDOM.nextSibling,v=m&&m.nodeValue?m.nodeValue.length:1;f.sel={anchor:f.sel.anchor+v,head:f.sel.anchor+v}}var g,y,b=t.state.doc,w=b.slice(f.from,f.to);8===t.lastKeyCode&&Date.now()-100<t.lastKeyCodeTime?(g=t.state.selection.to,y="end"):(g=t.state.selection.from,y="start"),t.lastKeyCode=null;var S=function(t,e,n,r,o){var i=t.findDiffStart(e,n);if(null==i)return null;var s=t.findDiffEnd(e,n+t.size,n+e.size),a=s.a,c=s.b;return"end"==o&&(r-=a+Math.max(0,i-Math.min(a,c))-i),a<i&&t.size<e.size?(c=(i-=r<=i&&r>=a?i-r:0)+(c-a),a=i):c<i&&(a=(i-=r<=i&&r>=c?i-r:0)+(a-c),c=i),{start:i,endA:a,endB:c}}(w.content,f.doc.content,f.from,g,y);if(!S){if(!(i&&d instanceof r.TextSelection&&!d.empty&&d.$head.sameParent(d.$anchor))||t.composing||f.sel&&f.sel.anchor!=f.sel.head){if((a.ios&&t.lastIOSEnter>Date.now()-225||a.android)&&s.some((function(t){return"DIV"==t.nodeName||"P"==t.nodeName}))&&t.someProp("handleKeyDown",(function(e){return e(t,k(13,"Enter"))})))return void(t.lastIOSEnter=0);if(f.sel){var M=Ft(t,t.state.doc,f.sel);M&&!M.eq(t.state.selection)&&t.dispatch(t.state.tr.setSelection(M))}return}S={start:d.from,endA:d.to,endB:d.to}}t.domChangeCount++,t.state.selection.from<t.state.selection.to&&S.start==S.endB&&t.state.selection instanceof r.TextSelection&&(S.start>t.state.selection.from&&S.start<=t.state.selection.from+2?S.start=t.state.selection.from:S.endA<t.state.selection.to&&S.endA>=t.state.selection.to-2&&(S.endB+=t.state.selection.to-S.endA,S.endA=t.state.selection.to)),a.ie&&a.ie_version<=11&&S.endB==S.start+1&&S.endA==S.start&&S.start>f.from&&"  "==f.doc.textBetween(S.start-f.from-1,S.start-f.from+1)&&(S.start--,S.endA--,S.endB--);var O,C=f.doc.resolveNoCache(S.start-f.from),T=f.doc.resolveNoCache(S.endB-f.from),N=C.sameParent(T)&&C.parent.inlineContent;if((a.ios&&t.lastIOSEnter>Date.now()-225&&(!N||s.some((function(t){return"DIV"==t.nodeName||"P"==t.nodeName})))||!N&&C.pos<f.doc.content.size&&(O=r.Selection.findFrom(f.doc.resolve(C.pos+1),1,!0))&&O.head==T.pos)&&t.someProp("handleKeyDown",(function(e){return e(t,k(13,"Enter"))})))t.lastIOSEnter=0;else if(t.state.selection.anchor>S.start&&function(t,e,n,r,o){if(!r.parent.isTextblock||n-e<=o.pos-r.pos||Bt(r,!0,!1)<o.pos)return!1;var i=t.resolve(e);if(i.parentOffset<i.parent.content.size||!i.parent.isTextblock)return!1;var s=t.resolve(Bt(i,!0,!0));return!(!s.parent.isTextblock||s.pos>n||Bt(s,!0,!1)<n)&&r.parent.content.cut(r.parentOffset).eq(s.parent.content)}(b,S.start,S.endA,C,T)&&t.someProp("handleKeyDown",(function(e){return e(t,k(8,"Backspace"))})))a.android&&a.chrome&&t.domObserver.suppressSelectionUpdates();else{a.chrome&&a.android&&S.toB==S.from&&(t.lastAndroidDelete=Date.now()),a.android&&!N&&C.start()!=T.start()&&0==T.parentOffset&&C.depth==T.depth&&f.sel&&f.sel.anchor==f.sel.head&&f.sel.head==S.endA&&(S.endB-=2,T=f.doc.resolveNoCache(S.endB-f.from),setTimeout((function(){t.someProp("handleKeyDown",(function(e){return e(t,k(13,"Enter"))}))}),20));var E,A,D,_,I=S.start,P=S.endA;if(N)if(C.pos==T.pos)a.ie&&a.ie_version<=11&&0==C.parentOffset&&(t.domObserver.suppressSelectionUpdates(),setTimeout((function(){return vt(t)}),20)),E=t.state.tr.delete(I,P),A=b.resolve(S.start).marksAcross(b.resolve(S.endA));else if(S.endA==S.endB&&(_=b.resolve(S.start))&&(D=function(t,e){for(var n,r,i,s=t.firstChild.marks,a=e.firstChild.marks,c=s,p=a,l=0;l<a.length;l++)c=a[l].removeFromSet(c);for(var u=0;u<s.length;u++)p=s[u].removeFromSet(p);if(1==c.length&&0==p.length)r=c[0],n="add",i=function(t){return t.mark(r.addToSet(t.marks))};else{if(0!=c.length||1!=p.length)return null;r=p[0],n="remove",i=function(t){return t.mark(r.removeFromSet(t.marks))}}for(var h=[],d=0;d<e.childCount;d++)h.push(i(e.child(d)));if(o.Fragment.from(h).eq(t))return{mark:r,type:n}}(C.parent.content.cut(C.parentOffset,T.parentOffset),_.parent.content.cut(_.parentOffset,S.endA-_.start()))))E=t.state.tr,"add"==D.type?E.addMark(I,P,D.mark):E.removeMark(I,P,D.mark);else if(C.parent.child(C.index()).isText&&C.index()==T.index()-(T.textOffset?0:1)){var z=C.parent.textBetween(C.parentOffset,T.parentOffset);if(t.someProp("handleTextInput",(function(e){return e(t,I,P,z)})))return;E=t.state.tr.insertText(z,I,P)}if(E||(E=t.state.tr.replace(I,P,f.doc.slice(S.start-f.from,S.endB-f.from))),f.sel){var R=Ft(t,E.doc,f.sel);R&&!(a.chrome&&a.android&&t.composing&&R.empty&&(S.start!=S.endB||t.lastAndroidDelete<Date.now()-100)&&(R.head==I||R.head==E.mapping.map(P)-1)||a.ie&&R.empty&&R.head==I)&&E.setSelection(R)}A&&E.ensureMarks(A),t.dispatch(E.scrollIntoView())}}}(t,e,n,i,s)})),t.domObserver.start(),t.domChangeCount=0,t.eventHandlers=Object.create(null);var e=function(e){var n=ee[e];t.dom.addEventListener(e,t.eventHandlers[e]=function(e){!function(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(var n=e.target;n!=t.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(e))return!1;return!0}(t,e)||ie(t,e)||!t.editable&&e.type in ne||n(t,e)})};for(var n in ee)e(n);a.safari&&t.dom.addEventListener("input",(function(){return null})),oe(t)}(this),this.prevDirectPlugins=[],this.pluginViews=[],this.updatePluginViews()},Je={props:{configurable:!0},root:{configurable:!0}};function qe(t){var e=Object.create(null);return e.class="ProseMirror",e.contenteditable=String(t.editable),e.translate="no",t.someProp("attributes",(function(n){if("function"==typeof n&&(n=n(t.state)),n)for(var r in n)"class"==r&&(e.class+=" "+n[r]),"style"==r?e.style=(e.style?e.style+";":"")+n[r]:e[r]||"contenteditable"==r||"nodeName"==r||(e[r]=String(n[r]))})),[Ne.node(0,t.state.doc.content.size,e)]}function We(t){if(t.markCursor){var e=document.createElement("img");e.className="ProseMirror-separator",e.setAttribute("mark-placeholder","true"),t.cursorWrapper={dom:e,deco:Ne.widget(t.state.selection.head,e,{raw:!0,marks:t.markCursor})}}else t.cursorWrapper=null}function Ke(t){return!t.someProp("editable",(function(e){return!1===e(t.state)}))}function Ue(t){var e={};return t.someProp("nodeViews",(function(t){for(var n in t)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=t[n])})),e}function Ge(t){if(t.spec.state||t.spec.filterTransaction||t.spec.appendTransaction)throw new RangeError("Plugins passed directly to the view must not have a state component")}Je.props.get=function(){if(this._props.state!=this.state){var t=this._props;for(var e in this._props={},t)this._props[e]=t[e];this._props.state=this.state}return this._props},He.prototype.update=function(t){t.handleDOMEvents!=this._props.handleDOMEvents&&oe(this),this._props=t,t.plugins&&(t.plugins.forEach(Ge),this.directPlugins=t.plugins),this.updateStateInner(t.state,!0)},He.prototype.setProps=function(t){var e={};for(var n in this._props)e[n]=this._props[n];for(var r in e.state=this.state,t)e[r]=t[r];this.update(e)},He.prototype.updateState=function(t){this.updateStateInner(t,this.state.plugins!=t.plugins)},He.prototype.updateStateInner=function(t,e){var n=this,o=this.state,i=!1,s=!1;if(t.storedMarks&&this.composing&&(ge(this),s=!0),this.state=t,e){var c=Ue(this);(function(t,e){var n=0,r=0;for(var o in t){if(t[o]!=e[o])return!0;n++}for(var i in e)r++;return n!=r})(c,this.nodeViews)&&(this.nodeViews=c,i=!0),oe(this)}this.editable=Ke(this),We(this);var p=Ve(this),l=qe(this),u=e?"reset":t.scrollToSelection>o.scrollToSelection?"to selection":"preserve",h=i||!this.docView.matchesNode(t.doc,l,p);!h&&t.selection.eq(o.selection)||(s=!0);var d,f,m,v,y,b,w,S,x,k,M="preserve"==u&&s&&null==this.dom.style.overflowAnchor&&function(t){for(var e,n,r=t.dom.getBoundingClientRect(),o=Math.max(0,r.top),i=(r.left+r.right)/2,s=o+1;s<Math.min(innerHeight,r.bottom);s+=5){var a=t.root.elementFromPoint(i,s);if(a!=t.dom&&t.dom.contains(a)){var c=a.getBoundingClientRect();if(c.top>=o-20){e=a,n=c.top;break}}}return{refDOM:e,refTop:n,stack:N(t.dom)}}(this);if(s){this.domObserver.stop();var O=h&&(a.ie||a.chrome)&&!this.composing&&!o.selection.empty&&!t.selection.empty&&(v=o.selection,y=t.selection,b=Math.min(v.$anchor.sharedDepth(v.head),y.$anchor.sharedDepth(y.head)),v.$anchor.start(b)!=y.$anchor.start(b));if(h){var C=a.chrome?this.trackWrites=this.root.getSelection().focusNode:null;!i&&this.docView.update(t.doc,l,p,this)||(this.docView.updateOuterDeco([]),this.docView.destroy(),this.docView=Y(t.doc,l,p,this.dom,this)),C&&!this.trackWrites&&(O=!0)}O||!(this.mouseDown&&this.domObserver.currentSelection.eq(this.root.getSelection())&&(d=this,f=d.docView.domFromPos(d.state.selection.anchor,0),m=d.root.getSelection(),g(f.node,f.offset,m.anchorNode,m.anchorOffset)))?vt(this,O):(St(this,t.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(o),"reset"==u)this.dom.scrollTop=0;else if("to selection"==u){var A=this.root.getSelection().focusNode;this.someProp("handleScrollToSelection",(function(t){return t(n)}))||(t.selection instanceof r.NodeSelection?T(this,this.docView.domAfterPos(t.selection.from).getBoundingClientRect(),A):T(this,this.coordsAtPos(t.selection.head,1),A))}else M&&(S=(w=M).refDOM,x=w.refTop,E(w.stack,0==(k=S?S.getBoundingClientRect().top:0)?0:k-x))},He.prototype.destroyPluginViews=function(){for(var t;t=this.pluginViews.pop();)t.destroy&&t.destroy()},He.prototype.updatePluginViews=function(t){if(t&&t.plugins==this.state.plugins&&this.directPlugins==this.prevDirectPlugins)for(var e=0;e<this.pluginViews.length;e++){var n=this.pluginViews[e];n.update&&n.update(this,t)}else{this.prevDirectPlugins=this.directPlugins,this.destroyPluginViews();for(var r=0;r<this.directPlugins.length;r++){var o=this.directPlugins[r];o.spec.view&&this.pluginViews.push(o.spec.view(this))}for(var i=0;i<this.state.plugins.length;i++){var s=this.state.plugins[i];s.spec.view&&this.pluginViews.push(s.spec.view(this))}}},He.prototype.someProp=function(t,e){var n,r=this._props&&this._props[t];if(null!=r&&(n=e?e(r):r))return n;for(var o=0;o<this.directPlugins.length;o++){var i=this.directPlugins[o].props[t];if(null!=i&&(n=e?e(i):i))return n}var s=this.state.plugins;if(s)for(var a=0;a<s.length;a++){var c=s[a].props[t];if(null!=c&&(n=e?e(c):c))return n}},He.prototype.hasFocus=function(){return this.root.activeElement==this.dom},He.prototype.focus=function(){this.domObserver.stop(),this.editable&&function(t){if(t.setActive)return t.setActive();if(A)return t.focus(A);var e=N(t);t.focus(null==A?{get preventScroll(){return A={preventScroll:!0},!0}}:void 0),A||(A=!1,E(e,0))}(this.dom),vt(this),this.domObserver.start()},Je.root.get=function(){var t=this._root;if(null==t)for(var e=this.dom.parentNode;e;e=e.parentNode)if(9==e.nodeType||11==e.nodeType&&e.host)return e.getSelection||(Object.getPrototypeOf(e).getSelection=function(){return document.getSelection()}),this._root=e;return t||document},He.prototype.posAtCoords=function(t){return P(this,t)},He.prototype.coordsAtPos=function(t,e){return void 0===e&&(e=1),j(this,t,e)},He.prototype.domAtPos=function(t,e){return void 0===e&&(e=0),this.docView.domFromPos(t,e)},He.prototype.nodeDOM=function(t){var e=this.docView.descAt(t);return e?e.nodeDOM:null},He.prototype.posAtDOM=function(t,e,n){void 0===n&&(n=-1);var r=this.docView.posFromDOM(t,e,n);if(null==r)throw new RangeError("DOM position not inside the editor");return r},He.prototype.endOfTextblock=function(t,e){return function(t,e,n){return V==e&&H==n?J:(V=e,H=n,J="up"==n||"down"==n?function(t,e,n){var r=e.selection,o="up"==n?r.$from:r.$to;return $(t,e,(function(){for(var e=t.docView.domFromPos(o.pos,"up"==n?-1:1).node;;){var r=t.docView.nearestDesc(e,!0);if(!r)break;if(r.node.isBlock){e=r.dom;break}e=r.dom.parentNode}for(var i=j(t,o.pos,1),s=e.firstChild;s;s=s.nextSibling){var a=void 0;if(1==s.nodeType)a=s.getClientRects();else{if(3!=s.nodeType)continue;a=v(s,0,s.nodeValue.length).getClientRects()}for(var c=0;c<a.length;c++){var p=a[c];if(p.bottom>p.top+1&&("up"==n?i.top-p.top>2*(p.bottom-i.top):p.bottom-i.bottom>2*(i.bottom-p.top)))return!1}}return!0}))}(t,e,n):function(t,e,n){var r=e.selection.$head;if(!r.parent.isTextblock)return!1;var o=r.parentOffset,i=!o,s=o==r.parent.content.size,a=t.root.getSelection();return L.test(r.parent.textContent)&&a.modify?$(t,e,(function(){var e=a.getRangeAt(0),o=a.focusNode,i=a.focusOffset,s=a.caretBidiLevel;a.modify("move",n,"character");var c=!(r.depth?t.docView.domAfterPos(r.before()):t.dom).contains(1==a.focusNode.nodeType?a.focusNode:a.focusNode.parentNode)||o==a.focusNode&&i==a.focusOffset;return a.removeAllRanges(),a.addRange(e),null!=s&&(a.caretBidiLevel=s),c})):"left"==n||"backward"==n?i:s}(t,e,n))}(this,e||this.state,t)},He.prototype.destroy=function(){this.docView&&(function(t){for(var e in t.domObserver.stop(),t.eventHandlers)t.dom.removeEventListener(e,t.eventHandlers[e]);clearTimeout(t.composingTimeout),clearTimeout(t.lastIOSEnterFallbackTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],Ve(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)},He.prototype.dispatchEvent=function(t){return function(t,e){ie(t,e)||!ee[e.type]||!t.editable&&e.type in ne||ee[e.type](t,e)}(this,t)},He.prototype.dispatch=function(t){var e=this._props.dispatchTransaction;e?e.call(this,t):this.updateState(this.state.apply(t))},Object.defineProperties(He.prototype,Je)},37896:(t,e,n)=>{"use strict";n.d(e,{H:()=>a});const r=window;var o=n(9996),i=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},s=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},a=function(){function t(t,e){this.name=t,this.options=e;var n=this;Draw.loadPlugin((function(t){n.declareUiFunctions(t)}))}return t.prototype.declareUiFunctions=function(t){var e=this;this.editorUi=t;var n=function(t,e,n){return e},i=this.options,s=window.EditorUi.defaultEditorsConfig;s&&s[this.name]&&(i=o(i,s[this.name],{arrayMerge:n}));var a=window.Editor.config;function c(n){var r=t.editor.graph.view.states.map[n.mxObjectId].shape;r&&e.showDialog(t,r)}if(a&&a.defaultEditorsConfig&&a.defaultEditorsConfig[this.name]&&(i=o(i,a.defaultEditorsConfig[this.name],{arrayMerge:n})),i.title&&0!=i.title.length||(i.title="Editor"),this.options=i,this.options.ignoreDoubleClic||t.editor.graph.addListener(r.mxEvent.DOUBLE_CLICK,(function(t,n){var r=n.getProperty("cell");e.isCellHandled(r)&&(n.consume(),c(r))})),this.options.contextual&&this.options.contextual.length>0){var p=t.editor.graph.popupMenuHandler.factoryMethod;t.editor.graph.popupMenuHandler.factoryMethod=function(t,n,r){p(t,n,r),e.isCellHandled(n)&&t.addItem(e.options.contextual,null,(function(){c(n)}))}}for(var l=0,u=this.options.paletteItems;l<u.length;l++){var h=u[l],d="string"==typeof h.palette?h.palette:h.palette.name,f="string"==typeof h.palette?h.palette:h.palette.label;this.setDefaultsPaletteItem(h),t.sidebar.palettes[d]||t.sidebar.addPaletteFunctions(d,f,!0,[]);var m=t.sidebar.palettes[d][1];if(h.data){var v=t.sidebar.addDataEntry(h.name,h.width,h.height,h.label,h.data);m&&m.firstChild&&m.firstChild.appendChild(v)}else{var g=r.mxUtils.parseXml(h.node).getRootNode().firstChild,y=new r.mxCell(g,new r.mxGeometry(0,0,h.width,h.height),"shape=image;verticalLabelPosition=bottom;labelBackgroundColor=#ffffff;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:"+h.icon+";"+h.style);y.vertex=!0,y.setAttribute(e.options.attributeName,h.text),v=t.sidebar.createVertexTemplateFromCells([y],h.width,h.height,h.label,!0,!0),m&&m.firstChild&&m.firstChild.appendChild(v)}}},t.prototype.setDefaultsPaletteItem=function(t){t.label||(t.label=t.name),t.width||(t.width=50),t.height||(t.height=50),t.icon||t.data||(t.icon="image/svg+xml,"+btoa('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80"><rect x="20" y="20" width="40" height="40"/></svg>')),t.style||t.data||(t.style=""),t.node||t.data||(t.node="<editor />"),t.text||t.data||(t.text=" ")},t.prototype.isCellHandled=function(t){return!!t&&!(!r.mxUtils.isNode(t.value)||""==t.getAttribute(this.options.attributeName,""))},t.prototype.showDialog=function(t,e){var n=this,o=document.createElement("div");o.style.cssText="display: flex; flex-direction: column; height: inherit;",o.innerHTML='\n      <div id="editor_'+n.name+'_div" style="flex: 1; /*text-align: center;*/  overflow-y: scroll;"></div>\n      <div id="plugin_editor_'+n.name+'_buttons" style="flex: initial; text-align: right; align-self: flex-end; padding: 8px;"></div>\n      ';var i=o.querySelector("#plugin_editor_"+n.name+"_buttons"),s=800,a=640;t.diagramContainer.clientWidth<s&&(s=t.diagramContainer.clientWidth-20),t.diagramContainer.clientHeight<a&&(a=t.diagramContainer.clientHeight-20);var c=new r.mxWindow(this.options.title,o,(t.diagramContainer.clientWidth-s)/2+t.diagramContainer.offsetLeft,(t.diagramContainer.clientHeight-a)/2+t.diagramContainer.offsetTop,s,a,!0,!0);c.setResizable(!0),c.setMaximizable(!0),c.setClosable(!0);var p=r.mxUtils.button(r.mxResources.get("close"),(function(){n.cancel(t,o,c,e)}));p.className="geBtn",t.editor.cancelFirst&&i.appendChild(p);var l=r.mxUtils.button(r.mxResources.get("apply"),(function(r){n.validate(t,o,c,e)}));i.appendChild(l),l.className="geBtn gePrimaryBtn",t.editor.cancelFirst||i.appendChild(p),o.addEventListener("keydown",(function(t){t.stopPropagation()})),n.onFillWindow(t,o,c,e),c.show(),n.onShowWindow(t,o,c,e)},t.prototype.onFillWindow=function(t,e,n,r){},t.prototype.onShowWindow=function(t,e,n,r){this.editorUi&&this.editorUi.editor&&this.editorUi.editor.graph&&this.editorUi.editor.graph.tooltipHandler&&this.editorUi.editor.graph.tooltipHandler.hide&&this.editorUi.editor.graph.tooltipHandler.hide()},t.prototype.validate=function(t,e,n,o){return i(this,void 0,void 0,(function(){var i,a,c;return s(this,(function(s){switch(s.label){case 0:return t.spinner.spin(document.body,r.mxResources.get("inserting"))?((i=t.editor.graph).getModel().beginUpdate(),a=this.setShapeValue,c=[t,o],[4,this.getEditorValue(t,e,n)]):[3,2];case 1:a.apply(this,c.concat([s.sent()])),i.getModel().endUpdate(),t.spinner.stop(),null!=o.state.cell&&(i.setSelectionCell(o.state.cell),i.scrollCellToVisible(o.state.cell)),s.label=2;case 2:return n.destroy(),[2]}}))}))},t.prototype.cancel=function(t,e,n,r){n.destroy()},t.prototype.getEditorValue=function(t,e,n){return i(this,void 0,void 0,(function(){return s(this,(function(t){return[2,""]}))}))},t.prototype.getShapeValue=function(t,e){return e&&e.state&&e.state.cell?e.state.cell.getAttribute(this.options.attributeName,""):""},t.prototype.setShapeValue=function(t,e,n){e&&e.state&&e.state.cell&&e.state.cell.value&&r.mxUtils.isNode(e.state.cell.value)&&e.state.cell.setAttribute(this.options.attributeName,n)},t}()},91496:t=>{"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},20384:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},89539:(t,e,n)=>{var r=n(34155),o=n(25108),i=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},s=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(p(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,i=String(t).replace(s,(function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),a=r[n];n<o;a=r[++n])g(a)||!x(a)?i+=" "+a:i+=" "+p(a);return i},e.deprecate=function(t,n){if(void 0!==r&&!0===r.noDeprecation)return t;if(void 0===r)return function(){return e.deprecate(t,n).apply(this,arguments)};var i=!1;return function(){if(!i){if(r.throwDeprecation)throw new Error(n);r.traceDeprecation?o.trace(n):o.error(n),i=!0}return t.apply(this,arguments)}};var a,c={};function p(t,n){var r={seen:[],stylize:u};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),v(n)?r.showHidden=n:n&&e._extend(r,n),w(r.showHidden)&&(r.showHidden=!1),w(r.depth)&&(r.depth=2),w(r.colors)&&(r.colors=!1),w(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=l),h(r,t,r.depth)}function l(t,e){var n=p.styles[e];return n?"["+p.colors[n][0]+"m"+t+"["+p.colors[n][1]+"m":t}function u(t,e){return t}function h(t,n,r){if(t.customInspect&&n&&O(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(r,t);return b(o)||(o=h(t,o,r)),o}var i=function(t,e){if(w(e))return t.stylize("undefined","undefined");if(b(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return y(e)?t.stylize(""+e,"number"):v(e)?t.stylize(""+e,"boolean"):g(e)?t.stylize("null","null"):void 0}(t,n);if(i)return i;var s=Object.keys(n),a=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(n)),M(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return d(n);if(0===s.length){if(O(n)){var c=n.name?": "+n.name:"";return t.stylize("[Function"+c+"]","special")}if(S(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(k(n))return t.stylize(Date.prototype.toString.call(n),"date");if(M(n))return d(n)}var p,l="",u=!1,x=["{","}"];return m(n)&&(u=!0,x=["[","]"]),O(n)&&(l=" [Function"+(n.name?": "+n.name:"")+"]"),S(n)&&(l=" "+RegExp.prototype.toString.call(n)),k(n)&&(l=" "+Date.prototype.toUTCString.call(n)),M(n)&&(l=" "+d(n)),0!==s.length||u&&0!=n.length?r<0?S(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),p=u?function(t,e,n,r,o){for(var i=[],s=0,a=e.length;s<a;++s)A(e,String(s))?i.push(f(t,e,n,r,String(s),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(f(t,e,n,r,o,!0))})),i}(t,n,r,a,s):s.map((function(e){return f(t,n,r,a,e,u)})),t.seen.pop(),function(t,e,n){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}(p,l,x)):x[0]+l+x[1]}function d(t){return"["+Error.prototype.toString.call(t)+"]"}function f(t,e,n,r,o,i){var s,a,c;if((c=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?a=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(a=t.stylize("[Setter]","special")),A(r,o)||(s="["+o+"]"),a||(t.seen.indexOf(c.value)<0?(a=g(n)?h(t,c.value,null):h(t,c.value,n-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+a.split("\n").map((function(t){return"   "+t})).join("\n")):a=t.stylize("[Circular]","special")),w(s)){if(i&&o.match(/^\d+$/))return a;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function m(t){return Array.isArray(t)}function v(t){return"boolean"==typeof t}function g(t){return null===t}function y(t){return"number"==typeof t}function b(t){return"string"==typeof t}function w(t){return void 0===t}function S(t){return x(t)&&"[object RegExp]"===C(t)}function x(t){return"object"==typeof t&&null!==t}function k(t){return x(t)&&"[object Date]"===C(t)}function M(t){return x(t)&&("[object Error]"===C(t)||t instanceof Error)}function O(t){return"function"==typeof t}function C(t){return Object.prototype.toString.call(t)}function T(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(w(a)&&(a=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!c[t])if(new RegExp("\\b"+t+"\\b","i").test(a)){var n=r.pid;c[t]=function(){var r=e.format.apply(e,arguments);o.error("%s %d: %s",t,n,r)}}else c[t]=function(){};return c[t]},e.inspect=p,p.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},p.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=m,e.isBoolean=v,e.isNull=g,e.isNullOrUndefined=function(t){return null==t},e.isNumber=y,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=w,e.isRegExp=S,e.isObject=x,e.isDate=k,e.isError=M,e.isFunction=O,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(20384);var N=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function E(){var t=new Date,e=[T(t.getHours()),T(t.getMinutes()),T(t.getSeconds())].join(":");return[t.getDate(),N[t.getMonth()],e].join(" ")}function A(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){o.log("%s - %s",E(),e.format.apply(e,arguments))},e.inherits=n(91496),e._extend=function(t,e){if(!e||!x(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var D="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function _(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(D&&t[D]){var e;if("function"!=typeof(e=t[D]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,D,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,o)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),D&&Object.defineProperty(e,D,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,i(t))},e.promisify.custom=D,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],n=0;n<arguments.length;n++)e.push(arguments[n]);var o=e.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,s=function(){return o.apply(i,arguments)};t.apply(this,e).then((function(t){r.nextTick(s,null,t)}),(function(t){r.nextTick(_,t,s)}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,i(t)),e}}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(37896),e=n(76922),r=n(38638),o=Math.pow(2,16);function i(t){return 65535&t}var s=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=null),this.pos=t,this.deleted=e,this.recover=n},a=function(t,e){void 0===e&&(e=!1),this.ranges=t,this.inverted=e};a.prototype.recover=function(t){var e=0,n=i(t);if(!this.inverted)for(var r=0;r<n;r++)e+=this.ranges[3*r+2]-this.ranges[3*r+1];return this.ranges[3*n]+e+function(t){return(t-(65535&t))/o}(t)},a.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},a.prototype.map=function(t,e){return void 0===e&&(e=1),this._map(t,e,!0)},a.prototype._map=function(t,e,n){for(var r=0,i=this.inverted?2:1,a=this.inverted?1:2,c=0;c<this.ranges.length;c+=3){var p=this.ranges[c]-(this.inverted?r:0);if(p>t)break;var l=this.ranges[c+i],u=this.ranges[c+a],h=p+l;if(t<=h){var d=p+r+((l?t==p?-1:t==h?1:e:e)<0?0:u);return n?d:new s(d,e<0?t!=p:t!=h,t==(e<0?p:h)?null:c/3+(t-p)*o)}r+=u-l}return n?t+r:new s(t+r)},a.prototype.touches=function(t,e){for(var n=0,r=i(e),o=this.inverted?2:1,s=this.inverted?1:2,a=0;a<this.ranges.length;a+=3){var c=this.ranges[a]-(this.inverted?n:0);if(c>t)break;var p=this.ranges[a+o];if(t<=c+p&&a==3*r)return!0;n+=this.ranges[a+s]-p}return!1},a.prototype.forEach=function(t){for(var e=this.inverted?2:1,n=this.inverted?1:2,r=0,o=0;r<this.ranges.length;r+=3){var i=this.ranges[r],s=i-(this.inverted?o:0),a=i+(this.inverted?0:o),c=this.ranges[r+e],p=this.ranges[r+n];t(s,s+c,a,a+p),o+=p-c}},a.prototype.invert=function(){return new a(this.ranges,!this.inverted)},a.prototype.toString=function(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)},a.offset=function(t){return 0==t?a.empty:new a(t<0?[0,-t,0]:[0,0,t])},a.empty=new a([]);var c=function(t,e,n,r){this.maps=t||[],this.from=n||0,this.to=null==r?this.maps.length:r,this.mirror=e};function p(t){var e=Error.call(this,t);return e.__proto__=p.prototype,e}c.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.maps.length),new c(this.maps,this.mirror,t,e)},c.prototype.copy=function(){return new c(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)},c.prototype.appendMap=function(t,e){this.to=this.maps.push(t),null!=e&&this.setMirror(this.maps.length-1,e)},c.prototype.appendMapping=function(t){for(var e=0,n=this.maps.length;e<t.maps.length;e++){var r=t.getMirror(e);this.appendMap(t.maps[e],null!=r&&r<e?n+r:null)}},c.prototype.getMirror=function(t){if(this.mirror)for(var e=0;e<this.mirror.length;e++)if(this.mirror[e]==t)return this.mirror[e+(e%2?-1:1)]},c.prototype.setMirror=function(t,e){this.mirror||(this.mirror=[]),this.mirror.push(t,e)},c.prototype.appendMappingInverted=function(t){for(var e=t.maps.length-1,n=this.maps.length+t.maps.length;e>=0;e--){var r=t.getMirror(e);this.appendMap(t.maps[e].invert(),null!=r&&r>e?n-r-1:null)}},c.prototype.invert=function(){var t=new c;return t.appendMappingInverted(this),t},c.prototype.map=function(t,e){if(void 0===e&&(e=1),this.mirror)return this._map(t,e,!0);for(var n=this.from;n<this.to;n++)t=this.maps[n].map(t,e);return t},c.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},c.prototype._map=function(t,e,n){for(var r=!1,o=this.from;o<this.to;o++){var i=this.maps[o].mapResult(t,e);if(null!=i.recover){var a=this.getMirror(o);if(null!=a&&a>o&&a<this.to){o=a,t=this.maps[a].recover(i.recover);continue}}i.deleted&&(r=!0),t=i.pos}return n?t:new s(t,r)},p.prototype=Object.create(Error.prototype),p.prototype.constructor=p,p.prototype.name="TransformError";var l=function(t){this.doc=t,this.steps=[],this.docs=[],this.mapping=new c},u={before:{configurable:!0},docChanged:{configurable:!0}};function h(){throw new Error("Override me")}u.before.get=function(){return this.docs.length?this.docs[0]:this.doc},l.prototype.step=function(t){var e=this.maybeStep(t);if(e.failed)throw new p(e.failed);return this},l.prototype.maybeStep=function(t){var e=t.apply(this.doc);return e.failed||this.addStep(t,e.doc),e},u.docChanged.get=function(){return this.steps.length>0},l.prototype.addStep=function(t,e){this.docs.push(this.doc),this.steps.push(t),this.mapping.appendMap(t.getMap()),this.doc=e},Object.defineProperties(l.prototype,u);var d=Object.create(null),f=function(){};f.prototype.apply=function(t){return h()},f.prototype.getMap=function(){return a.empty},f.prototype.invert=function(t){return h()},f.prototype.map=function(t){return h()},f.prototype.merge=function(t){return null},f.prototype.toJSON=function(){return h()},f.fromJSON=function(t,e){if(!e||!e.stepType)throw new RangeError("Invalid input for Step.fromJSON");var n=d[e.stepType];if(!n)throw new RangeError("No step type "+e.stepType+" defined");return n.fromJSON(t,e)},f.jsonID=function(t,e){if(t in d)throw new RangeError("Duplicate use of step JSON ID "+t);return d[t]=e,e.prototype.jsonID=t,e};var m=function(t,e){this.doc=t,this.failed=e};m.ok=function(t){return new m(t,null)},m.fail=function(t){return new m(null,t)},m.fromReplace=function(t,e,n,o){try{return m.ok(t.replace(e,n,o))}catch(t){if(t instanceof r.ReplaceError)return m.fail(t.message);throw t}};var v=function(t){function e(e,n,r,o){t.call(this),this.from=e,this.to=n,this.slice=r,this.structure=!!o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){return this.structure&&y(t,this.from,this.to)?m.fail("Structure replace would overwrite content"):m.fromReplace(t,this.from,this.to,this.slice)},e.prototype.getMap=function(){return new a([this.from,this.to-this.from,this.slice.size])},e.prototype.invert=function(t){return new e(this.from,this.from+this.slice.size,t.slice(this.from,this.to))},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted?null:new e(n.pos,Math.max(n.pos,r.pos),this.slice)},e.prototype.merge=function(t){if(!(t instanceof e)||t.structure||this.structure)return null;if(this.from+this.slice.size!=t.from||this.slice.openEnd||t.slice.openStart){if(t.to!=this.from||this.slice.openStart||t.slice.openEnd)return null;var n=this.slice.size+t.slice.size==0?r.Slice.empty:new r.Slice(t.slice.content.append(this.slice.content),t.slice.openStart,this.slice.openEnd);return new e(t.from,this.to,n,this.structure)}var o=this.slice.size+t.slice.size==0?r.Slice.empty:new r.Slice(this.slice.content.append(t.slice.content),this.slice.openStart,t.slice.openEnd);return new e(this.from,this.to+(t.to-t.from),o,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new e(n.from,n.to,r.Slice.fromJSON(t,n.slice),!!n.structure)},e}(f);f.jsonID("replace",v);var g=function(t){function e(e,n,r,o,i,s,a){t.call(this),this.from=e,this.to=n,this.gapFrom=r,this.gapTo=o,this.slice=i,this.insert=s,this.structure=!!a}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){if(this.structure&&(y(t,this.from,this.gapFrom)||y(t,this.gapTo,this.to)))return m.fail("Structure gap-replace would overwrite content");var e=t.slice(this.gapFrom,this.gapTo);if(e.openStart||e.openEnd)return m.fail("Gap is not a flat range");var n=this.slice.insertAt(this.insert,e.content);return n?m.fromReplace(t,this.from,this.to,n):m.fail("Content does not fit in gap")},e.prototype.getMap=function(){return new a([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])},e.prototype.invert=function(t){var n=this.gapTo-this.gapFrom;return new e(this.from,this.from+this.slice.size+n,this.from+this.insert,this.from+this.insert+n,t.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1),o=t.map(this.gapFrom,-1),i=t.map(this.gapTo,1);return n.deleted&&r.deleted||o<n.pos||i>r.pos?null:new e(n.pos,r.pos,o,i,this.slice,this.insert,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to||"number"!=typeof n.gapFrom||"number"!=typeof n.gapTo||"number"!=typeof n.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new e(n.from,n.to,n.gapFrom,n.gapTo,r.Slice.fromJSON(t,n.slice),n.insert,!!n.structure)},e}(f);function y(t,e,n){for(var r=t.resolve(e),o=n-e,i=r.depth;o>0&&i>0&&r.indexAfter(i)==r.node(i).childCount;)i--,o--;if(o>0)for(var s=r.node(i).maybeChild(r.indexAfter(i));o>0;){if(!s||s.isLeaf)return!0;s=s.firstChild,o--}return!1}function b(t,e,n){return(0==e||t.canReplace(e,t.childCount))&&(n==t.childCount||t.canReplace(0,n))}function w(t){return{type:t,attrs:null}}function S(t,e,n,r){void 0===n&&(n=1);var o=t.resolve(e),i=o.depth-n,s=r&&r[r.length-1]||o.parent;if(i<0||o.parent.type.spec.isolating||!o.parent.canReplace(o.index(),o.parent.childCount)||!s.type.validContent(o.parent.content.cutByIndex(o.index(),o.parent.childCount)))return!1;for(var a=o.depth-1,c=n-2;a>i;a--,c--){var p=o.node(a),l=o.index(a);if(p.type.spec.isolating)return!1;var u=p.content.cutByIndex(l,p.childCount),h=r&&r[c]||p;if(h!=p&&(u=u.replaceChild(0,h.type.create(h.attrs))),!p.canReplace(l+1,p.childCount)||!h.type.validContent(u))return!1}var d=o.indexAfter(i),f=r&&r[0];return o.node(i).canReplaceWith(d,d,f?f.type:o.node(i+1).type)}function x(t,e,n){for(var o=[],i=0;i<t.childCount;i++){var s=t.child(i);s.content.size&&(s=s.copy(x(s.content,e,s))),s.isInline&&(s=e(s,n,i)),o.push(s)}return r.Fragment.fromArray(o)}f.jsonID("replaceAround",g),l.prototype.lift=function(t,e){for(var n=t.$from,o=t.$to,i=t.depth,s=n.before(i+1),a=o.after(i+1),c=s,p=a,l=r.Fragment.empty,u=0,h=i,d=!1;h>e;h--)d||n.index(h)>0?(d=!0,l=r.Fragment.from(n.node(h).copy(l)),u++):c--;for(var f=r.Fragment.empty,m=0,v=i,y=!1;v>e;v--)y||o.after(v+1)<o.end(v)?(y=!0,f=r.Fragment.from(o.node(v).copy(f)),m++):p++;return this.step(new g(c,p,s,a,new r.Slice(l.append(f),u,m),l.size-u,!0))},l.prototype.wrap=function(t,e){for(var n=r.Fragment.empty,o=e.length-1;o>=0;o--)n=r.Fragment.from(e[o].type.create(e[o].attrs,n));var i=t.start,s=t.end;return this.step(new g(i,s,i,s,new r.Slice(n,0,0),e.length,!0))},l.prototype.setBlockType=function(t,e,n,o){var i=this;if(void 0===e&&(e=t),!n.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");var s=this.steps.length;return this.doc.nodesBetween(t,e,(function(t,e){if(t.isTextblock&&!t.hasMarkup(n,o)&&function(t,e,n){var r=t.resolve(e),o=r.index();return r.parent.canReplaceWith(o,o+1,n)}(i.doc,i.mapping.slice(s).map(e),n)){i.clearIncompatible(i.mapping.slice(s).map(e,1),n);var a=i.mapping.slice(s),c=a.map(e,1),p=a.map(e+t.nodeSize,1);return i.step(new g(c,p,c+1,p-1,new r.Slice(r.Fragment.from(n.create(o,null,t.marks)),0,0),1,!0)),!1}})),this},l.prototype.setNodeMarkup=function(t,e,n,o){var i=this.doc.nodeAt(t);if(!i)throw new RangeError("No node at given position");e||(e=i.type);var s=e.create(n,null,o||i.marks);if(i.isLeaf)return this.replaceWith(t,t+i.nodeSize,s);if(!e.validContent(i.content))throw new RangeError("Invalid content for node type "+e.name);return this.step(new g(t,t+i.nodeSize,t+1,t+i.nodeSize-1,new r.Slice(r.Fragment.from(s),0,0),1,!0))},l.prototype.split=function(t,e,n){void 0===e&&(e=1);for(var o=this.doc.resolve(t),i=r.Fragment.empty,s=r.Fragment.empty,a=o.depth,c=o.depth-e,p=e-1;a>c;a--,p--){i=r.Fragment.from(o.node(a).copy(i));var l=n&&n[p];s=r.Fragment.from(l?l.type.create(l.attrs,s):o.node(a).copy(s))}return this.step(new v(t,t,new r.Slice(i.append(s),e,e),!0))},l.prototype.join=function(t,e){void 0===e&&(e=1);var n=new v(t-e,t+e,r.Slice.empty,!0);return this.step(n)};var k=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),o=t.resolve(this.from),i=o.node(o.sharedDepth(this.to)),s=new r.Slice(x(n.content,(function(t,n){return t.isAtom&&n.type.allowsMarkType(e.mark.type)?t.mark(e.mark.addToSet(t.marks)):t}),i),n.openStart,n.openEnd);return m.fromReplace(t,this.from,this.to,s)},e.prototype.invert=function(){return new M(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(f);f.jsonID("addMark",k);var M=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),o=new r.Slice(x(n.content,(function(t){return t.mark(e.mark.removeFromSet(t.marks))})),n.openStart,n.openEnd);return m.fromReplace(t,this.from,this.to,o)},e.prototype.invert=function(){return new k(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(f);function O(t,e,n){return!n.openStart&&!n.openEnd&&t.start()==e.start()&&t.parent.canReplace(t.index(),e.index(),n.content)}f.jsonID("removeMark",M),l.prototype.addMark=function(t,e,n){var r=this,o=[],i=[],s=null,a=null;return this.doc.nodesBetween(t,e,(function(r,c,p){if(r.isInline){var l=r.marks;if(!n.isInSet(l)&&p.type.allowsMarkType(n.type)){for(var u=Math.max(c,t),h=Math.min(c+r.nodeSize,e),d=n.addToSet(l),f=0;f<l.length;f++)l[f].isInSet(d)||(s&&s.to==u&&s.mark.eq(l[f])?s.to=h:o.push(s=new M(u,h,l[f])));a&&a.to==u?a.to=h:i.push(a=new k(u,h,n))}}})),o.forEach((function(t){return r.step(t)})),i.forEach((function(t){return r.step(t)})),this},l.prototype.removeMark=function(t,e,n){var o=this;void 0===n&&(n=null);var i=[],s=0;return this.doc.nodesBetween(t,e,(function(o,a){if(o.isInline){s++;var c=null;if(n instanceof r.MarkType)for(var p,l=o.marks;p=n.isInSet(l);)(c||(c=[])).push(p),l=p.removeFromSet(l);else n?n.isInSet(o.marks)&&(c=[n]):c=o.marks;if(c&&c.length)for(var u=Math.min(a+o.nodeSize,e),h=0;h<c.length;h++){for(var d=c[h],f=void 0,m=0;m<i.length;m++){var v=i[m];v.step==s-1&&d.eq(i[m].style)&&(f=v)}f?(f.to=u,f.step=s):i.push({style:d,from:Math.max(a,t),to:u,step:s})}}})),i.forEach((function(t){return o.step(new M(t.from,t.to,t.style))})),this},l.prototype.clearIncompatible=function(t,e,n){void 0===n&&(n=e.contentMatch);for(var o=this.doc.nodeAt(t),i=[],s=t+1,a=0;a<o.childCount;a++){var c=o.child(a),p=s+c.nodeSize,l=n.matchType(c.type,c.attrs);if(l){n=l;for(var u=0;u<c.marks.length;u++)e.allowsMarkType(c.marks[u].type)||this.step(new M(s,p,c.marks[u]))}else i.push(new v(s,p,r.Slice.empty));s=p}if(!n.validEnd){var h=n.fillBefore(r.Fragment.empty,!0);this.replace(s,s,new r.Slice(h,0,0))}for(var d=i.length-1;d>=0;d--)this.step(i[d]);return this},l.prototype.replace=function(t,e,n){void 0===e&&(e=t),void 0===n&&(n=r.Slice.empty);var o=function(t,e,n,o){if(void 0===n&&(n=e),void 0===o&&(o=r.Slice.empty),e==n&&!o.size)return null;var i=t.resolve(e),s=t.resolve(n);return O(i,s,o)?new v(e,n,o):new C(i,s,o).fit()}(this.doc,t,e,n);return o&&this.step(o),this},l.prototype.replaceWith=function(t,e,n){return this.replace(t,e,new r.Slice(r.Fragment.from(n),0,0))},l.prototype.delete=function(t,e){return this.replace(t,e,r.Slice.empty)},l.prototype.insert=function(t,e){return this.replaceWith(t,t,e)};var C=function(t,e,n){this.$to=e,this.$from=t,this.unplaced=n,this.frontier=[];for(var o=0;o<=t.depth;o++){var i=t.node(o);this.frontier.push({type:i.type,match:i.contentMatchAt(t.indexAfter(o))})}this.placed=r.Fragment.empty;for(var s=t.depth;s>0;s--)this.placed=r.Fragment.from(t.node(s).copy(this.placed))},T={depth:{configurable:!0}};function N(t,e,n){return 0==e?t.cutByIndex(n):t.replaceChild(0,t.firstChild.copy(N(t.firstChild.content,e-1,n)))}function E(t,e,n){return 0==e?t.append(n):t.replaceChild(t.childCount-1,t.lastChild.copy(E(t.lastChild.content,e-1,n)))}function A(t,e){for(var n=0;n<e;n++)t=t.firstChild.content;return t}function D(t,e,n){if(e<=0)return t;var o=t.content;return e>1&&(o=o.replaceChild(0,D(o.firstChild,e-1,1==o.childCount?n-1:0))),e>0&&(o=t.type.contentMatch.fillBefore(o).append(o),n<=0&&(o=o.append(t.type.contentMatch.matchFragment(o).fillBefore(r.Fragment.empty,!0)))),t.copy(o)}function _(t,e,n,r,o){var i=t.node(e),s=o?t.indexAfter(e):t.index(e);if(s==i.childCount&&!n.compatibleContent(i.type))return null;var a=r.fillBefore(i.content,!0,s);return a&&!function(t,e,n){for(var r=n;r<e.childCount;r++)if(!t.allowsMarks(e.child(r).marks))return!0;return!1}(n,i.content,s)?a:null}function I(t,e,n,o,i){if(e<n){var s=t.firstChild;t=t.replaceChild(0,s.copy(I(s.content,e+1,n,o,s)))}if(e>o){var a=i.contentMatchAt(0),c=a.fillBefore(t).append(t);t=c.append(a.matchFragment(c).fillBefore(r.Fragment.empty,!0))}return t}function P(t,e){for(var n=[],r=Math.min(t.depth,e.depth);r>=0;r--){var o=t.start(r);if(o<t.pos-(t.depth-r)||e.end(r)>e.pos+(e.depth-r)||t.node(r).type.spec.isolating||e.node(r).type.spec.isolating)break;(o==e.start(r)||r==t.depth&&r==e.depth&&t.parent.inlineContent&&e.parent.inlineContent&&r&&e.start(r-1)==o-1)&&n.push(r)}return n}T.depth.get=function(){return this.frontier.length-1},C.prototype.fit=function(){for(;this.unplaced.size;){var t=this.findFittable();t?this.placeNodes(t):this.openMore()||this.dropNode()}var e=this.mustMoveInline(),n=this.placed.size-this.depth-this.$from.depth,o=this.$from,i=this.close(e<0?this.$to:o.doc.resolve(e));if(!i)return null;for(var s=this.placed,a=o.depth,c=i.depth;a&&c&&1==s.childCount;)s=s.firstChild.content,a--,c--;var p=new r.Slice(s,a,c);return e>-1?new g(o.pos,e,this.$to.pos,this.$to.end(),p,n):p.size||o.pos!=this.$to.pos?new v(o.pos,i.pos,p):void 0},C.prototype.findFittable=function(){for(var t=1;t<=2;t++)for(var e=this.unplaced.openStart;e>=0;e--)for(var n=void 0,o=(e?(n=A(this.unplaced.content,e-1).firstChild).content:this.unplaced.content).firstChild,i=this.depth;i>=0;i--){var s=this.frontier[i],a=s.type,c=s.match,p=void 0,l=void 0;if(1==t&&(o?c.matchType(o.type)||(l=c.fillBefore(r.Fragment.from(o),!1)):a.compatibleContent(n.type)))return{sliceDepth:e,frontierDepth:i,parent:n,inject:l};if(2==t&&o&&(p=c.findWrapping(o.type)))return{sliceDepth:e,frontierDepth:i,parent:n,wrap:p};if(n&&c.matchType(n.type))break}},C.prototype.openMore=function(){var t=this.unplaced,e=t.content,n=t.openStart,o=t.openEnd,i=A(e,n);return!(!i.childCount||i.firstChild.isLeaf||(this.unplaced=new r.Slice(e,n+1,Math.max(o,i.size+n>=e.size-o?n+1:0)),0))},C.prototype.dropNode=function(){var t=this.unplaced,e=t.content,n=t.openStart,o=t.openEnd,i=A(e,n);if(i.childCount<=1&&n>0){var s=e.size-n<=n+i.size;this.unplaced=new r.Slice(N(e,n-1,1),n-1,s?n-1:o)}else this.unplaced=new r.Slice(N(e,n,1),n,o)},C.prototype.placeNodes=function(t){for(var e=t.sliceDepth,n=t.frontierDepth,o=t.parent,i=t.inject,s=t.wrap;this.depth>n;)this.closeFrontierNode();if(s)for(var a=0;a<s.length;a++)this.openFrontierNode(s[a]);var c=this.unplaced,p=o?o.content:c.content,l=c.openStart-e,u=0,h=[],d=this.frontier[n],f=d.match,m=d.type;if(i){for(var v=0;v<i.childCount;v++)h.push(i.child(v));f=f.matchFragment(i)}for(var g=p.size+e-(c.content.size-c.openEnd);u<p.childCount;){var y=p.child(u),b=f.matchType(y.type);if(!b)break;(++u>1||0==l||y.content.size)&&(f=b,h.push(D(y.mark(m.allowedMarks(y.marks)),1==u?l:0,u==p.childCount?g:-1)))}var w=u==p.childCount;w||(g=-1),this.placed=E(this.placed,n,r.Fragment.from(h)),this.frontier[n].match=f,w&&g<0&&o&&o.type==this.frontier[this.depth].type&&this.frontier.length>1&&this.closeFrontierNode();for(var S=0,x=p;S<g;S++){var k=x.lastChild;this.frontier.push({type:k.type,match:k.contentMatchAt(k.childCount)}),x=k.content}this.unplaced=w?0==e?r.Slice.empty:new r.Slice(N(c.content,e-1,1),e-1,g<0?c.openEnd:e-1):new r.Slice(N(c.content,e,u),c.openStart,c.openEnd)},C.prototype.mustMoveInline=function(){if(!this.$to.parent.isTextblock||this.$to.end()==this.$to.pos)return-1;var t,e=this.frontier[this.depth];if(!e.type.isTextblock||!_(this.$to,this.$to.depth,e.type,e.match,!1)||this.$to.depth==this.depth&&(t=this.findCloseLevel(this.$to))&&t.depth==this.depth)return-1;for(var n=this.$to.depth,r=this.$to.after(n);n>1&&r==this.$to.end(--n);)++r;return r},C.prototype.findCloseLevel=function(t){t:for(var e=Math.min(this.depth,t.depth);e>=0;e--){var n=this.frontier[e],r=n.match,o=n.type,i=e<t.depth&&t.end(e+1)==t.pos+(t.depth-(e+1)),s=_(t,e,o,r,i);if(s){for(var a=e-1;a>=0;a--){var c=this.frontier[a],p=c.match,l=_(t,a,c.type,p,!0);if(!l||l.childCount)continue t}return{depth:e,fit:s,move:i?t.doc.resolve(t.after(e+1)):t}}}},C.prototype.close=function(t){var e=this.findCloseLevel(t);if(!e)return null;for(;this.depth>e.depth;)this.closeFrontierNode();e.fit.childCount&&(this.placed=E(this.placed,e.depth,e.fit)),t=e.move;for(var n=e.depth+1;n<=t.depth;n++){var r=t.node(n),o=r.type.contentMatch.fillBefore(r.content,!0,t.index(n));this.openFrontierNode(r.type,r.attrs,o)}return t},C.prototype.openFrontierNode=function(t,e,n){var o=this.frontier[this.depth];o.match=o.match.matchType(t),this.placed=E(this.placed,this.depth,r.Fragment.from(t.create(e,n))),this.frontier.push({type:t,match:t.contentMatch})},C.prototype.closeFrontierNode=function(){var t=this.frontier.pop().match.fillBefore(r.Fragment.empty,!0);t.childCount&&(this.placed=E(this.placed,this.frontier.length,t))},Object.defineProperties(C.prototype,T),l.prototype.replaceRange=function(t,e,n){if(!n.size)return this.deleteRange(t,e);var o=this.doc.resolve(t),i=this.doc.resolve(e);if(O(o,i,n))return this.step(new v(t,e,n));var s=P(o,this.doc.resolve(e));0==s[s.length-1]&&s.pop();var a=-(o.depth+1);s.unshift(a);for(var c=o.depth,p=o.pos-1;c>0;c--,p--){var l=o.node(c).type.spec;if(l.defining||l.isolating)break;s.indexOf(c)>-1?a=c:o.before(c)==p&&s.splice(1,0,-c)}for(var u=s.indexOf(a),h=[],d=n.openStart,f=n.content,m=0;;m++){var g=f.firstChild;if(h.push(g),m==n.openStart)break;f=g.content}d>0&&h[d-1].type.spec.defining&&o.node(u).type!=h[d-1].type?d-=1:d>=2&&h[d-1].isTextblock&&h[d-2].type.spec.defining&&o.node(u).type!=h[d-2].type&&(d-=2);for(var y=n.openStart;y>=0;y--){var b=(y+d+1)%(n.openStart+1),w=h[b];if(w)for(var S=0;S<s.length;S++){var x=s[(S+u)%s.length],k=!0;x<0&&(k=!1,x=-x);var M=o.node(x-1),C=o.index(x-1);if(M.canReplaceWith(C,C,w.type,w.marks))return this.replace(o.before(x),k?i.after(x):e,new r.Slice(I(n.content,0,n.openStart,b),b,n.openEnd))}}for(var T=this.steps.length,N=s.length-1;N>=0&&(this.replace(t,e,n),!(this.steps.length>T));N--){var E=s[N];E<0||(t=o.before(E),e=i.after(E))}return this},l.prototype.replaceRangeWith=function(t,e,n){if(!n.isInline&&t==e&&this.doc.resolve(t).parent.content.size){var o=function(t,e,n){var r=t.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),n))return e;if(0==r.parentOffset)for(var o=r.depth-1;o>=0;o--){var i=r.index(o);if(r.node(o).canReplaceWith(i,i,n))return r.before(o+1);if(i>0)return null}if(r.parentOffset==r.parent.content.size)for(var s=r.depth-1;s>=0;s--){var a=r.indexAfter(s);if(r.node(s).canReplaceWith(a,a,n))return r.after(s+1);if(a<r.node(s).childCount)return null}}(this.doc,t,n.type);null!=o&&(t=e=o)}return this.replaceRange(t,e,new r.Slice(r.Fragment.from(n),0,0))},l.prototype.deleteRange=function(t,e){for(var n=this.doc.resolve(t),r=this.doc.resolve(e),o=P(n,r),i=0;i<o.length;i++){var s=o[i],a=i==o.length-1;if(a&&0==s||n.node(s).type.contentMatch.validEnd)return this.delete(n.start(s),r.end(s));if(s>0&&(a||n.node(s-1).canReplace(n.index(s-1),r.indexAfter(s-1))))return this.delete(n.before(s),r.after(s))}for(var c=1;c<=n.depth&&c<=r.depth;c++)if(t-n.start(c)==n.depth-c&&e>n.end(c)&&r.end(c)-e!=r.depth-c)return this.delete(n.before(c),e);return this.delete(t,e)};var z=n(42778),R=n(74465),j=n(98780),F=n(54751),B=n(25108);function $(t){return"Object"===function(t){return Object.prototype.toString.call(t).slice(8,-1)}(t)&&t.constructor===Object&&Object.getPrototypeOf(t)===Object.prototype}function L(t,e){const n={...t};return $(t)&&$(e)&&Object.keys(e).forEach((r=>{$(e[r])?r in t?n[r]=L(t[r],e[r]):Object.assign(n,{[r]:e[r]}):Object.assign(n,{[r]:e[r]})})),n}function V(t){return"function"==typeof t}function H(t,e,...n){return V(t)?e?t.bind(e)(...n):t(...n):t}function J(t,e,n){return void 0===t.config[e]&&t.parent?J(t.parent,e,n):"function"==typeof t.config[e]?t.config[e].bind({...n,parent:t.parent?J(t.parent,e,n):null}):t.config[e]}class q{constructor(t={}){this.type="extension",this.name="extension",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&B.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=H(J(this,"addOptions",{name:this.name}))),this.storage=H(J(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new q(t)}configure(t={}){const e=this.extend();return e.options=L(this.options,t),e.storage=H(J(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new q(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&B.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=t.defaultOptions?t.defaultOptions:e.parent.options,t.addOptions&&(e.options=H(J(e,"addOptions",{name:e.name}))),e.storage=H(J(e,"addStorage",{name:e.name,options:e.options})),e}}function W(t,e,n){const{from:r,to:o}=e,{blockSeparator:i="\n\n",textSerializers:s={}}=n||{};let a="",c=!0;return t.nodesBetween(r,o,((t,e,n,p)=>{var l;const u=null==s?void 0:s[t.type.name];u?(t.isBlock&&!c&&(a+=i,c=!0),a+=u({node:t,pos:e,parent:n,index:p})):t.isText?(a+=null===(l=null==t?void 0:t.text)||void 0===l?void 0:l.slice(Math.max(r,e)-e,o-e),c=!1):t.isBlock&&!c&&(a+=i,c=!0)})),a}function K(t){return Object.fromEntries(Object.entries(t.nodes).filter((([,t])=>t.spec.toText)).map((([t,e])=>[t,e.spec.toText])))}const U=q.create({name:"clipboardTextSerializer",addProseMirrorPlugins(){return[new e.Plugin({key:new e.PluginKey("clipboardTextSerializer"),props:{clipboardTextSerializer:()=>{const{editor:t}=this,{state:e,schema:n}=t,{doc:r,selection:o}=e,{from:i,to:s}=o;return W(r,{from:i,to:s},{textSerializers:K(n)})}}})]}});var G=Object.freeze({__proto__:null,blur:()=>({editor:t,view:e})=>(requestAnimationFrame((()=>{t.isDestroyed||e.dom.blur()})),!0)}),Z=Object.freeze({__proto__:null,clearContent:(t=!1)=>({commands:e})=>e.setContent("",t)}),X=Object.freeze({__proto__:null,clearNodes:()=>({state:t,tr:e,dispatch:n})=>{const{selection:r}=e,{ranges:o}=r;return o.forEach((r=>{t.doc.nodesBetween(r.$from.pos,r.$to.pos,((t,r)=>{if(t.type.isText)return;const o=e.doc.resolve(e.mapping.map(r)),i=e.doc.resolve(e.mapping.map(r+t.nodeSize)),s=o.blockRange(i);if(!s)return;const a=function(t){for(var e=t.parent.content.cutByIndex(t.startIndex,t.endIndex),n=t.depth;;--n){var r=t.$from.node(n),o=t.$from.index(n),i=t.$to.indexAfter(n);if(n<t.depth&&r.canReplace(o,i,e))return n;if(0==n||r.type.spec.isolating||!b(r,o,i))break}}(s);if(t.type.isTextblock&&n){const{defaultType:t}=o.parent.contentMatchAt(o.index());e.setNodeMarkup(s.start,t)}(a||0===a)&&n&&e.lift(s,a)}))})),!0}}),Y=Object.freeze({__proto__:null,command:t=>e=>t(e)}),Q=Object.freeze({__proto__:null,createParagraphNear:()=>({state:t,dispatch:e})=>(0,z.createParagraphNear)(t,e)});function tt(t,e){if("string"==typeof t){if(!e.nodes[t])throw Error(`There is no node type named '${t}'. Maybe you forgot to add the extension?`);return e.nodes[t]}return t}var et=Object.freeze({__proto__:null,deleteNode:t=>({tr:e,state:n,dispatch:r})=>{const o=tt(t,n.schema),i=e.selection.$anchor;for(let t=i.depth;t>0;t-=1)if(i.node(t).type===o){if(r){const n=i.before(t),r=i.after(t);e.delete(n,r).scrollIntoView()}return!0}return!1}}),nt=Object.freeze({__proto__:null,deleteRange:t=>({tr:e,dispatch:n})=>{const{from:r,to:o}=t;return n&&e.delete(r,o),!0}}),rt=Object.freeze({__proto__:null,deleteSelection:()=>({state:t,dispatch:e})=>(0,z.deleteSelection)(t,e)}),ot=Object.freeze({__proto__:null,enter:()=>({commands:t})=>t.keyboardShortcut("Enter")}),it=Object.freeze({__proto__:null,exitCode:()=>({state:t,dispatch:e})=>(0,z.exitCode)(t,e)});function st(t,e){if("string"==typeof t){if(!e.marks[t])throw Error(`There is no mark type named '${t}'. Maybe you forgot to add the extension?`);return e.marks[t]}return t}function at(t){return"[object RegExp]"===Object.prototype.toString.call(t)}function ct(t,e,n={strict:!0}){const r=Object.keys(e);return!r.length||r.every((r=>n.strict?e[r]===t[r]:at(e[r])?e[r].test(t[r]):e[r]===t[r]))}function pt(t,e,n={}){return t.find((t=>t.type===e&&ct(t.attrs,n)))}function lt(t,e,n={}){return!!pt(t,e,n)}function ut(t,e,n={}){if(!t||!e)return;const r=t.parent.childAfter(t.parentOffset);if(!r.node)return;const o=pt(r.node.marks,e,n);if(!o)return;let i=t.index(),s=t.start()+r.offset,a=i+1,c=s+r.node.nodeSize;for(pt(r.node.marks,e,n);i>0&&o.isInSet(t.parent.child(i-1).marks);)i-=1,s-=t.parent.child(i).nodeSize;for(;a<t.parent.childCount&&lt(t.parent.child(a).marks,e,n);)c+=t.parent.child(a).nodeSize,a+=1;return{from:s,to:c}}var ht=Object.freeze({__proto__:null,extendMarkRange:(t,n={})=>({tr:r,state:o,dispatch:i})=>{const s=st(t,o.schema),{doc:a,selection:c}=r,{$from:p,from:l,to:u}=c;if(i){const t=ut(p,s,n);if(t&&t.from<=l&&t.to>=u){const n=e.TextSelection.create(a,t.from,t.to);r.setSelection(n)}}return!0}}),dt=Object.freeze({__proto__:null,first:t=>e=>{const n="function"==typeof t?t(e):t;for(let t=0;t<n.length;t+=1)if(n[t](e))return!0;return!1}});function ft(t=0,e=0,n=0){return Math.min(Math.max(t,e),n)}function mt(t){return t&&"object"==typeof t&&!Array.isArray(t)&&!function(t){var e;return"class"===(null===(e=t.constructor)||void 0===e?void 0:e.toString().substring(0,5))}(t)}var vt=Object.freeze({__proto__:null,focus:(t=null)=>({editor:n,view:r,tr:o,dispatch:i})=>{const s=()=>{(["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document)&&r.dom.focus(),requestAnimationFrame((()=>{n.isDestroyed||(r.focus(),n.commands.scrollIntoView())}))};if(r.hasFocus()&&null===t||!1===t)return!0;if(i&&null===t&&!(mt(a=n.state.selection)&&a instanceof e.TextSelection))return s(),!0;var a;const{from:c,to:p}=function(t,e=null){if(!e)return null;if("start"===e||!0===e)return{from:0,to:0};if("end"===e){const{size:e}=t.doc.content;return{from:e,to:e}}return{from:e,to:e}}(n.state,t)||n.state.selection,{doc:l,storedMarks:u}=o,h=e.Selection.atStart(l).from,d=e.Selection.atEnd(l).to,f=ft(c,h,d),m=ft(p,h,d),v=e.TextSelection.create(l,f,m),g=n.state.selection.eq(v);return i&&(g||o.setSelection(v),g&&u&&o.setStoredMarks(u),s()),!0}}),gt=Object.freeze({__proto__:null,forEach:(t,e)=>n=>t.every(((t,r)=>e(t,{...n,index:r})))}),yt=Object.freeze({__proto__:null,insertContent:(t,e)=>({tr:n,commands:r})=>r.insertContentAt({from:n.selection.from,to:n.selection.to},t,e)});function bt(t){const e=`<body>${t}</body>`;return(new window.DOMParser).parseFromString(e,"text/html").body}function wt(t,e,n){if(n={slice:!0,parseOptions:{},...n},"object"==typeof t&&null!==t)try{return Array.isArray(t)?r.Fragment.fromArray(t.map((t=>e.nodeFromJSON(t)))):e.nodeFromJSON(t)}catch(r){return B.warn("[tiptap warn]: Invalid content.","Passed value:",t,"Error:",r),wt("",e,n)}if("string"==typeof t){const o=r.DOMParser.fromSchema(e);return n.slice?o.parseSlice(bt(t),n.parseOptions).content:o.parse(bt(t),n.parseOptions)}return wt("",e,n)}var St=Object.freeze({__proto__:null,insertContentAt:(t,n,r)=>({tr:o,dispatch:i,editor:s})=>{if(i){r={parseOptions:{},updateSelection:!0,...r};const i=wt(n,s.schema,{parseOptions:{preserveWhitespace:"full",...r.parseOptions}});if("<>"===i.toString())return!0;const{from:a,to:c}="number"==typeof t?{from:t,to:t}:t;o.replaceWith(a,c,i),r.updateSelection&&function(t,n,r){const o=t.steps.length-1;if(o<n)return;const i=t.steps[o];if(!(i instanceof v||i instanceof g))return;const s=t.mapping.maps[o];let a=0;s.forEach(((t,e,n,r)=>{0===a&&(a=r)})),t.setSelection(e.Selection.near(t.doc.resolve(a),1))}(o,o.steps.length-1)}return!0}}),xt=Object.freeze({__proto__:null,joinBackward:()=>({state:t,dispatch:e})=>(0,z.joinBackward)(t,e)}),kt=Object.freeze({__proto__:null,joinForward:()=>({state:t,dispatch:e})=>(0,z.joinForward)(t,e)});const Mt="undefined"!=typeof navigator&&/Mac/.test(navigator.platform);var Ot=Object.freeze({__proto__:null,keyboardShortcut:t=>({editor:e,view:n,tr:r,dispatch:o})=>{const i=function(t){const e=t.split(/-(?!$)/);let n,r,o,i,s=e[e.length-1];"Space"===s&&(s=" ");for(let t=0;t<e.length-1;t+=1){const s=e[t];if(/^(cmd|meta|m)$/i.test(s))i=!0;else if(/^a(lt)?$/i.test(s))n=!0;else if(/^(c|ctrl|control)$/i.test(s))r=!0;else if(/^s(hift)?$/i.test(s))o=!0;else{if(!/^mod$/i.test(s))throw new Error(`Unrecognized modifier name: ${s}`);Mt?i=!0:r=!0}}return n&&(s=`Alt-${s}`),r&&(s=`Ctrl-${s}`),i&&(s=`Meta-${s}`),o&&(s=`Shift-${s}`),s}(t).split(/-(?!$)/),s=i.find((t=>!["Alt","Ctrl","Meta","Shift"].includes(t))),a=new KeyboardEvent("keydown",{key:"Space"===s?" ":s,altKey:i.includes("Alt"),ctrlKey:i.includes("Ctrl"),metaKey:i.includes("Meta"),shiftKey:i.includes("Shift"),bubbles:!0,cancelable:!0}),c=e.captureTransaction((()=>{n.someProp("handleKeyDown",(t=>t(n,a)))}));return null==c||c.steps.forEach((t=>{const e=t.map(r.mapping);e&&o&&r.maybeStep(e)})),!0}});function Ct(t,e,n={}){const{from:r,to:o,empty:i}=t.selection,s=e?tt(e,t.schema):null,a=[];t.doc.nodesBetween(r,o,((t,e)=>{if(t.isText)return;const n=Math.max(r,e),i=Math.min(o,e+t.nodeSize);a.push({node:t,from:n,to:i})}));const c=o-r,p=a.filter((t=>!s||s.name===t.node.type.name)).filter((t=>ct(t.node.attrs,n,{strict:!1})));return i?!!p.length:p.reduce(((t,e)=>t+e.to-e.from),0)>=c}var Tt=Object.freeze({__proto__:null,lift:(t,e={})=>({state:n,dispatch:r})=>!!Ct(n,tt(t,n.schema),e)&&(0,z.lift)(n,r)}),Nt=Object.freeze({__proto__:null,liftEmptyBlock:()=>({state:t,dispatch:e})=>(0,z.liftEmptyBlock)(t,e)}),Et=Object.freeze({__proto__:null,liftListItem:t=>({state:e,dispatch:n})=>{const r=tt(t,e.schema);return(0,R.liftListItem)(r)(e,n)}}),At=Object.freeze({__proto__:null,newlineInCode:()=>({state:t,dispatch:e})=>(0,z.newlineInCode)(t,e)});function Dt(t,e){return e.nodes[t]?"node":e.marks[t]?"mark":null}function _t(t,e){const n="string"==typeof e?[e]:e;return Object.keys(t).reduce(((e,r)=>(n.includes(r)||(e[r]=t[r]),e)),{})}var It=Object.freeze({__proto__:null,resetAttributes:(t,e)=>({tr:n,state:r,dispatch:o})=>{let i=null,s=null;const a=Dt("string"==typeof t?t:t.name,r.schema);return!!a&&("node"===a&&(i=tt(t,r.schema)),"mark"===a&&(s=st(t,r.schema)),o&&n.selection.ranges.forEach((t=>{r.doc.nodesBetween(t.$from.pos,t.$to.pos,((t,r)=>{i&&i===t.type&&n.setNodeMarkup(r,void 0,_t(t.attrs,e)),s&&t.marks.length&&t.marks.forEach((o=>{s===o.type&&n.addMark(r,r+t.nodeSize,s.create(_t(o.attrs,e)))}))}))})),!0)}}),Pt=Object.freeze({__proto__:null,scrollIntoView:()=>({tr:t,dispatch:e})=>(e&&t.scrollIntoView(),!0)}),zt=Object.freeze({__proto__:null,selectAll:()=>({tr:t,commands:e})=>e.setTextSelection({from:0,to:t.doc.content.size})}),Rt=Object.freeze({__proto__:null,selectNodeBackward:()=>({state:t,dispatch:e})=>(0,z.selectNodeBackward)(t,e)}),jt=Object.freeze({__proto__:null,selectNodeForward:()=>({state:t,dispatch:e})=>(0,z.selectNodeForward)(t,e)}),Ft=Object.freeze({__proto__:null,selectParentNode:()=>({state:t,dispatch:e})=>(0,z.selectParentNode)(t,e)});function Bt(t,e,n={}){return wt(t,e,{slice:!1,parseOptions:n})}var $t=Object.freeze({__proto__:null,setContent:(t,n=!1,r={})=>({tr:o,editor:i,dispatch:s})=>{const{doc:a}=o,c=Bt(t,i.schema,r),p=e.TextSelection.create(a,0,a.content.size);return s&&o.setSelection(p).replaceSelectionWith(c,!1).setMeta("preventUpdate",!n),!0}});function Lt(t,e){const n=st(e,t.schema),{from:r,to:o,empty:i}=t.selection,s=[];i?(t.storedMarks&&s.push(...t.storedMarks),s.push(...t.selection.$head.marks())):t.doc.nodesBetween(r,o,(t=>{s.push(...t.marks)}));const a=s.find((t=>t.type.name===n.name));return a?{...a.attrs}:{}}var Vt=Object.freeze({__proto__:null,setMark:(t,e={})=>({tr:n,state:r,dispatch:o})=>{const{selection:i}=n,{empty:s,ranges:a}=i,c=st(t,r.schema);if(o)if(s){const t=Lt(r,c);n.addStoredMark(c.create({...t,...e}))}else a.forEach((t=>{const o=t.$from.pos,i=t.$to.pos;r.doc.nodesBetween(o,i,((t,r)=>{const s=Math.max(r,o),a=Math.min(r+t.nodeSize,i);t.marks.find((t=>t.type===c))?t.marks.forEach((t=>{c===t.type&&n.addMark(s,a,c.create({...t.attrs,...e}))})):n.addMark(s,a,c.create(e))}))}));return!0}}),Ht=Object.freeze({__proto__:null,setMeta:(t,e)=>({tr:n})=>(n.setMeta(t,e),!0)}),Jt=Object.freeze({__proto__:null,setNode:(t,e={})=>({state:n,dispatch:r})=>{const o=tt(t,n.schema);return(0,z.setBlockType)(o,e)(n,r)}}),qt=Object.freeze({__proto__:null,setNodeSelection:t=>({tr:n,dispatch:r})=>{if(r){const{doc:r}=n,o=e.Selection.atStart(r).from,i=e.Selection.atEnd(r).to,s=ft(t,o,i),a=e.NodeSelection.create(r,s);n.setSelection(a)}return!0}}),Wt=Object.freeze({__proto__:null,setTextSelection:t=>({tr:n,dispatch:r})=>{if(r){const{doc:r}=n,{from:o,to:i}="number"==typeof t?{from:t,to:t}:t,s=e.Selection.atStart(r).from,a=e.Selection.atEnd(r).to,c=ft(o,s,a),p=ft(i,s,a),l=e.TextSelection.create(r,c,p);n.setSelection(l)}return!0}}),Kt=Object.freeze({__proto__:null,sinkListItem:t=>({state:e,dispatch:n})=>{const r=tt(t,e.schema);return(0,R.sinkListItem)(r)(e,n)}});function Ut(t,e,n){return Object.fromEntries(Object.entries(n).filter((([n])=>{const r=t.find((t=>t.type===e&&t.name===n));return!!r&&r.attribute.keepOnSplit})))}function Gt(t,e){const n=t.storedMarks||t.selection.$to.parentOffset&&t.selection.$from.marks();if(n){const r=n.filter((t=>null==e?void 0:e.includes(t.type.name)));t.tr.ensureMarks(r)}}var Zt=Object.freeze({__proto__:null,splitBlock:({keepMarks:t=!0}={})=>({tr:n,state:r,dispatch:o,editor:i})=>{const{selection:s,doc:a}=n,{$from:c,$to:p}=s,l=Ut(i.extensionManager.attributes,c.node().type.name,c.node().attrs);if(s instanceof e.NodeSelection&&s.node.isBlock)return!(!c.parentOffset||!S(a,c.pos)||(o&&(t&&Gt(r,i.extensionManager.splittableMarks),n.split(c.pos).scrollIntoView()),0));if(!c.parent.isBlock)return!1;if(o){const o=p.parentOffset===p.parent.content.size;s instanceof e.TextSelection&&n.deleteSelection();const a=0===c.depth?void 0:function(t){for(let e=0;e<t.edgeCount;e+=1){const{type:n}=t.edge(e);if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}(c.node(-1).contentMatchAt(c.indexAfter(-1)));let u=o&&a?[{type:a,attrs:l}]:void 0,h=S(n.doc,n.mapping.map(c.pos),1,u);if(u||h||!S(n.doc,n.mapping.map(c.pos),1,a?[{type:a}]:void 0)||(h=!0,u=a?[{type:a,attrs:l}]:void 0),h&&(n.split(n.mapping.map(c.pos),1,u),a&&!o&&!c.parentOffset&&c.parent.type!==a)){const t=n.mapping.map(c.before()),e=n.doc.resolve(t);c.node(-1).canReplaceWith(e.index(),e.index()+1,a)&&n.setNodeMarkup(n.mapping.map(c.before()),a)}t&&Gt(r,i.extensionManager.splittableMarks),n.scrollIntoView()}return!0}}),Xt=Object.freeze({__proto__:null,splitListItem:t=>({tr:n,state:o,dispatch:i,editor:s})=>{var a;const c=tt(t,o.schema),{$from:p,$to:l}=o.selection,u=o.selection.node;if(u&&u.isBlock||p.depth<2||!p.sameParent(l))return!1;const h=p.node(-1);if(h.type!==c)return!1;const d=s.extensionManager.attributes;if(0===p.parent.content.size&&p.node(-1).childCount===p.indexAfter(-1)){if(2===p.depth||p.node(-3).type!==c||p.index(-2)!==p.node(-2).childCount-1)return!1;if(i){let t=r.Fragment.empty;const o=p.index(-1)?1:p.index(-2)?2:3;for(let e=p.depth-o;e>=p.depth-3;e-=1)t=r.Fragment.from(p.node(e).copy(t));const i=p.indexAfter(-1)<p.node(-2).childCount?1:p.indexAfter(-2)<p.node(-3).childCount?2:3,s=Ut(d,p.node().type.name,p.node().attrs),l=(null===(a=c.contentMatch.defaultType)||void 0===a?void 0:a.createAndFill(s))||void 0;t=t.append(r.Fragment.from(c.createAndFill(null,l)||void 0));const u=p.before(p.depth-(o-1));n.replace(u,p.after(-i),new r.Slice(t,4-o,0));let h=-1;n.doc.nodesBetween(u,n.doc.content.size,((t,e)=>{if(h>-1)return!1;t.isTextblock&&0===t.content.size&&(h=e+1)})),h>-1&&n.setSelection(e.TextSelection.near(n.doc.resolve(h))),n.scrollIntoView()}return!0}const f=l.pos===p.end()?h.contentMatchAt(0).defaultType:null,m=Ut(d,h.type.name,h.attrs),v=Ut(d,p.node().type.name,p.node().attrs);n.delete(p.pos,l.pos);const g=f?[{type:c,attrs:m},{type:f,attrs:v}]:[{type:c,attrs:m}];return!!S(n.doc,p.pos,2)&&(i&&n.split(p.pos,2,g).scrollIntoView(),!0)}});function Yt(t){return{baseExtensions:t.filter((t=>"extension"===t.type)),nodeExtensions:t.filter((t=>"node"===t.type)),markExtensions:t.filter((t=>"mark"===t.type))}}function Qt(t,e){const{nodeExtensions:n}=Yt(e),r=n.find((e=>e.name===t));if(!r)return!1;const o=H(J(r,"group",{name:r.name,options:r.options,storage:r.storage}));return"string"==typeof o&&o.split(" ").includes("list")}var te=Object.freeze({__proto__:null,toggleList:(t,e)=>({editor:n,tr:r,state:o,dispatch:i,chain:s,commands:a,can:c})=>{const{extensions:p}=n.extensionManager,l=tt(t,o.schema),u=tt(e,o.schema),{selection:h}=o,{$from:d,$to:f}=h,m=d.blockRange(f);if(!m)return!1;const v=(g=t=>Qt(t.type.name,p),t=>function(t,e){for(let n=t.depth;n>0;n-=1){const r=t.node(n);if(e(r))return{pos:n>0?t.before(n):0,start:t.start(n),depth:n,node:r}}}(t.$from,g))(h);var g;if(m.depth>=1&&v&&m.depth-v.depth<=1){if(v.node.type===l)return a.liftListItem(u);if(Qt(v.node.type.name,p)&&l.validContent(v.node.content)&&i)return r.setNodeMarkup(v.pos,l),!0}return c().wrapInList(l)?a.wrapInList(l):s().clearNodes().wrapInList(l).run()}});function ee(t,e,n={}){const{empty:r,ranges:o}=t.selection,i=e?st(e,t.schema):null;if(r)return!!(t.storedMarks||t.selection.$from.marks()).filter((t=>!i||i.name===t.type.name)).find((t=>ct(t.attrs,n,{strict:!1})));let s=0;const a=[];if(o.forEach((({$from:e,$to:n})=>{const r=e.pos,o=n.pos;t.doc.nodesBetween(r,o,((t,e)=>{if(!t.isText&&!t.marks.length)return;const n=Math.max(r,e),i=Math.min(o,e+t.nodeSize);s+=i-n,a.push(...t.marks.map((t=>({mark:t,from:n,to:i}))))}))})),0===s)return!1;const c=a.filter((t=>!i||i.name===t.mark.type.name)).filter((t=>ct(t.mark.attrs,n,{strict:!1}))).reduce(((t,e)=>t+e.to-e.from),0),p=a.filter((t=>!i||t.mark.type!==i&&t.mark.type.excludes(i))).reduce(((t,e)=>t+e.to-e.from),0);return(c>0?c+p:c)>=s}var ne=Object.freeze({__proto__:null,toggleMark:(t,e={},n={})=>({state:r,commands:o})=>{const{extendEmptyMarkRange:i=!1}=n,s=st(t,r.schema);return ee(r,s,e)?o.unsetMark(s,{extendEmptyMarkRange:i}):o.setMark(s,e)}}),re=Object.freeze({__proto__:null,toggleNode:(t,e,n={})=>({state:r,commands:o})=>{const i=tt(t,r.schema),s=tt(e,r.schema);return Ct(r,i,n)?o.setNode(s):o.setNode(i,n)}}),oe=Object.freeze({__proto__:null,toggleWrap:(t,e={})=>({state:n,dispatch:r})=>{const o=tt(t,n.schema);return Ct(n,o,e)?(0,z.lift)(n,r):(0,z.wrapIn)(o,e)(n,r)}}),ie=Object.freeze({__proto__:null,undoInputRule:()=>({state:t,dispatch:e})=>{const n=t.plugins;for(let r=0;r<n.length;r+=1){const o=n[r];let i;if(o.spec.isInputRules&&(i=o.getState(t))){if(e){const e=t.tr,n=i.transform;for(let t=n.steps.length-1;t>=0;t-=1)e.step(n.steps[t].invert(n.docs[t]));if(i.text){const n=e.doc.resolve(i.from).marks();e.replaceWith(i.from,i.to,t.schema.text(i.text,n))}else e.delete(i.from,i.to)}return!0}}return!1}}),se=Object.freeze({__proto__:null,unsetAllMarks:()=>({tr:t,state:e,dispatch:n})=>{const{selection:r}=t,{empty:o,ranges:i}=r;return o||n&&Object.entries(e.schema.marks).forEach((([,e])=>{i.forEach((n=>{t.removeMark(n.$from.pos,n.$to.pos,e)}))})),!0}}),ae=Object.freeze({__proto__:null,unsetMark:(t,e={})=>({tr:n,state:r,dispatch:o})=>{var i;const{extendEmptyMarkRange:s=!1}=e,{selection:a}=n,c=st(t,r.schema),{$from:p,empty:l,ranges:u}=a;if(!o)return!0;if(l&&s){let{from:t,to:e}=a;const r=null===(i=p.marks().find((t=>t.type===c)))||void 0===i?void 0:i.attrs,o=ut(p,c,r);o&&(t=o.from,e=o.to),n.removeMark(t,e,c)}else u.forEach((t=>{n.removeMark(t.$from.pos,t.$to.pos,c)}));return n.removeStoredMark(c),!0}}),ce=Object.freeze({__proto__:null,updateAttributes:(t,e={})=>({tr:n,state:r,dispatch:o})=>{let i=null,s=null;const a=Dt("string"==typeof t?t:t.name,r.schema);return!!a&&("node"===a&&(i=tt(t,r.schema)),"mark"===a&&(s=st(t,r.schema)),o&&n.selection.ranges.forEach((t=>{const o=t.$from.pos,a=t.$to.pos;r.doc.nodesBetween(o,a,((t,r)=>{i&&i===t.type&&n.setNodeMarkup(r,void 0,{...t.attrs,...e}),s&&t.marks.length&&t.marks.forEach((i=>{if(s===i.type){const c=Math.max(r,o),p=Math.min(r+t.nodeSize,a);n.addMark(c,p,s.create({...i.attrs,...e}))}}))}))})),!0)}}),pe=Object.freeze({__proto__:null,wrapIn:(t,e={})=>({state:n,dispatch:r})=>{const o=tt(t,n.schema);return!Ct(n,o,e)&&(0,z.wrapIn)(o,e)(n,r)}}),le=Object.freeze({__proto__:null,wrapInList:(t,e={})=>({state:n,dispatch:r})=>{const o=tt(t,n.schema);return(0,R.wrapInList)(o,e)(n,r)}});const ue=q.create({name:"commands",addCommands:()=>({...G,...Z,...X,...Y,...Q,...et,...nt,...rt,...ot,...it,...ht,...dt,...vt,...gt,...yt,...St,...xt,...kt,...Ot,...Tt,...Nt,...Et,...At,...It,...Pt,...zt,...Rt,...jt,...Ft,...$t,...Vt,...Ht,...Jt,...qt,...Wt,...Kt,...Zt,...Xt,...te,...ne,...re,...oe,...ie,...se,...ae,...ce,...pe,...le})}),he=q.create({name:"editable",addProseMirrorPlugins(){return[new e.Plugin({key:new e.PluginKey("editable"),props:{editable:()=>this.editor.options.editable}})]}}),de=q.create({name:"focusEvents",addProseMirrorPlugins(){const{editor:t}=this;return[new e.Plugin({key:new e.PluginKey("focusEvents"),props:{handleDOMEvents:{focus:(e,n)=>{t.isFocused=!0;const r=t.state.tr.setMeta("focus",{event:n}).setMeta("addToHistory",!1);return e.dispatch(r),!1},blur:(e,n)=>{t.isFocused=!1;const r=t.state.tr.setMeta("blur",{event:n}).setMeta("addToHistory",!1);return e.dispatch(r),!1}}}})]}}),fe=q.create({name:"keymap",addKeyboardShortcuts(){const t=()=>this.editor.commands.first((({commands:t})=>[()=>t.undoInputRule(),()=>t.deleteSelection(),()=>t.joinBackward(),()=>t.selectNodeBackward()])),e=()=>this.editor.commands.first((({commands:t})=>[()=>t.deleteSelection(),()=>t.joinForward(),()=>t.selectNodeForward()]));return{Enter:()=>this.editor.commands.first((({commands:t})=>[()=>t.newlineInCode(),()=>t.createParagraphNear(),()=>t.liftEmptyBlock(),()=>t.splitBlock()])),"Mod-Enter":()=>this.editor.commands.exitCode(),Backspace:t,"Mod-Backspace":t,"Shift-Backspace":t,Delete:e,"Mod-Delete":e,"Mod-a":()=>this.editor.commands.selectAll()}}}),me=q.create({name:"tabindex",addProseMirrorPlugins:()=>[new e.Plugin({key:new e.PluginKey("tabindex"),props:{attributes:{tabindex:"0"}}})]});var ve=Object.freeze({__proto__:null,ClipboardTextSerializer:U,Commands:ue,Editable:he,FocusEvents:de,Keymap:fe,Tabindex:me});function ge(t){const{state:e,transaction:n}=t;let{selection:r}=n,{doc:o}=n,{storedMarks:i}=n;return{...e,schema:e.schema,plugins:e.plugins,apply:e.apply.bind(e),applyTransaction:e.applyTransaction.bind(e),reconfigure:e.reconfigure.bind(e),toJSON:e.toJSON.bind(e),get storedMarks(){return i},get selection(){return r},get doc(){return o},get tr(){return r=n.selection,o=n.doc,i=n.storedMarks,n}}}class ye{constructor(t){this.editor=t.editor,this.rawCommands=this.editor.extensionManager.commands,this.customState=t.state}get hasCustomState(){return!!this.customState}get state(){return this.customState||this.editor.state}get commands(){const{rawCommands:t,editor:e,state:n}=this,{view:r}=e,{tr:o}=n,i=this.buildProps(o);return Object.fromEntries(Object.entries(t).map((([t,e])=>[t,(...t)=>{const n=e(...t)(i);return o.getMeta("preventDispatch")||this.hasCustomState||r.dispatch(o),n}])))}get chain(){return()=>this.createChain()}get can(){return()=>this.createCan()}createChain(t,e=!0){const{rawCommands:n,editor:r,state:o}=this,{view:i}=r,s=[],a=!!t,c=t||o.tr,p={...Object.fromEntries(Object.entries(n).map((([t,n])=>[t,(...t)=>{const r=this.buildProps(c,e),o=n(...t)(r);return s.push(o),p}]))),run:()=>(a||!e||c.getMeta("preventDispatch")||this.hasCustomState||i.dispatch(c),s.every((t=>!0===t)))};return p}createCan(t){const{rawCommands:e,state:n}=this,r=void 0,o=t||n.tr,i=this.buildProps(o,r);return{...Object.fromEntries(Object.entries(e).map((([t,e])=>[t,(...t)=>e(...t)({...i,dispatch:r})]))),chain:()=>this.createChain(o,r)}}buildProps(t,e=!0){const{rawCommands:n,editor:r,state:o}=this,{view:i}=r;o.storedMarks&&t.setStoredMarks(o.storedMarks);const s={tr:t,editor:r,view:i,state:ge({state:o,transaction:t}),dispatch:e?()=>{}:void 0,chain:()=>this.createChain(t),can:()=>this.createCan(t),get commands(){return Object.fromEntries(Object.entries(n).map((([t,e])=>[t,(...t)=>e(...t)(s)])))}};return s}}class be{constructor(t){this.find=t.find,this.handler=t.handler}}function we(t){var e;const{editor:n,from:r,to:o,text:i,rules:s,plugin:a}=t,{view:c}=n;if(c.composing)return!1;const p=c.state.doc.resolve(r);if(p.parent.type.spec.code||(null===(e=p.nodeBefore||p.nodeAfter)||void 0===e?void 0:e.marks.find((t=>t.type.spec.code))))return!1;let l=!1;const u=p.parent.textBetween(Math.max(0,p.parentOffset-500),p.parentOffset,void 0,"￼")+i;return s.forEach((t=>{if(l)return;const e=((t,e)=>{if(at(e))return e.exec(t);const n=e(t);if(!n)return null;const r=[];return r.push(n.text),r.index=n.index,r.input=t,r.data=n.data,n.replaceWith&&(n.text.includes(n.replaceWith)||B.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'),r.push(n.replaceWith)),r})(u,t.find);if(!e)return;const s=c.state.tr,p=ge({state:c.state,transaction:s}),h={from:r-(e[0].length-i.length),to:o},{commands:d,chain:f,can:m}=new ye({editor:n,state:p});t.handler({state:p,range:h,match:e,commands:d,chain:f,can:m}),s.steps.length&&(s.setMeta(a,{transform:s,from:r,to:o,text:i}),c.dispatch(s),l=!0)})),l}function Se(t){const{editor:n,rules:r}=t,o=new e.Plugin({state:{init:()=>null,apply(t,e){return t.getMeta(this)||(t.selectionSet||t.docChanged?null:e)}},props:{handleTextInput:(t,e,i,s)=>we({editor:n,from:e,to:i,text:s,rules:r,plugin:o}),handleDOMEvents:{compositionend:t=>(setTimeout((()=>{const{$cursor:e}=t.state.selection;e&&we({editor:n,from:e.pos,to:e.pos,text:"",rules:r,plugin:o})})),!1)},handleKeyDown(t,e){if("Enter"!==e.key)return!1;const{$cursor:i}=t.state.selection;return!!i&&we({editor:n,from:i.pos,to:i.pos,text:"\n",rules:r,plugin:o})}},isInputRules:!0});return o}class xe{constructor(t){this.find=t.find,this.handler=t.handler}}function ke(t){const{editor:n,rules:r}=t;let o=!1;const i=new e.Plugin({props:{handlePaste:(t,e)=>{var n;const r=null===(n=e.clipboardData)||void 0===n?void 0:n.getData("text/html");return o=!!(null==r?void 0:r.includes("data-pm-slice")),!1}},appendTransaction:(t,e,s)=>{const a=t[0];if(!a.getMeta("paste")||o)return;const{doc:c,before:p}=a,l=p.content.findDiffStart(c.content),u=p.content.findDiffEnd(c.content);if("number"!=typeof l||!u||l===u.b)return;const h=s.tr,d=ge({state:s,transaction:h});return function(t){const{editor:e,state:n,from:r,to:o,rules:i}=t,{commands:s,chain:a,can:c}=new ye({editor:e,state:n});n.doc.nodesBetween(r,o,((t,e)=>{if(!t.isTextblock||t.type.spec.code)return;const p=Math.max(r,e),l=Math.min(o,e+t.content.size),u=t.textBetween(p-e,l-e,void 0,"￼");i.forEach((t=>{((t,e)=>{if(at(e))return[...t.matchAll(e)];const n=e(t);return n?n.map((e=>{const n=[];return n.push(e.text),n.index=e.index,n.input=t,n.data=e.data,e.replaceWith&&(e.text.includes(e.replaceWith)||B.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'),n.push(e.replaceWith)),n})):[]})(u,t.find).forEach((e=>{if(void 0===e.index)return;const r=p+e.index+1,o=r+e[0].length,i={from:n.tr.mapping.map(r),to:n.tr.mapping.map(o)};t.handler({state:n,range:i,match:e,commands:s,chain:a,can:c})}))}))}))}({editor:n,state:d,from:Math.max(l-1,0),to:u.b,rules:r,plugin:i}),h.steps.length?h:void 0},isPasteRules:!0});return i}function Me(t){const e=[],{nodeExtensions:n,markExtensions:r}=Yt(t),o=[...n,...r],i={default:null,rendered:!0,renderHTML:null,parseHTML:null,keepOnSplit:!0};return t.forEach((t=>{const n=J(t,"addGlobalAttributes",{name:t.name,options:t.options,storage:t.storage});n&&n().forEach((t=>{t.types.forEach((n=>{Object.entries(t.attributes).forEach((([t,r])=>{e.push({type:n,name:t,attribute:{...i,...r}})}))}))}))})),o.forEach((t=>{const n={name:t.name,options:t.options,storage:t.storage},r=J(t,"addAttributes",n);if(!r)return;const o=r();Object.entries(o).forEach((([n,r])=>{e.push({type:t.name,name:n,attribute:{...i,...r}})}))})),e}function Oe(...t){return t.filter((t=>!!t)).reduce(((t,e)=>{const n={...t};return Object.entries(e).forEach((([t,e])=>{n[t]?n[t]="class"===t?[n[t],e].join(" "):"style"===t?[n[t],e].join("; "):e:n[t]=e})),n}),{})}function Ce(t,e){return e.filter((t=>t.attribute.rendered)).map((e=>e.attribute.renderHTML?e.attribute.renderHTML(t.attrs)||{}:{[e.name]:t.attrs[e.name]})).reduce(((t,e)=>Oe(t,e)),{})}function Te(t,e){return t.style?t:{...t,getAttrs:n=>{const r=t.getAttrs?t.getAttrs(n):t.attrs;if(!1===r)return!1;const o=e.filter((t=>t.attribute.rendered)).reduce(((t,e)=>{const r=e.attribute.parseHTML?e.attribute.parseHTML(n):function(t){return"string"!=typeof t?t:t.match(/^\d*(\.\d+)?$/)?Number(t):"true"===t||"false"!==t&&t}(n.getAttribute(e.name));return mt(r)&&B.warn(`[tiptap warn]: BREAKING CHANGE: "parseHTML" for your attribute "${e.name}" returns an object but should return the value itself. If this is expected you can ignore this message. This warning will be removed in one of the next releases. Further information: https://github.com/ueberdosis/tiptap/issues/1863`),null==r?t:{...t,[e.name]:r}}),{});return{...r,...o}}}}function Ne(t){return Object.fromEntries(Object.entries(t).filter((([t,e])=>("attrs"!==t||!function(t={}){return 0===Object.keys(t).length&&t.constructor===Object}(e))&&null!=e)))}function Ee(t,e){return e.nodes[t]||e.marks[t]||null}class Ae{constructor(t,e){this.splittableMarks=[],this.editor=e,this.extensions=Ae.resolve(t),this.schema=function(t){var e;const n=Me(t),{nodeExtensions:o,markExtensions:i}=Yt(t),s=null===(e=o.find((t=>J(t,"topNode"))))||void 0===e?void 0:e.name,a=Object.fromEntries(o.map((e=>{const r=n.filter((t=>t.type===e.name)),o={name:e.name,options:e.options,storage:e.storage},i=Ne({...t.reduce(((t,n)=>{const r=J(n,"extendNodeSchema",o);return{...t,...r?r(e):{}}}),{}),content:H(J(e,"content",o)),marks:H(J(e,"marks",o)),group:H(J(e,"group",o)),inline:H(J(e,"inline",o)),atom:H(J(e,"atom",o)),selectable:H(J(e,"selectable",o)),draggable:H(J(e,"draggable",o)),code:H(J(e,"code",o)),defining:H(J(e,"defining",o)),isolating:H(J(e,"isolating",o)),attrs:Object.fromEntries(r.map((t=>{var e;return[t.name,{default:null===(e=null==t?void 0:t.attribute)||void 0===e?void 0:e.default}]})))}),s=H(J(e,"parseHTML",o));s&&(i.parseDOM=s.map((t=>Te(t,r))));const a=J(e,"renderHTML",o);a&&(i.toDOM=t=>a({node:t,HTMLAttributes:Ce(t,r)}));const c=J(e,"renderText",o);return c&&(i.toText=c),[e.name,i]}))),c=Object.fromEntries(i.map((e=>{const r=n.filter((t=>t.type===e.name)),o={name:e.name,options:e.options,storage:e.storage},i=Ne({...t.reduce(((t,n)=>{const r=J(n,"extendMarkSchema",o);return{...t,...r?r(e):{}}}),{}),inclusive:H(J(e,"inclusive",o)),excludes:H(J(e,"excludes",o)),group:H(J(e,"group",o)),spanning:H(J(e,"spanning",o)),code:H(J(e,"code",o)),attrs:Object.fromEntries(r.map((t=>{var e;return[t.name,{default:null===(e=null==t?void 0:t.attribute)||void 0===e?void 0:e.default}]})))}),s=H(J(e,"parseHTML",o));s&&(i.parseDOM=s.map((t=>Te(t,r))));const a=J(e,"renderHTML",o);return a&&(i.toDOM=t=>a({mark:t,HTMLAttributes:Ce(t,r)})),[e.name,i]})));return new r.Schema({topNode:s,nodes:a,marks:c})}(this.extensions),this.extensions.forEach((t=>{var e;this.editor.extensionStorage[t.name]=t.storage;const n={name:t.name,options:t.options,storage:t.storage,editor:this.editor,type:Ee(t.name,this.schema)};"mark"===t.type&&(null===(e=H(J(t,"keepOnSplit",n)))||void 0===e||e)&&this.splittableMarks.push(t.name);const r=J(t,"onBeforeCreate",n);r&&this.editor.on("beforeCreate",r);const o=J(t,"onCreate",n);o&&this.editor.on("create",o);const i=J(t,"onUpdate",n);i&&this.editor.on("update",i);const s=J(t,"onSelectionUpdate",n);s&&this.editor.on("selectionUpdate",s);const a=J(t,"onTransaction",n);a&&this.editor.on("transaction",a);const c=J(t,"onFocus",n);c&&this.editor.on("focus",c);const p=J(t,"onBlur",n);p&&this.editor.on("blur",p);const l=J(t,"onDestroy",n);l&&this.editor.on("destroy",l)}))}static resolve(t){const e=Ae.sort(Ae.flatten(t)),n=function(t){const e=t.filter(((e,n)=>t.indexOf(e)!==n));return[...new Set(e)]}(e.map((t=>t.name)));return n.length&&B.warn(`[tiptap warn]: Duplicate extension names found: [${n.map((t=>`'${t}'`)).join(", ")}]. This can lead to issues.`),e}static flatten(t){return t.map((t=>{const e=J(t,"addExtensions",{name:t.name,options:t.options,storage:t.storage});return e?[t,...this.flatten(e())]:t})).flat(10)}static sort(t){return t.sort(((t,e)=>{const n=J(t,"priority")||100,r=J(e,"priority")||100;return n>r?-1:n<r?1:0}))}get commands(){return this.extensions.reduce(((t,e)=>{const n=J(e,"addCommands",{name:e.name,options:e.options,storage:e.storage,editor:this.editor,type:Ee(e.name,this.schema)});return n?{...t,...n()}:t}),{})}get plugins(){const{editor:t}=this,e=Ae.sort([...this.extensions].reverse()),n=[],r=[],o=e.map((e=>{const o={name:e.name,options:e.options,storage:e.storage,editor:t,type:Ee(e.name,this.schema)},i=[],s=J(e,"addKeyboardShortcuts",o);if(s){const e=Object.fromEntries(Object.entries(s()).map((([e,n])=>[e,()=>n({editor:t})]))),n=(0,F.keymap)(e);i.push(n)}const a=J(e,"addInputRules",o);t.options.enableInputRules&&a&&n.push(...a());const c=J(e,"addPasteRules",o);t.options.enablePasteRules&&c&&r.push(...c());const p=J(e,"addProseMirrorPlugins",o);if(p){const t=p();i.push(...t)}return i})).flat();return[Se({editor:t,rules:n}),ke({editor:t,rules:r}),...o]}get attributes(){return Me(this.extensions)}get nodeViews(){const{editor:t}=this,{nodeExtensions:e}=Yt(this.extensions);return Object.fromEntries(e.filter((t=>!!J(t,"addNodeView"))).map((e=>{const n=this.attributes.filter((t=>t.type===e.name)),r={name:e.name,options:e.options,storage:e.storage,editor:t,type:tt(e.name,this.schema)},o=J(e,"addNodeView",r);return o?[e.name,(r,i,s,a)=>{const c=Ce(r,n);return o()({editor:t,node:r,getPos:s,decorations:a,HTMLAttributes:c,extension:e})}]:[]})))}}class De extends class{constructor(){this.callbacks={}}on(t,e){return this.callbacks[t]||(this.callbacks[t]=[]),this.callbacks[t].push(e),this}emit(t,...e){const n=this.callbacks[t];return n&&n.forEach((t=>t.apply(this,e))),this}off(t,e){const n=this.callbacks[t];return n&&(e?this.callbacks[t]=n.filter((t=>t!==e)):delete this.callbacks[t]),this}removeAllListeners(){this.callbacks={}}}{constructor(t={}){super(),this.isFocused=!1,this.extensionStorage={},this.options={element:document.createElement("div"),content:"",injectCSS:!0,extensions:[],autofocus:!1,editable:!0,editorProps:{},parseOptions:{},enableInputRules:!0,enablePasteRules:!0,enableCoreExtensions:!0,onBeforeCreate:()=>null,onCreate:()=>null,onUpdate:()=>null,onSelectionUpdate:()=>null,onTransaction:()=>null,onFocus:()=>null,onBlur:()=>null,onDestroy:()=>null},this.isCapturingTransaction=!1,this.capturedTransaction=null,this.setOptions(t),this.createExtensionManager(),this.createCommandManager(),this.createSchema(),this.on("beforeCreate",this.options.onBeforeCreate),this.emit("beforeCreate",{editor:this}),this.createView(),this.injectCSS(),this.on("create",this.options.onCreate),this.on("update",this.options.onUpdate),this.on("selectionUpdate",this.options.onSelectionUpdate),this.on("transaction",this.options.onTransaction),this.on("focus",this.options.onFocus),this.on("blur",this.options.onBlur),this.on("destroy",this.options.onDestroy),window.setTimeout((()=>{this.isDestroyed||(this.commands.focus(this.options.autofocus),this.emit("create",{editor:this}))}),0)}get storage(){return this.extensionStorage}get commands(){return this.commandManager.commands}chain(){return this.commandManager.chain()}can(){return this.commandManager.can()}injectCSS(){this.options.injectCSS&&document&&(this.css=function(t){const e=document.querySelector("style[data-tiptap-style]");if(null!==e)return e;const n=document.createElement("style");return n.setAttribute("data-tiptap-style",""),n.innerHTML='.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: "liga" 0; /* the above doesn\'t seem to work in Edge */\n}\n\n.ProseMirror [contenteditable="false"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable="false"] [contenteditable="true"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n}\n\n.ProseMirror-gapcursor:after {\n  content: "";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}',document.getElementsByTagName("head")[0].appendChild(n),n}())}setOptions(t={}){this.options={...this.options,...t},this.view&&this.state&&!this.isDestroyed&&(this.options.editorProps&&this.view.setProps(this.options.editorProps),this.view.updateState(this.state))}setEditable(t){this.setOptions({editable:t})}get isEditable(){return this.options.editable&&this.view&&this.view.editable}get state(){return this.view.state}registerPlugin(t,e){const n=V(e)?e(t,this.state.plugins):[...this.state.plugins,t],r=this.state.reconfigure({plugins:n});this.view.updateState(r)}unregisterPlugin(t){if(this.isDestroyed)return;const e="string"==typeof t?`${t}$`:t.key,n=this.state.reconfigure({plugins:this.state.plugins.filter((t=>!t.key.startsWith(e)))});this.view.updateState(n)}createExtensionManager(){const t=[...this.options.enableCoreExtensions?Object.values(ve):[],...this.options.extensions].filter((t=>["extension","node","mark"].includes(null==t?void 0:t.type)));this.extensionManager=new Ae(t,this)}createCommandManager(){this.commandManager=new ye({editor:this})}createSchema(){this.schema=this.extensionManager.schema}createView(){this.view=new j.EditorView(this.options.element,{...this.options.editorProps,dispatchTransaction:this.dispatchTransaction.bind(this),state:e.EditorState.create({doc:Bt(this.options.content,this.schema,this.options.parseOptions)})});const t=this.state.reconfigure({plugins:this.extensionManager.plugins});this.view.updateState(t),this.createNodeViews(),this.view.dom.editor=this}createNodeViews(){this.view.setProps({nodeViews:this.extensionManager.nodeViews})}captureTransaction(t){this.isCapturingTransaction=!0,t(),this.isCapturingTransaction=!1;const e=this.capturedTransaction;return this.capturedTransaction=null,e}dispatchTransaction(t){if(this.isCapturingTransaction)return this.capturedTransaction?void t.steps.forEach((t=>{var e;return null===(e=this.capturedTransaction)||void 0===e?void 0:e.step(t)})):void(this.capturedTransaction=t);const e=this.state.apply(t),n=!this.state.selection.eq(e.selection);this.view.updateState(e),this.emit("transaction",{editor:this,transaction:t}),n&&this.emit("selectionUpdate",{editor:this,transaction:t});const r=t.getMeta("focus"),o=t.getMeta("blur");r&&this.emit("focus",{editor:this,event:r.event,transaction:t}),o&&this.emit("blur",{editor:this,event:o.event,transaction:t}),t.docChanged&&!t.getMeta("preventUpdate")&&this.emit("update",{editor:this,transaction:t})}getAttributes(t){return function(t,e){const n=Dt("string"==typeof e?e:e.name,t.schema);return"node"===n?function(t,e){const n=tt(e,t.schema),{from:r,to:o}=t.selection,i=[];t.doc.nodesBetween(r,o,(t=>{i.push(t)}));const s=i.reverse().find((t=>t.type.name===n.name));return s?{...s.attrs}:{}}(t,e):"mark"===n?Lt(t,e):{}}(this.state,t)}isActive(t,e){const n="string"==typeof t?t:null,r="string"==typeof t?e:t;return function(t,e,n={}){if(!e)return Ct(t,null,n)||ee(t,null,n);const r=Dt(e,t.schema);return"node"===r?Ct(t,e,n):"mark"===r&&ee(t,e,n)}(this.state,n,r)}getJSON(){return this.state.doc.toJSON()}getHTML(){return function(t,e){const n=r.DOMSerializer.fromSchema(e).serializeFragment(t),o=document.implementation.createHTMLDocument().createElement("div");return o.appendChild(n),o.innerHTML}(this.state.doc.content,this.schema)}getText(t){const{blockSeparator:e="\n\n",textSerializers:n={}}=t||{};return function(t,e){return W(t,{from:0,to:t.content.size},e)}(this.state.doc,{blockSeparator:e,textSerializers:{...n,...K(this.schema)}})}get isEmpty(){return function(t){var e;const n=null===(e=t.type.createAndFill())||void 0===e?void 0:e.toJSON(),r=t.toJSON();return JSON.stringify(n)===JSON.stringify(r)}(this.state.doc)}getCharacterCount(){return this.state.doc.content.size-2}destroy(){var t;this.emit("destroy"),this.view&&this.view.destroy(),this.removeAllListeners(),(null==(t=this.css)?void 0:t.parentNode)&&t.parentNode.removeChild(t)}get isDestroyed(){var t;return!(null===(t=this.view)||void 0===t?void 0:t.docView)}}class _e{constructor(t={}){this.type="node",this.name="node",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&B.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=H(J(this,"addOptions",{name:this.name}))),this.storage=H(J(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new _e(t)}configure(t={}){const e=this.extend();return e.options=L(this.options,t),e.storage=H(J(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new _e(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&B.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=t.defaultOptions?t.defaultOptions:e.parent.options,t.addOptions&&(e.options=H(J(e,"addOptions",{name:e.name}))),e.storage=H(J(e,"addStorage",{name:e.name,options:e.options})),e}}class Ie{constructor(t={}){this.type="mark",this.name="mark",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...t},this.name=this.config.name,t.defaultOptions&&B.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=H(J(this,"addOptions",{name:this.name}))),this.storage=H(J(this,"addStorage",{name:this.name,options:this.options}))||{}}static create(t={}){return new Ie(t)}configure(t={}){const e=this.extend();return e.options=L(this.options,t),e.storage=H(J(e,"addStorage",{name:e.name,options:e.options})),e}extend(t={}){const e=new Ie(t);return e.parent=this,this.child=e,e.name=t.name?t.name:e.parent.name,t.defaultOptions&&B.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${e.name}".`),e.options=t.defaultOptions?t.defaultOptions:e.parent.options,t.addOptions&&(e.options=H(J(e,"addOptions",{name:e.name}))),e.storage=H(J(e,"addStorage",{name:e.name,options:e.options})),e}}function Pe(t,e,n){const r=[];return n.doc.nodesBetween(t,e,((t,e)=>{r.push(...t.marks.map((n=>({from:e,to:e+t.nodeSize,mark:n}))))})),r}function ze(t){return new be({find:t.find,handler:({state:e,range:n,match:r})=>{const o=H(t.getAttributes,void 0,r);if(!1===o||null===o)return;const{tr:i}=e,s=r[r.length-1],a=r[0];let c=n.to;if(s){const r=a.search(/\S/),p=n.from+a.indexOf(s),l=p+s.length;if(Pe(n.from,n.to,e).filter((e=>e.mark.type.excluded.find((n=>n===t.type&&n!==e.mark.type)))).filter((t=>t.to>p)).length)return null;l<n.to&&i.delete(l,n.to),p>n.from&&i.delete(n.from+r,p),c=n.from+r+s.length,i.addMark(n.from+r,c,t.type.create(o||{})),i.removeStoredMark(t.type)}}})}function Re(t){return new be({find:t.find,handler:({state:e,range:n,match:r})=>{const o=e.doc.resolve(n.from),i=H(t.getAttributes,void 0,r)||{};if(!o.node(-1).canReplaceWith(o.index(-1),o.indexAfter(-1),t.type))return null;e.tr.delete(n.from,n.to).setBlockType(n.from,n.from,t.type,i)}})}function je(t){return new be({find:t.find,handler:({state:e,range:n,match:r})=>{const o=H(t.getAttributes,void 0,r)||{},i=e.tr.delete(n.from,n.to),s=i.doc.resolve(n.from).blockRange(),a=s&&function(t,e,n,r){void 0===r&&(r=t);var o=function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.contentMatchAt(r).findWrapping(e);if(!i)return null;var s=i.length?i[0]:e;return n.canReplaceWith(r,o,s)?i:null}(t,e),i=o&&function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.child(r),s=e.contentMatch.findWrapping(i.type);if(!s)return null;for(var a=(s.length?s[s.length-1]:e).contentMatch,c=r;a&&c<o;c++)a=a.matchType(n.child(c).type);return a&&a.validEnd?s:null}(r,e);return i?o.map(w).concat({type:e,attrs:n}).concat(i.map(w)):null}(s,t.type,o);if(!a)return null;i.wrap(s,a);const c=i.doc.resolve(n.from-1).nodeBefore;var p,l,u,h,d,f;c&&c.type===t.type&&(p=i.doc,l=n.from-1,h=(u=p.resolve(l)).index(),d=u.nodeBefore,f=u.nodeAfter,d&&f&&!d.isLeaf&&d.canAppend(f)&&u.parent.canReplace(h,h+1))&&(!t.joinPredicate||t.joinPredicate(r,c))&&i.join(n.from-1)}})}function Fe(t){return new xe({find:t.find,handler:({state:e,range:n,match:r})=>{const o=H(t.getAttributes,void 0,r);if(!1===o||null===o)return;const{tr:i}=e,s=r[r.length-1],a=r[0];let c=n.to;if(s){const r=a.search(/\S/),p=n.from+a.indexOf(s),l=p+s.length;if(Pe(n.from,n.to,e).filter((e=>e.mark.type.excluded.find((n=>n===t.type&&n!==e.mark.type)))).filter((t=>t.to>p)).length)return null;l<n.to&&i.delete(l,n.to),p>n.from&&i.delete(n.from+r,p),c=n.from+r+s.length,i.addMark(n.from+r,c,t.type.create(o||{})),i.removeStoredMark(t.type)}}})}const Be=/^\s*>\s$/,$e=_e.create({name:"blockquote",addOptions:()=>({HTMLAttributes:{}}),content:"block*",group:"block",defining:!0,parseHTML:()=>[{tag:"blockquote"}],renderHTML({HTMLAttributes:t}){return["blockquote",Oe(this.options.HTMLAttributes,t),0]},addCommands:()=>({setBlockquote:()=>({commands:t})=>t.wrapIn("blockquote"),toggleBlockquote:()=>({commands:t})=>t.toggleWrap("blockquote"),unsetBlockquote:()=>({commands:t})=>t.lift("blockquote")}),addKeyboardShortcuts(){return{"Mod-Shift-b":()=>this.editor.commands.toggleBlockquote()}},addInputRules(){return[je({find:Be,type:this.type})]}}),Le=/(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/,Ve=/(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/g,He=/(?:^|\s)((?:__)((?:[^__]+))(?:__))$/,Je=/(?:^|\s)((?:__)((?:[^__]+))(?:__))/g,qe=Ie.create({name:"bold",addOptions:()=>({HTMLAttributes:{}}),parseHTML:()=>[{tag:"strong"},{tag:"b",getAttrs:t=>"normal"!==t.style.fontWeight&&null},{style:"font-weight",getAttrs:t=>/^(bold(er)?|[5-9]\d{2,})$/.test(t)&&null}],renderHTML({HTMLAttributes:t}){return["strong",Oe(this.options.HTMLAttributes,t),0]},addCommands:()=>({setBold:()=>({commands:t})=>t.setMark("bold"),toggleBold:()=>({commands:t})=>t.toggleMark("bold"),unsetBold:()=>({commands:t})=>t.unsetMark("bold")}),addKeyboardShortcuts(){return{"Mod-b":()=>this.editor.commands.toggleBold()}},addInputRules(){return[ze({find:Le,type:this.type}),ze({find:He,type:this.type})]},addPasteRules(){return[Fe({find:Ve,type:this.type}),Fe({find:Je,type:this.type})]}}),We=/^\s*([-+*])\s$/,Ke=_e.create({name:"bulletList",addOptions:()=>({HTMLAttributes:{}}),group:"block list",content:"listItem+",parseHTML:()=>[{tag:"ul"}],renderHTML({HTMLAttributes:t}){return["ul",Oe(this.options.HTMLAttributes,t),0]},addCommands:()=>({toggleBulletList:()=>({commands:t})=>t.toggleList("bulletList","listItem")}),addKeyboardShortcuts(){return{"Mod-Shift-8":()=>this.editor.commands.toggleBulletList()}},addInputRules(){return[je({find:We,type:this.type})]}}),Ue=/(?:^|\s)((?:`)((?:[^`]+))(?:`))$/,Ge=/(?:^|\s)((?:`)((?:[^`]+))(?:`))/g,Ze=Ie.create({name:"code",addOptions:()=>({HTMLAttributes:{}}),excludes:"_",code:!0,parseHTML:()=>[{tag:"code"}],renderHTML({HTMLAttributes:t}){return["code",Oe(this.options.HTMLAttributes,t),0]},addCommands:()=>({setCode:()=>({commands:t})=>t.setMark("code"),toggleCode:()=>({commands:t})=>t.toggleMark("code"),unsetCode:()=>({commands:t})=>t.unsetMark("code")}),addKeyboardShortcuts(){return{"Mod-e":()=>this.editor.commands.toggleCode()}},addInputRules(){return[ze({find:Ue,type:this.type})]},addPasteRules(){return[Fe({find:Ge,type:this.type})]}}),Xe=/^```(?<language>[a-z]*)?[\s\n]$/,Ye=/^~~~(?<language>[a-z]*)?[\s\n]$/,Qe=_e.create({name:"codeBlock",addOptions:()=>({languageClassPrefix:"language-",HTMLAttributes:{}}),content:"text*",marks:"",group:"block",code:!0,defining:!0,addAttributes(){return{language:{default:null,parseHTML:t=>{var e;const{languageClassPrefix:n}=this.options;return[...(null===(e=t.firstElementChild)||void 0===e?void 0:e.classList)||[]].filter((t=>t.startsWith(n))).map((t=>t.replace(n,"")))[0]||null},renderHTML:t=>t.language?{class:this.options.languageClassPrefix+t.language}:null}}},parseHTML:()=>[{tag:"pre",preserveWhitespace:"full"}],renderHTML({HTMLAttributes:t}){return["pre",this.options.HTMLAttributes,["code",t,0]]},addCommands:()=>({setCodeBlock:t=>({commands:e})=>e.setNode("codeBlock",t),toggleCodeBlock:t=>({commands:e})=>e.toggleNode("codeBlock","paragraph",t)}),addKeyboardShortcuts(){return{"Mod-Alt-c":()=>this.editor.commands.toggleCodeBlock(),Backspace:()=>{const{empty:t,$anchor:e}=this.editor.state.selection,n=1===e.pos;return!(!t||e.parent.type.name!==this.name)&&!(!n&&e.parent.textContent.length)&&this.editor.commands.clearNodes()}}},addInputRules(){return[Re({find:Xe,type:this.type,getAttributes:({groups:t})=>t}),Re({find:Ye,type:this.type,getAttributes:({groups:t})=>t})]},addProseMirrorPlugins(){return[new e.Plugin({key:new e.PluginKey("codeBlockVSCodeHandler"),props:{handlePaste:(t,n)=>{if(!n.clipboardData)return!1;if(this.editor.isActive(this.type.name))return!1;const r=n.clipboardData.getData("text/plain"),o=n.clipboardData.getData("vscode-editor-data"),i=o?JSON.parse(o):void 0,s=null==i?void 0:i.mode;if(!r||!s)return!1;const{tr:a}=t.state;return a.replaceSelectionWith(this.type.create({language:s})),a.setSelection(e.TextSelection.near(a.doc.resolve(Math.max(0,a.selection.from-2)))),a.insertText(r.replace(/\r\n?/g,"\n")),a.setMeta("paste",!0),t.dispatch(a),!0}}})]}}),tn=_e.create({name:"doc",topNode:!0,content:"block+"});var en=n(97920);const nn=q.create({name:"dropCursor",addOptions:()=>({color:"currentColor",width:1,class:null}),addProseMirrorPlugins(){return[(0,en.dropCursor)(this.options)]}});var rn=n(9151);const on=q.create({name:"gapCursor",addProseMirrorPlugins:()=>[(0,rn.gapCursor)()],extendNodeSchema(t){var e;return{allowGapCursor:null!==(e=H(J(t,"allowGapCursor",{name:t.name,options:t.options,storage:t.storage})))&&void 0!==e?e:null}}}),sn=_e.create({name:"hardBreak",addOptions:()=>({keepMarks:!0,HTMLAttributes:{}}),inline:!0,group:"inline",selectable:!1,parseHTML:()=>[{tag:"br"}],renderHTML({HTMLAttributes:t}){return["br",Oe(this.options.HTMLAttributes,t)]},renderText:()=>"\n",addCommands(){return{setHardBreak:()=>({commands:t,chain:e,state:n,editor:r})=>t.first([()=>t.exitCode(),()=>t.command((()=>{const{keepMarks:t}=this.options,{splittableMarks:o}=r.extensionManager,i=n.storedMarks||n.selection.$to.parentOffset&&n.selection.$from.marks();return e().insertContent({type:this.name}).command((({tr:e,dispatch:n})=>{if(n&&i&&t){const t=i.filter((t=>o.includes(t.type.name)));e.ensureMarks(t)}return!0})).run()}))])}},addKeyboardShortcuts(){return{"Mod-Enter":()=>this.editor.commands.setHardBreak(),"Shift-Enter":()=>this.editor.commands.setHardBreak()}}}),an=_e.create({name:"heading",addOptions:()=>({levels:[1,2,3,4,5,6],HTMLAttributes:{}}),content:"inline*",group:"block",defining:!0,addAttributes:()=>({level:{default:1,rendered:!1}}),parseHTML(){return this.options.levels.map((t=>({tag:`h${t}`,attrs:{level:t}})))},renderHTML({node:t,HTMLAttributes:e}){return[`h${this.options.levels.includes(t.attrs.level)?t.attrs.level:this.options.levels[0]}`,Oe(this.options.HTMLAttributes,e),0]},addCommands(){return{setHeading:t=>({commands:e})=>!!this.options.levels.includes(t.level)&&e.setNode("heading",t),toggleHeading:t=>({commands:e})=>!!this.options.levels.includes(t.level)&&e.toggleNode("heading","paragraph",t)}},addKeyboardShortcuts(){return this.options.levels.reduce(((t,e)=>({...t,[`Mod-Alt-${e}`]:()=>this.editor.commands.toggleHeading({level:e})})),{})},addInputRules(){return this.options.levels.map((t=>Re({find:new RegExp(`^(#{1,${t}})\\s$`),type:this.type,getAttributes:{level:t}})))}});var cn=n(36189);const pn=q.create({name:"history",addOptions:()=>({depth:100,newGroupDelay:500}),addCommands:()=>({undo:()=>({state:t,dispatch:e})=>(0,cn.undo)(t,e),redo:()=>({state:t,dispatch:e})=>(0,cn.redo)(t,e)}),addProseMirrorPlugins(){return[(0,cn.history)(this.options)]},addKeyboardShortcuts(){return{"Mod-z":()=>this.editor.commands.undo(),"Mod-y":()=>this.editor.commands.redo(),"Shift-Mod-z":()=>this.editor.commands.redo(),"Mod-я":()=>this.editor.commands.undo(),"Shift-Mod-я":()=>this.editor.commands.redo()}}}),ln=_e.create({name:"horizontalRule",addOptions:()=>({HTMLAttributes:{}}),group:"block",parseHTML:()=>[{tag:"hr"}],renderHTML({HTMLAttributes:t}){return["hr",Oe(this.options.HTMLAttributes,t)]},addCommands(){return{setHorizontalRule:()=>({chain:t})=>t().command((({tr:t,dispatch:n})=>{const{selection:r}=t,{empty:o,$anchor:i}=r,s=i.parent.isTextblock&&!i.parent.type.spec.code&&!i.parent.textContent;if(!o||!s||!n)return!0;const a=i.before(),c=i.start();return t.deleteRange(a,c),t.setSelection(e.TextSelection.create(t.doc,a)),!0})).insertContent({type:this.name}).command((({tr:t,dispatch:n})=>{var r;if(n){const{parent:n,pos:o}=t.selection.$from,i=o+1;if(!t.doc.nodeAt(i)){const o=null===(r=n.type.contentMatch.defaultType)||void 0===r?void 0:r.create();o&&(t.insert(i,o),t.setSelection(e.TextSelection.create(t.doc,i)))}t.scrollIntoView()}return!0})).run()}},addInputRules(){return[(t={find:/^(?:---|—-|___\s|\*\*\*\s)$/,type:this.type},new be({find:t.find,handler:({state:e,range:n,match:r})=>{const o=H(t.getAttributes,void 0,r)||{},{tr:i}=e,s=n.from;let a=n.to;if(r[1]){let e=s+r[0].lastIndexOf(r[1]);e>a?e=a:a=e+r[1].length;const n=r[0][r[0].length-1];i.insertText(n,s+r[0].length-1),i.replaceWith(e,a,t.type.create(o))}else r[0]&&i.replaceWith(s,a,t.type.create(o))}}))];var t}}),un=/(?:^|\s)((?:\*)((?:[^*]+))(?:\*))$/,hn=/(?:^|\s)((?:\*)((?:[^*]+))(?:\*))/g,dn=/(?:^|\s)((?:_)((?:[^_]+))(?:_))$/,fn=/(?:^|\s)((?:_)((?:[^_]+))(?:_))/g,mn=Ie.create({name:"italic",addOptions:()=>({HTMLAttributes:{}}),parseHTML:()=>[{tag:"em"},{tag:"i",getAttrs:t=>"normal"!==t.style.fontStyle&&null},{style:"font-style=italic"}],renderHTML({HTMLAttributes:t}){return["em",Oe(this.options.HTMLAttributes,t),0]},addCommands:()=>({setItalic:()=>({commands:t})=>t.setMark("italic"),toggleItalic:()=>({commands:t})=>t.toggleMark("italic"),unsetItalic:()=>({commands:t})=>t.unsetMark("italic")}),addKeyboardShortcuts(){return{"Mod-i":()=>this.editor.commands.toggleItalic()}},addInputRules(){return[ze({find:un,type:this.type}),ze({find:dn,type:this.type})]},addPasteRules(){return[Fe({find:hn,type:this.type}),Fe({find:fn,type:this.type})]}}),vn=_e.create({name:"listItem",addOptions:()=>({HTMLAttributes:{}}),content:"paragraph block*",defining:!0,parseHTML:()=>[{tag:"li"}],renderHTML({HTMLAttributes:t}){return["li",Oe(this.options.HTMLAttributes,t),0]},addKeyboardShortcuts(){return{Enter:()=>this.editor.commands.splitListItem("listItem"),Tab:()=>this.editor.commands.sinkListItem("listItem"),"Shift-Tab":()=>this.editor.commands.liftListItem("listItem")}}}),gn=/^(\d+)\.\s$/,yn=_e.create({name:"orderedList",addOptions:()=>({HTMLAttributes:{}}),group:"block list",content:"listItem+",addAttributes:()=>({start:{default:1,parseHTML:t=>t.hasAttribute("start")?parseInt(t.getAttribute("start")||"",10):1}}),parseHTML:()=>[{tag:"ol"}],renderHTML({HTMLAttributes:t}){const{start:e,...n}=t;return 1===e?["ol",Oe(this.options.HTMLAttributes,n),0]:["ol",Oe(this.options.HTMLAttributes,t),0]},addCommands:()=>({toggleOrderedList:()=>({commands:t})=>t.toggleList("orderedList","listItem")}),addKeyboardShortcuts(){return{"Mod-Shift-7":()=>this.editor.commands.toggleOrderedList()}},addInputRules(){return[je({find:gn,type:this.type,getAttributes:t=>({start:+t[1]}),joinPredicate:(t,e)=>e.childCount+e.attrs.start===+t[1]})]}}),bn=_e.create({name:"paragraph",priority:1e3,addOptions:()=>({HTMLAttributes:{}}),group:"block",content:"inline*",parseHTML:()=>[{tag:"p"}],renderHTML({HTMLAttributes:t}){return["p",Oe(this.options.HTMLAttributes,t),0]},addCommands:()=>({setParagraph:()=>({commands:t})=>t.setNode("paragraph")}),addKeyboardShortcuts(){return{"Mod-Alt-0":()=>this.editor.commands.setParagraph()}}}),wn=/(?:^|\s)((?:~~)((?:[^~]+))(?:~~))$/,Sn=/(?:^|\s)((?:~~)((?:[^~]+))(?:~~))/g,xn=Ie.create({name:"strike",addOptions:()=>({HTMLAttributes:{}}),parseHTML:()=>[{tag:"s"},{tag:"del"},{tag:"strike"},{style:"text-decoration",consuming:!1,getAttrs:t=>!!t.includes("line-through")&&{}}],renderHTML({HTMLAttributes:t}){return["s",Oe(this.options.HTMLAttributes,t),0]},addCommands:()=>({setStrike:()=>({commands:t})=>t.setMark("strike"),toggleStrike:()=>({commands:t})=>t.toggleMark("strike"),unsetStrike:()=>({commands:t})=>t.unsetMark("strike")}),addKeyboardShortcuts(){return{"Mod-Shift-x":()=>this.editor.commands.toggleStrike()}},addInputRules(){return[ze({find:wn,type:this.type})]},addPasteRules(){return[Fe({find:Sn,type:this.type})]}}),kn=_e.create({name:"text",group:"inline"}),Mn=q.create({name:"starterKit",addExtensions(){var t,e,n,r,o,i,s,a,c,p,l,u,h,d,f,m,v,g;const y=[];return!1!==this.options.blockquote&&y.push($e.configure(null===(t=this.options)||void 0===t?void 0:t.blockquote)),!1!==this.options.bold&&y.push(qe.configure(null===(e=this.options)||void 0===e?void 0:e.bold)),!1!==this.options.bulletList&&y.push(Ke.configure(null===(n=this.options)||void 0===n?void 0:n.bulletList)),!1!==this.options.code&&y.push(Ze.configure(null===(r=this.options)||void 0===r?void 0:r.code)),!1!==this.options.codeBlock&&y.push(Qe.configure(null===(o=this.options)||void 0===o?void 0:o.codeBlock)),!1!==this.options.document&&y.push(tn.configure(null===(i=this.options)||void 0===i?void 0:i.document)),!1!==this.options.dropcursor&&y.push(nn.configure(null===(s=this.options)||void 0===s?void 0:s.dropcursor)),!1!==this.options.gapcursor&&y.push(on.configure(null===(a=this.options)||void 0===a?void 0:a.gapcursor)),!1!==this.options.hardBreak&&y.push(sn.configure(null===(c=this.options)||void 0===c?void 0:c.hardBreak)),!1!==this.options.heading&&y.push(an.configure(null===(p=this.options)||void 0===p?void 0:p.heading)),!1!==this.options.history&&y.push(pn.configure(null===(l=this.options)||void 0===l?void 0:l.history)),!1!==this.options.horizontalRule&&y.push(ln.configure(null===(u=this.options)||void 0===u?void 0:u.horizontalRule)),!1!==this.options.italic&&y.push(mn.configure(null===(h=this.options)||void 0===h?void 0:h.italic)),!1!==this.options.listItem&&y.push(vn.configure(null===(d=this.options)||void 0===d?void 0:d.listItem)),!1!==this.options.orderedList&&y.push(yn.configure(null===(f=this.options)||void 0===f?void 0:f.orderedList)),!1!==this.options.paragraph&&y.push(bn.configure(null===(m=this.options)||void 0===m?void 0:m.paragraph)),!1!==this.options.strike&&y.push(xn.configure(null===(v=this.options)||void 0===v?void 0:v.strike)),!1!==this.options.text&&y.push(kn.configure(null===(g=this.options)||void 0===g?void 0:g.text)),y}});var On,Cn=(On=function(t,e){return(On=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}On(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),Tn=function(){return(Tn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Cn(e,t),e.prototype.onFillWindow=function(t,e,n,r){var o=e.querySelector("#editor_"+this.name+"_div");o.style.padding="8px 0px 0px 8px",o.style.backgroundColor="white";var i=this.getShapeValue(t,r);this.component=new De(Tn({element:o,extensions:[Mn],content:i},this.options.config))},e.prototype.onShowWindow=function(e,n,r,o){t.prototype.onShowWindow.call(this,e,n,r,o)},e.prototype.getEditorValue=function(t,e,n){return r=this,o=void 0,s=function(){return function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(t){return[2,this.component.getHTML()]}))},new((i=void 0)||(i=Promise))((function(t,e){function n(t){try{c(s.next(t))}catch(t){e(t)}}function a(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var r;e.done?t(e.value):(r=e.value,r instanceof i?r:new i((function(t){t(r)}))).then(n,a)}c((s=s.apply(r,o||[])).next())}));var r,o,i,s},e.prototype.setDefaultsPaletteItem=function(e){e.width||(e.width=32),e.height||(e.height=32),e.icon||e.data||(e.icon="image/svg+xml,"+btoa('<svg class="icon w-8 h-8" width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">\n    <path fill-rule="evenodd" clip-rule="evenodd" d="M15.9999 1C13.2726 1 10.7152 1.72789 8.51156 3H23.4883C21.2846 1.72789 18.7273 1 15.9999 1ZM26.198 5H5.80177C5.14307 5.61097 4.53933 6.28039 3.99881 7H28.001C27.4605 6.28039 26.8568 5.61097 26.198 5ZM29.2698 9H2.73C2.39138 9.6406 2.09779 10.3087 1.85344 11H30.1464C29.902 10.3087 29.6084 9.6406 29.2698 9ZM30.6999 13H1.29996C1.16756 13.6523 1.07748 14.32 1.03271 15H30.9671C30.9223 14.32 30.8323 13.6523 30.6999 13ZM30.9671 17H1.03271C1.07748 17.68 1.16756 18.3477 1.29996 19H30.6999C30.8323 18.3477 30.9223 17.68 30.9671 17ZM30.1464 21H1.85344C2.09779 21.6913 2.39138 22.3594 2.73 23H29.2698C29.6084 22.3594 29.902 21.6913 30.1464 21ZM28.001 25H3.99881C4.53933 25.7196 5.14307 26.389 5.80177 27H26.198C26.8568 26.389 27.4605 25.7196 28.001 25ZM23.4883 29H8.51156C10.7152 30.2721 13.2726 31 15.9999 31C18.7273 31 21.2846 30.2721 23.4883 29Z" fill="currentColor" data-v-0cfdf972=""></path>\n</svg>')),e.node||e.data||(e.node="<editor />"),e.text||e.data||(e.text="Default"),t.prototype.setDefaultsPaletteItem.call(this,e)},e}(t.H))("tiptap",{attributeName:"tiptapData",contextual:"Edit HTML with TipTap",title:"TipTap Editor",paletteItems:[{name:"tiptap",label:"TipTap",palette:{name:"editors",label:"Editors"},style:"collapsable=0;"}]})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,