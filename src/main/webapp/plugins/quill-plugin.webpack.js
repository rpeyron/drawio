/*! For license information please see quill-plugin.webpack.js.LICENSE.txt */
(()=>{var t={48583:(t,e,n)=>{"use strict";var r=n(27418);function i(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0}function o(t){return n.g.Buffer&&"function"==typeof n.g.Buffer.isBuffer?n.g.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var l=n(30069),s=Object.prototype.hasOwnProperty,a=Array.prototype.slice,c="foo"===function(){}.name;function u(t){return Object.prototype.toString.call(t)}function d(t){return!o(t)&&"function"==typeof n.g.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer)))}var p=t.exports=m,h=/\s*function\s+([^\(\s]*)\s*/;function f(t){if(l.isFunction(t)){if(c)return t.name;var e=t.toString().match(h);return e&&e[1]}}function A(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function q(t){if(c||!l.isFunction(t))return l.inspect(t);var e=f(t);return"[Function"+(e?": "+e:"")+"]"}function g(t,e,n,r,i){throw new p.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:i})}function m(t,e){t||g(t,!0,e,"==",p.ok)}function b(t,e,n,r){if(t===e)return!0;if(o(t)&&o(e))return 0===i(t,e);if(l.isDate(t)&&l.isDate(e))return t.getTime()===e.getTime();if(l.isRegExp(t)&&l.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(d(t)&&d(e)&&u(t)===u(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===i(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(o(t)!==o(e))return!1;var s=(r=r||{actual:[],expected:[]}).actual.indexOf(t);return-1!==s&&s===r.expected.indexOf(e)||(r.actual.push(t),r.expected.push(e),function(t,e,n,r){if(null==t||null==e)return!1;if(l.isPrimitive(t)||l.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=y(t),o=y(e);if(i&&!o||!i&&o)return!1;if(i)return b(t=a.call(t),e=a.call(e),n);var s,c,u=v(t),d=v(e);if(u.length!==d.length)return!1;for(u.sort(),d.sort(),c=u.length-1;c>=0;c--)if(u[c]!==d[c])return!1;for(c=u.length-1;c>=0;c--)if(!b(t[s=u[c]],e[s],n,r))return!1;return!0}(t,e,n,r))}return n?t===e:t==e}function y(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function E(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function C(t,e,n,r){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!i&&g(i,n,"Missing expected exception"+r);var o="string"==typeof r,s=!t&&i&&!n;if((!t&&l.isError(i)&&o&&E(i,n)||s)&&g(i,n,"Got unwanted exception"+r),t&&i&&n&&!E(i,n)||!t&&i)throw i}p.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return A(q(t.actual),128)+" "+t.operator+" "+A(q(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var n=new Error;if(n.stack){var r=n.stack,i=f(e),o=r.indexOf("\n"+i);if(o>=0){var l=r.indexOf("\n",o+1);r=r.substring(l+1)}this.stack=r}}},l.inherits(p.AssertionError,Error),p.fail=g,p.ok=m,p.equal=function(t,e,n){t!=e&&g(t,e,n,"==",p.equal)},p.notEqual=function(t,e,n){t==e&&g(t,e,n,"!=",p.notEqual)},p.deepEqual=function(t,e,n){b(t,e,!1)||g(t,e,n,"deepEqual",p.deepEqual)},p.deepStrictEqual=function(t,e,n){b(t,e,!0)||g(t,e,n,"deepStrictEqual",p.deepStrictEqual)},p.notDeepEqual=function(t,e,n){b(t,e,!1)&&g(t,e,n,"notDeepEqual",p.notDeepEqual)},p.notDeepStrictEqual=function t(e,n,r){b(e,n,!0)&&g(e,n,r,"notDeepStrictEqual",t)},p.strictEqual=function(t,e,n){t!==e&&g(t,e,n,"===",p.strictEqual)},p.notStrictEqual=function(t,e,n){t===e&&g(t,e,n,"!==",p.notStrictEqual)},p.throws=function(t,e,n){C(!0,t,e,n)},p.doesNotThrow=function(t,e,n){C(!1,t,e,n)},p.ifError=function(t){if(t)throw t},p.strict=r((function t(e,n){e||g(e,!0,n,"==",t)}),p,{equal:p.strictEqual,deepEqual:p.deepStrictEqual,notEqual:p.notStrictEqual,notDeepEqual:p.notDeepStrictEqual}),p.strict.strict=p.strict;var v=Object.keys||function(t){var e=[];for(var n in t)s.call(t,n)&&e.push(n);return e}},16076:t=>{"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},52014:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},30069:(t,e,n)=>{var r=n(34155),i=n(25108),o=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(a(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,i=r.length,l=String(t).replace(o,(function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),s=r[n];n<i;s=r[++n])q(s)||!E(s)?l+=" "+s:l+=" "+a(s);return l},e.deprecate=function(t,o){if(b(n.g.process))return function(){return e.deprecate(t,o).apply(this,arguments)};if(!0===r.noDeprecation)return t;var l=!1;return function(){if(!l){if(r.throwDeprecation)throw new Error(o);r.traceDeprecation?i.trace(o):i.error(o),l=!0}return t.apply(this,arguments)}};var l,s={};function a(t,n){var r={seen:[],stylize:u};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),A(n)?r.showHidden=n:n&&e._extend(r,n),b(r.showHidden)&&(r.showHidden=!1),b(r.depth)&&(r.depth=2),b(r.colors)&&(r.colors=!1),b(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=c),d(r,t,r.depth)}function c(t,e){var n=a.styles[e];return n?"["+a.colors[n][0]+"m"+t+"["+a.colors[n][1]+"m":t}function u(t,e){return t}function d(t,n,r){if(t.customInspect&&n&&w(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return m(i)||(i=d(t,i,r)),i}var o=function(t,e){if(b(e))return t.stylize("undefined","undefined");if(m(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return g(e)?t.stylize(""+e,"number"):A(e)?t.stylize(""+e,"boolean"):q(e)?t.stylize("null","null"):void 0}(t,n);if(o)return o;var l=Object.keys(n),s=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(l);if(t.showHidden&&(l=Object.getOwnPropertyNames(n)),v(n)&&(l.indexOf("message")>=0||l.indexOf("description")>=0))return p(n);if(0===l.length){if(w(n)){var a=n.name?": "+n.name:"";return t.stylize("[Function"+a+"]","special")}if(y(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(C(n))return t.stylize(Date.prototype.toString.call(n),"date");if(v(n))return p(n)}var c,u="",E=!1,B=["{","}"];return f(n)&&(E=!0,B=["[","]"]),w(n)&&(u=" [Function"+(n.name?": "+n.name:"")+"]"),y(n)&&(u=" "+RegExp.prototype.toString.call(n)),C(n)&&(u=" "+Date.prototype.toUTCString.call(n)),v(n)&&(u=" "+p(n)),0!==l.length||E&&0!=n.length?r<0?y(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),c=E?function(t,e,n,r,i){for(var o=[],l=0,s=e.length;l<s;++l)O(e,String(l))?o.push(h(t,e,n,r,String(l),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(h(t,e,n,r,i,!0))})),o}(t,n,r,s,l):l.map((function(e){return h(t,n,r,s,e,E)})),t.seen.pop(),function(t,e,n){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}(c,u,B)):B[0]+u+B[1]}function p(t){return"["+Error.prototype.toString.call(t)+"]"}function h(t,e,n,r,i,o){var l,s,a;if((a=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(s=t.stylize("[Setter]","special")),O(r,i)||(l="["+i+"]"),s||(t.seen.indexOf(a.value)<0?(s=q(n)?d(t,a.value,null):d(t,a.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),b(l)){if(o&&i.match(/^\d+$/))return s;(l=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(l=l.substr(1,l.length-2),l=t.stylize(l,"name")):(l=l.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),l=t.stylize(l,"string"))}return l+": "+s}function f(t){return Array.isArray(t)}function A(t){return"boolean"==typeof t}function q(t){return null===t}function g(t){return"number"==typeof t}function m(t){return"string"==typeof t}function b(t){return void 0===t}function y(t){return E(t)&&"[object RegExp]"===B(t)}function E(t){return"object"==typeof t&&null!==t}function C(t){return E(t)&&"[object Date]"===B(t)}function v(t){return E(t)&&("[object Error]"===B(t)||t instanceof Error)}function w(t){return"function"==typeof t}function B(t){return Object.prototype.toString.call(t)}function x(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(b(l)&&(l=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!s[t])if(new RegExp("\\b"+t+"\\b","i").test(l)){var n=r.pid;s[t]=function(){var r=e.format.apply(e,arguments);i.error("%s %d: %s",t,n,r)}}else s[t]=function(){};return s[t]},e.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=f,e.isBoolean=A,e.isNull=q,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=b,e.isRegExp=y,e.isObject=E,e.isDate=C,e.isError=v,e.isFunction=w,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(52014);var k=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function N(){var t=new Date,e=[x(t.getHours()),x(t.getMinutes()),x(t.getSeconds())].join(":");return[t.getDate(),k[t.getMonth()],e].join(" ")}function O(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){i.log("%s - %s",N(),e.format.apply(e,arguments))},e.inherits=n(16076),e._extend=function(t,e){if(!e||!E(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}},79742:(t,e)=>{"use strict";e.byteLength=function(t){var e=a(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,o=a(t),l=o[0],s=o[1],c=new i(function(t,e,n){return 3*(e+n)/4-n}(0,l,s)),u=0,d=s>0?l-4:l;for(n=0;n<d;n+=4)e=r[t.charCodeAt(n)]<<18|r[t.charCodeAt(n+1)]<<12|r[t.charCodeAt(n+2)]<<6|r[t.charCodeAt(n+3)],c[u++]=e>>16&255,c[u++]=e>>8&255,c[u++]=255&e;return 2===s&&(e=r[t.charCodeAt(n)]<<2|r[t.charCodeAt(n+1)]>>4,c[u++]=255&e),1===s&&(e=r[t.charCodeAt(n)]<<10|r[t.charCodeAt(n+1)]<<4|r[t.charCodeAt(n+2)]>>2,c[u++]=e>>8&255,c[u++]=255&e),c},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],l=16383,s=0,a=r-i;s<a;s+=l)o.push(c(t,s,s+l>a?a:s+l));return 1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"=")),o.join("")};for(var n=[],r=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=0,s=o.length;l<s;++l)n[l]=o[l],r[o.charCodeAt(l)]=l;function a(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t,e,r){for(var i,o,l=[],s=e;s<r;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),l.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return l.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},48764:(t,e,n)=>{"use strict";var r=n(25108);const i=n(79742),o=n(80645),l="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=c,e.SlowBuffer=function(t){return+t!=t&&(t=0),c.alloc(+t)},e.INSPECT_MAX_BYTES=50;const s=2147483647;function a(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,c.prototype),e}function c(t,e,n){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return p(t)}return u(t,e,n)}function u(t,e,n){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!c.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const n=0|q(t,e);let r=a(n);const i=r.write(t,e);return i!==n&&(r=r.slice(0,i)),r}(t,e);if(ArrayBuffer.isView(t))return function(t){if(G(t,Uint8Array)){const e=new Uint8Array(t);return f(e.buffer,e.byteOffset,e.byteLength)}return h(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(G(t,ArrayBuffer)||t&&G(t.buffer,ArrayBuffer))return f(t,e,n);if("undefined"!=typeof SharedArrayBuffer&&(G(t,SharedArrayBuffer)||t&&G(t.buffer,SharedArrayBuffer)))return f(t,e,n);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return c.from(r,e,n);const i=function(t){if(c.isBuffer(t)){const e=0|A(t.length),n=a(e);return 0===n.length||t.copy(n,0,0,e),n}return void 0!==t.length?"number"!=typeof t.length||X(t.length)?a(0):h(t):"Buffer"===t.type&&Array.isArray(t.data)?h(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return c.from(t[Symbol.toPrimitive]("string"),e,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function d(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function p(t){return d(t),a(t<0?0:0|A(t))}function h(t){const e=t.length<0?0:0|A(t.length),n=a(e);for(let r=0;r<e;r+=1)n[r]=255&t[r];return n}function f(t,e,n){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===e&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,e):new Uint8Array(t,e,n),Object.setPrototypeOf(r,c.prototype),r}function A(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function q(t,e){if(c.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||G(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const n=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let i=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return K(t).length;default:if(i)return r?-1:V(t).length;e=(""+e).toLowerCase(),i=!0}}function g(t,e,n){let r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,n);case"utf8":case"utf-8":return k(this,e,n);case"ascii":return O(this,e,n);case"latin1":case"binary":return S(this,e,n);case"base64":return x(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function b(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),X(n=+n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=c.from(e,r)),c.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,i){let o,l=1,s=t.length,a=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;l=2,s/=2,a/=2,n/=2}function c(t,e){return 1===l?t[e]:t.readUInt16BE(e*l)}if(i){let r=-1;for(o=n;o<s;o++)if(c(t,o)===c(e,-1===r?0:o-r)){if(-1===r&&(r=o),o-r+1===a)return r*l}else-1!==r&&(o-=o-r),r=-1}else for(n+a>s&&(n=s-a),o=n;o>=0;o--){let n=!0;for(let r=0;r<a;r++)if(c(t,o+r)!==c(e,r)){n=!1;break}if(n)return o}return-1}function E(t,e,n,r){n=Number(n)||0;const i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;const o=e.length;let l;for(r>o/2&&(r=o/2),l=0;l<r;++l){const r=parseInt(e.substr(2*l,2),16);if(X(r))return l;t[n+l]=r}return l}function C(t,e,n,r){return Z(V(e,t.length-n),t,n,r)}function v(t,e,n,r){return Z(function(t){const e=[];for(let n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return Z(K(e),t,n,r)}function B(t,e,n,r){return Z(function(t,e){let n,r,i;const o=[];for(let l=0;l<t.length&&!((e-=2)<0);++l)n=t.charCodeAt(l),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function x(t,e,n){return 0===e&&n===t.length?i.fromByteArray(t):i.fromByteArray(t.slice(e,n))}function k(t,e,n){n=Math.min(t.length,n);const r=[];let i=e;for(;i<n;){const e=t[i];let o=null,l=e>239?4:e>223?3:e>191?2:1;if(i+l<=n){let n,r,s,a;switch(l){case 1:e<128&&(o=e);break;case 2:n=t[i+1],128==(192&n)&&(a=(31&e)<<6|63&n,a>127&&(o=a));break;case 3:n=t[i+1],r=t[i+2],128==(192&n)&&128==(192&r)&&(a=(15&e)<<12|(63&n)<<6|63&r,a>2047&&(a<55296||a>57343)&&(o=a));break;case 4:n=t[i+1],r=t[i+2],s=t[i+3],128==(192&n)&&128==(192&r)&&128==(192&s)&&(a=(15&e)<<18|(63&n)<<12|(63&r)<<6|63&s,a>65535&&a<1114112&&(o=a))}}null===o?(o=65533,l=1):o>65535&&(o-=65536,r.push(o>>>10&1023|55296),o=56320|1023&o),r.push(o),i+=l}return function(t){const e=t.length;if(e<=N)return String.fromCharCode.apply(String,t);let n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=N));return n}(r)}e.kMaxLength=s,c.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),c.TYPED_ARRAY_SUPPORT||void 0===r||"function"!=typeof r.error||r.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(t,e,n){return u(t,e,n)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(t,e,n){return function(t,e,n){return d(t),t<=0?a(t):void 0!==e?"string"==typeof n?a(t).fill(e,n):a(t).fill(e):a(t)}(t,e,n)},c.allocUnsafe=function(t){return p(t)},c.allocUnsafeSlow=function(t){return p(t)},c.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==c.prototype},c.compare=function(t,e){if(G(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),G(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let n=t.length,r=e.length;for(let i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);let n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;const r=c.allocUnsafe(e);let i=0;for(n=0;n<t.length;++n){let e=t[n];if(G(e,Uint8Array))i+e.length>r.length?(c.isBuffer(e)||(e=c.from(e)),e.copy(r,i)):Uint8Array.prototype.set.call(r,e,i);else{if(!c.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(r,i)}i+=e.length}return r},c.byteLength=q,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)m(this,e,e+1);return this},c.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},c.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},c.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?k(this,0,t):g.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){let t="";const n=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(t+=" ... "),"<Buffer "+t+">"},l&&(c.prototype[l]=c.prototype.inspect),c.prototype.compare=function(t,e,n,r,i){if(G(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;let o=(i>>>=0)-(r>>>=0),l=(n>>>=0)-(e>>>=0);const s=Math.min(o,l),a=this.slice(r,i),u=t.slice(e,n);for(let t=0;t<s;++t)if(a[t]!==u[t]){o=a[t],l=u[t];break}return o<l?-1:l<o?1:0},c.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},c.prototype.indexOf=function(t,e,n){return b(this,t,e,n,!0)},c.prototype.lastIndexOf=function(t,e,n){return b(this,t,e,n,!1)},c.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let o=!1;for(;;)switch(r){case"hex":return E(this,t,e,n);case"utf8":case"utf-8":return C(this,t,e,n);case"ascii":case"latin1":case"binary":return v(this,t,e,n);case"base64":return w(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const N=4096;function O(t,e,n){let r="";n=Math.min(t.length,n);for(let i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function S(t,e,n){let r="";n=Math.min(t.length,n);for(let i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function T(t,e,n){const r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);let i="";for(let r=e;r<n;++r)i+=J[t[r]];return i}function L(t,e,n){const r=t.slice(e,n);let i="";for(let t=0;t<r.length-1;t+=2)i+=String.fromCharCode(r[t]+256*r[t+1]);return i}function _(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function j(t,e,n,r,i,o){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function I(t,e,n,r,i){W(e,r,i,t,n,7);let o=Number(e&BigInt(4294967295));t[n++]=o,o>>=8,t[n++]=o,o>>=8,t[n++]=o,o>>=8,t[n++]=o;let l=Number(e>>BigInt(32)&BigInt(4294967295));return t[n++]=l,l>>=8,t[n++]=l,l>>=8,t[n++]=l,l>>=8,t[n++]=l,n}function R(t,e,n,r,i){W(e,r,i,t,n,7);let o=Number(e&BigInt(4294967295));t[n+7]=o,o>>=8,t[n+6]=o,o>>=8,t[n+5]=o,o>>=8,t[n+4]=o;let l=Number(e>>BigInt(32)&BigInt(4294967295));return t[n+3]=l,l>>=8,t[n+2]=l,l>>=8,t[n+1]=l,l>>=8,t[n]=l,n+8}function U(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function P(t,e,n,r,i){return e=+e,n>>>=0,i||U(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function M(t,e,n,r,i){return e=+e,n>>>=0,i||U(t,0,n,8),o.write(t,e,n,r,52,8),n+8}c.prototype.slice=function(t,e){const n=this.length;(t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t);const r=this.subarray(t,e);return Object.setPrototypeOf(r,c.prototype),r},c.prototype.readUintLE=c.prototype.readUIntLE=function(t,e,n){t>>>=0,e>>>=0,n||_(t,e,this.length);let r=this[t],i=1,o=0;for(;++o<e&&(i*=256);)r+=this[t+o]*i;return r},c.prototype.readUintBE=c.prototype.readUIntBE=function(t,e,n){t>>>=0,e>>>=0,n||_(t,e,this.length);let r=this[t+--e],i=1;for(;e>0&&(i*=256);)r+=this[t+--e]*i;return r},c.prototype.readUint8=c.prototype.readUInt8=function(t,e){return t>>>=0,e||_(t,1,this.length),this[t]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(t,e){return t>>>=0,e||_(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(t,e){return t>>>=0,e||_(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(t,e){return t>>>=0,e||_(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(t,e){return t>>>=0,e||_(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readBigUInt64LE=Q((function(t){H(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||Y(t,this.length-8);const r=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,i=this[++t]+256*this[++t]+65536*this[++t]+n*2**24;return BigInt(r)+(BigInt(i)<<BigInt(32))})),c.prototype.readBigUInt64BE=Q((function(t){H(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||Y(t,this.length-8);const r=e*2**24+65536*this[++t]+256*this[++t]+this[++t],i=this[++t]*2**24+65536*this[++t]+256*this[++t]+n;return(BigInt(r)<<BigInt(32))+BigInt(i)})),c.prototype.readIntLE=function(t,e,n){t>>>=0,e>>>=0,n||_(t,e,this.length);let r=this[t],i=1,o=0;for(;++o<e&&(i*=256);)r+=this[t+o]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*e)),r},c.prototype.readIntBE=function(t,e,n){t>>>=0,e>>>=0,n||_(t,e,this.length);let r=e,i=1,o=this[t+--r];for(;r>0&&(i*=256);)o+=this[t+--r]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*e)),o},c.prototype.readInt8=function(t,e){return t>>>=0,e||_(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){t>>>=0,e||_(t,2,this.length);const n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(t,e){t>>>=0,e||_(t,2,this.length);const n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(t,e){return t>>>=0,e||_(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return t>>>=0,e||_(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readBigInt64LE=Q((function(t){H(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||Y(t,this.length-8);const r=this[t+4]+256*this[t+5]+65536*this[t+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),c.prototype.readBigInt64BE=Q((function(t){H(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||Y(t,this.length-8);const r=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(r)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+n)})),c.prototype.readFloatLE=function(t,e){return t>>>=0,e||_(t,4,this.length),o.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return t>>>=0,e||_(t,4,this.length),o.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return t>>>=0,e||_(t,8,this.length),o.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return t>>>=0,e||_(t,8,this.length),o.read(this,t,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(t,e,n,r){t=+t,e>>>=0,n>>>=0,r||j(this,t,e,n,Math.pow(2,8*n)-1,0);let i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(t,e,n,r){t=+t,e>>>=0,n>>>=0,r||j(this,t,e,n,Math.pow(2,8*n)-1,0);let i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},c.prototype.writeUint8=c.prototype.writeUInt8=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,1,255,0),this[e]=255&t,e+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigUInt64LE=Q((function(t,e=0){return I(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Q((function(t,e=0){return R(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*n-1);j(this,t,e,n,r-1,-r)}let i=0,o=1,l=0;for(this[e]=255&t;++i<n&&(o*=256);)t<0&&0===l&&0!==this[e+i-1]&&(l=1),this[e+i]=(t/o>>0)-l&255;return e+n},c.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*n-1);j(this,t,e,n,r-1,-r)}let i=n-1,o=1,l=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===l&&0!==this[e+i+1]&&(l=1),this[e+i]=(t/o>>0)-l&255;return e+n},c.prototype.writeInt8=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeInt16BE=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeInt32LE=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},c.prototype.writeInt32BE=function(t,e,n){return t=+t,e>>>=0,n||j(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigInt64LE=Q((function(t,e=0){return I(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Q((function(t,e=0){return R(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(t,e,n){return P(this,t,e,!0,n)},c.prototype.writeFloatBE=function(t,e,n){return P(this,t,e,!1,n)},c.prototype.writeDoubleLE=function(t,e,n){return M(this,t,e,!0,n)},c.prototype.writeDoubleBE=function(t,e,n){return M(this,t,e,!1,n)},c.prototype.copy=function(t,e,n,r){if(!c.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);const i=r-n;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,n,r):Uint8Array.prototype.set.call(t,this.subarray(n,r),e),i},c.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){const e=t.charCodeAt(0);("utf8"===r&&e<128||"latin1"===r)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;let i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{const o=c.isBuffer(t)?t:c.from(t,r),l=o.length;if(0===l)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<n-e;++i)this[i+e]=o[i%l]}return this};const z={};function D(t,e,n){z[t]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function F(t){let e="",n=t.length;const r="-"===t[0]?1:0;for(;n>=r+4;n-=3)e=`_${t.slice(n-3,n)}${e}`;return`${t.slice(0,n)}${e}`}function W(t,e,n,r,i,o){if(t>n||t<e){const r="bigint"==typeof e?"n":"";let i;throw i=o>3?0===e||e===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(o+1)}${r}`:`>= -(2${r} ** ${8*(o+1)-1}${r}) and < 2 ** ${8*(o+1)-1}${r}`:`>= ${e}${r} and <= ${n}${r}`,new z.ERR_OUT_OF_RANGE("value",i,t)}!function(t,e,n){H(e,"offset"),void 0!==t[e]&&void 0!==t[e+n]||Y(e,t.length-(n+1))}(r,i,o)}function H(t,e){if("number"!=typeof t)throw new z.ERR_INVALID_ARG_TYPE(e,"number",t)}function Y(t,e,n){if(Math.floor(t)!==t)throw H(t,n),new z.ERR_OUT_OF_RANGE(n||"offset","an integer",t);if(e<0)throw new z.ERR_BUFFER_OUT_OF_BOUNDS;throw new z.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${e}`,t)}D("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),D("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),D("ERR_OUT_OF_RANGE",(function(t,e,n){let r=`The value of "${t}" is out of range.`,i=n;return Number.isInteger(n)&&Math.abs(n)>2**32?i=F(String(n)):"bigint"==typeof n&&(i=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(i=F(i)),i+="n"),r+=` It must be ${e}. Received ${i}`,r}),RangeError);const $=/[^+/0-9A-Za-z-_]/g;function V(t,e){let n;e=e||1/0;const r=t.length;let i=null;const o=[];for(let l=0;l<r;++l){if(n=t.charCodeAt(l),n>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(l+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function K(t){return i.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace($,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Z(t,e,n,r){let i;for(i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}function G(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function X(t){return t!=t}const J=function(){const t="0123456789abcdef",e=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let i=0;i<16;++i)e[r+i]=t[n]+t[i]}return e}();function Q(t){return"undefined"==typeof BigInt?tt:t}function tt(){throw new Error("BigInt not supported")}},21924:(t,e,n)=>{"use strict";var r=n(40210),i=n(55559),o=i(r("String.prototype.indexOf"));t.exports=function(t,e){var n=r(t,!!e);return"function"==typeof n&&o(t,".prototype.")>-1?i(n):n}},55559:(t,e,n)=>{"use strict";var r=n(58612),i=n(40210),o=i("%Function.prototype.apply%"),l=i("%Function.prototype.call%"),s=i("%Reflect.apply%",!0)||r.call(l,o),a=i("%Object.getOwnPropertyDescriptor%",!0),c=i("%Object.defineProperty%",!0),u=i("%Math.max%");if(c)try{c({},"a",{value:1})}catch(t){c=null}t.exports=function(t){var e=s(r,l,arguments);if(a&&c){var n=a(e,"length");n.configurable&&c(e,"length",{value:1+u(0,t.length-(arguments.length-1))})}return e};var d=function(){return s(r,o,arguments)};c?c(t.exports,"apply",{value:d}):t.exports.apply=d},25108:(t,e,n)=>{var r=n(89539),i=n(48583);function o(){return(new Date).getTime()}var l,s=Array.prototype.slice,a={};l=void 0!==n.g&&n.g.console?n.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var c=[[function(){},"log"],[function(){l.log.apply(l,arguments)},"info"],[function(){l.log.apply(l,arguments)},"warn"],[function(){l.warn.apply(l,arguments)},"error"],[function(t){a[t]=o()},"time"],[function(t){var e=a[t];if(!e)throw new Error("No such label: "+t);delete a[t];var n=o()-e;l.log(t+": "+n+"ms")},"timeEnd"],[function(){var t=new Error;t.name="Trace",t.message=r.format.apply(null,arguments),l.error(t.stack)},"trace"],[function(t){l.log(r.inspect(t)+"\n")},"dir"],[function(t){if(!t){var e=s.call(arguments,1);i.ok(!1,r.format.apply(null,e))}},"assert"]],u=0;u<c.length;u++){var d=c[u],p=d[0],h=d[1];l[h]||(l[h]=p)}t.exports=l},85525:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(94015),i=n.n(r),o=n(23645),l=n.n(o)()(i());l.push([t.id,"/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n.ql-container {\n  box-sizing: border-box;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 13px;\n  height: 100%;\n  margin: 0px;\n  position: relative;\n}\n.ql-container.ql-disabled .ql-tooltip {\n  visibility: hidden;\n}\n.ql-container.ql-disabled .ql-editor ul[data-checked] > li::before {\n  pointer-events: none;\n}\n.ql-clipboard {\n  left: -100000px;\n  height: 1px;\n  overflow-y: hidden;\n  position: absolute;\n  top: 50%;\n}\n.ql-clipboard p {\n  margin: 0;\n  padding: 0;\n}\n.ql-editor {\n  box-sizing: border-box;\n  line-height: 1.42;\n  height: 100%;\n  outline: none;\n  overflow-y: auto;\n  padding: 12px 15px;\n  tab-size: 4;\n  -moz-tab-size: 4;\n  text-align: left;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.ql-editor > * {\n  cursor: text;\n}\n.ql-editor p,\n.ql-editor ol,\n.ql-editor ul,\n.ql-editor pre,\n.ql-editor blockquote,\n.ql-editor h1,\n.ql-editor h2,\n.ql-editor h3,\n.ql-editor h4,\n.ql-editor h5,\n.ql-editor h6 {\n  margin: 0;\n  padding: 0;\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol,\n.ql-editor ul {\n  padding-left: 1.5em;\n}\n.ql-editor ol > li,\n.ql-editor ul > li {\n  list-style-type: none;\n}\n.ql-editor ul > li::before {\n  content: '\\2022';\n}\n.ql-editor ul[data-checked=true],\n.ql-editor ul[data-checked=false] {\n  pointer-events: none;\n}\n.ql-editor ul[data-checked=true] > li *,\n.ql-editor ul[data-checked=false] > li * {\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before,\n.ql-editor ul[data-checked=false] > li::before {\n  color: #777;\n  cursor: pointer;\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before {\n  content: '\\2611';\n}\n.ql-editor ul[data-checked=false] > li::before {\n  content: '\\2610';\n}\n.ql-editor li::before {\n  display: inline-block;\n  white-space: nowrap;\n  width: 1.2em;\n}\n.ql-editor li:not(.ql-direction-rtl)::before {\n  margin-left: -1.5em;\n  margin-right: 0.3em;\n  text-align: right;\n}\n.ql-editor li.ql-direction-rtl::before {\n  margin-left: 0.3em;\n  margin-right: -1.5em;\n}\n.ql-editor ol li:not(.ql-direction-rtl),\n.ql-editor ul li:not(.ql-direction-rtl) {\n  padding-left: 1.5em;\n}\n.ql-editor ol li.ql-direction-rtl,\n.ql-editor ul li.ql-direction-rtl {\n  padding-right: 1.5em;\n}\n.ql-editor ol li {\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  counter-increment: list-0;\n}\n.ql-editor ol li:before {\n  content: counter(list-0, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-increment: list-1;\n}\n.ql-editor ol li.ql-indent-1:before {\n  content: counter(list-1, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-increment: list-2;\n}\n.ql-editor ol li.ql-indent-2:before {\n  content: counter(list-2, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-increment: list-3;\n}\n.ql-editor ol li.ql-indent-3:before {\n  content: counter(list-3, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-increment: list-4;\n}\n.ql-editor ol li.ql-indent-4:before {\n  content: counter(list-4, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-increment: list-5;\n}\n.ql-editor ol li.ql-indent-5:before {\n  content: counter(list-5, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-reset: list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-increment: list-6;\n}\n.ql-editor ol li.ql-indent-6:before {\n  content: counter(list-6, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-reset: list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-increment: list-7;\n}\n.ql-editor ol li.ql-indent-7:before {\n  content: counter(list-7, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-reset: list-8 list-9;\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-increment: list-8;\n}\n.ql-editor ol li.ql-indent-8:before {\n  content: counter(list-8, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-reset: list-9;\n}\n.ql-editor ol li.ql-indent-9 {\n  counter-increment: list-9;\n}\n.ql-editor ol li.ql-indent-9:before {\n  content: counter(list-9, decimal) '. ';\n}\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 3em;\n}\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 4.5em;\n}\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 3em;\n}\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 4.5em;\n}\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 6em;\n}\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 7.5em;\n}\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 6em;\n}\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 7.5em;\n}\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 9em;\n}\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 10.5em;\n}\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 9em;\n}\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 10.5em;\n}\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 12em;\n}\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 13.5em;\n}\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 12em;\n}\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 13.5em;\n}\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 15em;\n}\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 16.5em;\n}\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 15em;\n}\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 16.5em;\n}\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 18em;\n}\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 19.5em;\n}\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 18em;\n}\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 19.5em;\n}\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 21em;\n}\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 22.5em;\n}\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 21em;\n}\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 22.5em;\n}\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 24em;\n}\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 25.5em;\n}\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 24em;\n}\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 25.5em;\n}\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 27em;\n}\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 28.5em;\n}\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 27em;\n}\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 28.5em;\n}\n.ql-editor .ql-video {\n  display: block;\n  max-width: 100%;\n}\n.ql-editor .ql-video.ql-align-center {\n  margin: 0 auto;\n}\n.ql-editor .ql-video.ql-align-right {\n  margin: 0 0 0 auto;\n}\n.ql-editor .ql-bg-black {\n  background-color: #000;\n}\n.ql-editor .ql-bg-red {\n  background-color: #e60000;\n}\n.ql-editor .ql-bg-orange {\n  background-color: #f90;\n}\n.ql-editor .ql-bg-yellow {\n  background-color: #ff0;\n}\n.ql-editor .ql-bg-green {\n  background-color: #008a00;\n}\n.ql-editor .ql-bg-blue {\n  background-color: #06c;\n}\n.ql-editor .ql-bg-purple {\n  background-color: #93f;\n}\n.ql-editor .ql-color-white {\n  color: #fff;\n}\n.ql-editor .ql-color-red {\n  color: #e60000;\n}\n.ql-editor .ql-color-orange {\n  color: #f90;\n}\n.ql-editor .ql-color-yellow {\n  color: #ff0;\n}\n.ql-editor .ql-color-green {\n  color: #008a00;\n}\n.ql-editor .ql-color-blue {\n  color: #06c;\n}\n.ql-editor .ql-color-purple {\n  color: #93f;\n}\n.ql-editor .ql-font-serif {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-editor .ql-font-monospace {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-editor .ql-size-small {\n  font-size: 0.75em;\n}\n.ql-editor .ql-size-large {\n  font-size: 1.5em;\n}\n.ql-editor .ql-size-huge {\n  font-size: 2.5em;\n}\n.ql-editor .ql-direction-rtl {\n  direction: rtl;\n  text-align: inherit;\n}\n.ql-editor .ql-align-center {\n  text-align: center;\n}\n.ql-editor .ql-align-justify {\n  text-align: justify;\n}\n.ql-editor .ql-align-right {\n  text-align: right;\n}\n.ql-editor.ql-blank::before {\n  color: rgba(0,0,0,0.6);\n  content: attr(data-placeholder);\n  font-style: italic;\n  left: 15px;\n  pointer-events: none;\n  position: absolute;\n  right: 15px;\n}\n","",{version:3,sources:["webpack://./node_modules/quill/dist/quill.core.css"],names:[],mappings:"AAAA;;;;;EAKE;AACF;EACE,sBAAsB;EACtB,yCAAyC;EACzC,eAAe;EACf,YAAY;EACZ,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,eAAe;EACf,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;AACV;AACA;EACE,SAAS;EACT,UAAU;AACZ;AACA;EACE,sBAAsB;EACtB,iBAAiB;EACjB,YAAY;EACZ,aAAa;EACb,gBAAgB;EAChB,kBAAkB;EAClB,WAAW;EACX,gBAAgB;EAChB,gBAAgB;EAChB,qBAAqB;EACrB,qBAAqB;AACvB;AACA;EACE,YAAY;AACd;AACA;;;;;;;;;;;EAWE,SAAS;EACT,UAAU;EACV,6EAA6E;AAC/E;AACA;;EAEE,mBAAmB;AACrB;AACA;;EAEE,qBAAqB;AACvB;AACA;EACE,gBAAgB;AAClB;AACA;;EAEE,oBAAoB;AACtB;AACA;;EAEE,mBAAmB;AACrB;AACA;;EAEE,WAAW;EACX,eAAe;EACf,mBAAmB;AACrB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,YAAY;AACd;AACA;EACE,mBAAmB;EACnB,mBAAmB;EACnB,iBAAiB;AACnB;AACA;EACE,kBAAkB;EAClB,oBAAoB;AACtB;AACA;;EAEE,mBAAmB;AACrB;AACA;;EAEE,oBAAoB;AACtB;AACA;EACE,6EAA6E;EAC7E,yBAAyB;AAC3B;AACA;EACE,sCAAsC;AACxC;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,sEAAsE;AACxE;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,+DAA+D;AACjE;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sCAAsC;AACxC;AACA;EACE,wDAAwD;AAC1D;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,iDAAiD;AACnD;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sCAAsC;AACxC;AACA;EACE,mCAAmC;AACrC;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,qBAAqB;AACvB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sCAAsC;AACxC;AACA;EACE,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,cAAc;EACd,eAAe;AACjB;AACA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,WAAW;AACb;AACA;EACE,cAAc;AAChB;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,cAAc;AAChB;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,4CAA4C;AAC9C;AACA;EACE,2CAA2C;AAC7C;AACA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,sBAAsB;EACtB,+BAA+B;EAC/B,kBAAkB;EAClB,UAAU;EACV,oBAAoB;EACpB,kBAAkB;EAClB,WAAW;AACb",sourcesContent:["/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n.ql-container {\n  box-sizing: border-box;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 13px;\n  height: 100%;\n  margin: 0px;\n  position: relative;\n}\n.ql-container.ql-disabled .ql-tooltip {\n  visibility: hidden;\n}\n.ql-container.ql-disabled .ql-editor ul[data-checked] > li::before {\n  pointer-events: none;\n}\n.ql-clipboard {\n  left: -100000px;\n  height: 1px;\n  overflow-y: hidden;\n  position: absolute;\n  top: 50%;\n}\n.ql-clipboard p {\n  margin: 0;\n  padding: 0;\n}\n.ql-editor {\n  box-sizing: border-box;\n  line-height: 1.42;\n  height: 100%;\n  outline: none;\n  overflow-y: auto;\n  padding: 12px 15px;\n  tab-size: 4;\n  -moz-tab-size: 4;\n  text-align: left;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.ql-editor > * {\n  cursor: text;\n}\n.ql-editor p,\n.ql-editor ol,\n.ql-editor ul,\n.ql-editor pre,\n.ql-editor blockquote,\n.ql-editor h1,\n.ql-editor h2,\n.ql-editor h3,\n.ql-editor h4,\n.ql-editor h5,\n.ql-editor h6 {\n  margin: 0;\n  padding: 0;\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol,\n.ql-editor ul {\n  padding-left: 1.5em;\n}\n.ql-editor ol > li,\n.ql-editor ul > li {\n  list-style-type: none;\n}\n.ql-editor ul > li::before {\n  content: '\\2022';\n}\n.ql-editor ul[data-checked=true],\n.ql-editor ul[data-checked=false] {\n  pointer-events: none;\n}\n.ql-editor ul[data-checked=true] > li *,\n.ql-editor ul[data-checked=false] > li * {\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before,\n.ql-editor ul[data-checked=false] > li::before {\n  color: #777;\n  cursor: pointer;\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before {\n  content: '\\2611';\n}\n.ql-editor ul[data-checked=false] > li::before {\n  content: '\\2610';\n}\n.ql-editor li::before {\n  display: inline-block;\n  white-space: nowrap;\n  width: 1.2em;\n}\n.ql-editor li:not(.ql-direction-rtl)::before {\n  margin-left: -1.5em;\n  margin-right: 0.3em;\n  text-align: right;\n}\n.ql-editor li.ql-direction-rtl::before {\n  margin-left: 0.3em;\n  margin-right: -1.5em;\n}\n.ql-editor ol li:not(.ql-direction-rtl),\n.ql-editor ul li:not(.ql-direction-rtl) {\n  padding-left: 1.5em;\n}\n.ql-editor ol li.ql-direction-rtl,\n.ql-editor ul li.ql-direction-rtl {\n  padding-right: 1.5em;\n}\n.ql-editor ol li {\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  counter-increment: list-0;\n}\n.ql-editor ol li:before {\n  content: counter(list-0, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-increment: list-1;\n}\n.ql-editor ol li.ql-indent-1:before {\n  content: counter(list-1, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-increment: list-2;\n}\n.ql-editor ol li.ql-indent-2:before {\n  content: counter(list-2, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-increment: list-3;\n}\n.ql-editor ol li.ql-indent-3:before {\n  content: counter(list-3, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-increment: list-4;\n}\n.ql-editor ol li.ql-indent-4:before {\n  content: counter(list-4, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-increment: list-5;\n}\n.ql-editor ol li.ql-indent-5:before {\n  content: counter(list-5, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-reset: list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-increment: list-6;\n}\n.ql-editor ol li.ql-indent-6:before {\n  content: counter(list-6, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-reset: list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-increment: list-7;\n}\n.ql-editor ol li.ql-indent-7:before {\n  content: counter(list-7, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-reset: list-8 list-9;\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-increment: list-8;\n}\n.ql-editor ol li.ql-indent-8:before {\n  content: counter(list-8, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-reset: list-9;\n}\n.ql-editor ol li.ql-indent-9 {\n  counter-increment: list-9;\n}\n.ql-editor ol li.ql-indent-9:before {\n  content: counter(list-9, decimal) '. ';\n}\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 3em;\n}\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 4.5em;\n}\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 3em;\n}\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 4.5em;\n}\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 6em;\n}\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 7.5em;\n}\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 6em;\n}\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 7.5em;\n}\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 9em;\n}\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 10.5em;\n}\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 9em;\n}\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 10.5em;\n}\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 12em;\n}\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 13.5em;\n}\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 12em;\n}\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 13.5em;\n}\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 15em;\n}\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 16.5em;\n}\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 15em;\n}\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 16.5em;\n}\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 18em;\n}\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 19.5em;\n}\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 18em;\n}\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 19.5em;\n}\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 21em;\n}\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 22.5em;\n}\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 21em;\n}\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 22.5em;\n}\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 24em;\n}\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 25.5em;\n}\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 24em;\n}\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 25.5em;\n}\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 27em;\n}\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 28.5em;\n}\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 27em;\n}\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 28.5em;\n}\n.ql-editor .ql-video {\n  display: block;\n  max-width: 100%;\n}\n.ql-editor .ql-video.ql-align-center {\n  margin: 0 auto;\n}\n.ql-editor .ql-video.ql-align-right {\n  margin: 0 0 0 auto;\n}\n.ql-editor .ql-bg-black {\n  background-color: #000;\n}\n.ql-editor .ql-bg-red {\n  background-color: #e60000;\n}\n.ql-editor .ql-bg-orange {\n  background-color: #f90;\n}\n.ql-editor .ql-bg-yellow {\n  background-color: #ff0;\n}\n.ql-editor .ql-bg-green {\n  background-color: #008a00;\n}\n.ql-editor .ql-bg-blue {\n  background-color: #06c;\n}\n.ql-editor .ql-bg-purple {\n  background-color: #93f;\n}\n.ql-editor .ql-color-white {\n  color: #fff;\n}\n.ql-editor .ql-color-red {\n  color: #e60000;\n}\n.ql-editor .ql-color-orange {\n  color: #f90;\n}\n.ql-editor .ql-color-yellow {\n  color: #ff0;\n}\n.ql-editor .ql-color-green {\n  color: #008a00;\n}\n.ql-editor .ql-color-blue {\n  color: #06c;\n}\n.ql-editor .ql-color-purple {\n  color: #93f;\n}\n.ql-editor .ql-font-serif {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-editor .ql-font-monospace {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-editor .ql-size-small {\n  font-size: 0.75em;\n}\n.ql-editor .ql-size-large {\n  font-size: 1.5em;\n}\n.ql-editor .ql-size-huge {\n  font-size: 2.5em;\n}\n.ql-editor .ql-direction-rtl {\n  direction: rtl;\n  text-align: inherit;\n}\n.ql-editor .ql-align-center {\n  text-align: center;\n}\n.ql-editor .ql-align-justify {\n  text-align: justify;\n}\n.ql-editor .ql-align-right {\n  text-align: right;\n}\n.ql-editor.ql-blank::before {\n  color: rgba(0,0,0,0.6);\n  content: attr(data-placeholder);\n  font-style: italic;\n  left: 15px;\n  pointer-events: none;\n  position: absolute;\n  right: 15px;\n}\n"],sourceRoot:""}]);const s=l},47066:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(94015),i=n.n(r),o=n(23645),l=n.n(o)()(i());l.push([t.id,"/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n.ql-container {\n  box-sizing: border-box;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 13px;\n  height: 100%;\n  margin: 0px;\n  position: relative;\n}\n.ql-container.ql-disabled .ql-tooltip {\n  visibility: hidden;\n}\n.ql-container.ql-disabled .ql-editor ul[data-checked] > li::before {\n  pointer-events: none;\n}\n.ql-clipboard {\n  left: -100000px;\n  height: 1px;\n  overflow-y: hidden;\n  position: absolute;\n  top: 50%;\n}\n.ql-clipboard p {\n  margin: 0;\n  padding: 0;\n}\n.ql-editor {\n  box-sizing: border-box;\n  line-height: 1.42;\n  height: 100%;\n  outline: none;\n  overflow-y: auto;\n  padding: 12px 15px;\n  tab-size: 4;\n  -moz-tab-size: 4;\n  text-align: left;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.ql-editor > * {\n  cursor: text;\n}\n.ql-editor p,\n.ql-editor ol,\n.ql-editor ul,\n.ql-editor pre,\n.ql-editor blockquote,\n.ql-editor h1,\n.ql-editor h2,\n.ql-editor h3,\n.ql-editor h4,\n.ql-editor h5,\n.ql-editor h6 {\n  margin: 0;\n  padding: 0;\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol,\n.ql-editor ul {\n  padding-left: 1.5em;\n}\n.ql-editor ol > li,\n.ql-editor ul > li {\n  list-style-type: none;\n}\n.ql-editor ul > li::before {\n  content: '\\2022';\n}\n.ql-editor ul[data-checked=true],\n.ql-editor ul[data-checked=false] {\n  pointer-events: none;\n}\n.ql-editor ul[data-checked=true] > li *,\n.ql-editor ul[data-checked=false] > li * {\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before,\n.ql-editor ul[data-checked=false] > li::before {\n  color: #777;\n  cursor: pointer;\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before {\n  content: '\\2611';\n}\n.ql-editor ul[data-checked=false] > li::before {\n  content: '\\2610';\n}\n.ql-editor li::before {\n  display: inline-block;\n  white-space: nowrap;\n  width: 1.2em;\n}\n.ql-editor li:not(.ql-direction-rtl)::before {\n  margin-left: -1.5em;\n  margin-right: 0.3em;\n  text-align: right;\n}\n.ql-editor li.ql-direction-rtl::before {\n  margin-left: 0.3em;\n  margin-right: -1.5em;\n}\n.ql-editor ol li:not(.ql-direction-rtl),\n.ql-editor ul li:not(.ql-direction-rtl) {\n  padding-left: 1.5em;\n}\n.ql-editor ol li.ql-direction-rtl,\n.ql-editor ul li.ql-direction-rtl {\n  padding-right: 1.5em;\n}\n.ql-editor ol li {\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  counter-increment: list-0;\n}\n.ql-editor ol li:before {\n  content: counter(list-0, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-increment: list-1;\n}\n.ql-editor ol li.ql-indent-1:before {\n  content: counter(list-1, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-increment: list-2;\n}\n.ql-editor ol li.ql-indent-2:before {\n  content: counter(list-2, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-increment: list-3;\n}\n.ql-editor ol li.ql-indent-3:before {\n  content: counter(list-3, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-increment: list-4;\n}\n.ql-editor ol li.ql-indent-4:before {\n  content: counter(list-4, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-increment: list-5;\n}\n.ql-editor ol li.ql-indent-5:before {\n  content: counter(list-5, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-reset: list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-increment: list-6;\n}\n.ql-editor ol li.ql-indent-6:before {\n  content: counter(list-6, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-reset: list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-increment: list-7;\n}\n.ql-editor ol li.ql-indent-7:before {\n  content: counter(list-7, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-reset: list-8 list-9;\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-increment: list-8;\n}\n.ql-editor ol li.ql-indent-8:before {\n  content: counter(list-8, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-reset: list-9;\n}\n.ql-editor ol li.ql-indent-9 {\n  counter-increment: list-9;\n}\n.ql-editor ol li.ql-indent-9:before {\n  content: counter(list-9, decimal) '. ';\n}\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 3em;\n}\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 4.5em;\n}\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 3em;\n}\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 4.5em;\n}\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 6em;\n}\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 7.5em;\n}\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 6em;\n}\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 7.5em;\n}\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 9em;\n}\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 10.5em;\n}\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 9em;\n}\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 10.5em;\n}\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 12em;\n}\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 13.5em;\n}\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 12em;\n}\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 13.5em;\n}\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 15em;\n}\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 16.5em;\n}\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 15em;\n}\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 16.5em;\n}\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 18em;\n}\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 19.5em;\n}\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 18em;\n}\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 19.5em;\n}\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 21em;\n}\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 22.5em;\n}\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 21em;\n}\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 22.5em;\n}\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 24em;\n}\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 25.5em;\n}\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 24em;\n}\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 25.5em;\n}\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 27em;\n}\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 28.5em;\n}\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 27em;\n}\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 28.5em;\n}\n.ql-editor .ql-video {\n  display: block;\n  max-width: 100%;\n}\n.ql-editor .ql-video.ql-align-center {\n  margin: 0 auto;\n}\n.ql-editor .ql-video.ql-align-right {\n  margin: 0 0 0 auto;\n}\n.ql-editor .ql-bg-black {\n  background-color: #000;\n}\n.ql-editor .ql-bg-red {\n  background-color: #e60000;\n}\n.ql-editor .ql-bg-orange {\n  background-color: #f90;\n}\n.ql-editor .ql-bg-yellow {\n  background-color: #ff0;\n}\n.ql-editor .ql-bg-green {\n  background-color: #008a00;\n}\n.ql-editor .ql-bg-blue {\n  background-color: #06c;\n}\n.ql-editor .ql-bg-purple {\n  background-color: #93f;\n}\n.ql-editor .ql-color-white {\n  color: #fff;\n}\n.ql-editor .ql-color-red {\n  color: #e60000;\n}\n.ql-editor .ql-color-orange {\n  color: #f90;\n}\n.ql-editor .ql-color-yellow {\n  color: #ff0;\n}\n.ql-editor .ql-color-green {\n  color: #008a00;\n}\n.ql-editor .ql-color-blue {\n  color: #06c;\n}\n.ql-editor .ql-color-purple {\n  color: #93f;\n}\n.ql-editor .ql-font-serif {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-editor .ql-font-monospace {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-editor .ql-size-small {\n  font-size: 0.75em;\n}\n.ql-editor .ql-size-large {\n  font-size: 1.5em;\n}\n.ql-editor .ql-size-huge {\n  font-size: 2.5em;\n}\n.ql-editor .ql-direction-rtl {\n  direction: rtl;\n  text-align: inherit;\n}\n.ql-editor .ql-align-center {\n  text-align: center;\n}\n.ql-editor .ql-align-justify {\n  text-align: justify;\n}\n.ql-editor .ql-align-right {\n  text-align: right;\n}\n.ql-editor.ql-blank::before {\n  color: rgba(0,0,0,0.6);\n  content: attr(data-placeholder);\n  font-style: italic;\n  left: 15px;\n  pointer-events: none;\n  position: absolute;\n  right: 15px;\n}\n.ql-snow.ql-toolbar:after,\n.ql-snow .ql-toolbar:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n.ql-snow.ql-toolbar button,\n.ql-snow .ql-toolbar button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  display: inline-block;\n  float: left;\n  height: 24px;\n  padding: 3px 5px;\n  width: 28px;\n}\n.ql-snow.ql-toolbar button svg,\n.ql-snow .ql-toolbar button svg {\n  float: left;\n  height: 100%;\n}\n.ql-snow.ql-toolbar button:active:hover,\n.ql-snow .ql-toolbar button:active:hover {\n  outline: none;\n}\n.ql-snow.ql-toolbar input.ql-image[type=file],\n.ql-snow .ql-toolbar input.ql-image[type=file] {\n  display: none;\n}\n.ql-snow.ql-toolbar button:hover,\n.ql-snow .ql-toolbar button:hover,\n.ql-snow.ql-toolbar button:focus,\n.ql-snow .ql-toolbar button:focus,\n.ql-snow.ql-toolbar button.ql-active,\n.ql-snow .ql-toolbar button.ql-active,\n.ql-snow.ql-toolbar .ql-picker-label:hover,\n.ql-snow .ql-toolbar .ql-picker-label:hover,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active,\n.ql-snow.ql-toolbar .ql-picker-item:hover,\n.ql-snow .ql-toolbar .ql-picker-item:hover,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected {\n  color: #06c;\n}\n.ql-snow.ql-toolbar button:hover .ql-fill,\n.ql-snow .ql-toolbar button:hover .ql-fill,\n.ql-snow.ql-toolbar button:focus .ql-fill,\n.ql-snow .ql-toolbar button:focus .ql-fill,\n.ql-snow.ql-toolbar button.ql-active .ql-fill,\n.ql-snow .ql-toolbar button.ql-active .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,\n.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {\n  fill: #06c;\n}\n.ql-snow.ql-toolbar button:hover .ql-stroke,\n.ql-snow .ql-toolbar button:hover .ql-stroke,\n.ql-snow.ql-toolbar button:focus .ql-stroke,\n.ql-snow .ql-toolbar button:focus .ql-stroke,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\n.ql-snow.ql-toolbar button:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar button:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar button:focus .ql-stroke-miter,\n.ql-snow .ql-toolbar button:focus .ql-stroke-miter,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {\n  stroke: #06c;\n}\n@media (pointer: coarse) {\n  .ql-snow.ql-toolbar button:hover:not(.ql-active),\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) {\n    color: #444;\n  }\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {\n    fill: #444;\n  }\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {\n    stroke: #444;\n  }\n}\n.ql-snow {\n  box-sizing: border-box;\n}\n.ql-snow * {\n  box-sizing: border-box;\n}\n.ql-snow .ql-hidden {\n  display: none;\n}\n.ql-snow .ql-out-bottom,\n.ql-snow .ql-out-top {\n  visibility: hidden;\n}\n.ql-snow .ql-tooltip {\n  position: absolute;\n  transform: translateY(10px);\n}\n.ql-snow .ql-tooltip a {\n  cursor: pointer;\n  text-decoration: none;\n}\n.ql-snow .ql-tooltip.ql-flip {\n  transform: translateY(-10px);\n}\n.ql-snow .ql-formats {\n  display: inline-block;\n  vertical-align: middle;\n}\n.ql-snow .ql-formats:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n.ql-snow .ql-stroke {\n  fill: none;\n  stroke: #444;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-width: 2;\n}\n.ql-snow .ql-stroke-miter {\n  fill: none;\n  stroke: #444;\n  stroke-miterlimit: 10;\n  stroke-width: 2;\n}\n.ql-snow .ql-fill,\n.ql-snow .ql-stroke.ql-fill {\n  fill: #444;\n}\n.ql-snow .ql-empty {\n  fill: none;\n}\n.ql-snow .ql-even {\n  fill-rule: evenodd;\n}\n.ql-snow .ql-thin,\n.ql-snow .ql-stroke.ql-thin {\n  stroke-width: 1;\n}\n.ql-snow .ql-transparent {\n  opacity: 0.4;\n}\n.ql-snow .ql-direction svg:last-child {\n  display: none;\n}\n.ql-snow .ql-direction.ql-active svg:last-child {\n  display: inline;\n}\n.ql-snow .ql-direction.ql-active svg:first-child {\n  display: none;\n}\n.ql-snow .ql-editor h1 {\n  font-size: 2em;\n}\n.ql-snow .ql-editor h2 {\n  font-size: 1.5em;\n}\n.ql-snow .ql-editor h3 {\n  font-size: 1.17em;\n}\n.ql-snow .ql-editor h4 {\n  font-size: 1em;\n}\n.ql-snow .ql-editor h5 {\n  font-size: 0.83em;\n}\n.ql-snow .ql-editor h6 {\n  font-size: 0.67em;\n}\n.ql-snow .ql-editor a {\n  text-decoration: underline;\n}\n.ql-snow .ql-editor blockquote {\n  border-left: 4px solid #ccc;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  padding-left: 16px;\n}\n.ql-snow .ql-editor code,\n.ql-snow .ql-editor pre {\n  background-color: #f0f0f0;\n  border-radius: 3px;\n}\n.ql-snow .ql-editor pre {\n  white-space: pre-wrap;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  padding: 5px 10px;\n}\n.ql-snow .ql-editor code {\n  font-size: 85%;\n  padding: 2px 4px;\n}\n.ql-snow .ql-editor pre.ql-syntax {\n  background-color: #23241f;\n  color: #f8f8f2;\n  overflow: visible;\n}\n.ql-snow .ql-editor img {\n  max-width: 100%;\n}\n.ql-snow .ql-picker {\n  color: #444;\n  display: inline-block;\n  float: left;\n  font-size: 14px;\n  font-weight: 500;\n  height: 24px;\n  position: relative;\n  vertical-align: middle;\n}\n.ql-snow .ql-picker-label {\n  cursor: pointer;\n  display: inline-block;\n  height: 100%;\n  padding-left: 8px;\n  padding-right: 2px;\n  position: relative;\n  width: 100%;\n}\n.ql-snow .ql-picker-label::before {\n  display: inline-block;\n  line-height: 22px;\n}\n.ql-snow .ql-picker-options {\n  background-color: #fff;\n  display: none;\n  min-width: 100%;\n  padding: 4px 8px;\n  position: absolute;\n  white-space: nowrap;\n}\n.ql-snow .ql-picker-options .ql-picker-item {\n  cursor: pointer;\n  display: block;\n  padding-bottom: 5px;\n  padding-top: 5px;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label {\n  color: #ccc;\n  z-index: 2;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill {\n  fill: #ccc;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke {\n  stroke: #ccc;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-options {\n  display: block;\n  margin-top: -1px;\n  top: 100%;\n  z-index: 1;\n}\n.ql-snow .ql-color-picker,\n.ql-snow .ql-icon-picker {\n  width: 28px;\n}\n.ql-snow .ql-color-picker .ql-picker-label,\n.ql-snow .ql-icon-picker .ql-picker-label {\n  padding: 2px 4px;\n}\n.ql-snow .ql-color-picker .ql-picker-label svg,\n.ql-snow .ql-icon-picker .ql-picker-label svg {\n  right: 4px;\n}\n.ql-snow .ql-icon-picker .ql-picker-options {\n  padding: 4px 0px;\n}\n.ql-snow .ql-icon-picker .ql-picker-item {\n  height: 24px;\n  width: 24px;\n  padding: 2px 4px;\n}\n.ql-snow .ql-color-picker .ql-picker-options {\n  padding: 3px 5px;\n  width: 152px;\n}\n.ql-snow .ql-color-picker .ql-picker-item {\n  border: 1px solid transparent;\n  float: left;\n  height: 16px;\n  margin: 2px;\n  padding: 0px;\n  width: 16px;\n}\n.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {\n  position: absolute;\n  margin-top: -9px;\n  right: 0;\n  top: 50%;\n  width: 18px;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before {\n  content: attr(data-label);\n}\n.ql-snow .ql-picker.ql-header {\n  width: 98px;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item::before {\n  content: 'Normal';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"1\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before {\n  content: 'Heading 1';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"2\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before {\n  content: 'Heading 2';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"3\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before {\n  content: 'Heading 3';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"4\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before {\n  content: 'Heading 4';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"5\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before {\n  content: 'Heading 5';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"6\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before {\n  content: 'Heading 6';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before {\n  font-size: 2em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before {\n  font-size: 1.5em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before {\n  font-size: 1.17em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before {\n  font-size: 1em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before {\n  font-size: 0.83em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before {\n  font-size: 0.67em;\n}\n.ql-snow .ql-picker.ql-font {\n  width: 108px;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item::before {\n  content: 'Sans Serif';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\n  content: 'Serif';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\n  content: 'Monospace';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-snow .ql-picker.ql-size {\n  width: 98px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item::before {\n  content: 'Normal';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\n  content: 'Small';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\n  content: 'Large';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\n  content: 'Huge';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\n  font-size: 10px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\n  font-size: 18px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\n  font-size: 32px;\n}\n.ql-snow .ql-color-picker.ql-background .ql-picker-item {\n  background-color: #fff;\n}\n.ql-snow .ql-color-picker.ql-color .ql-picker-item {\n  background-color: #000;\n}\n.ql-toolbar.ql-snow {\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\n  padding: 8px;\n}\n.ql-toolbar.ql-snow .ql-formats {\n  margin-right: 15px;\n}\n.ql-toolbar.ql-snow .ql-picker-label {\n  border: 1px solid transparent;\n}\n.ql-toolbar.ql-snow .ql-picker-options {\n  border: 1px solid transparent;\n  box-shadow: rgba(0,0,0,0.2) 0 2px 8px;\n}\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label {\n  border-color: #ccc;\n}\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options {\n  border-color: #ccc;\n}\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover {\n  border-color: #000;\n}\n.ql-toolbar.ql-snow + .ql-container.ql-snow {\n  border-top: 0px;\n}\n.ql-snow .ql-tooltip {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  box-shadow: 0px 0px 5px #ddd;\n  color: #444;\n  padding: 5px 12px;\n  white-space: nowrap;\n}\n.ql-snow .ql-tooltip::before {\n  content: \"Visit URL:\";\n  line-height: 26px;\n  margin-right: 8px;\n}\n.ql-snow .ql-tooltip input[type=text] {\n  display: none;\n  border: 1px solid #ccc;\n  font-size: 13px;\n  height: 26px;\n  margin: 0px;\n  padding: 3px 5px;\n  width: 170px;\n}\n.ql-snow .ql-tooltip a.ql-preview {\n  display: inline-block;\n  max-width: 200px;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  vertical-align: top;\n}\n.ql-snow .ql-tooltip a.ql-action::after {\n  border-right: 1px solid #ccc;\n  content: 'Edit';\n  margin-left: 16px;\n  padding-right: 8px;\n}\n.ql-snow .ql-tooltip a.ql-remove::before {\n  content: 'Remove';\n  margin-left: 8px;\n}\n.ql-snow .ql-tooltip a {\n  line-height: 26px;\n}\n.ql-snow .ql-tooltip.ql-editing a.ql-preview,\n.ql-snow .ql-tooltip.ql-editing a.ql-remove {\n  display: none;\n}\n.ql-snow .ql-tooltip.ql-editing input[type=text] {\n  display: inline-block;\n}\n.ql-snow .ql-tooltip.ql-editing a.ql-action::after {\n  border-right: 0px;\n  content: 'Save';\n  padding-right: 0px;\n}\n.ql-snow .ql-tooltip[data-mode=link]::before {\n  content: \"Enter link:\";\n}\n.ql-snow .ql-tooltip[data-mode=formula]::before {\n  content: \"Enter formula:\";\n}\n.ql-snow .ql-tooltip[data-mode=video]::before {\n  content: \"Enter video:\";\n}\n.ql-snow a {\n  color: #06c;\n}\n.ql-container.ql-snow {\n  border: 1px solid #ccc;\n}\n","",{version:3,sources:["webpack://./node_modules/quill/dist/quill.snow.css"],names:[],mappings:"AAAA;;;;;EAKE;AACF;EACE,sBAAsB;EACtB,yCAAyC;EACzC,eAAe;EACf,YAAY;EACZ,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,eAAe;EACf,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,QAAQ;AACV;AACA;EACE,SAAS;EACT,UAAU;AACZ;AACA;EACE,sBAAsB;EACtB,iBAAiB;EACjB,YAAY;EACZ,aAAa;EACb,gBAAgB;EAChB,kBAAkB;EAClB,WAAW;EACX,gBAAgB;EAChB,gBAAgB;EAChB,qBAAqB;EACrB,qBAAqB;AACvB;AACA;EACE,YAAY;AACd;AACA;;;;;;;;;;;EAWE,SAAS;EACT,UAAU;EACV,6EAA6E;AAC/E;AACA;;EAEE,mBAAmB;AACrB;AACA;;EAEE,qBAAqB;AACvB;AACA;EACE,gBAAgB;AAClB;AACA;;EAEE,oBAAoB;AACtB;AACA;;EAEE,mBAAmB;AACrB;AACA;;EAEE,WAAW;EACX,eAAe;EACf,mBAAmB;AACrB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,YAAY;AACd;AACA;EACE,mBAAmB;EACnB,mBAAmB;EACnB,iBAAiB;AACnB;AACA;EACE,kBAAkB;EAClB,oBAAoB;AACtB;AACA;;EAEE,mBAAmB;AACrB;AACA;;EAEE,oBAAoB;AACtB;AACA;EACE,6EAA6E;EAC7E,yBAAyB;AAC3B;AACA;EACE,sCAAsC;AACxC;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,sEAAsE;AACxE;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,+DAA+D;AACjE;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sCAAsC;AACxC;AACA;EACE,wDAAwD;AAC1D;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,iDAAiD;AACnD;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sCAAsC;AACxC;AACA;EACE,mCAAmC;AACrC;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,qBAAqB;AACvB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sCAAsC;AACxC;AACA;EACE,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,cAAc;EACd,eAAe;AACjB;AACA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,WAAW;AACb;AACA;EACE,cAAc;AAChB;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,cAAc;AAChB;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,4CAA4C;AAC9C;AACA;EACE,2CAA2C;AAC7C;AACA;EACE,iBAAiB;AACnB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,sBAAsB;EACtB,+BAA+B;EAC/B,kBAAkB;EAClB,UAAU;EACV,oBAAoB;EACpB,kBAAkB;EAClB,WAAW;AACb;AACA;;EAEE,WAAW;EACX,WAAW;EACX,cAAc;AAChB;AACA;;EAEE,gBAAgB;EAChB,YAAY;EACZ,eAAe;EACf,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,WAAW;AACb;AACA;;EAEE,WAAW;EACX,YAAY;AACd;AACA;;EAEE,aAAa;AACf;AACA;;EAEE,aAAa;AACf;AACA;;;;;;;;;;;;;;EAcE,WAAW;AACb;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BE,UAAU;AACZ;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BE,YAAY;AACd;AACA;EACE;;IAEE,WAAW;EACb;EACA;;;;IAIE,UAAU;EACZ;EACA;;;;IAIE,YAAY;EACd;AACF;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,aAAa;AACf;AACA;;EAEE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,2BAA2B;AAC7B;AACA;EACE,eAAe;EACf,qBAAqB;AACvB;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,qBAAqB;EACrB,sBAAsB;AACxB;AACA;EACE,WAAW;EACX,WAAW;EACX,cAAc;AAChB;AACA;EACE,UAAU;EACV,YAAY;EACZ,qBAAqB;EACrB,sBAAsB;EACtB,eAAe;AACjB;AACA;EACE,UAAU;EACV,YAAY;EACZ,qBAAqB;EACrB,eAAe;AACjB;AACA;;EAEE,UAAU;AACZ;AACA;EACE,UAAU;AACZ;AACA;EACE,kBAAkB;AACpB;AACA;;EAEE,eAAe;AACjB;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;AACf;AACA;EACE,eAAe;AACjB;AACA;EACE,aAAa;AACf;AACA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,cAAc;AAChB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,0BAA0B;AAC5B;AACA;EACE,2BAA2B;EAC3B,kBAAkB;EAClB,eAAe;EACf,kBAAkB;AACpB;AACA;;EAEE,yBAAyB;EACzB,kBAAkB;AACpB;AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,cAAc;EACd,gBAAgB;AAClB;AACA;EACE,yBAAyB;EACzB,cAAc;EACd,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;AACA;EACE,WAAW;EACX,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,gBAAgB;EAChB,YAAY;EACZ,kBAAkB;EAClB,sBAAsB;AACxB;AACA;EACE,eAAe;EACf,qBAAqB;EACrB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,WAAW;AACb;AACA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;AACA;EACE,sBAAsB;EACtB,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,mBAAmB;AACrB;AACA;EACE,eAAe;EACf,cAAc;EACd,mBAAmB;EACnB,gBAAgB;AAClB;AACA;EACE,WAAW;EACX,UAAU;AACZ;AACA;EACE,UAAU;AACZ;AACA;EACE,YAAY;AACd;AACA;EACE,cAAc;EACd,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ;AACA;;EAEE,WAAW;AACb;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,UAAU;AACZ;AACA;EACE,gBAAgB;AAClB;AACA;EACE,YAAY;EACZ,WAAW;EACX,gBAAgB;AAClB;AACA;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,6BAA6B;EAC7B,WAAW;EACX,YAAY;EACZ,WAAW;EACX,YAAY;EACZ,WAAW;AACb;AACA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,QAAQ;EACR,QAAQ;EACR,WAAW;AACb;AACA;;;;;;EAME,yBAAyB;AAC3B;AACA;EACE,WAAW;AACb;AACA;;EAEE,iBAAiB;AACnB;AACA;;EAEE,oBAAoB;AACtB;AACA;;EAEE,oBAAoB;AACtB;AACA;;EAEE,oBAAoB;AACtB;AACA;;EAEE,oBAAoB;AACtB;AACA;;EAEE,oBAAoB;AACtB;AACA;;EAEE,oBAAoB;AACtB;AACA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,cAAc;AAChB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,YAAY;AACd;AACA;;EAEE,qBAAqB;AACvB;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,oBAAoB;AACtB;AACA;EACE,4CAA4C;AAC9C;AACA;EACE,2CAA2C;AAC7C;AACA;EACE,WAAW;AACb;AACA;;EAEE,iBAAiB;AACnB;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,eAAe;AACjB;AACA;EACE,eAAe;AACjB;AACA;EACE,eAAe;AACjB;AACA;EACE,eAAe;AACjB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;EACtB,sBAAsB;EACtB,+DAA+D;EAC/D,YAAY;AACd;AACA;EACE,kBAAkB;AACpB;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,6BAA6B;EAC7B,qCAAqC;AACvC;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;AACpB;AACA;;EAEE,kBAAkB;AACpB;AACA;EACE,eAAe;AACjB;AACA;EACE,sBAAsB;EACtB,sBAAsB;EACtB,4BAA4B;EAC5B,WAAW;EACX,iBAAiB;EACjB,mBAAmB;AACrB;AACA;EACE,qBAAqB;EACrB,iBAAiB;EACjB,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,YAAY;EACZ,WAAW;EACX,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,qBAAqB;EACrB,gBAAgB;EAChB,kBAAkB;EAClB,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,4BAA4B;EAC5B,eAAe;EACf,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;AACA;EACE,iBAAiB;AACnB;AACA;;EAEE,aAAa;AACf;AACA;EACE,qBAAqB;AACvB;AACA;EACE,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,uBAAuB;AACzB;AACA;EACE,WAAW;AACb;AACA;EACE,sBAAsB;AACxB",sourcesContent:["/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n.ql-container {\n  box-sizing: border-box;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 13px;\n  height: 100%;\n  margin: 0px;\n  position: relative;\n}\n.ql-container.ql-disabled .ql-tooltip {\n  visibility: hidden;\n}\n.ql-container.ql-disabled .ql-editor ul[data-checked] > li::before {\n  pointer-events: none;\n}\n.ql-clipboard {\n  left: -100000px;\n  height: 1px;\n  overflow-y: hidden;\n  position: absolute;\n  top: 50%;\n}\n.ql-clipboard p {\n  margin: 0;\n  padding: 0;\n}\n.ql-editor {\n  box-sizing: border-box;\n  line-height: 1.42;\n  height: 100%;\n  outline: none;\n  overflow-y: auto;\n  padding: 12px 15px;\n  tab-size: 4;\n  -moz-tab-size: 4;\n  text-align: left;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.ql-editor > * {\n  cursor: text;\n}\n.ql-editor p,\n.ql-editor ol,\n.ql-editor ul,\n.ql-editor pre,\n.ql-editor blockquote,\n.ql-editor h1,\n.ql-editor h2,\n.ql-editor h3,\n.ql-editor h4,\n.ql-editor h5,\n.ql-editor h6 {\n  margin: 0;\n  padding: 0;\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol,\n.ql-editor ul {\n  padding-left: 1.5em;\n}\n.ql-editor ol > li,\n.ql-editor ul > li {\n  list-style-type: none;\n}\n.ql-editor ul > li::before {\n  content: '\\2022';\n}\n.ql-editor ul[data-checked=true],\n.ql-editor ul[data-checked=false] {\n  pointer-events: none;\n}\n.ql-editor ul[data-checked=true] > li *,\n.ql-editor ul[data-checked=false] > li * {\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before,\n.ql-editor ul[data-checked=false] > li::before {\n  color: #777;\n  cursor: pointer;\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before {\n  content: '\\2611';\n}\n.ql-editor ul[data-checked=false] > li::before {\n  content: '\\2610';\n}\n.ql-editor li::before {\n  display: inline-block;\n  white-space: nowrap;\n  width: 1.2em;\n}\n.ql-editor li:not(.ql-direction-rtl)::before {\n  margin-left: -1.5em;\n  margin-right: 0.3em;\n  text-align: right;\n}\n.ql-editor li.ql-direction-rtl::before {\n  margin-left: 0.3em;\n  margin-right: -1.5em;\n}\n.ql-editor ol li:not(.ql-direction-rtl),\n.ql-editor ul li:not(.ql-direction-rtl) {\n  padding-left: 1.5em;\n}\n.ql-editor ol li.ql-direction-rtl,\n.ql-editor ul li.ql-direction-rtl {\n  padding-right: 1.5em;\n}\n.ql-editor ol li {\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  counter-increment: list-0;\n}\n.ql-editor ol li:before {\n  content: counter(list-0, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-increment: list-1;\n}\n.ql-editor ol li.ql-indent-1:before {\n  content: counter(list-1, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-increment: list-2;\n}\n.ql-editor ol li.ql-indent-2:before {\n  content: counter(list-2, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-increment: list-3;\n}\n.ql-editor ol li.ql-indent-3:before {\n  content: counter(list-3, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-increment: list-4;\n}\n.ql-editor ol li.ql-indent-4:before {\n  content: counter(list-4, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-increment: list-5;\n}\n.ql-editor ol li.ql-indent-5:before {\n  content: counter(list-5, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-reset: list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-increment: list-6;\n}\n.ql-editor ol li.ql-indent-6:before {\n  content: counter(list-6, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-reset: list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-increment: list-7;\n}\n.ql-editor ol li.ql-indent-7:before {\n  content: counter(list-7, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-reset: list-8 list-9;\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-increment: list-8;\n}\n.ql-editor ol li.ql-indent-8:before {\n  content: counter(list-8, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-reset: list-9;\n}\n.ql-editor ol li.ql-indent-9 {\n  counter-increment: list-9;\n}\n.ql-editor ol li.ql-indent-9:before {\n  content: counter(list-9, decimal) '. ';\n}\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 3em;\n}\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 4.5em;\n}\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 3em;\n}\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 4.5em;\n}\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 6em;\n}\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 7.5em;\n}\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 6em;\n}\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 7.5em;\n}\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 9em;\n}\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 10.5em;\n}\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 9em;\n}\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 10.5em;\n}\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 12em;\n}\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 13.5em;\n}\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 12em;\n}\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 13.5em;\n}\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 15em;\n}\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 16.5em;\n}\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 15em;\n}\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 16.5em;\n}\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 18em;\n}\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 19.5em;\n}\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 18em;\n}\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 19.5em;\n}\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 21em;\n}\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 22.5em;\n}\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 21em;\n}\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 22.5em;\n}\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 24em;\n}\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 25.5em;\n}\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 24em;\n}\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 25.5em;\n}\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 27em;\n}\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 28.5em;\n}\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 27em;\n}\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 28.5em;\n}\n.ql-editor .ql-video {\n  display: block;\n  max-width: 100%;\n}\n.ql-editor .ql-video.ql-align-center {\n  margin: 0 auto;\n}\n.ql-editor .ql-video.ql-align-right {\n  margin: 0 0 0 auto;\n}\n.ql-editor .ql-bg-black {\n  background-color: #000;\n}\n.ql-editor .ql-bg-red {\n  background-color: #e60000;\n}\n.ql-editor .ql-bg-orange {\n  background-color: #f90;\n}\n.ql-editor .ql-bg-yellow {\n  background-color: #ff0;\n}\n.ql-editor .ql-bg-green {\n  background-color: #008a00;\n}\n.ql-editor .ql-bg-blue {\n  background-color: #06c;\n}\n.ql-editor .ql-bg-purple {\n  background-color: #93f;\n}\n.ql-editor .ql-color-white {\n  color: #fff;\n}\n.ql-editor .ql-color-red {\n  color: #e60000;\n}\n.ql-editor .ql-color-orange {\n  color: #f90;\n}\n.ql-editor .ql-color-yellow {\n  color: #ff0;\n}\n.ql-editor .ql-color-green {\n  color: #008a00;\n}\n.ql-editor .ql-color-blue {\n  color: #06c;\n}\n.ql-editor .ql-color-purple {\n  color: #93f;\n}\n.ql-editor .ql-font-serif {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-editor .ql-font-monospace {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-editor .ql-size-small {\n  font-size: 0.75em;\n}\n.ql-editor .ql-size-large {\n  font-size: 1.5em;\n}\n.ql-editor .ql-size-huge {\n  font-size: 2.5em;\n}\n.ql-editor .ql-direction-rtl {\n  direction: rtl;\n  text-align: inherit;\n}\n.ql-editor .ql-align-center {\n  text-align: center;\n}\n.ql-editor .ql-align-justify {\n  text-align: justify;\n}\n.ql-editor .ql-align-right {\n  text-align: right;\n}\n.ql-editor.ql-blank::before {\n  color: rgba(0,0,0,0.6);\n  content: attr(data-placeholder);\n  font-style: italic;\n  left: 15px;\n  pointer-events: none;\n  position: absolute;\n  right: 15px;\n}\n.ql-snow.ql-toolbar:after,\n.ql-snow .ql-toolbar:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n.ql-snow.ql-toolbar button,\n.ql-snow .ql-toolbar button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  display: inline-block;\n  float: left;\n  height: 24px;\n  padding: 3px 5px;\n  width: 28px;\n}\n.ql-snow.ql-toolbar button svg,\n.ql-snow .ql-toolbar button svg {\n  float: left;\n  height: 100%;\n}\n.ql-snow.ql-toolbar button:active:hover,\n.ql-snow .ql-toolbar button:active:hover {\n  outline: none;\n}\n.ql-snow.ql-toolbar input.ql-image[type=file],\n.ql-snow .ql-toolbar input.ql-image[type=file] {\n  display: none;\n}\n.ql-snow.ql-toolbar button:hover,\n.ql-snow .ql-toolbar button:hover,\n.ql-snow.ql-toolbar button:focus,\n.ql-snow .ql-toolbar button:focus,\n.ql-snow.ql-toolbar button.ql-active,\n.ql-snow .ql-toolbar button.ql-active,\n.ql-snow.ql-toolbar .ql-picker-label:hover,\n.ql-snow .ql-toolbar .ql-picker-label:hover,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active,\n.ql-snow.ql-toolbar .ql-picker-item:hover,\n.ql-snow .ql-toolbar .ql-picker-item:hover,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected {\n  color: #06c;\n}\n.ql-snow.ql-toolbar button:hover .ql-fill,\n.ql-snow .ql-toolbar button:hover .ql-fill,\n.ql-snow.ql-toolbar button:focus .ql-fill,\n.ql-snow .ql-toolbar button:focus .ql-fill,\n.ql-snow.ql-toolbar button.ql-active .ql-fill,\n.ql-snow .ql-toolbar button.ql-active .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,\n.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {\n  fill: #06c;\n}\n.ql-snow.ql-toolbar button:hover .ql-stroke,\n.ql-snow .ql-toolbar button:hover .ql-stroke,\n.ql-snow.ql-toolbar button:focus .ql-stroke,\n.ql-snow .ql-toolbar button:focus .ql-stroke,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\n.ql-snow.ql-toolbar button:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar button:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar button:focus .ql-stroke-miter,\n.ql-snow .ql-toolbar button:focus .ql-stroke-miter,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {\n  stroke: #06c;\n}\n@media (pointer: coarse) {\n  .ql-snow.ql-toolbar button:hover:not(.ql-active),\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) {\n    color: #444;\n  }\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {\n    fill: #444;\n  }\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {\n    stroke: #444;\n  }\n}\n.ql-snow {\n  box-sizing: border-box;\n}\n.ql-snow * {\n  box-sizing: border-box;\n}\n.ql-snow .ql-hidden {\n  display: none;\n}\n.ql-snow .ql-out-bottom,\n.ql-snow .ql-out-top {\n  visibility: hidden;\n}\n.ql-snow .ql-tooltip {\n  position: absolute;\n  transform: translateY(10px);\n}\n.ql-snow .ql-tooltip a {\n  cursor: pointer;\n  text-decoration: none;\n}\n.ql-snow .ql-tooltip.ql-flip {\n  transform: translateY(-10px);\n}\n.ql-snow .ql-formats {\n  display: inline-block;\n  vertical-align: middle;\n}\n.ql-snow .ql-formats:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n.ql-snow .ql-stroke {\n  fill: none;\n  stroke: #444;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-width: 2;\n}\n.ql-snow .ql-stroke-miter {\n  fill: none;\n  stroke: #444;\n  stroke-miterlimit: 10;\n  stroke-width: 2;\n}\n.ql-snow .ql-fill,\n.ql-snow .ql-stroke.ql-fill {\n  fill: #444;\n}\n.ql-snow .ql-empty {\n  fill: none;\n}\n.ql-snow .ql-even {\n  fill-rule: evenodd;\n}\n.ql-snow .ql-thin,\n.ql-snow .ql-stroke.ql-thin {\n  stroke-width: 1;\n}\n.ql-snow .ql-transparent {\n  opacity: 0.4;\n}\n.ql-snow .ql-direction svg:last-child {\n  display: none;\n}\n.ql-snow .ql-direction.ql-active svg:last-child {\n  display: inline;\n}\n.ql-snow .ql-direction.ql-active svg:first-child {\n  display: none;\n}\n.ql-snow .ql-editor h1 {\n  font-size: 2em;\n}\n.ql-snow .ql-editor h2 {\n  font-size: 1.5em;\n}\n.ql-snow .ql-editor h3 {\n  font-size: 1.17em;\n}\n.ql-snow .ql-editor h4 {\n  font-size: 1em;\n}\n.ql-snow .ql-editor h5 {\n  font-size: 0.83em;\n}\n.ql-snow .ql-editor h6 {\n  font-size: 0.67em;\n}\n.ql-snow .ql-editor a {\n  text-decoration: underline;\n}\n.ql-snow .ql-editor blockquote {\n  border-left: 4px solid #ccc;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  padding-left: 16px;\n}\n.ql-snow .ql-editor code,\n.ql-snow .ql-editor pre {\n  background-color: #f0f0f0;\n  border-radius: 3px;\n}\n.ql-snow .ql-editor pre {\n  white-space: pre-wrap;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  padding: 5px 10px;\n}\n.ql-snow .ql-editor code {\n  font-size: 85%;\n  padding: 2px 4px;\n}\n.ql-snow .ql-editor pre.ql-syntax {\n  background-color: #23241f;\n  color: #f8f8f2;\n  overflow: visible;\n}\n.ql-snow .ql-editor img {\n  max-width: 100%;\n}\n.ql-snow .ql-picker {\n  color: #444;\n  display: inline-block;\n  float: left;\n  font-size: 14px;\n  font-weight: 500;\n  height: 24px;\n  position: relative;\n  vertical-align: middle;\n}\n.ql-snow .ql-picker-label {\n  cursor: pointer;\n  display: inline-block;\n  height: 100%;\n  padding-left: 8px;\n  padding-right: 2px;\n  position: relative;\n  width: 100%;\n}\n.ql-snow .ql-picker-label::before {\n  display: inline-block;\n  line-height: 22px;\n}\n.ql-snow .ql-picker-options {\n  background-color: #fff;\n  display: none;\n  min-width: 100%;\n  padding: 4px 8px;\n  position: absolute;\n  white-space: nowrap;\n}\n.ql-snow .ql-picker-options .ql-picker-item {\n  cursor: pointer;\n  display: block;\n  padding-bottom: 5px;\n  padding-top: 5px;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label {\n  color: #ccc;\n  z-index: 2;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill {\n  fill: #ccc;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke {\n  stroke: #ccc;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-options {\n  display: block;\n  margin-top: -1px;\n  top: 100%;\n  z-index: 1;\n}\n.ql-snow .ql-color-picker,\n.ql-snow .ql-icon-picker {\n  width: 28px;\n}\n.ql-snow .ql-color-picker .ql-picker-label,\n.ql-snow .ql-icon-picker .ql-picker-label {\n  padding: 2px 4px;\n}\n.ql-snow .ql-color-picker .ql-picker-label svg,\n.ql-snow .ql-icon-picker .ql-picker-label svg {\n  right: 4px;\n}\n.ql-snow .ql-icon-picker .ql-picker-options {\n  padding: 4px 0px;\n}\n.ql-snow .ql-icon-picker .ql-picker-item {\n  height: 24px;\n  width: 24px;\n  padding: 2px 4px;\n}\n.ql-snow .ql-color-picker .ql-picker-options {\n  padding: 3px 5px;\n  width: 152px;\n}\n.ql-snow .ql-color-picker .ql-picker-item {\n  border: 1px solid transparent;\n  float: left;\n  height: 16px;\n  margin: 2px;\n  padding: 0px;\n  width: 16px;\n}\n.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {\n  position: absolute;\n  margin-top: -9px;\n  right: 0;\n  top: 50%;\n  width: 18px;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before {\n  content: attr(data-label);\n}\n.ql-snow .ql-picker.ql-header {\n  width: 98px;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item::before {\n  content: 'Normal';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"1\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before {\n  content: 'Heading 1';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"2\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before {\n  content: 'Heading 2';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"3\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before {\n  content: 'Heading 3';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"4\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before {\n  content: 'Heading 4';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"5\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before {\n  content: 'Heading 5';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"6\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before {\n  content: 'Heading 6';\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before {\n  font-size: 2em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before {\n  font-size: 1.5em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before {\n  font-size: 1.17em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before {\n  font-size: 1em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before {\n  font-size: 0.83em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before {\n  font-size: 0.67em;\n}\n.ql-snow .ql-picker.ql-font {\n  width: 108px;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item::before {\n  content: 'Sans Serif';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\n  content: 'Serif';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\n  content: 'Monospace';\n}\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-snow .ql-picker.ql-size {\n  width: 98px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item::before {\n  content: 'Normal';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\n  content: 'Small';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\n  content: 'Large';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\n  content: 'Huge';\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\n  font-size: 10px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\n  font-size: 18px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\n  font-size: 32px;\n}\n.ql-snow .ql-color-picker.ql-background .ql-picker-item {\n  background-color: #fff;\n}\n.ql-snow .ql-color-picker.ql-color .ql-picker-item {\n  background-color: #000;\n}\n.ql-toolbar.ql-snow {\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\n  padding: 8px;\n}\n.ql-toolbar.ql-snow .ql-formats {\n  margin-right: 15px;\n}\n.ql-toolbar.ql-snow .ql-picker-label {\n  border: 1px solid transparent;\n}\n.ql-toolbar.ql-snow .ql-picker-options {\n  border: 1px solid transparent;\n  box-shadow: rgba(0,0,0,0.2) 0 2px 8px;\n}\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label {\n  border-color: #ccc;\n}\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options {\n  border-color: #ccc;\n}\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover {\n  border-color: #000;\n}\n.ql-toolbar.ql-snow + .ql-container.ql-snow {\n  border-top: 0px;\n}\n.ql-snow .ql-tooltip {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  box-shadow: 0px 0px 5px #ddd;\n  color: #444;\n  padding: 5px 12px;\n  white-space: nowrap;\n}\n.ql-snow .ql-tooltip::before {\n  content: \"Visit URL:\";\n  line-height: 26px;\n  margin-right: 8px;\n}\n.ql-snow .ql-tooltip input[type=text] {\n  display: none;\n  border: 1px solid #ccc;\n  font-size: 13px;\n  height: 26px;\n  margin: 0px;\n  padding: 3px 5px;\n  width: 170px;\n}\n.ql-snow .ql-tooltip a.ql-preview {\n  display: inline-block;\n  max-width: 200px;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  vertical-align: top;\n}\n.ql-snow .ql-tooltip a.ql-action::after {\n  border-right: 1px solid #ccc;\n  content: 'Edit';\n  margin-left: 16px;\n  padding-right: 8px;\n}\n.ql-snow .ql-tooltip a.ql-remove::before {\n  content: 'Remove';\n  margin-left: 8px;\n}\n.ql-snow .ql-tooltip a {\n  line-height: 26px;\n}\n.ql-snow .ql-tooltip.ql-editing a.ql-preview,\n.ql-snow .ql-tooltip.ql-editing a.ql-remove {\n  display: none;\n}\n.ql-snow .ql-tooltip.ql-editing input[type=text] {\n  display: inline-block;\n}\n.ql-snow .ql-tooltip.ql-editing a.ql-action::after {\n  border-right: 0px;\n  content: 'Save';\n  padding-right: 0px;\n}\n.ql-snow .ql-tooltip[data-mode=link]::before {\n  content: \"Enter link:\";\n}\n.ql-snow .ql-tooltip[data-mode=formula]::before {\n  content: \"Enter formula:\";\n}\n.ql-snow .ql-tooltip[data-mode=video]::before {\n  content: \"Enter video:\";\n}\n.ql-snow a {\n  color: #06c;\n}\n.ql-container.ql-snow {\n  border: 1px solid #ccc;\n}\n"],sourceRoot:""}]);const s=l},23645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(i[l]=!0)}for(var s=0;s<t.length;s++){var a=[].concat(t[s]);r&&i[a[0]]||(n&&(a[2]?a[2]="".concat(n," and ").concat(a[2]):a[2]=n),e.push(a))}},e}},94015:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,i=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],l=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(l)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(a," */"),u=l.sources.map((function(t){return"/*# sourceURL=".concat(l.sourceRoot||"").concat(t," */")}));return[o].concat(u).concat([c]).join("\n")}return[o].join("\n")}},10251:(t,e,n)=>{var r=n(82215),i=n(82584),o=n(20609),l=n(98420),s=n(2847),a=n(18923),c=Date.prototype.getTime;function u(t){return null==t}function d(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length||"function"!=typeof t.copy||"function"!=typeof t.slice||t.length>0&&"number"!=typeof t[0])}t.exports=function t(e,n,p){var h=p||{};return!!(h.strict?o(e,n):e===n)||(!e||!n||"object"!=typeof e&&"object"!=typeof n?h.strict?o(e,n):e==n:function(e,n,o){var p,h;if(typeof e!=typeof n)return!1;if(u(e)||u(n))return!1;if(e.prototype!==n.prototype)return!1;if(i(e)!==i(n))return!1;var f=l(e),A=l(n);if(f!==A)return!1;if(f||A)return e.source===n.source&&s(e)===s(n);if(a(e)&&a(n))return c.call(e)===c.call(n);var q=d(e),g=d(n);if(q!==g)return!1;if(q||g){if(e.length!==n.length)return!1;for(p=0;p<e.length;p++)if(e[p]!==n[p])return!1;return!0}if(typeof e!=typeof n)return!1;try{var m=r(e),b=r(n)}catch(t){return!1}if(m.length!==b.length)return!1;for(m.sort(),b.sort(),p=m.length-1;p>=0;p--)if(m[p]!=b[p])return!1;for(p=m.length-1;p>=0;p--)if(!t(e[h=m[p]],n[h],o))return!1;return!0}(e,n,h))}},9996:t=>{"use strict";var e=function(t){return function(t){return!!t&&"object"==typeof t}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===n}(t)}(t)},n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(t,e){return!1!==e.clone&&e.isMergeableObject(t)?s((n=t,Array.isArray(n)?[]:{}),t,e):t;var n}function i(t,e,n){return t.concat(e).map((function(t){return r(t,n)}))}function o(t){return Object.keys(t).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter((function(e){return t.propertyIsEnumerable(e)})):[]}(t))}function l(t,e){try{return e in t}catch(t){return!1}}function s(t,n,a){(a=a||{}).arrayMerge=a.arrayMerge||i,a.isMergeableObject=a.isMergeableObject||e,a.cloneUnlessOtherwiseSpecified=r;var c=Array.isArray(n);return c===Array.isArray(t)?c?a.arrayMerge(t,n,a):function(t,e,n){var i={};return n.isMergeableObject(t)&&o(t).forEach((function(e){i[e]=r(t[e],n)})),o(e).forEach((function(o){(function(t,e){return l(t,e)&&!(Object.hasOwnProperty.call(t,e)&&Object.propertyIsEnumerable.call(t,e))})(t,o)||(l(t,o)&&n.isMergeableObject(e[o])?i[o]=function(t,e){if(!e.customMerge)return s;var n=e.customMerge(t);return"function"==typeof n?n:s}(o,n)(t[o],e[o],n):i[o]=r(e[o],n))})),i}(t,n,a):r(n,a)}s.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce((function(t,n){return s(t,n,e)}),{})};var a=s;t.exports=a},4289:(t,e,n)=>{"use strict";var r=n(82215),i="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,l=Array.prototype.concat,s=Object.defineProperty,a=s&&function(){var t={};try{for(var e in s(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),c=function(t,e,n,r){var i;(!(e in t)||"function"==typeof(i=r)&&"[object Function]"===o.call(i)&&r())&&(a?s(t,e,{configurable:!0,enumerable:!1,value:n,writable:!0}):t[e]=n)},u=function(t,e){var n=arguments.length>2?arguments[2]:{},o=r(e);i&&(o=l.call(o,Object.getOwnPropertySymbols(e)));for(var s=0;s<o.length;s+=1)c(t,o[s],e[o[s]],n[o[s]])};u.supportsDescriptors=!!a,t.exports=u},94470:t=>{"use strict";var e=Object.prototype.hasOwnProperty,n=Object.prototype.toString,r=Object.defineProperty,i=Object.getOwnPropertyDescriptor,o=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===n.call(t)},l=function(t){if(!t||"[object Object]"!==n.call(t))return!1;var r,i=e.call(t,"constructor"),o=t.constructor&&t.constructor.prototype&&e.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!i&&!o)return!1;for(r in t);return void 0===r||e.call(t,r)},s=function(t,e){r&&"__proto__"===e.name?r(t,e.name,{enumerable:!0,configurable:!0,value:e.newValue,writable:!0}):t[e.name]=e.newValue},a=function(t,n){if("__proto__"===n){if(!e.call(t,n))return;if(i)return i(t,n).value}return t[n]};t.exports=function t(){var e,n,r,i,c,u,d=arguments[0],p=1,h=arguments.length,f=!1;for("boolean"==typeof d&&(f=d,d=arguments[1]||{},p=2),(null==d||"object"!=typeof d&&"function"!=typeof d)&&(d={});p<h;++p)if(null!=(e=arguments[p]))for(n in e)r=a(d,n),d!==(i=a(e,n))&&(f&&i&&(l(i)||(c=o(i)))?(c?(c=!1,u=r&&o(r)?r:[]):u=r&&l(r)?r:{},s(d,{name:n,newValue:t(f,u,i)})):void 0!==i&&s(d,{name:n,newValue:i}));return d}},37529:t=>{var e=-1;function n(t,s,c){if(t==s)return t?[[0,t]]:[];(c<0||t.length<c)&&(c=null);var u=i(t,s),d=t.substring(0,u);u=o(t=t.substring(u),s=s.substring(u));var p=t.substring(t.length-u),h=function(t,l){var s;if(!t)return[[1,l]];if(!l)return[[e,t]];var a=t.length>l.length?t:l,c=t.length>l.length?l:t,u=a.indexOf(c);if(-1!=u)return s=[[1,a.substring(0,u)],[0,c],[1,a.substring(u+c.length)]],t.length>l.length&&(s[0][0]=s[2][0]=e),s;if(1==c.length)return[[e,t],[1,l]];var d=function(t,e){var n=t.length>e.length?t:e,r=t.length>e.length?e:t;if(n.length<4||2*r.length<n.length)return null;function l(t,e,n){for(var r,l,s,a,c=t.substring(n,n+Math.floor(t.length/4)),u=-1,d="";-1!=(u=e.indexOf(c,u+1));){var p=i(t.substring(n),e.substring(u)),h=o(t.substring(0,n),e.substring(0,u));d.length<h+p&&(d=e.substring(u-h,u)+e.substring(u,u+p),r=t.substring(0,n-h),l=t.substring(n+p),s=e.substring(0,u-h),a=e.substring(u+p))}return 2*d.length>=t.length?[r,l,s,a,d]:null}var s,a,c,u,d,p=l(n,r,Math.ceil(n.length/4)),h=l(n,r,Math.ceil(n.length/2));return p||h?(s=h?p&&p[4].length>h[4].length?p:h:p,t.length>e.length?(a=s[0],c=s[1],u=s[2],d=s[3]):(u=s[0],d=s[1],a=s[2],c=s[3]),[a,c,u,d,s[4]]):null}(t,l);if(d){var p=d[0],h=d[1],f=d[2],A=d[3],q=d[4],g=n(p,f),m=n(h,A);return g.concat([[0,q]],m)}return function(t,n){for(var i=t.length,o=n.length,l=Math.ceil((i+o)/2),s=l,a=2*l,c=new Array(a),u=new Array(a),d=0;d<a;d++)c[d]=-1,u[d]=-1;c[s+1]=0,u[s+1]=0;for(var p=i-o,h=p%2!=0,f=0,A=0,q=0,g=0,m=0;m<l;m++){for(var b=-m+f;b<=m-A;b+=2){for(var y=s+b,E=(x=b==-m||b!=m&&c[y-1]<c[y+1]?c[y+1]:c[y-1]+1)-b;x<i&&E<o&&t.charAt(x)==n.charAt(E);)x++,E++;if(c[y]=x,x>i)A+=2;else if(E>o)f+=2;else if(h&&(w=s+p-b)>=0&&w<a&&-1!=u[w]&&x>=(v=i-u[w]))return r(t,n,x,E)}for(var C=-m+q;C<=m-g;C+=2){for(var v,w=s+C,B=(v=C==-m||C!=m&&u[w-1]<u[w+1]?u[w+1]:u[w-1]+1)-C;v<i&&B<o&&t.charAt(i-v-1)==n.charAt(o-B-1);)v++,B++;if(u[w]=v,v>i)g+=2;else if(B>o)q+=2;else if(!h){var x;if((y=s+p-C)>=0&&y<a&&-1!=c[y])if(E=s+(x=c[y])-y,x>=(v=i-v))return r(t,n,x,E)}}}return[[e,t],[1,n]]}(t,l)}(t=t.substring(0,t.length-u),s=s.substring(0,s.length-u));return d&&h.unshift([0,d]),p&&h.push([0,p]),l(h),null!=c&&(h=function(t,n){var r=function(t,n){if(0===n)return[0,t];for(var r=0,i=0;i<t.length;i++){var o=t[i];if(o[0]===e||0===o[0]){var l=r+o[1].length;if(n===l)return[i+1,t];if(n<l){t=t.slice();var s=n-r,a=[o[0],o[1].slice(0,s)],c=[o[0],o[1].slice(s)];return t.splice(i,1,a,c),[i+1,t]}r=l}}throw new Error("cursor_pos is out of bounds!")}(t,n),i=r[1],o=r[0],l=i[o],s=i[o+1];if(null==l)return t;if(0!==l[0])return t;if(null!=s&&l[1]+s[1]===s[1]+l[1])return i.splice(o,2,s,l),a(i,o,2);if(null!=s&&0===s[1].indexOf(l[1])){i.splice(o,2,[s[0],l[1]],[0,l[1]]);var c=s[1].slice(l[1].length);return c.length>0&&i.splice(o+2,0,[s[0],c]),a(i,o,3)}return t}(h,c)),function(t){for(var n=!1,r=function(t){return t.charCodeAt(0)>=56320&&t.charCodeAt(0)<=57343},i=2;i<t.length;i+=1)0===t[i-2][0]&&((o=t[i-2][1]).charCodeAt(o.length-1)>=55296&&o.charCodeAt(o.length-1)<=56319)&&t[i-1][0]===e&&r(t[i-1][1])&&1===t[i][0]&&r(t[i][1])&&(n=!0,t[i-1][1]=t[i-2][1].slice(-1)+t[i-1][1],t[i][1]=t[i-2][1].slice(-1)+t[i][1],t[i-2][1]=t[i-2][1].slice(0,-1));var o;if(!n)return t;var l=[];for(i=0;i<t.length;i+=1)t[i][1].length>0&&l.push(t[i]);return l}(h)}function r(t,e,r,i){var o=t.substring(0,r),l=e.substring(0,i),s=t.substring(r),a=e.substring(i),c=n(o,l),u=n(s,a);return c.concat(u)}function i(t,e){if(!t||!e||t.charAt(0)!=e.charAt(0))return 0;for(var n=0,r=Math.min(t.length,e.length),i=r,o=0;n<i;)t.substring(o,i)==e.substring(o,i)?o=n=i:r=i,i=Math.floor((r-n)/2+n);return i}function o(t,e){if(!t||!e||t.charAt(t.length-1)!=e.charAt(e.length-1))return 0;for(var n=0,r=Math.min(t.length,e.length),i=r,o=0;n<i;)t.substring(t.length-i,t.length-o)==e.substring(e.length-i,e.length-o)?o=n=i:r=i,i=Math.floor((r-n)/2+n);return i}function l(t){t.push([0,""]);for(var n,r=0,s=0,a=0,c="",u="";r<t.length;)switch(t[r][0]){case 1:a++,u+=t[r][1],r++;break;case e:s++,c+=t[r][1],r++;break;case 0:s+a>1?(0!==s&&0!==a&&(0!==(n=i(u,c))&&(r-s-a>0&&0==t[r-s-a-1][0]?t[r-s-a-1][1]+=u.substring(0,n):(t.splice(0,0,[0,u.substring(0,n)]),r++),u=u.substring(n),c=c.substring(n)),0!==(n=o(u,c))&&(t[r][1]=u.substring(u.length-n)+t[r][1],u=u.substring(0,u.length-n),c=c.substring(0,c.length-n))),0===s?t.splice(r-a,s+a,[1,u]):0===a?t.splice(r-s,s+a,[e,c]):t.splice(r-s-a,s+a,[e,c],[1,u]),r=r-s-a+(s?1:0)+(a?1:0)+1):0!==r&&0==t[r-1][0]?(t[r-1][1]+=t[r][1],t.splice(r,1)):r++,a=0,s=0,c="",u=""}""===t[t.length-1][1]&&t.pop();var d=!1;for(r=1;r<t.length-1;)0==t[r-1][0]&&0==t[r+1][0]&&(t[r][1].substring(t[r][1].length-t[r-1][1].length)==t[r-1][1]?(t[r][1]=t[r-1][1]+t[r][1].substring(0,t[r][1].length-t[r-1][1].length),t[r+1][1]=t[r-1][1]+t[r+1][1],t.splice(r-1,1),d=!0):t[r][1].substring(0,t[r+1][1].length)==t[r+1][1]&&(t[r-1][1]+=t[r+1][1],t[r][1]=t[r][1].substring(t[r+1][1].length)+t[r+1][1],t.splice(r+1,1),d=!0)),r++;d&&l(t)}var s=n;function a(t,e,n){for(var r=e+n-1;r>=0&&r>=e-1;r--)if(r+1<t.length){var i=t[r],o=t[r+1];i[0]===o[1]&&t.splice(r,2,[i[0],i[1]+o[1]])}return t}s.INSERT=1,s.DELETE=e,s.EQUAL=0,t.exports=s},17648:t=>{"use strict";var e="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,r=Object.prototype.toString,i="[object Function]";t.exports=function(t){var o=this;if("function"!=typeof o||r.call(o)!==i)throw new TypeError(e+o);for(var l,s=n.call(arguments,1),a=function(){if(this instanceof l){var e=o.apply(this,s.concat(n.call(arguments)));return Object(e)===e?e:this}return o.apply(t,s.concat(n.call(arguments)))},c=Math.max(0,o.length-s.length),u=[],d=0;d<c;d++)u.push("$"+d);if(l=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")(a),o.prototype){var p=function(){};p.prototype=o.prototype,l.prototype=new p,p.prototype=null}return l}},58612:(t,e,n)=>{"use strict";var r=n(17648);t.exports=Function.prototype.bind||r},40210:(t,e,n)=>{"use strict";var r,i=SyntaxError,o=Function,l=TypeError,s=function(t){try{return o('"use strict"; return ('+t+").constructor;")()}catch(t){}},a=Object.getOwnPropertyDescriptor;if(a)try{a({},"")}catch(t){a=null}var c=function(){throw new l},u=a?function(){try{return c}catch(t){try{return a(arguments,"callee").get}catch(t){return c}}}():c,d=n(41405)(),p=Object.getPrototypeOf||function(t){return t.__proto__},h={},f="undefined"==typeof Uint8Array?r:p(Uint8Array),A={"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":d?p([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":h,"%AsyncGenerator%":h,"%AsyncGeneratorFunction%":h,"%AsyncIteratorPrototype%":h,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":h,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":d?p(p([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&d?p((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&d?p((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":d?p(""[Symbol.iterator]()):r,"%Symbol%":d?Symbol:r,"%SyntaxError%":i,"%ThrowTypeError%":u,"%TypedArray%":f,"%TypeError%":l,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet},q=function t(e){var n;if("%AsyncFunction%"===e)n=s("async function () {}");else if("%GeneratorFunction%"===e)n=s("function* () {}");else if("%AsyncGeneratorFunction%"===e)n=s("async function* () {}");else if("%AsyncGenerator%"===e){var r=t("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===e){var i=t("%AsyncGenerator%");i&&(n=p(i.prototype))}return A[e]=n,n},g={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},m=n(58612),b=n(17642),y=m.call(Function.call,Array.prototype.concat),E=m.call(Function.apply,Array.prototype.splice),C=m.call(Function.call,String.prototype.replace),v=m.call(Function.call,String.prototype.slice),w=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,B=/\\(\\)?/g,x=function(t){var e=v(t,0,1),n=v(t,-1);if("%"===e&&"%"!==n)throw new i("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==e)throw new i("invalid intrinsic syntax, expected opening `%`");var r=[];return C(t,w,(function(t,e,n,i){r[r.length]=n?C(i,B,"$1"):e||t})),r},k=function(t,e){var n,r=t;if(b(g,r)&&(r="%"+(n=g[r])[0]+"%"),b(A,r)){var o=A[r];if(o===h&&(o=q(r)),void 0===o&&!e)throw new l("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:o}}throw new i("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new l("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new l('"allowMissing" argument must be a boolean');var n=x(t),r=n.length>0?n[0]:"",o=k("%"+r+"%",e),s=o.name,c=o.value,u=!1,d=o.alias;d&&(r=d[0],E(n,y([0,1],d)));for(var p=1,h=!0;p<n.length;p+=1){var f=n[p],q=v(f,0,1),g=v(f,-1);if(('"'===q||"'"===q||"`"===q||'"'===g||"'"===g||"`"===g)&&q!==g)throw new i("property names with quotes must have matching quotes");if("constructor"!==f&&h||(u=!0),b(A,s="%"+(r+="."+f)+"%"))c=A[s];else if(null!=c){if(!(f in c)){if(!e)throw new l("base intrinsic for "+t+" exists, but the property is not available.");return}if(a&&p+1>=n.length){var m=a(c,f);c=(h=!!m)&&"get"in m&&!("originalValue"in m.get)?m.get:c[f]}else h=b(c,f),c=c[f];h&&!u&&(A[s]=c)}}return c}},41405:(t,e,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,i=n(55419);t.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&i()}},55419:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),n=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var r=Object.getOwnPropertySymbols(t);if(1!==r.length||r[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,e);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},17642:(t,e,n)=>{"use strict";var r=n(58612);t.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},80645:(t,e)=>{e.read=function(t,e,n,r,i){var o,l,s=8*i-r-1,a=(1<<s)-1,c=a>>1,u=-7,d=n?i-1:0,p=n?-1:1,h=t[e+d];for(d+=p,o=h&(1<<-u)-1,h>>=-u,u+=s;u>0;o=256*o+t[e+d],d+=p,u-=8);for(l=o&(1<<-u)-1,o>>=-u,u+=r;u>0;l=256*l+t[e+d],d+=p,u-=8);if(0===o)o=1-c;else{if(o===a)return l?NaN:1/0*(h?-1:1);l+=Math.pow(2,r),o-=c}return(h?-1:1)*l*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var l,s,a,c=8*o-i-1,u=(1<<c)-1,d=u>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,f=r?1:-1,A=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,l=u):(l=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-l))<1&&(l--,a*=2),(e+=l+d>=1?p/a:p*Math.pow(2,1-d))*a>=2&&(l++,a/=2),l+d>=u?(s=0,l=u):l+d>=1?(s=(e*a-1)*Math.pow(2,i),l+=d):(s=e*Math.pow(2,d-1)*Math.pow(2,i),l=0));i>=8;t[n+h]=255&s,h+=f,s/=256,i-=8);for(l=l<<i|s,c+=i;c>0;t[n+h]=255&l,h+=f,l/=256,c-=8);t[n+h-f]|=128*A}},82584:(t,e,n)=>{"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,i=n(21924)("Object.prototype.toString"),o=function(t){return!(r&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===i(t)},l=function(t){return!!o(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==i(t)&&"[object Function]"===i(t.callee)},s=function(){return o(arguments)}();o.isLegacyArguments=l,t.exports=s?o:l},18923:t=>{"use strict";var e=Date.prototype.getDay,n=Object.prototype.toString,r="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){return"object"==typeof t&&null!==t&&(r?function(t){try{return e.call(t),!0}catch(t){return!1}}(t):"[object Date]"===n.call(t))}},98420:(t,e,n)=>{"use strict";var r,i,o,l,s=n(21924),a=n(41405)()&&"symbol"==typeof Symbol.toStringTag;if(a){r=s("Object.prototype.hasOwnProperty"),i=s("RegExp.prototype.exec"),o={};var c=function(){throw o};l={toString:c,valueOf:c},"symbol"==typeof Symbol.toPrimitive&&(l[Symbol.toPrimitive]=c)}var u=s("Object.prototype.toString"),d=Object.getOwnPropertyDescriptor;t.exports=a?function(t){if(!t||"object"!=typeof t)return!1;var e=d(t,"lastIndex");if(!e||!r(e,"value"))return!1;try{i(t,l)}catch(t){return t===o}}:function(t){return!(!t||"object"!=typeof t&&"function"!=typeof t)&&"[object RegExp]"===u(t)}},27418:t=>{"use strict";var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var l,s,a=i(t),c=1;c<arguments.length;c++){for(var u in l=Object(arguments[c]))n.call(l,u)&&(a[u]=l[u]);if(e){s=e(l);for(var d=0;d<s.length;d++)r.call(l,s[d])&&(a[s[d]]=l[s[d]])}}return a}},13339:t=>{"use strict";var e=function(t){return t!=t};t.exports=function(t,n){return 0===t&&0===n?1/t==1/n:t===n||!(!e(t)||!e(n))}},20609:(t,e,n)=>{"use strict";var r=n(4289),i=n(55559),o=n(13339),l=n(75624),s=n(52281),a=i(l(),Object);r(a,{getPolyfill:l,implementation:o,shim:s}),t.exports=a},75624:(t,e,n)=>{"use strict";var r=n(13339);t.exports=function(){return"function"==typeof Object.is?Object.is:r}},52281:(t,e,n)=>{"use strict";var r=n(75624),i=n(4289);t.exports=function(){var t=r();return i(Object,{is:t},{is:function(){return Object.is!==t}}),t}},18987:(t,e,n)=>{"use strict";var r;if(!Object.keys){var i=Object.prototype.hasOwnProperty,o=Object.prototype.toString,l=n(21414),s=Object.prototype.propertyIsEnumerable,a=!s.call({toString:null},"toString"),c=s.call((function(){}),"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],d=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},h=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&i.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{d(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();r=function(t){var e=null!==t&&"object"==typeof t,n="[object Function]"===o.call(t),r=l(t),s=e&&"[object String]"===o.call(t),p=[];if(!e&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var f=c&&n;if(s&&t.length>0&&!i.call(t,0))for(var A=0;A<t.length;++A)p.push(String(A));if(r&&t.length>0)for(var q=0;q<t.length;++q)p.push(String(q));else for(var g in t)f&&"prototype"===g||!i.call(t,g)||p.push(String(g));if(a)for(var m=function(t){if("undefined"==typeof window||!h)return d(t);try{return d(t)}catch(t){return!1}}(t),b=0;b<u.length;++b)m&&"constructor"===u[b]||!i.call(t,u[b])||p.push(u[b]);return p}}t.exports=r},82215:(t,e,n)=>{"use strict";var r=Array.prototype.slice,i=n(21414),o=Object.keys,l=o?function(t){return o(t)}:n(18987),s=Object.keys;l.shim=function(){return Object.keys?function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2)||(Object.keys=function(t){return i(t)?s(r.call(t)):s(t)}):Object.keys=l,Object.keys||l},t.exports=l},21414:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){var n=e.call(t),r="[object Arguments]"===n;return r||(r="[object Array]"!==n&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),r}},70347:function(t){var e;"undefined"!=typeof self&&self,e=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){var n=this;return e="[Parchment] "+e,(n=t.call(this,e)||this).message=e,n.name=n.constructor.name,n}return i(e,t),e}(Error);e.ParchmentError=o;var l,s={},a={},c={},u={};function d(t,e){var n;if(void 0===e&&(e=l.ANY),"string"==typeof t)n=u[t]||s[t];else if(t instanceof Text||t.nodeType===Node.TEXT_NODE)n=u.text;else if("number"==typeof t)t&l.LEVEL&l.BLOCK?n=u.block:t&l.LEVEL&l.INLINE&&(n=u.inline);else if(t instanceof HTMLElement){var r=(t.getAttribute("class")||"").split(/\s+/);for(var i in r)if(n=a[r[i]])break;n=n||c[t.tagName]}return null==n?null:e&l.LEVEL&n.scope&&e&l.TYPE&n.scope?n:null}e.DATA_KEY="__blot",function(t){t[t.TYPE=3]="TYPE",t[t.LEVEL=12]="LEVEL",t[t.ATTRIBUTE=13]="ATTRIBUTE",t[t.BLOT=14]="BLOT",t[t.INLINE=7]="INLINE",t[t.BLOCK=11]="BLOCK",t[t.BLOCK_BLOT=10]="BLOCK_BLOT",t[t.INLINE_BLOT=6]="INLINE_BLOT",t[t.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",t[t.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",t[t.ANY=15]="ANY"}(l=e.Scope||(e.Scope={})),e.create=function(t,e){var n=d(t);if(null==n)throw new o("Unable to create "+t+" blot");var r=n,i=t instanceof Node||t.nodeType===Node.TEXT_NODE?t:r.create(e);return new r(i,e)},e.find=function t(n,r){return void 0===r&&(r=!1),null==n?null:null!=n[e.DATA_KEY]?n[e.DATA_KEY].blot:r?t(n.parentNode,r):null},e.query=d,e.register=function t(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(e.length>1)return e.map((function(e){return t(e)}));var r=e[0];if("string"!=typeof r.blotName&&"string"!=typeof r.attrName)throw new o("Invalid definition");if("abstract"===r.blotName)throw new o("Cannot register abstract class");if(u[r.blotName||r.attrName]=r,"string"==typeof r.keyName)s[r.keyName]=r;else if(null!=r.className&&(a[r.className]=r),null!=r.tagName){Array.isArray(r.tagName)?r.tagName=r.tagName.map((function(t){return t.toUpperCase()})):r.tagName=r.tagName.toUpperCase();var i=Array.isArray(r.tagName)?r.tagName:[r.tagName];i.forEach((function(t){null!=c[t]&&null!=r.className||(c[t]=r)}))}return r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(){function t(t,e,n){void 0===n&&(n={}),this.attrName=t,this.keyName=e;var i=r.Scope.TYPE&r.Scope.ATTRIBUTE;null!=n.scope?this.scope=n.scope&r.Scope.LEVEL|i:this.scope=r.Scope.ATTRIBUTE,null!=n.whitelist&&(this.whitelist=n.whitelist)}return t.keys=function(t){return[].map.call(t.attributes,(function(t){return t.name}))},t.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.setAttribute(this.keyName,e),!0)},t.prototype.canAdd=function(t,e){return null!=r.query(t,r.Scope.BLOT&(this.scope|r.Scope.TYPE))&&(null==this.whitelist||("string"==typeof e?this.whitelist.indexOf(e.replace(/["']/g,""))>-1:this.whitelist.indexOf(e)>-1))},t.prototype.remove=function(t){t.removeAttribute(this.keyName)},t.prototype.value=function(t){var e=t.getAttribute(this.keyName);return this.canAdd(t,e)&&e?e:""},t}();e.default=i},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(11),l=n(5),s=n(0),a=function(t){function e(e){var n=t.call(this,e)||this;return n.build(),n}return i(e,t),e.prototype.appendChild=function(t){this.insertBefore(t)},e.prototype.attach=function(){t.prototype.attach.call(this),this.children.forEach((function(t){t.attach()}))},e.prototype.build=function(){var t=this;this.children=new o.default,[].slice.call(this.domNode.childNodes).reverse().forEach((function(e){try{var n=c(e);t.insertBefore(n,t.children.head||void 0)}catch(t){if(t instanceof s.ParchmentError)return;throw t}}))},e.prototype.deleteAt=function(t,e){if(0===t&&e===this.length())return this.remove();this.children.forEachAt(t,e,(function(t,e,n){t.deleteAt(e,n)}))},e.prototype.descendant=function(t,n){var r=this.children.find(n),i=r[0],o=r[1];return null==t.blotName&&t(i)||null!=t.blotName&&i instanceof t?[i,o]:i instanceof e?i.descendant(t,o):[null,-1]},e.prototype.descendants=function(t,n,r){void 0===n&&(n=0),void 0===r&&(r=Number.MAX_VALUE);var i=[],o=r;return this.children.forEachAt(n,r,(function(n,r,l){(null==t.blotName&&t(n)||null!=t.blotName&&n instanceof t)&&i.push(n),n instanceof e&&(i=i.concat(n.descendants(t,r,o))),o-=l})),i},e.prototype.detach=function(){this.children.forEach((function(t){t.detach()})),t.prototype.detach.call(this)},e.prototype.formatAt=function(t,e,n,r){this.children.forEachAt(t,e,(function(t,e,i){t.formatAt(e,i,n,r)}))},e.prototype.insertAt=function(t,e,n){var r=this.children.find(t),i=r[0],o=r[1];if(i)i.insertAt(o,e,n);else{var l=null==n?s.create("text",e):s.create(e,n);this.appendChild(l)}},e.prototype.insertBefore=function(t,e){if(null!=this.statics.allowedChildren&&!this.statics.allowedChildren.some((function(e){return t instanceof e})))throw new s.ParchmentError("Cannot insert "+t.statics.blotName+" into "+this.statics.blotName);t.insertInto(this,e)},e.prototype.length=function(){return this.children.reduce((function(t,e){return t+e.length()}),0)},e.prototype.moveChildren=function(t,e){this.children.forEach((function(n){t.insertBefore(n,e)}))},e.prototype.optimize=function(e){if(t.prototype.optimize.call(this,e),0===this.children.length)if(null!=this.statics.defaultChild){var n=s.create(this.statics.defaultChild);this.appendChild(n),n.optimize(e)}else this.remove()},e.prototype.path=function(t,n){void 0===n&&(n=!1);var r=this.children.find(t,n),i=r[0],o=r[1],l=[[this,t]];return i instanceof e?l.concat(i.path(o,n)):(null!=i&&l.push([i,o]),l)},e.prototype.removeChild=function(t){this.children.remove(t)},e.prototype.replace=function(n){n instanceof e&&n.moveChildren(this),t.prototype.replace.call(this,n)},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=this.clone();return this.parent.insertBefore(n,this.next),this.children.forEachAt(t,this.length(),(function(t,r,i){t=t.split(r,e),n.appendChild(t)})),n},e.prototype.unwrap=function(){this.moveChildren(this.parent,this.next),this.remove()},e.prototype.update=function(t,e){var n=this,r=[],i=[];t.forEach((function(t){t.target===n.domNode&&"childList"===t.type&&(r.push.apply(r,t.addedNodes),i.push.apply(i,t.removedNodes))})),i.forEach((function(t){if(!(null!=t.parentNode&&"IFRAME"!==t.tagName&&document.body.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)){var e=s.find(t);null!=e&&(null!=e.domNode.parentNode&&e.domNode.parentNode!==n.domNode||e.detach())}})),r.filter((function(t){return t.parentNode==n.domNode})).sort((function(t,e){return t===e?0:t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1})).forEach((function(t){var e=null;null!=t.nextSibling&&(e=s.find(t.nextSibling));var r=c(t);r.next==e&&null!=r.next||(null!=r.parent&&r.parent.removeChild(n),n.insertBefore(r,e||void 0))}))},e}(l.default);function c(t){var e=s.find(t);if(null==e)try{e=s.create(t)}catch(n){e=s.create(s.Scope.INLINE),[].slice.call(t.childNodes).forEach((function(t){e.domNode.appendChild(t)})),t.parentNode&&t.parentNode.replaceChild(e.domNode,t),e.attach()}return e}e.default=a},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),l=n(6),s=n(2),a=n(0),c=function(t){function e(e){var n=t.call(this,e)||this;return n.attributes=new l.default(n.domNode),n}return i(e,t),e.formats=function(t){return"string"==typeof this.tagName||(Array.isArray(this.tagName)?t.tagName.toLowerCase():void 0)},e.prototype.format=function(t,e){var n=a.query(t);n instanceof o.default?this.attributes.attribute(n,e):e&&(null==n||t===this.statics.blotName&&this.formats()[t]===e||this.replaceWith(t,e))},e.prototype.formats=function(){var t=this.attributes.values(),e=this.statics.formats(this.domNode);return null!=e&&(t[this.statics.blotName]=e),t},e.prototype.replaceWith=function(e,n){var r=t.prototype.replaceWith.call(this,e,n);return this.attributes.copy(r),r},e.prototype.update=function(e,n){var r=this;t.prototype.update.call(this,e,n),e.some((function(t){return t.target===r.domNode&&"attributes"===t.type}))&&this.attributes.build()},e.prototype.wrap=function(n,r){var i=t.prototype.wrap.call(this,n,r);return i instanceof e&&i.statics.scope===this.statics.scope&&this.attributes.move(i),i},e}(s.default);e.default=c},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(5),l=n(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.value=function(t){return!0},e.prototype.index=function(t,e){return this.domNode===t||this.domNode.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(e,1):-1},e.prototype.position=function(t,e){var n=[].indexOf.call(this.parent.domNode.childNodes,this.domNode);return t>0&&(n+=1),[this.parent.domNode,n]},e.prototype.value=function(){return(t={})[this.statics.blotName]=this.statics.value(this.domNode)||!0,t;var t},e.scope=l.Scope.INLINE_BLOT,e}(o.default);e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(){function t(t){this.domNode=t,this.domNode[r.DATA_KEY]={blot:this}}return Object.defineProperty(t.prototype,"statics",{get:function(){return this.constructor},enumerable:!0,configurable:!0}),t.create=function(t){if(null==this.tagName)throw new r.ParchmentError("Blot definition missing tagName");var e;return Array.isArray(this.tagName)?("string"==typeof t&&(t=t.toUpperCase(),parseInt(t).toString()===t&&(t=parseInt(t))),e="number"==typeof t?document.createElement(this.tagName[t-1]):this.tagName.indexOf(t)>-1?document.createElement(t):document.createElement(this.tagName[0])):e=document.createElement(this.tagName),this.className&&e.classList.add(this.className),e},t.prototype.attach=function(){null!=this.parent&&(this.scroll=this.parent.scroll)},t.prototype.clone=function(){var t=this.domNode.cloneNode(!1);return r.create(t)},t.prototype.detach=function(){null!=this.parent&&this.parent.removeChild(this),delete this.domNode[r.DATA_KEY]},t.prototype.deleteAt=function(t,e){this.isolate(t,e).remove()},t.prototype.formatAt=function(t,e,n,i){var o=this.isolate(t,e);if(null!=r.query(n,r.Scope.BLOT)&&i)o.wrap(n,i);else if(null!=r.query(n,r.Scope.ATTRIBUTE)){var l=r.create(this.statics.scope);o.wrap(l),l.format(n,i)}},t.prototype.insertAt=function(t,e,n){var i=null==n?r.create("text",e):r.create(e,n),o=this.split(t);this.parent.insertBefore(i,o)},t.prototype.insertInto=function(t,e){void 0===e&&(e=null),null!=this.parent&&this.parent.children.remove(this);var n=null;t.children.insertBefore(this,e),null!=e&&(n=e.domNode),this.domNode.parentNode==t.domNode&&this.domNode.nextSibling==n||t.domNode.insertBefore(this.domNode,n),this.parent=t,this.attach()},t.prototype.isolate=function(t,e){var n=this.split(t);return n.split(e),n},t.prototype.length=function(){return 1},t.prototype.offset=function(t){return void 0===t&&(t=this.parent),null==this.parent||this==t?0:this.parent.children.offset(this)+this.parent.offset(t)},t.prototype.optimize=function(t){null!=this.domNode[r.DATA_KEY]&&delete this.domNode[r.DATA_KEY].mutations},t.prototype.remove=function(){null!=this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode),this.detach()},t.prototype.replace=function(t){null!=t.parent&&(t.parent.insertBefore(this,t.next),t.remove())},t.prototype.replaceWith=function(t,e){var n="string"==typeof t?r.create(t,e):t;return n.replace(this),n},t.prototype.split=function(t,e){return 0===t?this:this.next},t.prototype.update=function(t,e){},t.prototype.wrap=function(t,e){var n="string"==typeof t?r.create(t,e):t;return null!=this.parent&&this.parent.insertBefore(n,this.next),n.appendChild(this),n},t.blotName="abstract",t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),i=n(7),o=n(8),l=n(0),s=function(){function t(t){this.attributes={},this.domNode=t,this.build()}return t.prototype.attribute=function(t,e){e?t.add(this.domNode,e)&&(null!=t.value(this.domNode)?this.attributes[t.attrName]=t:delete this.attributes[t.attrName]):(t.remove(this.domNode),delete this.attributes[t.attrName])},t.prototype.build=function(){var t=this;this.attributes={};var e=r.default.keys(this.domNode),n=i.default.keys(this.domNode),s=o.default.keys(this.domNode);e.concat(n).concat(s).forEach((function(e){var n=l.query(e,l.Scope.ATTRIBUTE);n instanceof r.default&&(t.attributes[n.attrName]=n)}))},t.prototype.copy=function(t){var e=this;Object.keys(this.attributes).forEach((function(n){var r=e.attributes[n].value(e.domNode);t.format(n,r)}))},t.prototype.move=function(t){var e=this;this.copy(t),Object.keys(this.attributes).forEach((function(t){e.attributes[t].remove(e.domNode)})),this.attributes={}},t.prototype.values=function(){var t=this;return Object.keys(this.attributes).reduce((function(e,n){return e[n]=t.attributes[n].value(t.domNode),e}),{})},t}();e.default=s},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function o(t,e){return(t.getAttribute("class")||"").split(/\s+/).filter((function(t){return 0===t.indexOf(e+"-")}))}Object.defineProperty(e,"__esModule",{value:!0});var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.keys=function(t){return(t.getAttribute("class")||"").split(/\s+/).map((function(t){return t.split("-").slice(0,-1).join("-")}))},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(this.remove(t),t.classList.add(this.keyName+"-"+e),!0)},e.prototype.remove=function(t){o(t,this.keyName).forEach((function(e){t.classList.remove(e)})),0===t.classList.length&&t.removeAttribute("class")},e.prototype.value=function(t){var e=(o(t,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(t,e)?e:""},e}(n(1).default);e.default=l},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function o(t){var e=t.split("-"),n=e.slice(1).map((function(t){return t[0].toUpperCase()+t.slice(1)})).join("");return e[0]+n}Object.defineProperty(e,"__esModule",{value:!0});var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.keys=function(t){return(t.getAttribute("style")||"").split(";").map((function(t){return t.split(":")[0].trim()}))},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.style[o(this.keyName)]=e,!0)},e.prototype.remove=function(t){t.style[o(this.keyName)]="",t.getAttribute("style")||t.removeAttribute("style")},e.prototype.value=function(t){var e=t.style[o(this.keyName)];return this.canAdd(t,e)?e:""},e}(n(1).default);e.default=l},function(t,e,n){t.exports=n(10)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),i=n(3),o=n(4),l=n(12),s=n(13),a=n(14),c=n(15),u=n(16),d=n(1),p=n(7),h=n(8),f=n(6),A=n(0),q={Scope:A.Scope,create:A.create,find:A.find,query:A.query,register:A.register,Container:r.default,Format:i.default,Leaf:o.default,Embed:c.default,Scroll:l.default,Block:a.default,Inline:s.default,Text:u.default,Attributor:{Attribute:d.default,Class:p.default,Style:h.default,Store:f.default}};e.default=q},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.head=this.tail=null,this.length=0}return t.prototype.append=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.insertBefore(t[0],null),t.length>1&&this.append.apply(this,t.slice(1))},t.prototype.contains=function(t){for(var e,n=this.iterator();e=n();)if(e===t)return!0;return!1},t.prototype.insertBefore=function(t,e){t&&(t.next=e,null!=e?(t.prev=e.prev,null!=e.prev&&(e.prev.next=t),e.prev=t,e===this.head&&(this.head=t)):null!=this.tail?(this.tail.next=t,t.prev=this.tail,this.tail=t):(t.prev=null,this.head=this.tail=t),this.length+=1)},t.prototype.offset=function(t){for(var e=0,n=this.head;null!=n;){if(n===t)return e;e+=n.length(),n=n.next}return-1},t.prototype.remove=function(t){this.contains(t)&&(null!=t.prev&&(t.prev.next=t.next),null!=t.next&&(t.next.prev=t.prev),t===this.head&&(this.head=t.next),t===this.tail&&(this.tail=t.prev),this.length-=1)},t.prototype.iterator=function(t){return void 0===t&&(t=this.head),function(){var e=t;return null!=t&&(t=t.next),e}},t.prototype.find=function(t,e){void 0===e&&(e=!1);for(var n,r=this.iterator();n=r();){var i=n.length();if(t<i||e&&t===i&&(null==n.next||0!==n.next.length()))return[n,t];t-=i}return[null,0]},t.prototype.forEach=function(t){for(var e,n=this.iterator();e=n();)t(e)},t.prototype.forEachAt=function(t,e,n){if(!(e<=0))for(var r,i=this.find(t),o=i[0],l=t-i[1],s=this.iterator(o);(r=s())&&l<t+e;){var a=r.length();t>l?n(r,t-l,Math.min(e,l+a-t)):n(r,0,Math.min(a,t+e-l)),l+=a}},t.prototype.map=function(t){return this.reduce((function(e,n){return e.push(t(n)),e}),[])},t.prototype.reduce=function(t,e){for(var n,r=this.iterator();n=r();)e=t(e,n);return e},t}();e.default=r},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(2),l=n(0),s={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},a=function(t){function e(e){var n=t.call(this,e)||this;return n.scroll=n,n.observer=new MutationObserver((function(t){n.update(t)})),n.observer.observe(n.domNode,s),n.attach(),n}return i(e,t),e.prototype.detach=function(){t.prototype.detach.call(this),this.observer.disconnect()},e.prototype.deleteAt=function(e,n){this.update(),0===e&&n===this.length()?this.children.forEach((function(t){t.remove()})):t.prototype.deleteAt.call(this,e,n)},e.prototype.formatAt=function(e,n,r,i){this.update(),t.prototype.formatAt.call(this,e,n,r,i)},e.prototype.insertAt=function(e,n,r){this.update(),t.prototype.insertAt.call(this,e,n,r)},e.prototype.optimize=function(e,n){var r=this;void 0===e&&(e=[]),void 0===n&&(n={}),t.prototype.optimize.call(this,n);for(var i=[].slice.call(this.observer.takeRecords());i.length>0;)e.push(i.pop());for(var s=function(t,e){void 0===e&&(e=!0),null!=t&&t!==r&&null!=t.domNode.parentNode&&(null==t.domNode[l.DATA_KEY].mutations&&(t.domNode[l.DATA_KEY].mutations=[]),e&&s(t.parent))},a=function(t){null!=t.domNode[l.DATA_KEY]&&null!=t.domNode[l.DATA_KEY].mutations&&(t instanceof o.default&&t.children.forEach(a),t.optimize(n))},c=e,u=0;c.length>0;u+=1){if(u>=100)throw new Error("[Parchment] Maximum optimize iterations reached");for(c.forEach((function(t){var e=l.find(t.target,!0);null!=e&&(e.domNode===t.target&&("childList"===t.type?(s(l.find(t.previousSibling,!1)),[].forEach.call(t.addedNodes,(function(t){var e=l.find(t,!1);s(e,!1),e instanceof o.default&&e.children.forEach((function(t){s(t,!1)}))}))):"attributes"===t.type&&s(e.prev)),s(e))})),this.children.forEach(a),i=(c=[].slice.call(this.observer.takeRecords())).slice();i.length>0;)e.push(i.pop())}},e.prototype.update=function(e,n){var r=this;void 0===n&&(n={}),(e=e||this.observer.takeRecords()).map((function(t){var e=l.find(t.target,!0);return null==e?null:null==e.domNode[l.DATA_KEY].mutations?(e.domNode[l.DATA_KEY].mutations=[t],e):(e.domNode[l.DATA_KEY].mutations.push(t),null)})).forEach((function(t){null!=t&&t!==r&&null!=t.domNode[l.DATA_KEY]&&t.update(t.domNode[l.DATA_KEY].mutations||[],n)})),null!=this.domNode[l.DATA_KEY].mutations&&t.prototype.update.call(this,this.domNode[l.DATA_KEY].mutations,n),this.optimize(e,n)},e.blotName="scroll",e.defaultChild="block",e.scope=l.Scope.BLOCK_BLOT,e.tagName="DIV",e}(o.default);e.default=a},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),l=n(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.formats=function(n){if(n.tagName!==e.tagName)return t.formats.call(this,n)},e.prototype.format=function(n,r){var i=this;n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):(this.children.forEach((function(t){t instanceof o.default||(t=t.wrap(e.blotName,!0)),i.attributes.copy(t)})),this.unwrap())},e.prototype.formatAt=function(e,n,r,i){null!=this.formats()[r]||l.query(r,l.Scope.ATTRIBUTE)?this.isolate(e,n).format(r,i):t.prototype.formatAt.call(this,e,n,r,i)},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n);var r=this.formats();if(0===Object.keys(r).length)return this.unwrap();var i=this.next;i instanceof e&&i.prev===this&&function(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(t[n]!==e[n])return!1;return!0}(r,i.formats())&&(i.moveChildren(this),i.remove())},e.blotName="inline",e.scope=l.Scope.INLINE_BLOT,e.tagName="SPAN",e}(o.default);e.default=s},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),l=n(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.formats=function(n){var r=l.query(e.blotName).tagName;if(n.tagName!==r)return t.formats.call(this,n)},e.prototype.format=function(n,r){null!=l.query(n,l.Scope.BLOCK)&&(n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):this.replaceWith(e.blotName))},e.prototype.formatAt=function(e,n,r,i){null!=l.query(r,l.Scope.BLOCK)?this.format(r,i):t.prototype.formatAt.call(this,e,n,r,i)},e.prototype.insertAt=function(e,n,r){if(null==r||null!=l.query(n,l.Scope.INLINE))t.prototype.insertAt.call(this,e,n,r);else{var i=this.split(e),o=l.create(n,r);i.parent.insertBefore(o,i)}},e.prototype.update=function(e,n){navigator.userAgent.match(/Trident/)?this.build():t.prototype.update.call(this,e,n)},e.blotName="block",e.scope=l.Scope.BLOCK_BLOT,e.tagName="P",e}(o.default);e.default=s},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.formats=function(t){},e.prototype.format=function(e,n){t.prototype.formatAt.call(this,0,this.length(),e,n)},e.prototype.formatAt=function(e,n,r,i){0===e&&n===this.length()?this.format(r,i):t.prototype.formatAt.call(this,e,n,r,i)},e.prototype.formats=function(){return this.statics.formats(this.domNode)},e}(n(4).default);e.default=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(4),l=n(0),s=function(t){function e(e){var n=t.call(this,e)||this;return n.text=n.statics.value(n.domNode),n}return i(e,t),e.create=function(t){return document.createTextNode(t)},e.value=function(t){var e=t.data;return e.normalize&&(e=e.normalize()),e},e.prototype.deleteAt=function(t,e){this.domNode.data=this.text=this.text.slice(0,t)+this.text.slice(t+e)},e.prototype.index=function(t,e){return this.domNode===t?e:-1},e.prototype.insertAt=function(e,n,r){null==r?(this.text=this.text.slice(0,e)+n+this.text.slice(e),this.domNode.data=this.text):t.prototype.insertAt.call(this,e,n,r)},e.prototype.length=function(){return this.text.length},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n),this.text=this.statics.value(this.domNode),0===this.text.length?this.remove():this.next instanceof e&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())},e.prototype.position=function(t,e){return void 0===e&&(e=!1),[this.domNode,t]},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=l.create(this.domNode.splitText(t));return this.parent.insertBefore(n,this.next),this.text=this.statics.value(this.domNode),n},e.prototype.update=function(t,e){var n=this;t.some((function(t){return"characterData"===t.type&&t.target===n.domNode}))&&(this.text=this.statics.value(this.domNode))},e.prototype.value=function(){return this.text},e.blotName="text",e.scope=l.Scope.INLINE_BLOT,e}(o.default);e.default=s}])},t.exports=e()},34155:t=>{var e,n,r=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function l(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(t){n=o}}();var s,a=[],c=!1,u=-1;function d(){c&&s&&(c=!1,s.length?a=s.concat(a):u=-1,a.length&&p())}function p(){if(!c){var t=l(d);c=!0;for(var e=a.length;e;){for(s=a,a=[];++u<e;)s&&s[u].run();u=-1,e=a.length}s=null,c=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function f(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];a.push(new h(t,e)),1!==a.length||c||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},54175:(t,e,n)=>{var r=n(37529),i=n(10251),o=n(94470),l=n(26910),s=String.fromCharCode(0),a=function(t){Array.isArray(t)?this.ops=t:null!=t&&Array.isArray(t.ops)?this.ops=t.ops:this.ops=[]};a.prototype.insert=function(t,e){var n={};return 0===t.length?this:(n.insert=t,null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n))},a.prototype.delete=function(t){return t<=0?this:this.push({delete:t})},a.prototype.retain=function(t,e){if(t<=0)return this;var n={retain:t};return null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n)},a.prototype.push=function(t){var e=this.ops.length,n=this.ops[e-1];if(t=o(!0,{},t),"object"==typeof n){if("number"==typeof t.delete&&"number"==typeof n.delete)return this.ops[e-1]={delete:n.delete+t.delete},this;if("number"==typeof n.delete&&null!=t.insert&&(e-=1,"object"!=typeof(n=this.ops[e-1])))return this.ops.unshift(t),this;if(i(t.attributes,n.attributes)){if("string"==typeof t.insert&&"string"==typeof n.insert)return this.ops[e-1]={insert:n.insert+t.insert},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this;if("number"==typeof t.retain&&"number"==typeof n.retain)return this.ops[e-1]={retain:n.retain+t.retain},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this}}return e===this.ops.length?this.ops.push(t):this.ops.splice(e,0,t),this},a.prototype.chop=function(){var t=this.ops[this.ops.length-1];return t&&t.retain&&!t.attributes&&this.ops.pop(),this},a.prototype.filter=function(t){return this.ops.filter(t)},a.prototype.forEach=function(t){this.ops.forEach(t)},a.prototype.map=function(t){return this.ops.map(t)},a.prototype.partition=function(t){var e=[],n=[];return this.forEach((function(r){(t(r)?e:n).push(r)})),[e,n]},a.prototype.reduce=function(t,e){return this.ops.reduce(t,e)},a.prototype.changeLength=function(){return this.reduce((function(t,e){return e.insert?t+l.length(e):e.delete?t-e.delete:t}),0)},a.prototype.length=function(){return this.reduce((function(t,e){return t+l.length(e)}),0)},a.prototype.slice=function(t,e){t=t||0,"number"!=typeof e&&(e=1/0);for(var n=[],r=l.iterator(this.ops),i=0;i<e&&r.hasNext();){var o;i<t?o=r.next(t-i):(o=r.next(e-i),n.push(o)),i+=l.length(o)}return new a(n)},a.prototype.compose=function(t){var e=l.iterator(this.ops),n=l.iterator(t.ops),r=[],o=n.peek();if(null!=o&&"number"==typeof o.retain&&null==o.attributes){for(var s=o.retain;"insert"===e.peekType()&&e.peekLength()<=s;)s-=e.peekLength(),r.push(e.next());o.retain-s>0&&n.next(o.retain-s)}for(var c=new a(r);e.hasNext()||n.hasNext();)if("insert"===n.peekType())c.push(n.next());else if("delete"===e.peekType())c.push(e.next());else{var u=Math.min(e.peekLength(),n.peekLength()),d=e.next(u),p=n.next(u);if("number"==typeof p.retain){var h={};"number"==typeof d.retain?h.retain=u:h.insert=d.insert;var f=l.attributes.compose(d.attributes,p.attributes,"number"==typeof d.retain);if(f&&(h.attributes=f),c.push(h),!n.hasNext()&&i(c.ops[c.ops.length-1],h)){var A=new a(e.rest());return c.concat(A).chop()}}else"number"==typeof p.delete&&"number"==typeof d.retain&&c.push(p)}return c.chop()},a.prototype.concat=function(t){var e=new a(this.ops.slice());return t.ops.length>0&&(e.push(t.ops[0]),e.ops=e.ops.concat(t.ops.slice(1))),e},a.prototype.diff=function(t,e){if(this.ops===t.ops)return new a;var n=[this,t].map((function(e){return e.map((function(n){if(null!=n.insert)return"string"==typeof n.insert?n.insert:s;throw new Error("diff() called "+(e===t?"on":"with")+" non-document")})).join("")})),o=new a,c=r(n[0],n[1],e),u=l.iterator(this.ops),d=l.iterator(t.ops);return c.forEach((function(t){for(var e=t[1].length;e>0;){var n=0;switch(t[0]){case r.INSERT:n=Math.min(d.peekLength(),e),o.push(d.next(n));break;case r.DELETE:n=Math.min(e,u.peekLength()),u.next(n),o.delete(n);break;case r.EQUAL:n=Math.min(u.peekLength(),d.peekLength(),e);var s=u.next(n),a=d.next(n);i(s.insert,a.insert)?o.retain(n,l.attributes.diff(s.attributes,a.attributes)):o.push(a).delete(n)}e-=n}})),o.chop()},a.prototype.eachLine=function(t,e){e=e||"\n";for(var n=l.iterator(this.ops),r=new a,i=0;n.hasNext();){if("insert"!==n.peekType())return;var o=n.peek(),s=l.length(o)-n.peekLength(),c="string"==typeof o.insert?o.insert.indexOf(e,s)-s:-1;if(c<0)r.push(n.next());else if(c>0)r.push(n.next(c));else{if(!1===t(r,n.next(1).attributes||{},i))return;i+=1,r=new a}}r.length()>0&&t(r,{},i)},a.prototype.transform=function(t,e){if(e=!!e,"number"==typeof t)return this.transformPosition(t,e);for(var n=l.iterator(this.ops),r=l.iterator(t.ops),i=new a;n.hasNext()||r.hasNext();)if("insert"!==n.peekType()||!e&&"insert"===r.peekType())if("insert"===r.peekType())i.push(r.next());else{var o=Math.min(n.peekLength(),r.peekLength()),s=n.next(o),c=r.next(o);if(s.delete)continue;c.delete?i.push(c):i.retain(o,l.attributes.transform(s.attributes,c.attributes,e))}else i.retain(l.length(n.next()));return i.chop()},a.prototype.transformPosition=function(t,e){e=!!e;for(var n=l.iterator(this.ops),r=0;n.hasNext()&&r<=t;){var i=n.peekLength(),o=n.peekType();n.next(),"delete"!==o?("insert"===o&&(r<t||!e)&&(t+=i),r+=i):t-=Math.min(i,t-r)}return t},t.exports=a},26910:(t,e,n)=>{var r=n(10251),i=n(94470),o={attributes:{compose:function(t,e,n){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var r=i(!0,{},e);for(var o in n||(r=Object.keys(r).reduce((function(t,e){return null!=r[e]&&(t[e]=r[e]),t}),{})),t)void 0!==t[o]&&void 0===e[o]&&(r[o]=t[o]);return Object.keys(r).length>0?r:void 0},diff:function(t,e){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var n=Object.keys(t).concat(Object.keys(e)).reduce((function(n,i){return r(t[i],e[i])||(n[i]=void 0===e[i]?null:e[i]),n}),{});return Object.keys(n).length>0?n:void 0},transform:function(t,e,n){if("object"!=typeof t)return e;if("object"==typeof e){if(!n)return e;var r=Object.keys(e).reduce((function(n,r){return void 0===t[r]&&(n[r]=e[r]),n}),{});return Object.keys(r).length>0?r:void 0}}},iterator:function(t){return new l(t)},length:function(t){return"number"==typeof t.delete?t.delete:"number"==typeof t.retain?t.retain:"string"==typeof t.insert?t.insert.length:1}};function l(t){this.ops=t,this.index=0,this.offset=0}l.prototype.hasNext=function(){return this.peekLength()<1/0},l.prototype.next=function(t){t||(t=1/0);var e=this.ops[this.index];if(e){var n=this.offset,r=o.length(e);if(t>=r-n?(t=r-n,this.index+=1,this.offset=0):this.offset+=t,"number"==typeof e.delete)return{delete:t};var i={};return e.attributes&&(i.attributes=e.attributes),"number"==typeof e.retain?i.retain=t:"string"==typeof e.insert?i.insert=e.insert.substr(n,t):i.insert=e.insert,i}return{retain:1/0}},l.prototype.peek=function(){return this.ops[this.index]},l.prototype.peekLength=function(){return this.ops[this.index]?o.length(this.ops[this.index])-this.offset:1/0},l.prototype.peekType=function(){return this.ops[this.index]?"number"==typeof this.ops[this.index].delete?"delete":"number"==typeof this.ops[this.index].retain?"retain":"insert":"retain"},l.prototype.rest=function(){if(this.hasNext()){if(0===this.offset)return this.ops.slice(this.index);var t=this.offset,e=this.index,n=this.next(),r=this.ops.slice(this.index);return this.offset=t,this.index=e,[n].concat(r)}return[]},t.exports=o},58299:()=>{let t=document.createElement("div");if(t.classList.toggle("test-class",!1),t.classList.contains("test-class")){let t=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(e,n){return arguments.length>1&&!this.contains(e)==!n?n:t.call(this,e)}}String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return e=e||0,this.substr(e,t.length)===t}),String.prototype.endsWith||(String.prototype.endsWith=function(t,e){var n=this.toString();("number"!=typeof e||!isFinite(e)||Math.floor(e)!==e||e>n.length)&&(e=n.length),e-=t.length;var r=n.indexOf(t,e);return-1!==r&&r===e}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(t){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var e,n=Object(this),r=n.length>>>0,i=arguments[1],o=0;o<r;o++)if(e=n[o],t.call(i,e,o,n))return e}}),document.addEventListener("DOMContentLoaded",(function(){document.execCommand("enableObjectResizing",!1,!1),document.execCommand("autoUrlDetect",!1,!1)}))},50429:(t,e,n)=>{var r=n(48764).Buffer,i=function(){"use strict";function t(t,e){return null!=e&&t instanceof e}var e,n,i;try{e=Map}catch(t){e=function(){}}try{n=Set}catch(t){n=function(){}}try{i=Promise}catch(t){i=function(){}}function o(l,a,c,u,d){"object"==typeof a&&(c=a.depth,u=a.prototype,d=a.includeNonEnumerable,a=a.circular);var p=[],h=[],f=void 0!==r;return void 0===a&&(a=!0),void 0===c&&(c=1/0),function l(c,A){if(null===c)return null;if(0===A)return c;var q,g;if("object"!=typeof c)return c;if(t(c,e))q=new e;else if(t(c,n))q=new n;else if(t(c,i))q=new i((function(t,e){c.then((function(e){t(l(e,A-1))}),(function(t){e(l(t,A-1))}))}));else if(o.__isArray(c))q=[];else if(o.__isRegExp(c))q=new RegExp(c.source,s(c)),c.lastIndex&&(q.lastIndex=c.lastIndex);else if(o.__isDate(c))q=new Date(c.getTime());else{if(f&&r.isBuffer(c))return q=r.allocUnsafe?r.allocUnsafe(c.length):new r(c.length),c.copy(q),q;t(c,Error)?q=Object.create(c):void 0===u?(g=Object.getPrototypeOf(c),q=Object.create(g)):(q=Object.create(u),g=u)}if(a){var m=p.indexOf(c);if(-1!=m)return h[m];p.push(c),h.push(q)}for(var b in t(c,e)&&c.forEach((function(t,e){var n=l(e,A-1),r=l(t,A-1);q.set(n,r)})),t(c,n)&&c.forEach((function(t){var e=l(t,A-1);q.add(e)})),c){var y;g&&(y=Object.getOwnPropertyDescriptor(g,b)),y&&null==y.set||(q[b]=l(c[b],A-1))}if(Object.getOwnPropertySymbols){var E=Object.getOwnPropertySymbols(c);for(b=0;b<E.length;b++){var C=E[b];(!(w=Object.getOwnPropertyDescriptor(c,C))||w.enumerable||d)&&(q[C]=l(c[C],A-1),w.enumerable||Object.defineProperty(q,C,{enumerable:!1}))}}if(d){var v=Object.getOwnPropertyNames(c);for(b=0;b<v.length;b++){var w,B=v[b];(w=Object.getOwnPropertyDescriptor(c,B))&&w.enumerable||(q[B]=l(c[B],A-1),Object.defineProperty(q,B,{enumerable:!1}))}}return q}(l,c)}function l(t){return Object.prototype.toString.call(t)}function s(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return o.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},o.__objToStr=l,o.__isDate=function(t){return"object"==typeof t&&"[object Date]"===l(t)},o.__isArray=function(t){return"object"==typeof t&&"[object Array]"===l(t)},o.__isRegExp=function(t){return"object"==typeof t&&"[object RegExp]"===l(t)},o.__getRegExpFlags=s,o}();t.exports&&(t.exports=i)},31930:t=>{"use strict";var e=Object.prototype.hasOwnProperty,n="~";function r(){}function i(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function o(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),o.prototype.eventNames=function(){var t,r,i=[];if(0===this._eventsCount)return i;for(r in t=this._events)e.call(t,r)&&i.push(n?r.slice(1):r);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},o.prototype.listeners=function(t,e){var r=n?n+t:t,i=this._events[r];if(e)return!!i;if(!i)return[];if(i.fn)return[i.fn];for(var o=0,l=i.length,s=new Array(l);o<l;o++)s[o]=i[o].fn;return s},o.prototype.emit=function(t,e,r,i,o,l){var s=n?n+t:t;if(!this._events[s])return!1;var a,c,u=this._events[s],d=arguments.length;if(u.fn){switch(u.once&&this.removeListener(t,u.fn,void 0,!0),d){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,r),!0;case 4:return u.fn.call(u.context,e,r,i),!0;case 5:return u.fn.call(u.context,e,r,i,o),!0;case 6:return u.fn.call(u.context,e,r,i,o,l),!0}for(c=1,a=new Array(d-1);c<d;c++)a[c-1]=arguments[c];u.fn.apply(u.context,a)}else{var p,h=u.length;for(c=0;c<h;c++)switch(u[c].once&&this.removeListener(t,u[c].fn,void 0,!0),d){case 1:u[c].fn.call(u[c].context);break;case 2:u[c].fn.call(u[c].context,e);break;case 3:u[c].fn.call(u[c].context,e,r);break;case 4:u[c].fn.call(u[c].context,e,r,i);break;default:if(!a)for(p=1,a=new Array(d-1);p<d;p++)a[p-1]=arguments[p];u[c].fn.apply(u[c].context,a)}}return!0},o.prototype.on=function(t,e,r){var o=new i(e,r||this),l=n?n+t:t;return this._events[l]?this._events[l].fn?this._events[l]=[this._events[l],o]:this._events[l].push(o):(this._events[l]=o,this._eventsCount++),this},o.prototype.once=function(t,e,r){var o=new i(e,r||this,!0),l=n?n+t:t;return this._events[l]?this._events[l].fn?this._events[l]=[this._events[l],o]:this._events[l].push(o):(this._events[l]=o,this._eventsCount++),this},o.prototype.removeListener=function(t,e,i,o){var l=n?n+t:t;if(!this._events[l])return this;if(!e)return 0==--this._eventsCount?this._events=new r:delete this._events[l],this;var s=this._events[l];if(s.fn)s.fn!==e||o&&!s.once||i&&s.context!==i||(0==--this._eventsCount?this._events=new r:delete this._events[l]);else{for(var a=0,c=[],u=s.length;a<u;a++)(s[a].fn!==e||o&&!s[a].once||i&&s[a].context!==i)&&c.push(s[a]);c.length?this._events[l]=1===c.length?c[0]:c:0==--this._eventsCount?this._events=new r:delete this._events[l]}return this},o.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&(0==--this._eventsCount?this._events=new r:delete this._events[e])):(this._events=new r,this._eventsCount=0),this},o.prototype.off=o.prototype.removeListener,o.prototype.addListener=o.prototype.on,o.prototype.setMaxListeners=function(){return this},o.prefixed=n,o.EventEmitter=o,t.exports=o},33964:(t,e,n)=>{t.exports={align:{"":n(62765),center:n(55389),right:n(19522),justify:n(94581)},background:n(98309),blockquote:n(3700),bold:n(51277),clean:n(60937),code:n(6413),"code-block":n(6413),color:n(20500),direction:{"":n(47247),rtl:n(72400)},float:{center:n(22311),full:n(12571),left:n(83605),right:n(87077)},formula:n(87e3),header:{1:n(56370),2:n(18207)},italic:n(17181),image:n(66349),indent:{"+1":n(16645),"-1":n(11790)},link:n(60464),list:{ordered:n(65536),bullet:n(75209),check:n(58151)},script:{sub:n(74929),super:n(69049)},strike:n(27500),underline:n(50653),video:n(47033)}},53697:t=>{"use strict";var e=Object,n=TypeError;t.exports=function(){if(null!=this&&this!==e(this))throw new n("RegExp.prototype.flags getter called on non-object");var t="";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t}},2847:(t,e,n)=>{"use strict";var r=n(4289),i=n(55559),o=n(53697),l=n(98437),s=n(32753),a=i(o);r(a,{getPolyfill:l,implementation:o,shim:s}),t.exports=a},98437:(t,e,n)=>{"use strict";var r=n(53697),i=n(4289).supportsDescriptors,o=Object.getOwnPropertyDescriptor,l=TypeError;t.exports=function(){if(!i)throw new l("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");if("gim"===/a/gim.flags){var t=o(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof/a/.dotAll)return t.get}return r}},32753:(t,e,n)=>{"use strict";var r=n(4289).supportsDescriptors,i=n(98437),o=Object.getOwnPropertyDescriptor,l=Object.defineProperty,s=TypeError,a=Object.getPrototypeOf,c=/a/;t.exports=function(){if(!r||!a)throw new s("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=i(),e=a(c),n=o(e,"flags");return n&&n.get===t||l(e,"flags",{configurable:!0,enumerable:!1,get:t}),t}},93379:(t,e,n)=>{"use strict";var r,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function l(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},r=[],i=0;i<t.length;i++){var s=t[i],a=e.base?s[0]+e.base:s[0],c=n[a]||0,u="".concat(a," ").concat(c);n[a]=c+1;var d=l(u),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(o[d].references++,o[d].updater(p)):o.push({identifier:u,updater:A(p,e),references:1}),r.push(u)}return r}function a(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var l=i(t.insert||"head");if(!l)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");l.appendChild(e)}return e}var c,u=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function d(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=u(e,i);else{var o=document.createTextNode(i),l=t.childNodes;l[e]&&t.removeChild(l[e]),l.length?t.insertBefore(o,l[e]):t.appendChild(o)}}function p(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var h=null,f=0;function A(t,e){var n,r,i;if(e.singleton){var o=f++;n=h||(h=a(e)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=a(e),r=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=l(n[r]);o[i].references--}for(var a=s(t,e),c=0;c<n.length;c++){var u=l(n[c]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=a}}}},55389:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line><line class="ql-stroke" x1="14" x2="4" y1="14" y2="14"></line><line class="ql-stroke" x1="12" x2="6" y1="4" y2="4"></line></svg>'},94581:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line><line class="ql-stroke" x1="15" x2="3" y1="14" y2="14"></line><line class="ql-stroke" x1="15" x2="3" y1="4" y2="4"></line></svg>'},62765:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="9" y2="9"></line><line class="ql-stroke" x1="3" x2="13" y1="14" y2="14"></line><line class="ql-stroke" x1="3" x2="9" y1="4" y2="4"></line></svg>'},19522:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line><line class="ql-stroke" x1="15" x2="5" y1="14" y2="14"></line><line class="ql-stroke" x1="15" x2="9" y1="4" y2="4"></line></svg>'},98309:t=>{t.exports='<svg viewbox="0 0 18 18"><g class="ql-fill ql-color-label"><polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon><rect height="1" width="1" x="4" y="4"></rect><polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon><rect height="1" width="1" x="2" y="6"></rect><rect height="1" width="1" x="3" y="5"></rect><rect height="1" width="1" x="4" y="7"></rect><polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon><rect height="1" width="1" x="2" y="12"></rect><rect height="1" width="1" x="2" y="9"></rect><rect height="1" width="1" x="2" y="15"></rect><polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon><rect height="1" width="1" x="3" y="8"></rect><path d="M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z"></path><path d="M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z"></path><path d="M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z"></path><rect height="1" width="1" x="12" y="2"></rect><rect height="1" width="1" x="11" y="3"></rect><path d="M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z"></path><rect height="1" width="1" x="2" y="3"></rect><rect height="1" width="1" x="6" y="2"></rect><rect height="1" width="1" x="3" y="2"></rect><rect height="1" width="1" x="5" y="3"></rect><rect height="1" width="1" x="9" y="2"></rect><rect height="1" width="1" x="15" y="14"></rect><polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon><rect height="1" width="1" x="13" y="7"></rect><rect height="1" width="1" x="15" y="5"></rect><rect height="1" width="1" x="14" y="6"></rect><rect height="1" width="1" x="15" y="8"></rect><rect height="1" width="1" x="14" y="9"></rect><path d="M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z"></path><rect height="1" width="1" x="14" y="3"></rect><polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon><rect height="1" width="1" x="15" y="2"></rect><rect height="1" width="1" x="12" y="5"></rect><rect height="1" width="1" x="13" y="4"></rect><polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon><rect height="1" width="1" x="9" y="14"></rect><rect height="1" width="1" x="8" y="15"></rect><path d="M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z"></path><rect height="1" width="1" x="5" y="15"></rect><path d="M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z"></path><rect height="1" width="1" x="11" y="15"></rect><path d="M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z"></path><rect height="1" width="1" x="14" y="15"></rect><rect height="1" width="1" x="15" y="11"></rect></g><polyline class="ql-stroke" points="5.5 13 9 5 12.5 13"></polyline><line class="ql-stroke" x1="11.63" x2="6.38" y1="11" y2="11"></line></svg>'},3700:t=>{t.exports='<svg viewbox="0 0 18 18"><rect class="ql-fill ql-stroke" height="3" width="3" x="4" y="5"></rect><rect class="ql-fill ql-stroke" height="3" width="3" x="11" y="5"></rect><path class="ql-even ql-fill ql-stroke" d="M7,8c0,4.031-3,5-3,5"></path><path class="ql-even ql-fill ql-stroke" d="M14,8c0,4.031-3,5-3,5"></path></svg>'},51277:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-stroke" d="M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z"></path><path class="ql-stroke" d="M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z"></path></svg>'},60937:t=>{t.exports='<svg class viewbox="0 0 18 18"><line class="ql-stroke" x1="5" x2="13" y1="3" y2="3"></line><line class="ql-stroke" x1="6" x2="9.35" y1="12" y2="3"></line><line class="ql-stroke" x1="11" x2="15" y1="11" y2="15"></line><line class="ql-stroke" x1="15" x2="11" y1="11" y2="15"></line><rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="7" x="2" y="14"></rect></svg>'},6413:t=>{t.exports='<svg viewbox="0 0 18 18"><polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline><polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline><line class="ql-stroke" x1="10" x2="8" y1="5" y2="13"></line></svg>'},20500:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-color-label ql-stroke ql-transparent" x1="3" x2="15" y1="15" y2="15"></line><polyline class="ql-stroke" points="5.5 11 9 3 12.5 11"></polyline><line class="ql-stroke" x1="11.63" x2="6.38" y1="9" y2="9"></line></svg>'},47247:t=>{t.exports='<svg viewbox="0 0 18 18"><polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon><line class="ql-stroke ql-fill" x1="15" x2="11" y1="4" y2="4"></line><path class="ql-fill" d="M11,3a3,3,0,0,0,0,6h1V3H11Z"></path><rect class="ql-fill" height="11" width="1" x="11" y="4"></rect><rect class="ql-fill" height="11" width="1" x="13" y="4"></rect></svg>'},72400:t=>{t.exports='<svg viewbox="0 0 18 18"><polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon><line class="ql-stroke ql-fill" x1="9" x2="5" y1="4" y2="4"></line><path class="ql-fill" d="M5,3A3,3,0,0,0,5,9H6V3H5Z"></path><rect class="ql-fill" height="11" width="1" x="5" y="4"></rect><rect class="ql-fill" height="11" width="1" x="7" y="4"></rect></svg>'},28777:t=>{t.exports='<svg viewbox="0 0 18 18"><polygon class="ql-stroke" points="7 11 9 13 11 11 7 11"></polygon><polygon class="ql-stroke" points="7 7 9 5 11 7 7 7"></polygon></svg>'},22311:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z"></path><path class="ql-fill" d="M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z"></path><rect class="ql-fill" x="3" y="6" width="12" height="6" rx="1" ry="1"></rect></svg>'},12571:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z"></path><path class="ql-fill" d="M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z"></path><rect class="ql-fill" x="2" y="6" width="14" height="6" rx="1" ry="1"></rect></svg>'},83605:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z"></path><path class="ql-fill" d="M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z"></path><path class="ql-fill" d="M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z"></path><path class="ql-fill" d="M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z"></path><rect class="ql-fill" x="2" y="6" width="8" height="6" rx="1" ry="1"></rect></svg>'},87077:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z"></path><path class="ql-fill" d="M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z"></path><path class="ql-fill" d="M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z"></path><path class="ql-fill" d="M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z"></path><rect class="ql-fill" x="8" y="6" width="8" height="6" rx="1" ry="1" transform="translate(24 18) rotate(-180)"></rect></svg>'},87e3:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z"></path><rect class="ql-fill" height="1.6" rx="0.8" ry="0.8" width="5" x="5.15" y="6.2"></rect><path class="ql-fill" d="M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z"></path></svg>'},18207:t=>{t.exports='<svg viewBox="0 0 18 18"><path class="ql-fill" d="M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z"></path></svg>'},56370:t=>{t.exports='<svg viewBox="0 0 18 18"><path class="ql-fill" d="M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z"></path></svg>'},66349:t=>{t.exports='<svg viewbox="0 0 18 18"><rect class="ql-stroke" height="10" width="12" x="3" y="4"></rect><circle class="ql-fill" cx="6" cy="7" r="1"></circle><polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline></svg>'},16645:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="14" y2="14"></line><line class="ql-stroke" x1="3" x2="15" y1="4" y2="4"></line><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"></line><polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline></svg>'},17181:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="13" y1="4" y2="4"></line><line class="ql-stroke" x1="5" x2="11" y1="14" y2="14"></line><line class="ql-stroke" x1="8" x2="10" y1="14" y2="4"></line></svg>'},60464:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="11" y1="7" y2="11"></line><path class="ql-even ql-stroke" d="M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z"></path><path class="ql-even ql-stroke" d="M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z"></path></svg>'},75209:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="6" x2="15" y1="4" y2="4"></line><line class="ql-stroke" x1="6" x2="15" y1="9" y2="9"></line><line class="ql-stroke" x1="6" x2="15" y1="14" y2="14"></line><line class="ql-stroke" x1="3" x2="3" y1="4" y2="4"></line><line class="ql-stroke" x1="3" x2="3" y1="9" y2="9"></line><line class="ql-stroke" x1="3" x2="3" y1="14" y2="14"></line></svg>'},58151:t=>{t.exports='<svg class viewbox="0 0 18 18"><line class="ql-stroke" x1="9" x2="15" y1="4" y2="4"></line><polyline class="ql-stroke" points="3 4 4 5 6 3"></polyline><line class="ql-stroke" x1="9" x2="15" y1="14" y2="14"></line><polyline class="ql-stroke" points="3 14 4 15 6 13"></polyline><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"></line><polyline class="ql-stroke" points="3 9 4 10 6 8"></polyline></svg>'},65536:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="7" x2="15" y1="4" y2="4"></line><line class="ql-stroke" x1="7" x2="15" y1="9" y2="9"></line><line class="ql-stroke" x1="7" x2="15" y1="14" y2="14"></line><line class="ql-stroke ql-thin" x1="2.5" x2="4.5" y1="5.5" y2="5.5"></line><path class="ql-fill" d="M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z"></path><path class="ql-stroke ql-thin" d="M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156"></path><path class="ql-stroke ql-thin" d="M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109"></path></svg>'},11790:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke" x1="3" x2="15" y1="14" y2="14"></line><line class="ql-stroke" x1="3" x2="15" y1="4" y2="4"></line><line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"></line><polyline class="ql-stroke" points="5 7 5 11 3 9 5 7"></polyline></svg>'},27500:t=>{t.exports='<svg viewbox="0 0 18 18"><line class="ql-stroke ql-thin" x1="15.5" x2="2.5" y1="8.5" y2="9.5"></line><path class="ql-fill" d="M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z"></path><path class="ql-fill" d="M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z"></path></svg>'},74929:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z"></path><path class="ql-fill" d="M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z"></path></svg>'},69049:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-fill" d="M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z"></path><path class="ql-fill" d="M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z"></path></svg>'},50653:t=>{t.exports='<svg viewbox="0 0 18 18"><path class="ql-stroke" d="M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3"></path><rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="12" x="3" y="15"></rect></svg>'},47033:t=>{t.exports='<svg viewbox="0 0 18 18"><rect class="ql-stroke" height="12" width="12" x="3" y="3"></rect><rect class="ql-fill" height="12" width="1" x="5" y="3"></rect><rect class="ql-fill" height="12" width="1" x="12" y="3"></rect><rect class="ql-fill" height="2" width="8" x="5" y="8"></rect><rect class="ql-fill" height="1" width="3" x="3" y="5"></rect><rect class="ql-fill" height="1" width="3" x="3" y="7"></rect><rect class="ql-fill" height="1" width="3" x="3" y="10"></rect><rect class="ql-fill" height="1" width="3" x="3" y="12"></rect><rect class="ql-fill" height="1" width="3" x="12" y="5"></rect><rect class="ql-fill" height="1" width="3" x="12" y="7"></rect><rect class="ql-fill" height="1" width="3" x="12" y="10"></rect><rect class="ql-fill" height="1" width="3" x="12" y="12"></rect></svg>'},51284:t=>{t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 942 559.9"><circle cx="749" cy="125.5" r="25.7" class="logo"></circle><path d="M643.3 211.5c0 21.2 0 76.5 0 91.8 0 19.5-3.5 90.9-76.1 90.9-75.9 0-74.3-71.3-74.3-98.8 0-23.4 0-70.4 0-83.8h-39v94.1s-8.1 128.5 111.3 128.5c119.4 0 115.4-124.5 115.4-124.5v-98.2h-37.3zM816.5 45.2H855v378.5h-38.5zM504 472.7c-79.4 0-194.9-12-268.3-12.8-12.2 0-23 1.5-32.6 3.9l13-11.6c14.3-12.9 37.6-20.9 43.4-22 94.4-18.6 164.8-93.7 164.8-212.8C424.3 83.2 329.3 0 212.1 0S0 76.9 0 217.3c0 126.8 84.9 208 193.1 216.5 0 0 5.7.1 6.4 3.6.6 3.1-4.8 7.6-4.8 7.6l-64.4 59.6 12.4 13.4 23.8-21.3c13.3-10.6 35.1-23.6 62.1-23.6 89.3 0 188.2 89.1 280.1 86.9 134.4-3.2 165.7-93 169.1-104.6.2-.4-55.6 17.3-173.8 17.3zM39.4 217.3c0-114.3 77.3-177 172.8-177 95.4 0 172.8 67.7 172.8 177 0 112.6-77.3 177-172.8 177-95.5-.1-172.8-67.8-172.8-177zM903.5 45.2H942v378.5h-38.5zM729.5 211.1H768v212.5h-38.5z" class="logo"></path></svg>'},37896:(t,e,n)=>{"use strict";n.d(e,{H:()=>s});const r=window;var i=n(9996),o=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function l(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(l,s)}a((r=r.apply(t,e||[])).next())}))},l=function(t,e){var n,r,i,o,l={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,r=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((i=(i=l.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){l.label=o[1];break}if(6===o[0]&&l.label<i[1]){l.label=i[1],i=o;break}if(i&&l.label<i[2]){l.label=i[2],l.ops.push(o);break}i[2]&&l.ops.pop(),l.trys.pop();continue}o=e.call(t,l)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},s=function(){function t(t,e){this.name=t,this.options=e;var n=this;Draw.loadPlugin((function(t){n.declareUiFunctions(t)}))}return t.prototype.declareUiFunctions=function(t){var e=this;this.editorUi=t;var n=function(t,e,n){return e},o=this.options,l=window.EditorUi.defaultEditorsConfig;l&&l[this.name]&&(o=i(o,l[this.name],{arrayMerge:n}));var s=window.Editor.config;function a(n){var r=t.editor.graph.view.states.map[n.mxObjectId].shape;r&&e.showDialog(t,r)}if(s&&s.defaultEditorsConfig&&s.defaultEditorsConfig[this.name]&&(o=i(o,s.defaultEditorsConfig[this.name],{arrayMerge:n})),o.title&&0!=o.title.length||(o.title="Editor"),this.options=o,this.options.ignoreDoubleClic||t.editor.graph.addListener(r.mxEvent.DOUBLE_CLICK,(function(t,n){var r=n.getProperty("cell");e.isCellHandled(r)&&(n.consume(),a(r))})),this.options.contextual&&this.options.contextual.length>0){var c=t.editor.graph.popupMenuHandler.factoryMethod;t.editor.graph.popupMenuHandler.factoryMethod=function(t,n,r){c(t,n,r),e.isCellHandled(n)&&t.addItem(e.options.contextual,null,(function(){a(n)}))}}for(var u=0,d=this.options.paletteItems;u<d.length;u++){var p=d[u],h="string"==typeof p.palette?p.palette:p.palette.name,f="string"==typeof p.palette?p.palette:p.palette.label;this.setDefaultsPaletteItem(p),t.sidebar.palettes[h]||t.sidebar.addPaletteFunctions(h,f,!0,[]);var A=t.sidebar.palettes[h][1];if(p.data){var q=t.sidebar.addDataEntry(p.name,p.width,p.height,p.label,p.data);A&&A.firstChild&&A.firstChild.appendChild(q)}else{var g=r.mxUtils.parseXml(p.node).getRootNode().firstChild,m=new r.mxCell(g,new r.mxGeometry(0,0,p.width,p.height),"shape=image;verticalLabelPosition=bottom;labelBackgroundColor=#ffffff;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:"+p.icon+";"+p.style);m.vertex=!0,m.setAttribute(e.options.attributeName,p.text),q=t.sidebar.createVertexTemplateFromCells([m],p.width,p.height,p.label,!0,!0),A&&A.firstChild&&A.firstChild.appendChild(q)}}},t.prototype.setDefaultsPaletteItem=function(t){t.label||(t.label=t.name),t.width||(t.width=50),t.height||(t.height=50),t.icon||t.data||(t.icon="image/svg+xml,"+btoa('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80"><rect x="20" y="20" width="40" height="40"/></svg>')),t.style||t.data||(t.style=""),t.node||t.data||(t.node="<editor />"),t.text||t.data||(t.text=" ")},t.prototype.isCellHandled=function(t){return!!t&&!(!r.mxUtils.isNode(t.value)||""==t.getAttribute(this.options.attributeName,""))},t.prototype.showDialog=function(t,e){var n=this,i=document.createElement("div");i.style.cssText="display: flex; flex-direction: column; height: inherit;",i.innerHTML='\n      <div id="editor_'+n.name+'_div" style="flex: 1; /*text-align: center;*/  overflow-y: scroll;"></div>\n      <div id="plugin_editor_'+n.name+'_buttons" style="flex: initial; text-align: right; align-self: flex-end; padding: 8px;"></div>\n      ';var o=i.querySelector("#plugin_editor_"+n.name+"_buttons"),l=800,s=640;t.diagramContainer.clientWidth<l&&(l=t.diagramContainer.clientWidth-20),t.diagramContainer.clientHeight<s&&(s=t.diagramContainer.clientHeight-20);var a=new r.mxWindow(this.options.title,i,(t.diagramContainer.clientWidth-l)/2+t.diagramContainer.offsetLeft,(t.diagramContainer.clientHeight-s)/2+t.diagramContainer.offsetTop,l,s,!0,!0);a.setResizable(!0),a.setMaximizable(!0),a.setClosable(!0);var c=r.mxUtils.button(r.mxResources.get("close"),(function(){n.cancel(t,i,a,e)}));c.className="geBtn",t.editor.cancelFirst&&o.appendChild(c);var u=r.mxUtils.button(r.mxResources.get("apply"),(function(r){n.validate(t,i,a,e)}));o.appendChild(u),u.className="geBtn gePrimaryBtn",t.editor.cancelFirst||o.appendChild(c),i.addEventListener("keydown",(function(t){t.stopPropagation()})),n.onFillWindow(t,i,a,e),a.show(),n.onShowWindow(t,i,a,e)},t.prototype.onFillWindow=function(t,e,n,r){},t.prototype.onShowWindow=function(t,e,n,r){this.editorUi&&this.editorUi.editor&&this.editorUi.editor.graph&&this.editorUi.editor.graph.tooltipHandler&&this.editorUi.editor.graph.tooltipHandler.hide&&this.editorUi.editor.graph.tooltipHandler.hide()},t.prototype.validate=function(t,e,n,i){return o(this,void 0,void 0,(function(){var o,s,a;return l(this,(function(l){switch(l.label){case 0:return t.spinner.spin(document.body,r.mxResources.get("inserting"))?((o=t.editor.graph).getModel().beginUpdate(),s=this.setShapeValue,a=[t,i],[4,this.getEditorValue(t,e,n)]):[3,2];case 1:s.apply(this,a.concat([l.sent()])),o.getModel().endUpdate(),t.spinner.stop(),null!=i.state.cell&&(o.setSelectionCell(i.state.cell),o.scrollCellToVisible(i.state.cell)),l.label=2;case 2:return n.destroy(),[2]}}))}))},t.prototype.cancel=function(t,e,n,r){n.destroy()},t.prototype.getEditorValue=function(t,e,n){return o(this,void 0,void 0,(function(){return l(this,(function(t){return[2,""]}))}))},t.prototype.getShapeValue=function(t,e){return e&&e.state&&e.state.cell?e.state.cell.getAttribute(this.options.attributeName,""):""},t.prototype.setShapeValue=function(t,e,n){e&&e.state&&e.state.cell&&e.state.cell.value&&r.mxUtils.isNode(e.state.cell.value)&&e.state.cell.setAttribute(this.options.attributeName,n)},t}()},91496:t=>{"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},20384:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},89539:(t,e,n)=>{var r=n(34155),i=n(25108),o=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},l=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(c(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(t).replace(l,(function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),s=r[n];n<i;s=r[++n])g(s)||!C(s)?o+=" "+s:o+=" "+c(s);return o},e.deprecate=function(t,n){if(void 0!==r&&!0===r.noDeprecation)return t;if(void 0===r)return function(){return e.deprecate(t,n).apply(this,arguments)};var o=!1;return function(){if(!o){if(r.throwDeprecation)throw new Error(n);r.traceDeprecation?i.trace(n):i.error(n),o=!0}return t.apply(this,arguments)}};var s,a={};function c(t,n){var r={seen:[],stylize:d};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),q(n)?r.showHidden=n:n&&e._extend(r,n),y(r.showHidden)&&(r.showHidden=!1),y(r.depth)&&(r.depth=2),y(r.colors)&&(r.colors=!1),y(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),p(r,t,r.depth)}function u(t,e){var n=c.styles[e];return n?"["+c.colors[n][0]+"m"+t+"["+c.colors[n][1]+"m":t}function d(t,e){return t}function p(t,n,r){if(t.customInspect&&n&&B(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return b(i)||(i=p(t,i,r)),i}var o=function(t,e){if(y(e))return t.stylize("undefined","undefined");if(b(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return m(e)?t.stylize(""+e,"number"):q(e)?t.stylize(""+e,"boolean"):g(e)?t.stylize("null","null"):void 0}(t,n);if(o)return o;var l=Object.keys(n),s=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(l);if(t.showHidden&&(l=Object.getOwnPropertyNames(n)),w(n)&&(l.indexOf("message")>=0||l.indexOf("description")>=0))return h(n);if(0===l.length){if(B(n)){var a=n.name?": "+n.name:"";return t.stylize("[Function"+a+"]","special")}if(E(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(v(n))return t.stylize(Date.prototype.toString.call(n),"date");if(w(n))return h(n)}var c,u="",d=!1,C=["{","}"];return A(n)&&(d=!0,C=["[","]"]),B(n)&&(u=" [Function"+(n.name?": "+n.name:"")+"]"),E(n)&&(u=" "+RegExp.prototype.toString.call(n)),v(n)&&(u=" "+Date.prototype.toUTCString.call(n)),w(n)&&(u=" "+h(n)),0!==l.length||d&&0!=n.length?r<0?E(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),c=d?function(t,e,n,r,i){for(var o=[],l=0,s=e.length;l<s;++l)S(e,String(l))?o.push(f(t,e,n,r,String(l),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(f(t,e,n,r,i,!0))})),o}(t,n,r,s,l):l.map((function(e){return f(t,n,r,s,e,d)})),t.seen.pop(),function(t,e,n){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}(c,u,C)):C[0]+u+C[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function f(t,e,n,r,i,o){var l,s,a;if((a=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(s=t.stylize("[Setter]","special")),S(r,i)||(l="["+i+"]"),s||(t.seen.indexOf(a.value)<0?(s=g(n)?p(t,a.value,null):p(t,a.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),y(l)){if(o&&i.match(/^\d+$/))return s;(l=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(l=l.substr(1,l.length-2),l=t.stylize(l,"name")):(l=l.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),l=t.stylize(l,"string"))}return l+": "+s}function A(t){return Array.isArray(t)}function q(t){return"boolean"==typeof t}function g(t){return null===t}function m(t){return"number"==typeof t}function b(t){return"string"==typeof t}function y(t){return void 0===t}function E(t){return C(t)&&"[object RegExp]"===x(t)}function C(t){return"object"==typeof t&&null!==t}function v(t){return C(t)&&"[object Date]"===x(t)}function w(t){return C(t)&&("[object Error]"===x(t)||t instanceof Error)}function B(t){return"function"==typeof t}function x(t){return Object.prototype.toString.call(t)}function k(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(y(s)&&(s=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!a[t])if(new RegExp("\\b"+t+"\\b","i").test(s)){var n=r.pid;a[t]=function(){var r=e.format.apply(e,arguments);i.error("%s %d: %s",t,n,r)}}else a[t]=function(){};return a[t]},e.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=A,e.isBoolean=q,e.isNull=g,e.isNullOrUndefined=function(t){return null==t},e.isNumber=m,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=y,e.isRegExp=E,e.isObject=C,e.isDate=v,e.isError=w,e.isFunction=B,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(20384);var N=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function O(){var t=new Date,e=[k(t.getHours()),k(t.getMinutes()),k(t.getSeconds())].join(":");return[t.getDate(),N[t.getMonth()],e].join(" ")}function S(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){i.log("%s - %s",O(),e.format.apply(e,arguments))},e.inherits=n(91496),e._extend=function(t,e){if(!e||!C(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var T="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function L(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(T&&t[T]){var e;if("function"!=typeof(e=t[T]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,T,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,i)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),T&&Object.defineProperty(e,T,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,o(t))},e.promisify.custom=T,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],n=0;n<arguments.length;n++)e.push(arguments[n]);var i=e.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,l=function(){return i.apply(o,arguments)};t.apply(this,e).then((function(t){r.nextTick(l,null,t)}),(function(t){r.nextTick(L,t,l)}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,o(t)),e}}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(37896),e=n(70347),r=n.n(e),i=(n(58299),n(54175)),o=n.n(i),l=n(26910),s=n.n(l),a=n(94470),c=n.n(a);class u extends r().Embed{static value(){}insertInto(t,e){0===t.children.length?super.insertInto(t,e):this.remove()}length(){return 0}value(){return""}}u.blotName="break",u.tagName="BR";const d=u;class p extends r().Text{}const h=p;class f extends r().Inline{static compare(t,e){let n=f.order.indexOf(t),r=f.order.indexOf(e);return n>=0||r>=0?n-r:t===e?0:t<e?-1:1}formatAt(t,e,n,i){if(f.compare(this.statics.blotName,n)<0&&r().query(n,r().Scope.BLOT)){let r=this.isolate(t,e);i&&r.wrap(n,i)}else super.formatAt(t,e,n,i)}optimize(t){if(super.optimize(t),this.parent instanceof f&&f.compare(this.statics.blotName,this.parent.statics.blotName)>0){let t=this.parent.isolate(this.offset(),this.length());this.moveChildren(t),t.wrap(this)}}}f.allowedChildren=[f,r().Embed,h],f.order=["cursor","inline","underline","strike","italic","bold","script","link","code"];const A=f;class q extends r().Embed{attach(){super.attach(),this.attributes=new(r().Attributor.Store)(this.domNode)}delta(){return(new(o())).insert(this.value(),c()(this.formats(),this.attributes.values()))}format(t,e){let n=r().query(t,r().Scope.BLOCK_ATTRIBUTE);null!=n&&this.attributes.attribute(n,e)}formatAt(t,e,n,r){this.format(n,r)}insertAt(t,e,n){if("string"==typeof e&&e.endsWith("\n")){let n=r().create(g.blotName);this.parent.insertBefore(n,0===t?this:this.next),n.insertAt(0,e.slice(0,-1))}else super.insertAt(t,e,n)}}q.scope=r().Scope.BLOCK_BLOT;class g extends r().Block{constructor(t){super(t),this.cache={}}delta(){return null==this.cache.delta&&(this.cache.delta=this.descendants(r().Leaf).reduce(((t,e)=>0===e.length()?t:t.insert(e.value(),m(e))),new(o())).insert("\n",m(this))),this.cache.delta}deleteAt(t,e){super.deleteAt(t,e),this.cache={}}formatAt(t,e,n,i){e<=0||(r().query(n,r().Scope.BLOCK)?t+e===this.length()&&this.format(n,i):super.formatAt(t,Math.min(e,this.length()-t-1),n,i),this.cache={})}insertAt(t,e,n){if(null!=n)return super.insertAt(t,e,n);if(0===e.length)return;let r=e.split("\n"),i=r.shift();i.length>0&&(t<this.length()-1||null==this.children.tail?super.insertAt(Math.min(t,this.length()-1),i):this.children.tail.insertAt(this.children.tail.length(),i),this.cache={});let o=this;r.reduce((function(t,e){return o=o.split(t,!0),o.insertAt(0,e),e.length}),t+i.length)}insertBefore(t,e){let n=this.children.head;super.insertBefore(t,e),n instanceof d&&n.remove(),this.cache={}}length(){return null==this.cache.length&&(this.cache.length=super.length()+1),this.cache.length}moveChildren(t,e){super.moveChildren(t,e),this.cache={}}optimize(t){super.optimize(t),this.cache={}}path(t){return super.path(t,!0)}removeChild(t){super.removeChild(t),this.cache={}}split(t,e=!1){if(e&&(0===t||t>=this.length()-1)){let e=this.clone();return 0===t?(this.parent.insertBefore(e,this),this):(this.parent.insertBefore(e,this.next),e)}{let n=super.split(t,e);return this.cache={},n}}}function m(t,e={}){return null==t?e:("function"==typeof t.formats&&(e=c()(e,t.formats())),null==t.parent||"scroll"==t.parent.blotName||t.parent.statics.scope!==t.statics.scope?e:m(t.parent,e))}g.blotName="block",g.tagName="P",g.defaultChild="break",g.allowedChildren=[A,r().Embed,h];class b extends A{}b.blotName="code",b.tagName="CODE";class y extends g{static create(t){let e=super.create(t);return e.setAttribute("spellcheck",!1),e}static formats(){return!0}delta(){let t=this.domNode.textContent;return t.endsWith("\n")&&(t=t.slice(0,-1)),t.split("\n").reduce(((t,e)=>t.insert(e).insert("\n",this.formats())),new(o()))}format(t,e){if(t===this.statics.blotName&&e)return;let[n]=this.descendant(h,this.length()-1);null!=n&&n.deleteAt(n.length()-1,1),super.format(t,e)}formatAt(t,e,n,i){if(0===e)return;if(null==r().query(n,r().Scope.BLOCK)||n===this.statics.blotName&&i===this.statics.formats(this.domNode))return;let o=this.newlineIndex(t);if(o<0||o>=t+e)return;let l=this.newlineIndex(t,!0)+1,s=o-l+1,a=this.isolate(l,s),c=a.next;a.format(n,i),c instanceof y&&c.formatAt(0,t-l+e-s,n,i)}insertAt(t,e,n){if(null!=n)return;let[r,i]=this.descendant(h,t);r.insertAt(i,e)}length(){let t=this.domNode.textContent.length;return this.domNode.textContent.endsWith("\n")?t:t+1}newlineIndex(t,e=!1){if(e)return this.domNode.textContent.slice(0,t).lastIndexOf("\n");{let e=this.domNode.textContent.slice(t).indexOf("\n");return e>-1?t+e:-1}}optimize(t){this.domNode.textContent.endsWith("\n")||this.appendChild(r().create("text","\n")),super.optimize(t);let e=this.next;null!=e&&e.prev===this&&e.statics.blotName===this.statics.blotName&&this.statics.formats(this.domNode)===e.statics.formats(e.domNode)&&(e.optimize(t),e.moveChildren(this),e.remove())}replace(t){super.replace(t),[].slice.call(this.domNode.querySelectorAll("*")).forEach((function(t){let e=r().find(t);null==e?t.parentNode.removeChild(t):e instanceof r().Embed?e.remove():e.unwrap()}))}}y.blotName="code-block",y.tagName="PRE",y.TAB="  ";class E extends r().Embed{static value(){}constructor(t,e){super(t),this.selection=e,this.textNode=document.createTextNode(E.CONTENTS),this.domNode.appendChild(this.textNode),this._length=0}detach(){null!=this.parent&&this.parent.removeChild(this)}format(t,e){if(0!==this._length)return super.format(t,e);let n=this,i=0;for(;null!=n&&n.statics.scope!==r().Scope.BLOCK_BLOT;)i+=n.offset(n.parent),n=n.parent;null!=n&&(this._length=E.CONTENTS.length,n.optimize(),n.formatAt(i,E.CONTENTS.length,t,e),this._length=0)}index(t,e){return t===this.textNode?0:super.index(t,e)}length(){return this._length}position(){return[this.textNode,this.textNode.data.length]}remove(){super.remove(),this.parent=null}restore(){if(this.selection.composing||null==this.parent)return;let t,e,n,i=this.textNode,o=this.selection.getNativeRange();for(null!=o&&o.start.node===i&&o.end.node===i&&([t,e,n]=[i,o.start.offset,o.end.offset]);null!=this.domNode.lastChild&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);if(this.textNode.data!==E.CONTENTS){let e=this.textNode.data.split(E.CONTENTS).join("");this.next instanceof h?(t=this.next.domNode,this.next.insertAt(0,e),this.textNode.data=E.CONTENTS):(this.textNode.data=e,this.parent.insertBefore(r().create(this.textNode),this),this.textNode=document.createTextNode(E.CONTENTS),this.domNode.appendChild(this.textNode))}return this.remove(),null!=e?([e,n]=[e,n].map((function(e){return Math.max(0,Math.min(t.data.length,e-1))})),{startNode:t,startOffset:e,endNode:t,endOffset:n}):void 0}update(t,e){if(t.some((t=>"characterData"===t.type&&t.target===this.textNode))){let t=this.restore();t&&(e.range=t)}}value(){return""}}E.blotName="cursor",E.className="ql-cursor",E.tagName="span",E.CONTENTS="\ufeff";const C=E;var v=n(50429),w=n.n(v),B=n(10251),x=n.n(B);const k=/^[ -~]*$/;function N(t,e){return Object.keys(e).reduce((function(n,r){return null==t[r]||(e[r]===t[r]?n[r]=e[r]:Array.isArray(e[r])?e[r].indexOf(t[r])<0&&(n[r]=e[r].concat([t[r]])):n[r]=[e[r],t[r]]),n}),{})}var O=n(31930),S=n.n(O),T=n(25108);let L=["error","warn","log","info"],_="warn";function j(t,...e){L.indexOf(t)<=L.indexOf(_)&&T[t](...e)}function I(t){return L.reduce((function(e,n){return e[n]=j.bind(T,n,t),e}),{})}j.level=I.level=function(t){_=t};const R=I;let U=R("quill:events");["selectionchange","mousedown","mouseup","click"].forEach((function(t){document.addEventListener(t,((...t)=>{[].slice.call(document.querySelectorAll(".ql-container")).forEach((e=>{e.__quill&&e.__quill.emitter&&e.__quill.emitter.handleDOM(...t)}))}))}));class P extends(S()){constructor(){super(),this.listeners={},this.on("error",U.error)}emit(){U.log.apply(U,arguments),super.emit.apply(this,arguments)}handleDOM(t,...e){(this.listeners[t.type]||[]).forEach((function({node:n,handler:r}){(t.target===n||n.contains(t.target))&&r(t,...e)}))}listenDOM(t,e,n){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push({node:e,handler:n})}}P.events={EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change"},P.sources={API:"api",SILENT:"silent",USER:"user"};const M=P;class z{constructor(t,e={}){this.quill=t,this.options=e}}z.DEFAULTS={};const D=z;let F=R("quill:selection");class W{constructor(t,e=0){this.index=t,this.length=e}}class H{constructor(t,e){this.emitter=e,this.scroll=t,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=r().create("cursor",this),this.lastRange=this.savedRange=new W(0,0),this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,(()=>{this.mouseDown||setTimeout(this.update.bind(this,M.sources.USER),1)})),this.emitter.on(M.events.EDITOR_CHANGE,((t,e)=>{t===M.events.TEXT_CHANGE&&e.length()>0&&this.update(M.sources.SILENT)})),this.emitter.on(M.events.SCROLL_BEFORE_UPDATE,(()=>{if(!this.hasFocus())return;let t=this.getNativeRange();null!=t&&t.start.node!==this.cursor.textNode&&this.emitter.once(M.events.SCROLL_UPDATE,(()=>{try{this.setNativeRange(t.start.node,t.start.offset,t.end.node,t.end.offset)}catch(t){}}))})),this.emitter.on(M.events.SCROLL_OPTIMIZE,((t,e)=>{if(e.range){const{startNode:t,startOffset:n,endNode:r,endOffset:i}=e.range;this.setNativeRange(t,n,r,i)}})),this.update(M.sources.SILENT)}handleComposition(){this.root.addEventListener("compositionstart",(()=>{this.composing=!0})),this.root.addEventListener("compositionend",(()=>{if(this.composing=!1,this.cursor.parent){const t=this.cursor.restore();if(!t)return;setTimeout((()=>{this.setNativeRange(t.startNode,t.startOffset,t.endNode,t.endOffset)}),1)}}))}handleDragging(){this.emitter.listenDOM("mousedown",document.body,(()=>{this.mouseDown=!0})),this.emitter.listenDOM("mouseup",document.body,(()=>{this.mouseDown=!1,this.update(M.sources.USER)}))}focus(){this.hasFocus()||(this.root.focus(),this.setRange(this.savedRange))}format(t,e){if(null!=this.scroll.whitelist&&!this.scroll.whitelist[t])return;this.scroll.update();let n=this.getNativeRange();if(null!=n&&n.native.collapsed&&!r().query(t,r().Scope.BLOCK)){if(n.start.node!==this.cursor.textNode){let t=r().find(n.start.node,!1);if(null==t)return;if(t instanceof r().Leaf){let e=t.split(n.start.offset);t.parent.insertBefore(this.cursor,e)}else t.insertBefore(this.cursor,n.start.node);this.cursor.attach()}this.cursor.format(t,e),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}getBounds(t,e=0){let n=this.scroll.length();t=Math.min(t,n-1),e=Math.min(t+e,n-1)-t;let r,[i,o]=this.scroll.leaf(t);if(null==i)return null;[r,o]=i.position(o,!0);let l=document.createRange();if(e>0)return l.setStart(r,o),[i,o]=this.scroll.leaf(t+e),null==i?null:([r,o]=i.position(o,!0),l.setEnd(r,o),l.getBoundingClientRect());{let t,e="left";return r instanceof Text?(o<r.data.length?(l.setStart(r,o),l.setEnd(r,o+1)):(l.setStart(r,o-1),l.setEnd(r,o),e="right"),t=l.getBoundingClientRect()):(t=i.domNode.getBoundingClientRect(),o>0&&(e="right")),{bottom:t.top+t.height,height:t.height,left:t[e],right:t[e],top:t.top,width:0}}}getNativeRange(){let t=document.getSelection();if(null==t||t.rangeCount<=0)return null;let e=t.getRangeAt(0);if(null==e)return null;let n=this.normalizeNative(e);return F.info("getNativeRange",n),n}getRange(){let t=this.getNativeRange();return null==t?[null,null]:[this.normalizedToRange(t),t]}hasFocus(){return document.activeElement===this.root}normalizedToRange(t){let e=[[t.start.node,t.start.offset]];t.native.collapsed||e.push([t.end.node,t.end.offset]);let n=e.map((t=>{let[e,n]=t,i=r().find(e,!0),o=i.offset(this.scroll);return 0===n?o:i instanceof r().Container?o+i.length():o+i.index(e,n)})),i=Math.min(Math.max(...n),this.scroll.length()-1),o=Math.min(i,...n);return new W(o,i-o)}normalizeNative(t){if(!Y(this.root,t.startContainer)||!t.collapsed&&!Y(this.root,t.endContainer))return null;let e={start:{node:t.startContainer,offset:t.startOffset},end:{node:t.endContainer,offset:t.endOffset},native:t};return[e.start,e.end].forEach((function(t){let e=t.node,n=t.offset;for(;!(e instanceof Text)&&e.childNodes.length>0;)if(e.childNodes.length>n)e=e.childNodes[n],n=0;else{if(e.childNodes.length!==n)break;e=e.lastChild,n=e instanceof Text?e.data.length:e.childNodes.length+1}t.node=e,t.offset=n})),e}rangeToNative(t){let e=t.collapsed?[t.index]:[t.index,t.index+t.length],n=[],r=this.scroll.length();return e.forEach(((t,e)=>{t=Math.min(r-1,t);let i,[o,l]=this.scroll.leaf(t);[i,l]=o.position(l,0!==e),n.push(i,l)})),n.length<2&&(n=n.concat(n)),n}scrollIntoView(t){let e=this.lastRange;if(null==e)return;let n=this.getBounds(e.index,e.length);if(null==n)return;let r=this.scroll.length()-1,[i]=this.scroll.line(Math.min(e.index,r)),o=i;if(e.length>0&&([o]=this.scroll.line(Math.min(e.index+e.length,r))),null==i||null==o)return;let l=t.getBoundingClientRect();n.top<l.top?t.scrollTop-=l.top-n.top:n.bottom>l.bottom&&(t.scrollTop+=n.bottom-l.bottom)}setNativeRange(t,e,n=t,r=e,i=!1){if(F.info("setNativeRange",t,e,n,r),null!=t&&(null==this.root.parentNode||null==t.parentNode||null==n.parentNode))return;let o=document.getSelection();if(null!=o)if(null!=t){this.hasFocus()||this.root.focus();let l=(this.getNativeRange()||{}).native;if(null==l||i||t!==l.startContainer||e!==l.startOffset||n!==l.endContainer||r!==l.endOffset){"BR"==t.tagName&&(e=[].indexOf.call(t.parentNode.childNodes,t),t=t.parentNode),"BR"==n.tagName&&(r=[].indexOf.call(n.parentNode.childNodes,n),n=n.parentNode);let i=document.createRange();i.setStart(t,e),i.setEnd(n,r),o.removeAllRanges(),o.addRange(i)}}else o.removeAllRanges(),this.root.blur(),document.body.focus()}setRange(t,e=!1,n=M.sources.API){if("string"==typeof e&&(n=e,e=!1),F.info("setRange",t),null!=t){let n=this.rangeToNative(t);this.setNativeRange(...n,e)}else this.setNativeRange(null);this.update(n)}update(t=M.sources.USER){let e=this.lastRange,[n,r]=this.getRange();if(this.lastRange=n,null!=this.lastRange&&(this.savedRange=this.lastRange),!x()(e,this.lastRange)){!this.composing&&null!=r&&r.native.collapsed&&r.start.node!==this.cursor.textNode&&this.cursor.restore();let n=[M.events.SELECTION_CHANGE,w()(this.lastRange),w()(e),t];this.emitter.emit(M.events.EDITOR_CHANGE,...n),t!==M.sources.SILENT&&this.emitter.emit(...n)}}}function Y(t,e){try{e.parentNode}catch(t){return!1}return e instanceof Text&&(e=e.parentNode),t.contains(e)}class ${constructor(t,e){this.quill=t,this.options=e,this.modules={}}init(){Object.keys(this.options.modules).forEach((t=>{null==this.modules[t]&&this.addModule(t)}))}addModule(t){let e=this.quill.constructor.import(`modules/${t}`);return this.modules[t]=new e(this.quill,this.options.modules[t]||{}),this.modules[t]}}$.DEFAULTS={modules:{}},$.themes={default:$};const V=$;let K=R("quill");class Z{static debug(t){!0===t&&(t="log"),R.level(t)}static find(t){return t.__quill||r().find(t)}static import(t){return null==this.imports[t]&&K.error(`Cannot import ${t}. Are you sure it was registered?`),this.imports[t]}static register(t,e,n=!1){if("string"!=typeof t){let n=t.attrName||t.blotName;"string"==typeof n?this.register("formats/"+n,t,e):Object.keys(t).forEach((n=>{this.register(n,t[n],e)}))}else null==this.imports[t]||n||K.warn(`Overwriting ${t} with`,e),this.imports[t]=e,(t.startsWith("blots/")||t.startsWith("formats/"))&&"abstract"!==e.blotName?r().register(e):t.startsWith("modules")&&"function"==typeof e.register&&e.register()}constructor(t,e={}){if(this.options=function(t,e){if((e=c()(!0,{container:t,modules:{clipboard:!0,keyboard:!0,history:!0}},e)).theme&&e.theme!==Z.DEFAULTS.theme){if(e.theme=Z.import(`themes/${e.theme}`),null==e.theme)throw new Error(`Invalid theme ${e.theme}. Did you register it?`)}else e.theme=V;let n=c()(!0,{},e.theme.DEFAULTS);[n,e].forEach((function(t){t.modules=t.modules||{},Object.keys(t.modules).forEach((function(e){!0===t.modules[e]&&(t.modules[e]={})}))}));let r=Object.keys(n.modules).concat(Object.keys(e.modules)).reduce((function(t,e){let n=Z.import(`modules/${e}`);return null==n?K.error(`Cannot load ${e} module. Are you sure you registered it?`):t[e]=n.DEFAULTS||{},t}),{});return null!=e.modules&&e.modules.toolbar&&e.modules.toolbar.constructor!==Object&&(e.modules.toolbar={container:e.modules.toolbar}),e=c()(!0,{},Z.DEFAULTS,{modules:r},n,e),["bounds","container","scrollingContainer"].forEach((function(t){"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))})),e.modules=Object.keys(e.modules).reduce((function(t,n){return e.modules[n]&&(t[n]=e.modules[n]),t}),{}),e}(t,e),this.container=this.options.container,null==this.container)return K.error("Invalid Quill container",t);this.options.debug&&Z.debug(this.options.debug);let n=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",this.container.__quill=this,this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.root.setAttribute("data-gramm",!1),this.scrollingContainer=this.options.scrollingContainer||this.root,this.emitter=new M,this.scroll=r().create(this.root,{emitter:this.emitter,whitelist:this.options.formats}),this.editor=new class{constructor(t){this.scroll=t,this.delta=this.getDelta()}applyDelta(t){let e=!1;this.scroll.update();let n=this.scroll.length();return this.scroll.batchStart(),(t=function(t){return t.reduce((function(t,e){if(1===e.insert){let n=w()(e.attributes);return delete n.image,t.insert({image:e.attributes.image},n)}if(null==e.attributes||!0!==e.attributes.list&&!0!==e.attributes.bullet||((e=w()(e)).attributes.list?e.attributes.list="ordered":(e.attributes.list="bullet",delete e.attributes.bullet)),"string"==typeof e.insert){let n=e.insert.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return t.insert(n,e.attributes)}return t.push(e)}),new(o()))}(t)).reduce(((t,i)=>{let o=i.retain||i.delete||i.insert.length||1,l=i.attributes||{};if(null!=i.insert){if("string"==typeof i.insert){let o=i.insert;o.endsWith("\n")&&e&&(e=!1,o=o.slice(0,-1)),t>=n&&!o.endsWith("\n")&&(e=!0),this.scroll.insertAt(t,o);let[a,u]=this.scroll.line(t),d=c()({},m(a));if(a instanceof g){let[t]=a.descendant(r().Leaf,u);d=c()(d,m(t))}l=s().attributes.diff(d,l)||{}}else if("object"==typeof i.insert){let e=Object.keys(i.insert)[0];if(null==e)return t;this.scroll.insertAt(t,e,i.insert[e])}n+=o}return Object.keys(l).forEach((e=>{this.scroll.formatAt(t,o,e,l[e])})),t+o}),0),t.reduce(((t,e)=>"number"==typeof e.delete?(this.scroll.deleteAt(t,e.delete),t):t+(e.retain||e.insert.length||1)),0),this.scroll.batchEnd(),this.update(t)}deleteText(t,e){return this.scroll.deleteAt(t,e),this.update((new(o())).retain(t).delete(e))}formatLine(t,e,n={}){return this.scroll.update(),Object.keys(n).forEach((r=>{if(null!=this.scroll.whitelist&&!this.scroll.whitelist[r])return;let i=this.scroll.lines(t,Math.max(e,1)),o=e;i.forEach((e=>{let i=e.length();if(e instanceof y){let i=t-e.offset(this.scroll),l=e.newlineIndex(i+o)-i+1;e.formatAt(i,l,r,n[r])}else e.format(r,n[r]);o-=i}))})),this.scroll.optimize(),this.update((new(o())).retain(t).retain(e,w()(n)))}formatText(t,e,n={}){return Object.keys(n).forEach((r=>{this.scroll.formatAt(t,e,r,n[r])})),this.update((new(o())).retain(t).retain(e,w()(n)))}getContents(t,e){return this.delta.slice(t,t+e)}getDelta(){return this.scroll.lines().reduce(((t,e)=>t.concat(e.delta())),new(o()))}getFormat(t,e=0){let n=[],i=[];0===e?this.scroll.path(t).forEach((function(t){let[e]=t;e instanceof g?n.push(e):e instanceof r().Leaf&&i.push(e)})):(n=this.scroll.lines(t,e),i=this.scroll.descendants(r().Leaf,t,e));let o=[n,i].map((function(t){if(0===t.length)return{};let e=m(t.shift());for(;Object.keys(e).length>0;){let n=t.shift();if(null==n)return e;e=N(m(n),e)}return e}));return c().apply(c(),o)}getText(t,e){return this.getContents(t,e).filter((function(t){return"string"==typeof t.insert})).map((function(t){return t.insert})).join("")}insertEmbed(t,e,n){return this.scroll.insertAt(t,e,n),this.update((new(o())).retain(t).insert({[e]:n}))}insertText(t,e,n={}){return e=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n"),this.scroll.insertAt(t,e),Object.keys(n).forEach((r=>{this.scroll.formatAt(t,e.length,r,n[r])})),this.update((new(o())).retain(t).insert(e,w()(n)))}isBlank(){if(0==this.scroll.children.length)return!0;if(this.scroll.children.length>1)return!1;let t=this.scroll.children.head;return t.statics.blotName===g.blotName&&!(t.children.length>1)&&t.children.head instanceof d}removeFormat(t,e){let n=this.getText(t,e),[r,i]=this.scroll.line(t+e),l=0,s=new(o());null!=r&&(l=r instanceof y?r.newlineIndex(i)-i+1:r.length()-i,s=r.delta().slice(i,i+l-1).insert("\n"));let a=this.getContents(t,e+l).diff((new(o())).insert(n).concat(s)),c=(new(o())).retain(t).concat(a);return this.applyDelta(c)}update(t,e=[],n){let i=this.delta;if(1===e.length&&"characterData"===e[0].type&&e[0].target.data.match(k)&&r().find(e[0].target)){let l=r().find(e[0].target),s=m(l),a=l.offset(this.scroll),c=e[0].oldValue.replace(C.CONTENTS,""),u=(new(o())).insert(c),d=(new(o())).insert(l.value());t=(new(o())).retain(a).concat(u.diff(d,n)).reduce((function(t,e){return e.insert?t.insert(e.insert,s):t.push(e)}),new(o())),this.delta=i.compose(t)}else this.delta=this.getDelta(),t&&x()(i.compose(t),this.delta)||(t=i.diff(this.delta,n));return t}}(this.scroll),this.selection=new H(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.theme.init(),this.emitter.on(M.events.EDITOR_CHANGE,(t=>{t===M.events.TEXT_CHANGE&&this.root.classList.toggle("ql-blank",this.editor.isBlank())})),this.emitter.on(M.events.SCROLL_UPDATE,((t,e)=>{let n=this.selection.lastRange,r=n&&0===n.length?n.index:void 0;G.call(this,(()=>this.editor.update(null,e,r)),t)}));let i=this.clipboard.convert(`<div class='ql-editor' style="white-space: normal;">${n}<p><br></p></div>`);this.setContents(i),this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable()}addContainer(t,e=null){if("string"==typeof t){let e=t;(t=document.createElement("div")).classList.add(e)}return this.container.insertBefore(t,e),t}blur(){this.selection.setRange(null)}deleteText(t,e,n){return[t,e,,n]=X(t,e,n),G.call(this,(()=>this.editor.deleteText(t,e)),n,t,-1*e)}disable(){this.enable(!1)}enable(t=!0){this.scroll.enable(t),this.container.classList.toggle("ql-disabled",!t)}focus(){let t=this.scrollingContainer.scrollTop;this.selection.focus(),this.scrollingContainer.scrollTop=t,this.scrollIntoView()}format(t,e,n=M.sources.API){return G.call(this,(()=>{let n=this.getSelection(!0),i=new(o());if(null==n)return i;if(r().query(t,r().Scope.BLOCK))i=this.editor.formatLine(n.index,n.length,{[t]:e});else{if(0===n.length)return this.selection.format(t,e),i;i=this.editor.formatText(n.index,n.length,{[t]:e})}return this.setSelection(n,M.sources.SILENT),i}),n)}formatLine(t,e,n,r,i){let o;return[t,e,o,i]=X(t,e,n,r,i),G.call(this,(()=>this.editor.formatLine(t,e,o)),i,t,0)}formatText(t,e,n,r,i){let o;return[t,e,o,i]=X(t,e,n,r,i),G.call(this,(()=>this.editor.formatText(t,e,o)),i,t,0)}getBounds(t,e=0){let n;n="number"==typeof t?this.selection.getBounds(t,e):this.selection.getBounds(t.index,t.length);let r=this.container.getBoundingClientRect();return{bottom:n.bottom-r.top,height:n.height,left:n.left-r.left,right:n.right-r.left,top:n.top-r.top,width:n.width}}getContents(t=0,e=this.getLength()-t){return[t,e]=X(t,e),this.editor.getContents(t,e)}getFormat(t=this.getSelection(!0),e=0){return"number"==typeof t?this.editor.getFormat(t,e):this.editor.getFormat(t.index,t.length)}getIndex(t){return t.offset(this.scroll)}getLength(){return this.scroll.length()}getLeaf(t){return this.scroll.leaf(t)}getLine(t){return this.scroll.line(t)}getLines(t=0,e=Number.MAX_VALUE){return"number"!=typeof t?this.scroll.lines(t.index,t.length):this.scroll.lines(t,e)}getModule(t){return this.theme.modules[t]}getSelection(t=!1){return t&&this.focus(),this.update(),this.selection.getRange()[0]}getText(t=0,e=this.getLength()-t){return[t,e]=X(t,e),this.editor.getText(t,e)}hasFocus(){return this.selection.hasFocus()}insertEmbed(t,e,n,r=Z.sources.API){return G.call(this,(()=>this.editor.insertEmbed(t,e,n)),r,t)}insertText(t,e,n,r,i){let o;return[t,,o,i]=X(t,0,n,r,i),G.call(this,(()=>this.editor.insertText(t,e,o)),i,t,e.length)}isEnabled(){return!this.container.classList.contains("ql-disabled")}off(){return this.emitter.off.apply(this.emitter,arguments)}on(){return this.emitter.on.apply(this.emitter,arguments)}once(){return this.emitter.once.apply(this.emitter,arguments)}pasteHTML(t,e,n){this.clipboard.dangerouslyPasteHTML(t,e,n)}removeFormat(t,e,n){return[t,e,,n]=X(t,e,n),G.call(this,(()=>this.editor.removeFormat(t,e)),n,t)}scrollIntoView(){this.selection.scrollIntoView(this.scrollingContainer)}setContents(t,e=M.sources.API){return G.call(this,(()=>{t=new(o())(t);let e=this.getLength(),n=this.editor.deleteText(0,e),r=this.editor.applyDelta(t),i=r.ops[r.ops.length-1];return null!=i&&"string"==typeof i.insert&&"\n"===i.insert[i.insert.length-1]&&(this.editor.deleteText(this.getLength()-1,1),r.delete(1)),n.compose(r)}),e)}setSelection(t,e,n){null==t?this.selection.setRange(null,e||Z.sources.API):([t,e,,n]=X(t,e,n),this.selection.setRange(new W(t,e),n),n!==M.sources.SILENT&&this.selection.scrollIntoView(this.scrollingContainer))}setText(t,e=M.sources.API){let n=(new(o())).insert(t);return this.setContents(n,e)}update(t=M.sources.USER){let e=this.scroll.update(t);return this.selection.update(t),e}updateContents(t,e=M.sources.API){return G.call(this,(()=>(t=new(o())(t),this.editor.applyDelta(t,e))),e,!0)}}function G(t,e,n,r){if(this.options.strict&&!this.isEnabled()&&e===M.sources.USER)return new(o());let i=null==n?null:this.getSelection(),l=this.editor.delta,s=t();if(null!=i&&(!0===n&&(n=i.index),null==r?i=J(i,s,e):0!==r&&(i=J(i,n,r,e)),this.setSelection(i,M.sources.SILENT)),s.length()>0){let t=[M.events.TEXT_CHANGE,s,l,e];this.emitter.emit(M.events.EDITOR_CHANGE,...t),e!==M.sources.SILENT&&this.emitter.emit(...t)}return s}function X(t,e,n,r,i){let o={};return"number"==typeof t.index&&"number"==typeof t.length?"number"!=typeof e?(i=r,r=n,n=e,e=t.length,t=t.index):(e=t.length,t=t.index):"number"!=typeof e&&(i=r,r=n,n=e,e=0),"object"==typeof n?(o=n,i=r):"string"==typeof n&&(null!=r?o[n]=r:i=n),[t,e,o,i=i||M.sources.API]}function J(t,e,n,r){if(null==t)return null;let i,l;return e instanceof o()?[i,l]=[t.index,t.index+t.length].map((function(t){return e.transformPosition(t,r!==M.sources.USER)})):[i,l]=[t.index,t.index+t.length].map((function(t){return t<e||t===e&&r===M.sources.USER?t:n>=0?t+n:Math.max(e,t+n)})),new W(i,l-i)}Z.DEFAULTS={bounds:null,formats:null,modules:{},placeholder:"",readOnly:!1,scrollingContainer:null,strict:!0,theme:"default"},Z.events=M.events,Z.sources=M.sources,Z.version="undefined"==typeof QUILL_VERSION?"dev":QUILL_VERSION,Z.imports={delta:o(),parchment:r(),"core/module":D,"core/theme":V};class Q extends r().Container{}Q.allowedChildren=[g,q,Q];const tt=Q,et="\ufeff";class nt extends r().Embed{constructor(t){super(t),this.contentNode=document.createElement("span"),this.contentNode.setAttribute("contenteditable",!1),[].slice.call(this.domNode.childNodes).forEach((t=>{this.contentNode.appendChild(t)})),this.leftGuard=document.createTextNode(et),this.rightGuard=document.createTextNode(et),this.domNode.appendChild(this.leftGuard),this.domNode.appendChild(this.contentNode),this.domNode.appendChild(this.rightGuard)}index(t,e){return t===this.leftGuard?0:t===this.rightGuard?1:super.index(t,e)}restore(t){let e,n,i=t.data.split(et).join("");if(t===this.leftGuard)if(this.prev instanceof h){let t=this.prev.length();this.prev.insertAt(t,i),e={startNode:this.prev.domNode,startOffset:t+i.length}}else n=document.createTextNode(i),this.parent.insertBefore(r().create(n),this),e={startNode:n,startOffset:i.length};else t===this.rightGuard&&(this.next instanceof h?(this.next.insertAt(0,i),e={startNode:this.next.domNode,startOffset:i.length}):(n=document.createTextNode(i),this.parent.insertBefore(r().create(n),this.next),e={startNode:n,startOffset:i.length}));return t.data=et,e}update(t,e){t.forEach((t=>{if("characterData"===t.type&&(t.target===this.leftGuard||t.target===this.rightGuard)){let n=this.restore(t.target);n&&(e.range=n)}}))}}const rt=nt;function it(t){return t instanceof g||t instanceof q}class ot extends r().Scroll{constructor(t,e){super(t),this.emitter=e.emitter,Array.isArray(e.whitelist)&&(this.whitelist=e.whitelist.reduce((function(t,e){return t[e]=!0,t}),{})),this.domNode.addEventListener("DOMNodeInserted",(function(){})),this.optimize(),this.enable()}batchStart(){this.batch=!0}batchEnd(){this.batch=!1,this.optimize()}deleteAt(t,e){let[n,r]=this.line(t),[i]=this.line(t+e);if(super.deleteAt(t,e),null!=i&&n!==i&&r>0){if(n instanceof q||i instanceof q)return void this.optimize();if(n instanceof y){let t=n.newlineIndex(n.length(),!0);if(t>-1&&(n=n.split(t+1),n===i))return void this.optimize()}else if(i instanceof y){let t=i.newlineIndex(0);t>-1&&i.split(t+1)}let t=i.children.head instanceof d?null:i.children.head;n.moveChildren(i,t),n.remove()}this.optimize()}enable(t=!0){this.domNode.setAttribute("contenteditable",t)}formatAt(t,e,n,r){(null==this.whitelist||this.whitelist[n])&&(super.formatAt(t,e,n,r),this.optimize())}insertAt(t,e,n){if(null==n||null==this.whitelist||this.whitelist[e]){if(t>=this.length())if(null==n||null==r().query(e,r().Scope.BLOCK)){let t=r().create(this.statics.defaultChild);this.appendChild(t),null==n&&e.endsWith("\n")&&(e=e.slice(0,-1)),t.insertAt(0,e,n)}else{let t=r().create(e,n);this.appendChild(t)}else super.insertAt(t,e,n);this.optimize()}}insertBefore(t,e){if(t.statics.scope===r().Scope.INLINE_BLOT){let e=r().create(this.statics.defaultChild);e.appendChild(t),t=e}super.insertBefore(t,e)}leaf(t){return this.path(t).pop()||[null,-1]}line(t){return t===this.length()?this.line(t-1):this.descendant(it,t)}lines(t=0,e=Number.MAX_VALUE){let n=(t,e,i)=>{let o=[],l=i;return t.children.forEachAt(e,i,(function(t,e,i){it(t)?o.push(t):t instanceof r().Container&&(o=o.concat(n(t,e,l))),l-=i})),o};return n(this,t,e)}optimize(t=[],e={}){!0!==this.batch&&(super.optimize(t,e),t.length>0&&this.emitter.emit(M.events.SCROLL_OPTIMIZE,t,e))}path(t){return super.path(t).slice(1)}update(t){if(!0===this.batch)return;let e=M.sources.USER;"string"==typeof t&&(e=t),Array.isArray(t)||(t=this.observer.takeRecords()),t.length>0&&this.emitter.emit(M.events.SCROLL_BEFORE_UPDATE,e,t),super.update(t.concat([])),t.length>0&&this.emitter.emit(M.events.SCROLL_UPDATE,e,t)}}ot.blotName="scroll",ot.className="ql-editor",ot.tagName="DIV",ot.defaultChild="block",ot.allowedChildren=[g,q,tt];const lt=ot;let st={scope:r().Scope.BLOCK,whitelist:["right","center","justify"]},at=new(r().Attributor.Attribute)("align","align",st),ct=new(r().Attributor.Class)("align","ql-align",st),ut=new(r().Attributor.Style)("align","text-align",st);class dt extends r().Attributor.Style{value(t){let e=super.value(t);return e.startsWith("rgb(")?(e=e.replace(/^[^\d]+/,"").replace(/[^\d]+$/,""),"#"+e.split(",").map((function(t){return("00"+parseInt(t).toString(16)).slice(-2)})).join("")):e}}let pt=new(r().Attributor.Class)("color","ql-color",{scope:r().Scope.INLINE}),ht=new dt("color","color",{scope:r().Scope.INLINE}),ft=new(r().Attributor.Class)("background","ql-bg",{scope:r().Scope.INLINE}),At=new dt("background","background-color",{scope:r().Scope.INLINE}),qt={scope:r().Scope.BLOCK,whitelist:["rtl"]},gt=new(r().Attributor.Attribute)("direction","dir",qt),mt=new(r().Attributor.Class)("direction","ql-direction",qt),bt=new(r().Attributor.Style)("direction","direction",qt),yt={scope:r().Scope.INLINE,whitelist:["serif","monospace"]},Et=new(r().Attributor.Class)("font","ql-font",yt);class Ct extends r().Attributor.Style{value(t){return super.value(t).replace(/["']/g,"")}}let vt=new Ct("font","font-family",yt),wt=new(r().Attributor.Class)("size","ql-size",{scope:r().Scope.INLINE,whitelist:["small","large","huge"]}),Bt=new(r().Attributor.Style)("size","font-size",{scope:r().Scope.INLINE,whitelist:["10px","18px","32px"]}),xt=R("quill:clipboard");const kt="__ql-matcher",Nt=[[Node.TEXT_NODE,function(t,e){let n=t.data;if("O:P"===t.parentNode.tagName)return e.insert(n.trim());if(0===n.trim().length&&t.parentNode.classList.contains("ql-clipboard"))return e;if(!_t(t.parentNode).whiteSpace.startsWith("pre")){let e=function(t,e){return(e=e.replace(/[^\u00a0]/g,"")).length<1&&t?" ":e};n=n.replace(/\r\n/g," ").replace(/\n/g," "),n=n.replace(/\s\s+/g,e.bind(e,!0)),(null==t.previousSibling&&It(t.parentNode)||null!=t.previousSibling&&It(t.previousSibling))&&(n=n.replace(/^\s+/,e.bind(e,!1))),(null==t.nextSibling&&It(t.parentNode)||null!=t.nextSibling&&It(t.nextSibling))&&(n=n.replace(/\s+$/,e.bind(e,!1)))}return e.insert(n)}],[Node.TEXT_NODE,Pt],["br",function(t,e){return jt(e,"\n")||e.insert("\n"),e}],[Node.ELEMENT_NODE,Pt],[Node.ELEMENT_NODE,function(t,e){let n=r().query(t);if(null==n)return e;if(n.prototype instanceof r().Embed){let r={},i=n.value(t);null!=i&&(r[n.blotName]=i,e=(new(o())).insert(r,n.formats(t)))}else"function"==typeof n.formats&&(e=Lt(e,n.blotName,n.formats(t)));return e}],[Node.ELEMENT_NODE,Mt],[Node.ELEMENT_NODE,function(t,e){let n=r().Attributor.Attribute.keys(t),i=r().Attributor.Class.keys(t),o=r().Attributor.Style.keys(t),l={};return n.concat(i).concat(o).forEach((e=>{let n=r().query(e,r().Scope.ATTRIBUTE);null!=n&&(l[n.attrName]=n.value(t),l[n.attrName])||(n=Ot[e],null==n||n.attrName!==e&&n.keyName!==e||(l[n.attrName]=n.value(t)||void 0),n=St[e],null==n||n.attrName!==e&&n.keyName!==e||(n=St[e],l[n.attrName]=n.value(t)||void 0))})),Object.keys(l).length>0&&(e=Lt(e,l)),e}],[Node.ELEMENT_NODE,function(t,e){let n={},r=t.style||{};return r.fontStyle&&"italic"===_t(t).fontStyle&&(n.italic=!0),r.fontWeight&&(_t(t).fontWeight.startsWith("bold")||parseInt(_t(t).fontWeight)>=700)&&(n.bold=!0),Object.keys(n).length>0&&(e=Lt(e,n)),parseFloat(r.textIndent||0)>0&&(e=(new(o())).insert("\t").concat(e)),e}],["li",function(t,e){let n=r().query(t);if(null==n||"list-item"!==n.blotName||!jt(e,"\n"))return e;let i=-1,l=t.parentNode;for(;!l.classList.contains("ql-clipboard");)"list"===(r().query(l)||{}).blotName&&(i+=1),l=l.parentNode;return i<=0?e:e.compose((new(o())).retain(e.length()-1).retain(1,{indent:i}))}],["b",Ut.bind(Ut,"bold")],["i",Ut.bind(Ut,"italic")],["style",function(){return new(o())}]],Ot=[at,gt].reduce((function(t,e){return t[e.keyName]=e,t}),{}),St=[ut,At,ht,bt,vt,Bt].reduce((function(t,e){return t[e.keyName]=e,t}),{});class Tt extends D{constructor(t,e){super(t,e),this.quill.root.addEventListener("paste",this.onPaste.bind(this)),this.container=this.quill.addContainer("ql-clipboard"),this.container.setAttribute("contenteditable",!0),this.container.setAttribute("tabindex",-1),this.matchers=[],Nt.concat(this.options.matchers).forEach((([t,n])=>{(e.matchVisual||n!==Mt)&&this.addMatcher(t,n)}))}addMatcher(t,e){this.matchers.push([t,e])}convert(t){if("string"==typeof t)return this.container.innerHTML=t.replace(/\>\r?\n +\</g,"><"),this.convert();const e=this.quill.getFormat(this.quill.selection.savedRange.index);if(e[y.blotName]){const t=this.container.innerText;return this.container.innerHTML="",(new(o())).insert(t,{[y.blotName]:e[y.blotName]})}let[n,r]=this.prepareMatching(),i=Rt(this.container,n,r);return jt(i,"\n")&&null==i.ops[i.ops.length-1].attributes&&(i=i.compose((new(o())).retain(i.length()-1).delete(1))),xt.log("convert",this.container.innerHTML,i),this.container.innerHTML="",i}dangerouslyPasteHTML(t,e,n=Z.sources.API){if("string"==typeof t)this.quill.setContents(this.convert(t),e),this.quill.setSelection(0,Z.sources.SILENT);else{let r=this.convert(e);this.quill.updateContents((new(o())).retain(t).concat(r),n),this.quill.setSelection(t+r.length(),Z.sources.SILENT)}}onPaste(t){if(t.defaultPrevented||!this.quill.isEnabled())return;let e=this.quill.getSelection(),n=(new(o())).retain(e.index),r=this.quill.scrollingContainer.scrollTop;this.container.focus(),this.quill.selection.update(Z.sources.SILENT),setTimeout((()=>{n=n.concat(this.convert()).delete(e.length),this.quill.updateContents(n,Z.sources.USER),this.quill.setSelection(n.length()-e.length,Z.sources.SILENT),this.quill.scrollingContainer.scrollTop=r,this.quill.focus()}),1)}prepareMatching(){let t=[],e=[];return this.matchers.forEach((n=>{let[r,i]=n;switch(r){case Node.TEXT_NODE:e.push(i);break;case Node.ELEMENT_NODE:t.push(i);break;default:[].forEach.call(this.container.querySelectorAll(r),(t=>{t[kt]=t[kt]||[],t[kt].push(i)}))}})),[t,e]}}function Lt(t,e,n){return"object"==typeof e?Object.keys(e).reduce((function(t,n){return Lt(t,n,e[n])}),t):t.reduce((function(t,r){return r.attributes&&r.attributes[e]?t.push(r):t.insert(r.insert,c()({},{[e]:n},r.attributes))}),new(o()))}function _t(t){if(t.nodeType!==Node.ELEMENT_NODE)return{};const e="__ql-computed-style";return t[e]||(t[e]=window.getComputedStyle(t))}function jt(t,e){let n="";for(let r=t.ops.length-1;r>=0&&n.length<e.length;--r){let e=t.ops[r];if("string"!=typeof e.insert)break;n=e.insert+n}return n.slice(-1*e.length)===e}function It(t){if(0===t.childNodes.length)return!1;let e=_t(t);return["block","list-item"].indexOf(e.display)>-1}function Rt(t,e,n){return t.nodeType===t.TEXT_NODE?n.reduce((function(e,n){return n(t,e)}),new(o())):t.nodeType===t.ELEMENT_NODE?[].reduce.call(t.childNodes||[],((r,i)=>{let o=Rt(i,e,n);return i.nodeType===t.ELEMENT_NODE&&(o=e.reduce((function(t,e){return e(i,t)}),o),o=(i[kt]||[]).reduce((function(t,e){return e(i,t)}),o)),r.concat(o)}),new(o())):new(o())}function Ut(t,e,n){return Lt(n,t,!0)}function Pt(t,e){return jt(e,"\n")||(It(t)||e.length()>0&&t.nextSibling&&It(t.nextSibling))&&e.insert("\n"),e}function Mt(t,e){if(It(t)&&null!=t.nextElementSibling&&!jt(e,"\n\n")){let n=t.offsetHeight+parseFloat(_t(t).marginTop)+parseFloat(_t(t).marginBottom);t.nextElementSibling.offsetTop>t.offsetTop+1.5*n&&e.insert("\n")}return e}Tt.DEFAULTS={matchers:[],matchVisual:!0};class zt extends D{constructor(t,e){super(t,e),this.lastRecorded=0,this.ignoreChange=!1,this.clear(),this.quill.on(Z.events.EDITOR_CHANGE,((t,e,n,r)=>{t!==Z.events.TEXT_CHANGE||this.ignoreChange||(this.options.userOnly&&r!==Z.sources.USER?this.transform(e):this.record(e,n))})),this.quill.keyboard.addBinding({key:"Z",shortKey:!0},this.undo.bind(this)),this.quill.keyboard.addBinding({key:"Z",shortKey:!0,shiftKey:!0},this.redo.bind(this)),/Win/i.test(navigator.platform)&&this.quill.keyboard.addBinding({key:"Y",shortKey:!0},this.redo.bind(this))}change(t,e){if(0===this.stack[t].length)return;let n=this.stack[t].pop();this.stack[e].push(n),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(n[t],Z.sources.USER),this.ignoreChange=!1;let i=function(t){let e=t.reduce((function(t,e){return t+(e.delete||0)}),0),n=t.length()-e;return function(t){let e=t.ops[t.ops.length-1];return null!=e&&(null!=e.insert?"string"==typeof e.insert&&e.insert.endsWith("\n"):null!=e.attributes&&Object.keys(e.attributes).some((function(t){return null!=r().query(t,r().Scope.BLOCK)})))}(t)&&(n-=1),n}(n[t]);this.quill.setSelection(i)}clear(){this.stack={undo:[],redo:[]}}cutoff(){this.lastRecorded=0}record(t,e){if(0===t.ops.length)return;this.stack.redo=[];let n=this.quill.getContents().diff(e),r=Date.now();if(this.lastRecorded+this.options.delay>r&&this.stack.undo.length>0){let e=this.stack.undo.pop();n=n.compose(e.undo),t=e.redo.compose(t)}else this.lastRecorded=r;this.stack.undo.push({redo:t,undo:n}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift()}redo(){this.change("redo","undo")}transform(t){this.stack.undo.forEach((function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)})),this.stack.redo.forEach((function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)}))}undo(){this.change("undo","redo")}}zt.DEFAULTS={delay:1e3,maxStack:100,userOnly:!1};let Dt=R("quill:keyboard");const Ft=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey";class Wt extends D{static match(t,e){return e=Xt(e),!["altKey","ctrlKey","metaKey","shiftKey"].some((function(n){return!!e[n]!==t[n]&&null!==e[n]}))&&e.key===(t.which||t.keyCode)}constructor(t,e){super(t,e),this.bindings={},Object.keys(this.options.bindings).forEach((e=>{("list autofill"!==e||null==t.scroll.whitelist||t.scroll.whitelist.list)&&this.options.bindings[e]&&this.addBinding(this.options.bindings[e])})),this.addBinding({key:Wt.keys.ENTER,shiftKey:null},Kt),this.addBinding({key:Wt.keys.ENTER,metaKey:null,ctrlKey:null,altKey:null},(function(){})),/Firefox/i.test(navigator.userAgent)?(this.addBinding({key:Wt.keys.BACKSPACE},{collapsed:!0},Yt),this.addBinding({key:Wt.keys.DELETE},{collapsed:!0},$t)):(this.addBinding({key:Wt.keys.BACKSPACE},{collapsed:!0,prefix:/^.?$/},Yt),this.addBinding({key:Wt.keys.DELETE},{collapsed:!0,suffix:/^.?$/},$t)),this.addBinding({key:Wt.keys.BACKSPACE},{collapsed:!1},Vt),this.addBinding({key:Wt.keys.DELETE},{collapsed:!1},Vt),this.addBinding({key:Wt.keys.BACKSPACE,altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},Yt),this.listen()}addBinding(t,e={},n={}){let r=Xt(t);if(null==r||null==r.key)return Dt.warn("Attempted to add invalid keyboard binding",r);"function"==typeof e&&(e={handler:e}),"function"==typeof n&&(n={handler:n}),r=c()(r,e,n),this.bindings[r.key]=this.bindings[r.key]||[],this.bindings[r.key].push(r)}listen(){this.quill.root.addEventListener("keydown",(t=>{if(t.defaultPrevented)return;let e=t.which||t.keyCode,n=(this.bindings[e]||[]).filter((function(e){return Wt.match(t,e)}));if(0===n.length)return;let i=this.quill.getSelection();if(null==i||!this.quill.hasFocus())return;let[o,l]=this.quill.getLine(i.index),[s,a]=this.quill.getLeaf(i.index),[c,u]=0===i.length?[s,a]:this.quill.getLeaf(i.index+i.length),d=s instanceof r().Text?s.value().slice(0,a):"",p=c instanceof r().Text?c.value().slice(u):"",h={collapsed:0===i.length,empty:0===i.length&&o.length()<=1,format:this.quill.getFormat(i),offset:l,prefix:d,suffix:p};n.some((t=>{if(null!=t.collapsed&&t.collapsed!==h.collapsed)return!1;if(null!=t.empty&&t.empty!==h.empty)return!1;if(null!=t.offset&&t.offset!==h.offset)return!1;if(Array.isArray(t.format)){if(t.format.every((function(t){return null==h.format[t]})))return!1}else if("object"==typeof t.format&&!Object.keys(t.format).every((function(e){return!0===t.format[e]?null!=h.format[e]:!1===t.format[e]?null==h.format[e]:x()(t.format[e],h.format[e])})))return!1;return!(null!=t.prefix&&!t.prefix.test(h.prefix)||null!=t.suffix&&!t.suffix.test(h.suffix)||!0===t.handler.call(this,i,h))}))&&t.preventDefault()}))}}function Ht(t,e){const n=t===Wt.keys.LEFT?"prefix":"suffix";return{key:t,shiftKey:e,altKey:null,[n]:/^$/,handler:function(n){let i=n.index;t===Wt.keys.RIGHT&&(i+=n.length+1);const[o]=this.quill.getLeaf(i);return!(o instanceof r().Embed&&(t===Wt.keys.LEFT?e?this.quill.setSelection(n.index-1,n.length+1,Z.sources.USER):this.quill.setSelection(n.index-1,Z.sources.USER):e?this.quill.setSelection(n.index,n.length+1,Z.sources.USER):this.quill.setSelection(n.index+n.length+1,Z.sources.USER),1))}}}function Yt(t,e){if(0===t.index||this.quill.getLength()<=1)return;let[n]=this.quill.getLine(t.index),r={};if(0===e.offset){let[e]=this.quill.getLine(t.index-1);if(null!=e&&e.length()>1){let e=n.formats(),i=this.quill.getFormat(t.index-1,1);r=s().attributes.diff(e,i)||{}}}let i=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(e.prefix)?2:1;this.quill.deleteText(t.index-i,i,Z.sources.USER),Object.keys(r).length>0&&this.quill.formatLine(t.index-i,i,r,Z.sources.USER),this.quill.focus()}function $t(t,e){let n=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(e.suffix)?2:1;if(t.index>=this.quill.getLength()-n)return;let r={},i=0,[o]=this.quill.getLine(t.index);if(e.offset>=o.length()-1){let[e]=this.quill.getLine(t.index+1);if(e){let n=o.formats(),l=this.quill.getFormat(t.index,1);r=s().attributes.diff(n,l)||{},i=e.length()}}this.quill.deleteText(t.index,n,Z.sources.USER),Object.keys(r).length>0&&this.quill.formatLine(t.index+i-1,n,r,Z.sources.USER)}function Vt(t){let e=this.quill.getLines(t),n={};if(e.length>1){let t=e[0].formats(),r=e[e.length-1].formats();n=s().attributes.diff(r,t)||{}}this.quill.deleteText(t,Z.sources.USER),Object.keys(n).length>0&&this.quill.formatLine(t.index,1,n,Z.sources.USER),this.quill.setSelection(t.index,Z.sources.SILENT),this.quill.focus()}function Kt(t,e){t.length>0&&this.quill.scroll.deleteAt(t.index,t.length);let n=Object.keys(e.format).reduce((function(t,n){return r().query(n,r().Scope.BLOCK)&&!Array.isArray(e.format[n])&&(t[n]=e.format[n]),t}),{});this.quill.insertText(t.index,"\n",n,Z.sources.USER),this.quill.setSelection(t.index+1,Z.sources.SILENT),this.quill.focus(),Object.keys(e.format).forEach((t=>{null==n[t]&&(Array.isArray(e.format[t])||"link"!==t&&this.quill.format(t,e.format[t],Z.sources.USER))}))}function Zt(t){return{key:Wt.keys.TAB,shiftKey:!t,format:{"code-block":!0},handler:function(e){let n=r().query("code-block"),i=e.index,o=e.length,[l,s]=this.quill.scroll.descendant(n,i);if(null==l)return;let a=this.quill.getIndex(l),c=l.newlineIndex(s,!0)+1,u=l.newlineIndex(a+s+o),d=l.domNode.textContent.slice(c,u).split("\n");s=0,d.forEach(((e,r)=>{t?(l.insertAt(c+s,n.TAB),s+=n.TAB.length,0===r?i+=n.TAB.length:o+=n.TAB.length):e.startsWith(n.TAB)&&(l.deleteAt(c+s,n.TAB.length),s-=n.TAB.length,0===r?i-=n.TAB.length:o-=n.TAB.length),s+=e.length+1})),this.quill.update(Z.sources.USER),this.quill.setSelection(i,o,Z.sources.SILENT)}}}function Gt(t){return{key:t[0].toUpperCase(),shortKey:!0,handler:function(e,n){this.quill.format(t,!n.format[t],Z.sources.USER)}}}function Xt(t){if("string"==typeof t||"number"==typeof t)return Xt({key:t});if("object"==typeof t&&(t=w()(t,!1)),"string"==typeof t.key)if(null!=Wt.keys[t.key.toUpperCase()])t.key=Wt.keys[t.key.toUpperCase()];else{if(1!==t.key.length)return null;t.key=t.key.toUpperCase().charCodeAt(0)}return t.shortKey&&(t[Ft]=t.shortKey,delete t.shortKey),t}Wt.keys={BACKSPACE:8,TAB:9,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46},Wt.DEFAULTS={bindings:{bold:Gt("bold"),italic:Gt("italic"),underline:Gt("underline"),indent:{key:Wt.keys.TAB,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","+1",Z.sources.USER)}},outdent:{key:Wt.keys.TAB,shiftKey:!0,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","-1",Z.sources.USER)}},"outdent backspace":{key:Wt.keys.BACKSPACE,collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler:function(t,e){null!=e.format.indent?this.quill.format("indent","-1",Z.sources.USER):null!=e.format.list&&this.quill.format("list",!1,Z.sources.USER)}},"indent code-block":Zt(!0),"outdent code-block":Zt(!1),"remove tab":{key:Wt.keys.TAB,shiftKey:!0,collapsed:!0,prefix:/\t$/,handler:function(t){this.quill.deleteText(t.index-1,1,Z.sources.USER)}},tab:{key:Wt.keys.TAB,handler:function(t){this.quill.history.cutoff();let e=(new(o())).retain(t.index).delete(t.length).insert("\t");this.quill.updateContents(e,Z.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index+1,Z.sources.SILENT)}},"list empty enter":{key:Wt.keys.ENTER,collapsed:!0,format:["list"],empty:!0,handler:function(t,e){this.quill.format("list",!1,Z.sources.USER),e.format.indent&&this.quill.format("indent",!1,Z.sources.USER)}},"checklist enter":{key:Wt.keys.ENTER,collapsed:!0,format:{list:"checked"},handler:function(t){let[e,n]=this.quill.getLine(t.index),r=c()({},e.formats(),{list:"checked"}),i=(new(o())).retain(t.index).insert("\n",r).retain(e.length()-n-1).retain(1,{list:"unchecked"});this.quill.updateContents(i,Z.sources.USER),this.quill.setSelection(t.index+1,Z.sources.SILENT),this.quill.scrollIntoView()}},"header enter":{key:Wt.keys.ENTER,collapsed:!0,format:["header"],suffix:/^$/,handler:function(t,e){let[n,r]=this.quill.getLine(t.index),i=(new(o())).retain(t.index).insert("\n",e.format).retain(n.length()-r-1).retain(1,{header:null});this.quill.updateContents(i,Z.sources.USER),this.quill.setSelection(t.index+1,Z.sources.SILENT),this.quill.scrollIntoView()}},"list autofill":{key:" ",collapsed:!0,format:{list:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler:function(t,e){let n,r=e.prefix.length,[i,l]=this.quill.getLine(t.index);if(l>r)return!0;switch(e.prefix.trim()){case"[]":case"[ ]":n="unchecked";break;case"[x]":n="checked";break;case"-":case"*":n="bullet";break;default:n="ordered"}this.quill.insertText(t.index," ",Z.sources.USER),this.quill.history.cutoff();let s=(new(o())).retain(t.index-l).delete(r+1).retain(i.length()-2-l).retain(1,{list:n});this.quill.updateContents(s,Z.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index-r,Z.sources.SILENT)}},"code exit":{key:Wt.keys.ENTER,collapsed:!0,format:["code-block"],prefix:/\n\n$/,suffix:/^\s+$/,handler:function(t){const[e,n]=this.quill.getLine(t.index),r=(new(o())).retain(t.index+e.length()-n-2).retain(1,{"code-block":null}).delete(1);this.quill.updateContents(r,Z.sources.USER)}},"embed left":Ht(Wt.keys.LEFT,!1),"embed left shift":Ht(Wt.keys.LEFT,!0),"embed right":Ht(Wt.keys.RIGHT,!1),"embed right shift":Ht(Wt.keys.RIGHT,!0)}},Z.register({"blots/block":g,"blots/block/embed":q,"blots/break":d,"blots/container":tt,"blots/cursor":C,"blots/embed":rt,"blots/inline":A,"blots/scroll":lt,"blots/text":h,"modules/clipboard":Tt,"modules/history":zt,"modules/keyboard":Wt}),r().register(g,d,C,A,lt,h);const Jt=Z;class Qt extends r().Attributor.Class{add(t,e){if("+1"===e||"-1"===e){let n=this.value(t)||0;e="+1"===e?n+1:n-1}return 0===e?(this.remove(t),!0):super.add(t,e)}canAdd(t,e){return super.canAdd(t,e)||super.canAdd(t,parseInt(e))}value(t){return parseInt(super.value(t))||void 0}}let te=new Qt("indent","ql-indent",{scope:r().Scope.BLOCK,whitelist:[1,2,3,4,5,6,7,8]});class ee extends g{}ee.blotName="blockquote",ee.tagName="blockquote";const ne=ee;class re extends g{static formats(t){return this.tagName.indexOf(t.tagName)+1}}re.blotName="header",re.tagName=["H1","H2","H3","H4","H5","H6"];const ie=re;class oe extends g{static formats(t){return t.tagName===this.tagName?void 0:super.formats(t)}format(t,e){t!==le.blotName||e?super.format(t,e):this.replaceWith(r().create(this.statics.scope))}remove(){null==this.prev&&null==this.next?this.parent.remove():super.remove()}replaceWith(t,e){return this.parent.isolate(this.offset(this.parent),this.length()),t===this.parent.statics.blotName?(this.parent.replaceWith(t,e),this):(this.parent.unwrap(),super.replaceWith(t,e))}}oe.blotName="list-item",oe.tagName="LI";class le extends tt{static create(t){let e="ordered"===t?"OL":"UL",n=super.create(e);return"checked"!==t&&"unchecked"!==t||n.setAttribute("data-checked","checked"===t),n}static formats(t){return"OL"===t.tagName?"ordered":"UL"===t.tagName?t.hasAttribute("data-checked")?"true"===t.getAttribute("data-checked")?"checked":"unchecked":"bullet":void 0}constructor(t){super(t);const e=e=>{if(e.target.parentNode!==t)return;let n=this.statics.formats(t),i=r().find(e.target);"checked"===n?i.format("list","unchecked"):"unchecked"===n&&i.format("list","checked")};t.addEventListener("touchstart",e),t.addEventListener("mousedown",e)}format(t,e){this.children.length>0&&this.children.tail.format(t,e)}formats(){return{[this.statics.blotName]:this.statics.formats(this.domNode)}}insertBefore(t,e){if(t instanceof oe)super.insertBefore(t,e);else{let n=null==e?this.length():e.offset(this),r=this.split(n);r.parent.insertBefore(t,r)}}optimize(t){super.optimize(t);let e=this.next;null!=e&&e.prev===this&&e.statics.blotName===this.statics.blotName&&e.domNode.tagName===this.domNode.tagName&&e.domNode.getAttribute("data-checked")===this.domNode.getAttribute("data-checked")&&(e.moveChildren(this),e.remove())}replace(t){if(t.statics.blotName!==this.statics.blotName){let e=r().create(this.statics.defaultChild);t.moveChildren(e),this.appendChild(e)}super.replace(t)}}le.blotName="list",le.scope=r().Scope.BLOCK_BLOT,le.tagName=["OL","UL"],le.defaultChild="list-item",le.allowedChildren=[oe];class se extends A{static create(){return super.create()}static formats(){return!0}optimize(t){super.optimize(t),this.domNode.tagName!==this.statics.tagName[0]&&this.replaceWith(this.statics.blotName)}}se.blotName="bold",se.tagName=["STRONG","B"];const ae=se;class ce extends ae{}ce.blotName="italic",ce.tagName=["EM","I"];const ue=ce;class de extends A{static create(t){let e=super.create(t);return t=this.sanitize(t),e.setAttribute("href",t),e.setAttribute("rel","noopener noreferrer"),e.setAttribute("target","_blank"),e}static formats(t){return t.getAttribute("href")}static sanitize(t){return pe(t,this.PROTOCOL_WHITELIST)?t:this.SANITIZED_URL}format(t,e){if(t!==this.statics.blotName||!e)return super.format(t,e);e=this.constructor.sanitize(e),this.domNode.setAttribute("href",e)}}function pe(t,e){let n=document.createElement("a");n.href=t;let r=n.href.slice(0,n.href.indexOf(":"));return e.indexOf(r)>-1}de.blotName="link",de.tagName="A",de.SANITIZED_URL="about:blank",de.PROTOCOL_WHITELIST=["http","https","mailto","tel"];class he extends A{static create(t){return"super"===t?document.createElement("sup"):"sub"===t?document.createElement("sub"):super.create(t)}static formats(t){return"SUB"===t.tagName?"sub":"SUP"===t.tagName?"super":void 0}}he.blotName="script",he.tagName=["SUB","SUP"];const fe=he;class Ae extends A{}Ae.blotName="strike",Ae.tagName="S";const qe=Ae;class ge extends A{}ge.blotName="underline",ge.tagName="U";const me=ge,be=["alt","height","width"];class ye extends r().Embed{static create(t){let e=super.create(t);return"string"==typeof t&&e.setAttribute("src",this.sanitize(t)),e}static formats(t){return be.reduce((function(e,n){return t.hasAttribute(n)&&(e[n]=t.getAttribute(n)),e}),{})}static match(t){return/\.(jpe?g|gif|png)$/.test(t)||/^data:image\/.+;base64/.test(t)}static sanitize(t){return pe(t,["http","https","data"])?t:"//:0"}static value(t){return t.getAttribute("src")}format(t,e){be.indexOf(t)>-1?e?this.domNode.setAttribute(t,e):this.domNode.removeAttribute(t):super.format(t,e)}}ye.blotName="image",ye.tagName="IMG";const Ee=ye,Ce=["height","width"];class ve extends q{static create(t){let e=super.create(t);return e.setAttribute("frameborder","0"),e.setAttribute("allowfullscreen",!0),e.setAttribute("src",this.sanitize(t)),e}static formats(t){return Ce.reduce((function(e,n){return t.hasAttribute(n)&&(e[n]=t.getAttribute(n)),e}),{})}static sanitize(t){return de.sanitize(t)}static value(t){return t.getAttribute("src")}format(t,e){Ce.indexOf(t)>-1?e?this.domNode.setAttribute(t,e):this.domNode.removeAttribute(t):super.format(t,e)}}ve.blotName="video",ve.className="ql-video",ve.tagName="IFRAME";const we=ve;class Be extends rt{static create(t){let e=super.create(t);return"string"==typeof t&&(window.katex.render(t,e,{throwOnError:!1,errorColor:"#f00"}),e.setAttribute("data-value",t)),e}static value(t){return t.getAttribute("data-value")}}Be.blotName="formula",Be.className="ql-formula",Be.tagName="SPAN";class xe extends y{replaceWith(t){this.domNode.textContent=this.domNode.textContent,this.attach(),super.replaceWith(t)}highlight(t){let e=this.domNode.textContent;this.cachedText!==e&&((e.trim().length>0||null==this.cachedText)&&(this.domNode.innerHTML=t(e),this.domNode.normalize(),this.attach()),this.cachedText=e)}}xe.className="ql-syntax";let ke=new(r().Attributor.Class)("token","hljs",{scope:r().Scope.INLINE});class Ne extends D{static register(){Z.register(ke,!0),Z.register(xe,!0)}constructor(t,e){if(super(t,e),"function"!=typeof this.options.highlight)throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");let n=null;this.quill.on(Z.events.SCROLL_OPTIMIZE,(()=>{clearTimeout(n),n=setTimeout((()=>{this.highlight(),n=null}),this.options.interval)})),this.highlight()}highlight(){if(this.quill.selection.composing)return;this.quill.update(Z.sources.USER);let t=this.quill.getSelection();this.quill.scroll.descendants(xe).forEach((t=>{t.highlight(this.options.highlight)})),this.quill.update(Z.sources.SILENT),null!=t&&this.quill.setSelection(t,Z.sources.SILENT)}}Ne.DEFAULTS={highlight:null==window.hljs?null:function(t){return window.hljs.highlightAuto(t).value},interval:1e3};let Oe=R("quill:toolbar");class Se extends D{constructor(t,e){if(super(t,e),Array.isArray(this.options.container)){let e=document.createElement("div");!function(t,e){Array.isArray(e[0])||(e=[e]),e.forEach((function(e){let n=document.createElement("span");n.classList.add("ql-formats"),e.forEach((function(t){if("string"==typeof t)Te(n,t);else{let e=Object.keys(t)[0],r=t[e];Array.isArray(r)?function(t,e,n){let r=document.createElement("select");r.classList.add("ql-"+e),n.forEach((function(t){let e=document.createElement("option");!1!==t?e.setAttribute("value",t):e.setAttribute("selected","selected"),r.appendChild(e)})),t.appendChild(r)}(n,e,r):Te(n,e,r)}})),t.appendChild(n)}))}(e,this.options.container),t.container.parentNode.insertBefore(e,t.container),this.container=e}else"string"==typeof this.options.container?this.container=document.querySelector(this.options.container):this.container=this.options.container;if(!(this.container instanceof HTMLElement))return Oe.error("Container required for toolbar",this.options);this.container.classList.add("ql-toolbar"),this.controls=[],this.handlers={},Object.keys(this.options.handlers).forEach((t=>{this.addHandler(t,this.options.handlers[t])})),[].forEach.call(this.container.querySelectorAll("button, select"),(t=>{this.attach(t)})),this.quill.on(Z.events.EDITOR_CHANGE,((t,e)=>{t===Z.events.SELECTION_CHANGE&&this.update(e)})),this.quill.on(Z.events.SCROLL_OPTIMIZE,(()=>{let[t]=this.quill.selection.getRange();this.update(t)}))}addHandler(t,e){this.handlers[t]=e}attach(t){let e=[].find.call(t.classList,(t=>0===t.indexOf("ql-")));if(!e)return;if(e=e.slice("ql-".length),"BUTTON"===t.tagName&&t.setAttribute("type","button"),null==this.handlers[e]){if(null!=this.quill.scroll.whitelist&&null==this.quill.scroll.whitelist[e])return void Oe.warn("ignoring attaching to disabled format",e,t);if(null==r().query(e))return void Oe.warn("ignoring attaching to nonexistent format",e,t)}let n="SELECT"===t.tagName?"change":"click";t.addEventListener(n,(n=>{let i;if("SELECT"===t.tagName){if(t.selectedIndex<0)return;let e=t.options[t.selectedIndex];i=!e.hasAttribute("selected")&&(e.value||!1)}else i=!t.classList.contains("ql-active")&&(t.value||!t.hasAttribute("value")),n.preventDefault();this.quill.focus();let[l]=this.quill.selection.getRange();if(null!=this.handlers[e])this.handlers[e].call(this,i);else if(r().query(e).prototype instanceof r().Embed){if(i=prompt(`Enter ${e}`),!i)return;this.quill.updateContents((new(o())).retain(l.index).delete(l.length).insert({[e]:i}),Z.sources.USER)}else this.quill.format(e,i,Z.sources.USER);this.update(l)})),this.controls.push([e,t])}update(t){let e=null==t?{}:this.quill.getFormat(t);this.controls.forEach((function(n){let[r,i]=n;if("SELECT"===i.tagName){let n;if(null==t)n=null;else if(null==e[r])n=i.querySelector("option[selected]");else if(!Array.isArray(e[r])){let t=e[r];"string"==typeof t&&(t=t.replace(/\"/g,'\\"')),n=i.querySelector(`option[value="${t}"]`)}null==n?(i.value="",i.selectedIndex=-1):n.selected=!0}else if(null==t)i.classList.remove("ql-active");else if(i.hasAttribute("value")){let t=e[r]===i.getAttribute("value")||null!=e[r]&&e[r].toString()===i.getAttribute("value")||null==e[r]&&!i.getAttribute("value");i.classList.toggle("ql-active",t)}else i.classList.toggle("ql-active",null!=e[r])}))}}function Te(t,e,n){let r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("ql-"+e),null!=n&&(r.value=n),t.appendChild(r)}Se.DEFAULTS={},Se.DEFAULTS={container:null,handlers:{clean:function(){let t=this.quill.getSelection();if(null!=t)if(0==t.length){let t=this.quill.getFormat();Object.keys(t).forEach((t=>{null!=r().query(t,r().Scope.INLINE)&&this.quill.format(t,!1)}))}else this.quill.removeFormat(t,Z.sources.USER)},direction:function(t){let e=this.quill.getFormat().align;"rtl"===t&&null==e?this.quill.format("align","right",Z.sources.USER):t||"right"!==e||this.quill.format("align",!1,Z.sources.USER),this.quill.format("direction",t,Z.sources.USER)},indent:function(t){let e=this.quill.getSelection(),n=this.quill.getFormat(e),r=parseInt(n.indent||0);if("+1"===t||"-1"===t){let e="+1"===t?1:-1;"rtl"===n.direction&&(e*=-1),this.quill.format("indent",r+e,Z.sources.USER)}},link:function(t){!0===t&&(t=prompt("Enter link URL:")),this.quill.format("link",t,Z.sources.USER)},list:function(t){let e=this.quill.getSelection(),n=this.quill.getFormat(e);"check"===t?"checked"===n.list||"unchecked"===n.list?this.quill.format("list",!1,Z.sources.USER):this.quill.format("list","unchecked",Z.sources.USER):this.quill.format("list",t,Z.sources.USER)}}};var Le=n(33964),_e=n.n(Le),je=n(28777),Ie=n.n(je);let Re=0;function Ue(t,e){t.setAttribute(e,!("true"===t.getAttribute(e)))}const Pe=class{constructor(t){this.select=t,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",(()=>{this.togglePicker()})),this.label.addEventListener("keydown",(t=>{switch(t.keyCode){case Wt.keys.ENTER:this.togglePicker();break;case Wt.keys.ESCAPE:this.escape(),t.preventDefault()}})),this.select.addEventListener("change",this.update.bind(this))}togglePicker(){this.container.classList.toggle("ql-expanded"),Ue(this.label,"aria-expanded"),Ue(this.options,"aria-hidden")}buildItem(t){let e=document.createElement("span");return e.tabIndex="0",e.setAttribute("role","button"),e.classList.add("ql-picker-item"),t.hasAttribute("value")&&e.setAttribute("data-value",t.getAttribute("value")),t.textContent&&e.setAttribute("data-label",t.textContent),e.addEventListener("click",(()=>{this.selectItem(e,!0)})),e.addEventListener("keydown",(t=>{switch(t.keyCode){case Wt.keys.ENTER:this.selectItem(e,!0),t.preventDefault();break;case Wt.keys.ESCAPE:this.escape(),t.preventDefault()}})),e}buildLabel(){let t=document.createElement("span");return t.classList.add("ql-picker-label"),t.innerHTML=Ie(),t.tabIndex="0",t.setAttribute("role","button"),t.setAttribute("aria-expanded","false"),this.container.appendChild(t),t}buildOptions(){let t=document.createElement("span");t.classList.add("ql-picker-options"),t.setAttribute("aria-hidden","true"),t.tabIndex="-1",t.id=`ql-picker-options-${Re}`,Re+=1,this.label.setAttribute("aria-controls",t.id),this.options=t,[].slice.call(this.select.options).forEach((e=>{let n=this.buildItem(e);t.appendChild(n),!0===e.selected&&this.selectItem(n)})),this.container.appendChild(t)}buildPicker(){[].slice.call(this.select.attributes).forEach((t=>{this.container.setAttribute(t.name,t.value)})),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}escape(){this.close(),setTimeout((()=>this.label.focus()),1)}close(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}selectItem(t,e=!1){let n=this.container.querySelector(".ql-selected");if(t!==n&&(null!=n&&n.classList.remove("ql-selected"),null!=t&&(t.classList.add("ql-selected"),this.select.selectedIndex=[].indexOf.call(t.parentNode.children,t),t.hasAttribute("data-value")?this.label.setAttribute("data-value",t.getAttribute("data-value")):this.label.removeAttribute("data-value"),t.hasAttribute("data-label")?this.label.setAttribute("data-label",t.getAttribute("data-label")):this.label.removeAttribute("data-label"),e))){if("function"==typeof Event)this.select.dispatchEvent(new Event("change"));else if("object"==typeof Event){let t=document.createEvent("Event");t.initEvent("change",!0,!0),this.select.dispatchEvent(t)}this.close()}}update(){let t;if(this.select.selectedIndex>-1){let e=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];t=this.select.options[this.select.selectedIndex],this.selectItem(e)}else this.selectItem(null);let e=null!=t&&t!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",e)}},Me=class extends Pe{constructor(t,e){super(t),this.label.innerHTML=e,this.container.classList.add("ql-color-picker"),[].slice.call(this.container.querySelectorAll(".ql-picker-item"),0,7).forEach((function(t){t.classList.add("ql-primary")}))}buildItem(t){let e=super.buildItem(t);return e.style.backgroundColor=t.getAttribute("value")||"",e}selectItem(t,e){super.selectItem(t,e);let n=this.label.querySelector(".ql-color-label"),r=t&&t.getAttribute("data-value")||"";n&&("line"===n.tagName?n.style.stroke=r:n.style.fill=r)}},ze=class extends Pe{constructor(t,e){super(t),this.container.classList.add("ql-icon-picker"),[].forEach.call(this.container.querySelectorAll(".ql-picker-item"),(t=>{t.innerHTML=e[t.getAttribute("data-value")||""]})),this.defaultItem=this.container.querySelector(".ql-selected"),this.selectItem(this.defaultItem)}selectItem(t,e){super.selectItem(t,e),t=t||this.defaultItem,this.label.innerHTML=t.innerHTML}},De=class{constructor(t,e){this.quill=t,this.boundsContainer=e||document.body,this.root=t.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,this.quill.root===this.quill.scrollingContainer&&this.quill.root.addEventListener("scroll",(()=>{this.root.style.marginTop=-1*this.quill.root.scrollTop+"px"})),this.hide()}hide(){this.root.classList.add("ql-hidden")}position(t){let e=t.left+t.width/2-this.root.offsetWidth/2,n=t.bottom+this.quill.root.scrollTop;this.root.style.left=e+"px",this.root.style.top=n+"px",this.root.classList.remove("ql-flip");let r=this.boundsContainer.getBoundingClientRect(),i=this.root.getBoundingClientRect(),o=0;if(i.right>r.right&&(o=r.right-i.right,this.root.style.left=e+o+"px"),i.left<r.left&&(o=r.left-i.left,this.root.style.left=e+o+"px"),i.bottom>r.bottom){let e=i.bottom-i.top,r=t.bottom-t.top+e;this.root.style.top=n-r+"px",this.root.classList.add("ql-flip")}return o}show(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}},Fe=[!1,"center","right","justify"],We=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],He=[!1,"serif","monospace"],Ye=["1","2","3",!1],$e=["small",!1,"large","huge"];class Ve extends V{constructor(t,e){super(t,e);let n=e=>{if(!document.body.contains(t.root))return document.body.removeEventListener("click",n);null==this.tooltip||this.tooltip.root.contains(e.target)||document.activeElement===this.tooltip.textbox||this.quill.hasFocus()||this.tooltip.hide(),null!=this.pickers&&this.pickers.forEach((function(t){t.container.contains(e.target)||t.close()}))};t.emitter.listenDOM("click",document.body,n)}addModule(t){let e=super.addModule(t);return"toolbar"===t&&this.extendToolbar(e),e}buildButtons(t,e){t.forEach((t=>{(t.getAttribute("class")||"").split(/\s+/).forEach((n=>{if(n.startsWith("ql-")&&(n=n.slice("ql-".length),null!=e[n]))if("direction"===n)t.innerHTML=e[n][""]+e[n].rtl;else if("string"==typeof e[n])t.innerHTML=e[n];else{let r=t.value||"";null!=r&&e[n][r]&&(t.innerHTML=e[n][r])}}))}))}buildPickers(t,e){this.pickers=t.map((t=>{if(t.classList.contains("ql-align"))return null==t.querySelector("option")&&Ze(t,Fe),new ze(t,e.align);if(t.classList.contains("ql-background")||t.classList.contains("ql-color")){let n=t.classList.contains("ql-background")?"background":"color";return null==t.querySelector("option")&&Ze(t,We,"background"===n?"#ffffff":"#000000"),new Me(t,e[n])}return null==t.querySelector("option")&&(t.classList.contains("ql-font")?Ze(t,He):t.classList.contains("ql-header")?Ze(t,Ye):t.classList.contains("ql-size")&&Ze(t,$e)),new Pe(t)})),this.quill.on(M.events.EDITOR_CHANGE,(()=>{this.pickers.forEach((function(t){t.update()}))}))}}Ve.DEFAULTS=c()(!0,{},V.DEFAULTS,{modules:{toolbar:{handlers:{formula:function(){this.quill.theme.tooltip.edit("formula")},image:function(){let t=this.container.querySelector("input.ql-image[type=file]");null==t&&(t=document.createElement("input"),t.setAttribute("type","file"),t.setAttribute("accept","image/png, image/gif, image/jpeg, image/bmp, image/x-icon"),t.classList.add("ql-image"),t.addEventListener("change",(()=>{if(null!=t.files&&null!=t.files[0]){let e=new FileReader;e.onload=e=>{let n=this.quill.getSelection(!0);this.quill.updateContents((new(o())).retain(n.index).delete(n.length).insert({image:e.target.result}),M.sources.USER),this.quill.setSelection(n.index+1,M.sources.SILENT),t.value=""},e.readAsDataURL(t.files[0])}})),this.container.appendChild(t)),t.click()},video:function(){this.quill.theme.tooltip.edit("video")}}}}});class Ke extends De{constructor(t,e){super(t,e),this.textbox=this.root.querySelector('input[type="text"]'),this.listen()}listen(){this.textbox.addEventListener("keydown",(t=>{Wt.match(t,"enter")?(this.save(),t.preventDefault()):Wt.match(t,"escape")&&(this.cancel(),t.preventDefault())}))}cancel(){this.hide()}edit(t="link",e=null){this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),null!=e?this.textbox.value=e:t!==this.root.getAttribute("data-mode")&&(this.textbox.value=""),this.position(this.quill.getBounds(this.quill.selection.savedRange)),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute(`data-${t}`)||""),this.root.setAttribute("data-mode",t)}restoreFocus(){let t=this.quill.scrollingContainer.scrollTop;this.quill.focus(),this.quill.scrollingContainer.scrollTop=t}save(){let t=this.textbox.value;switch(this.root.getAttribute("data-mode")){case"link":{let e=this.quill.root.scrollTop;this.linkRange?(this.quill.formatText(this.linkRange,"link",t,M.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",t,M.sources.USER)),this.quill.root.scrollTop=e;break}case"video":t=function(t){let e=t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);return e?(e[1]||"https")+"://www.youtube.com/embed/"+e[2]+"?showinfo=0":(e=t.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))?(e[1]||"https")+"://player.vimeo.com/video/"+e[2]+"/":t}(t);case"formula":{if(!t)break;let e=this.quill.getSelection(!0);if(null!=e){let n=e.index+e.length;this.quill.insertEmbed(n,this.root.getAttribute("data-mode"),t,M.sources.USER),"formula"===this.root.getAttribute("data-mode")&&this.quill.insertText(n+1," ",M.sources.USER),this.quill.setSelection(n+2,M.sources.USER)}break}}this.textbox.value="",this.hide()}}function Ze(t,e,n=!1){e.forEach((function(e){let r=document.createElement("option");e===n?r.setAttribute("selected","selected"):r.setAttribute("value",e),t.appendChild(r)}))}const Ge=[["bold","italic","link"],[{header:1},{header:2},"blockquote"]];class Xe extends Ve{constructor(t,e){null!=e.modules.toolbar&&null==e.modules.toolbar.container&&(e.modules.toolbar.container=Ge),super(t,e),this.quill.container.classList.add("ql-bubble")}extendToolbar(t){this.tooltip=new Je(this.quill,this.options.bounds),this.tooltip.root.appendChild(t.container),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),_e()),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),_e())}}Xe.DEFAULTS=c()(!0,{},Ve.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){t?this.quill.theme.tooltip.edit():this.quill.format("link",!1)}}}}});class Je extends Ke{constructor(t,e){super(t,e),this.quill.on(M.events.EDITOR_CHANGE,((t,e,n,r)=>{if(t===M.events.SELECTION_CHANGE)if(null!=e&&e.length>0&&r===M.sources.USER){this.show(),this.root.style.left="0px",this.root.style.width="",this.root.style.width=this.root.offsetWidth+"px";let t=this.quill.getLines(e.index,e.length);if(1===t.length)this.position(this.quill.getBounds(e));else{let n=t[t.length-1],r=this.quill.getIndex(n),i=Math.min(n.length()-1,e.index+e.length-r),o=this.quill.getBounds(new W(r,i));this.position(o)}}else document.activeElement!==this.textbox&&this.quill.hasFocus()&&this.hide()}))}listen(){super.listen(),this.root.querySelector(".ql-close").addEventListener("click",(()=>{this.root.classList.remove("ql-editing")})),this.quill.on(M.events.SCROLL_OPTIMIZE,(()=>{setTimeout((()=>{if(this.root.classList.contains("ql-hidden"))return;let t=this.quill.getSelection();null!=t&&this.position(this.quill.getBounds(t))}),1)}))}cancel(){this.show()}position(t){let e=super.position(t),n=this.root.querySelector(".ql-tooltip-arrow");if(n.style.marginLeft="",0===e)return e;n.style.marginLeft=-1*e-n.offsetWidth/2+"px"}}Je.TEMPLATE=['<span class="ql-tooltip-arrow"></span>','<div class="ql-tooltip-editor">','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-close"></a>',"</div>"].join("");const Qe=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]];class tn extends Ve{constructor(t,e){null!=e.modules.toolbar&&null==e.modules.toolbar.container&&(e.modules.toolbar.container=Qe),super(t,e),this.quill.container.classList.add("ql-snow")}extendToolbar(t){t.container.classList.add("ql-snow"),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),_e()),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),_e()),this.tooltip=new en(this.quill,this.options.bounds),t.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"K",shortKey:!0},(function(e,n){t.handlers.link.call(t,!n.format.link)}))}}tn.DEFAULTS=c()(!0,{},Ve.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){if(t){let t=this.quill.getSelection();if(null==t||0==t.length)return;let e=this.quill.getText(t);/^\S+@\S+\.\S+$/.test(e)&&0!==e.indexOf("mailto:")&&(e="mailto:"+e),this.quill.theme.tooltip.edit("link",e)}else this.quill.format("link",!1)}}}}});class en extends Ke{constructor(t,e){super(t,e),this.preview=this.root.querySelector("a.ql-preview")}listen(){super.listen(),this.root.querySelector("a.ql-action").addEventListener("click",(t=>{this.root.classList.contains("ql-editing")?this.save():this.edit("link",this.preview.textContent),t.preventDefault()})),this.root.querySelector("a.ql-remove").addEventListener("click",(t=>{if(null!=this.linkRange){let t=this.linkRange;this.restoreFocus(),this.quill.formatText(t,"link",!1,M.sources.USER),delete this.linkRange}t.preventDefault(),this.hide()})),this.quill.on(M.events.SELECTION_CHANGE,((t,e,n)=>{if(null!=t){if(0===t.length&&n===M.sources.USER){let[e,n]=this.quill.scroll.descendant(de,t.index);if(null!=e){this.linkRange=new W(t.index-n,e.length());let r=de.formats(e.domNode);return this.preview.textContent=r,this.preview.setAttribute("href",r),this.show(),void this.position(this.quill.getBounds(this.linkRange))}}else delete this.linkRange;this.hide()}}))}show(){super.show(),this.root.removeAttribute("data-mode")}}en.TEMPLATE=['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join("");const nn=tn;Jt.register({"attributors/attribute/direction":gt,"attributors/class/align":ct,"attributors/class/background":ft,"attributors/class/color":pt,"attributors/class/direction":mt,"attributors/class/font":Et,"attributors/class/size":wt,"attributors/style/align":ut,"attributors/style/background":At,"attributors/style/color":ht,"attributors/style/direction":bt,"attributors/style/font":vt,"attributors/style/size":Bt},!0),Jt.register({"formats/align":ct,"formats/direction":mt,"formats/indent":te,"formats/background":At,"formats/color":ht,"formats/font":Et,"formats/size":wt,"formats/blockquote":ne,"formats/code-block":y,"formats/header":ie,"formats/list":le,"formats/bold":ae,"formats/code":b,"formats/italic":ue,"formats/link":de,"formats/script":fe,"formats/strike":qe,"formats/underline":me,"formats/image":Ee,"formats/video":we,"formats/list/item":oe,"modules/formula":class extends D{static register(){Z.register(Be,!0)}constructor(){if(super(),null==window.katex)throw new Error("Formula module requires KaTeX.")}},"modules/syntax":Ne,"modules/toolbar":Se,"themes/bubble":Xe,"themes/snow":nn,"ui/icons":_e(),"ui/picker":Pe,"ui/icon-picker":ze,"ui/color-picker":Me,"ui/tooltip":De},!0);var rn=n(93379),on=n.n(rn),ln=n(85525);on()(ln.Z,{insert:"head",singleton:!1}),ln.Z.locals;var sn=n(47066);on()(sn.Z,{insert:"head",singleton:!1}),sn.Z.locals;var an,cn=n(51284),un=n.n(cn),dn=(an=function(t,e){return(an=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}an(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),pn=function(){return(pn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},hn=function(t,e){for(var n=0,r=e.length,i=t.length;n<r;n++,i++)t[i]=e[n];return t};new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return dn(e,t),e.prototype.onFillWindow=function(t,e,n,r){var i=e.querySelector("#editor_"+this.name+"_div");i.style.padding="8px 0px 0px 8px",i.style.backgroundColor="white";var o=this.getShapeValue(t,r);this.component=new Jt("#editor_"+this.name+"_div",pn({modules:pn({toolbar:hn([[{font:[]},{size:[]}],["bold","italic","underline","strike"],[{header:"1"},{header:"2"},"blockquote","code-block"],[{color:[]},{background:[]}],[{list:"ordered"},{list:"bullet"},{indent:"-1"},{indent:"+1"}],[{align:[]}],["link","image","video"],[{script:"super"},{script:"sub"}],["clean"]],this.options.config.extra_toolbar)},this.options.config.extra_modules),placeholder:"Compose an epic...",theme:"snow"},this.options.config)),this.component.root.innerHTML=o},e.prototype.onShowWindow=function(e,n,r,i){t.prototype.onShowWindow.call(this,e,n,r,i)},e.prototype.getEditorValue=function(t,e,n){return r=this,i=void 0,l=function(){return function(t,e){var n,r,i,o,l={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,r=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((i=(i=l.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){l.label=o[1];break}if(6===o[0]&&l.label<i[1]){l.label=i[1],i=o;break}if(i&&l.label<i[2]){l.label=i[2],l.ops.push(o);break}i[2]&&l.ops.pop(),l.trys.pop();continue}o=e.call(t,l)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(t){return[2,this.component.root.innerHTML]}))},new((o=void 0)||(o=Promise))((function(t,e){function n(t){try{a(l.next(t))}catch(t){e(t)}}function s(t){try{a(l.throw(t))}catch(t){e(t)}}function a(e){var r;e.done?t(e.value):(r=e.value,r instanceof o?r:new o((function(t){t(r)}))).then(n,s)}a((l=l.apply(r,i||[])).next())}));var r,i,o,l},e.prototype.setDefaultsPaletteItem=function(e){e.width||(e.width=50),e.height||(e.height=20),e.icon||e.data||(e.icon="image/svg+xml,"+btoa(un())),e.node||e.data||(e.node="<editor />"),e.text||e.data||(e.text="Default"),t.prototype.setDefaultsPaletteItem.call(this,e)},e}(t.H))("quill",{attributeName:"quillData",contextual:"Edit HTML with Quill",title:"Quill Editor",paletteItems:[{name:"quill",label:"Quill",palette:{name:"editors",label:"Editors"},style:"collapsable=0;"}]})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvYXNzZXJ0L2Fzc2VydC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvYXNzZXJ0L25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9hc3NlcnQvbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2NhbGxCb3VuZC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9jb25zb2xlLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Rpc3QvcXVpbGwuY29yZS5jc3MiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Rpc3QvcXVpbGwuc25vdy5jc3MiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvZGVlcC1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvY2pzLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9kZWZpbmUtcHJvcGVydGllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvZXh0ZW5kL2luZGV4LmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9mYXN0LWRpZmYvZGlmZi5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvZ2V0LWludHJpbnNpYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9oYXMvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9pcy1hcmd1bWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL2lzLWRhdGUtb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9pcy1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3BhcmNobWVudC9kaXN0L3BhcmNobWVudC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC1kZWx0YS9saWIvZGVsdGEuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsLWRlbHRhL2xpYi9vcC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvY29yZS9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvbm9kZV9tb2R1bGVzL2Nsb25lL2Nsb25lLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvdWkvaWNvbnMuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3MvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3MvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3Mvc2hpbS5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9hbGlnbi1jZW50ZXIuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvYWxpZ24tanVzdGlmeS5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9hbGlnbi1sZWZ0LnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2FsaWduLXJpZ2h0LnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2JhY2tncm91bmQuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvYmxvY2txdW90ZS5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9ib2xkLnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2NsZWFuLnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2NvZGUuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvY29sb3Iuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvZGlyZWN0aW9uLWx0ci5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9kaXJlY3Rpb24tcnRsLnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2Ryb3Bkb3duLnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2Zsb2F0LWNlbnRlci5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9mbG9hdC1mdWxsLnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2Zsb2F0LWxlZnQuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvZmxvYXQtcmlnaHQuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvZm9ybXVsYS5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9oZWFkZXItMi5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9oZWFkZXIuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvaW1hZ2Uuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvaW5kZW50LnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2l0YWxpYy5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9saW5rLnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2xpc3QtYnVsbGV0LnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2xpc3QtY2hlY2suc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvbGlzdC1vcmRlcmVkLnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL291dGRlbnQuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvc3RyaWtlLnN2ZyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL3N1YnNjcmlwdC5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9zdXBlcnNjcmlwdC5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy91bmRlcmxpbmUuc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvdmlkZW8uc3ZnIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL3NyYy9xdWlsbC9xdWlsbC5zdmciLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyL2V4dGVybmFsIFwid2luZG93XCIiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vc3JjL2VkaXRvci1jb21tb24udHMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3V0aWwvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Jsb3RzL2JyZWFrLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9ibG90cy90ZXh0LmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9ibG90cy9pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Jsb3RzL2Jsb2NrLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2NvZGUuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Jsb3RzL2N1cnNvci5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvY29yZS9lZGl0b3IuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2NvcmUvbG9nZ2VyLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9jb3JlL2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2NvcmUvbW9kdWxlLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9jb3JlL3NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvY29yZS90aGVtZS5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvY29yZS9xdWlsbC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYmxvdHMvY29udGFpbmVyLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9ibG90cy9lbWJlZC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvYmxvdHMvc2Nyb2xsLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2FsaWduLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2NvbG9yLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2JhY2tncm91bmQuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvZGlyZWN0aW9uLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2ZvbnQuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvc2l6ZS5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvbW9kdWxlcy9jbGlwYm9hcmQuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL21vZHVsZXMvaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvbW9kdWxlcy9rZXlib2FyZC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvY29yZS5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvZm9ybWF0cy9pbmRlbnQuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvYmxvY2txdW90ZS5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvZm9ybWF0cy9oZWFkZXIuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvbGlzdC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvZm9ybWF0cy9ib2xkLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2l0YWxpYy5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvZm9ybWF0cy9saW5rLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvZm9ybWF0cy9zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvdW5kZXJsaW5lLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2ltYWdlLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL3ZpZGVvLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9tb2R1bGVzL2Zvcm11bGEuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL21vZHVsZXMvc3ludGF4LmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9tb2R1bGVzL3Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL3VpL3BpY2tlci5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvdWkvY29sb3ItcGlja2VyLmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC91aS9pY29uLXBpY2tlci5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvdWkvdG9vbHRpcC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvdGhlbWVzL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL3RoZW1lcy9idWJibGUuanMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vbm9kZV9tb2R1bGVzL3F1aWxsL3RoZW1lcy9zbm93LmpzIiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9xdWlsbC5qcyIsIndlYnBhY2s6Ly9wbHVnaW4tZHJhd2lvLXN3YWdnZXIvLi9ub2RlX21vZHVsZXMvcXVpbGwvZGlzdC9xdWlsbC5jb3JlLmNzcz9mMmQ1Iiwid2VicGFjazovL3BsdWdpbi1kcmF3aW8tc3dhZ2dlci8uL25vZGVfbW9kdWxlcy9xdWlsbC9kaXN0L3F1aWxsLnNub3cuY3NzPzIyNGMiLCJ3ZWJwYWNrOi8vcGx1Z2luLWRyYXdpby1zd2FnZ2VyLy4vc3JjL3F1aWxsL3F1aWxsLXBsdWdpbi50cyJdLCJuYW1lcyI6WyJvYmplY3RBc3NpZ24iLCJjb21wYXJlIiwiYSIsImIiLCJ4IiwibGVuZ3RoIiwieSIsImkiLCJsZW4iLCJNYXRoIiwibWluIiwiaXNCdWZmZXIiLCJnIiwiQnVmZmVyIiwiX2lzQnVmZmVyIiwidXRpbCIsImhhc093biIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicFNsaWNlIiwiQXJyYXkiLCJzbGljZSIsImZ1bmN0aW9uc0hhdmVOYW1lcyIsIm5hbWUiLCJwVG9TdHJpbmciLCJvYmoiLCJ0b1N0cmluZyIsImNhbGwiLCJpc1ZpZXciLCJhcnJidWYiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiYXNzZXJ0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9rIiwicmVnZXgiLCJnZXROYW1lIiwiZnVuYyIsImlzRnVuY3Rpb24iLCJtYXRjaCIsInRydW5jYXRlIiwicyIsIm4iLCJpbnNwZWN0Iiwic29tZXRoaW5nIiwicmF3bmFtZSIsImZhaWwiLCJhY3R1YWwiLCJleHBlY3RlZCIsIm1lc3NhZ2UiLCJvcGVyYXRvciIsInN0YWNrU3RhcnRGdW5jdGlvbiIsIkFzc2VydGlvbkVycm9yIiwidmFsdWUiLCJfZGVlcEVxdWFsIiwic3RyaWN0IiwibWVtb3MiLCJpc0RhdGUiLCJnZXRUaW1lIiwiaXNSZWdFeHAiLCJzb3VyY2UiLCJnbG9iYWwiLCJtdWx0aWxpbmUiLCJsYXN0SW5kZXgiLCJpZ25vcmVDYXNlIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiVWludDhBcnJheSIsImFjdHVhbEluZGV4IiwiaW5kZXhPZiIsInB1c2giLCJhY3R1YWxWaXNpdGVkT2JqZWN0cyIsImlzUHJpbWl0aXZlIiwiZ2V0UHJvdG90eXBlT2YiLCJhSXNBcmdzIiwiaXNBcmd1bWVudHMiLCJiSXNBcmdzIiwia2V5Iiwia2EiLCJvYmplY3RLZXlzIiwia2IiLCJzb3J0Iiwib2JqRXF1aXYiLCJvYmplY3QiLCJleHBlY3RlZEV4Y2VwdGlvbiIsInRlc3QiLCJlIiwiRXJyb3IiLCJpc1Byb3RvdHlwZU9mIiwiX3Rocm93cyIsInNob3VsZFRocm93IiwiYmxvY2siLCJUeXBlRXJyb3IiLCJlcnJvciIsIl90cnlCbG9jayIsInVzZXJQcm92aWRlZE1lc3NhZ2UiLCJpc1VuZXhwZWN0ZWRFeGNlcHRpb24iLCJpc0Vycm9yIiwib3B0aW9ucyIsInRoaXMiLCJnZW5lcmF0ZWRNZXNzYWdlIiwic2VsZiIsImdldE1lc3NhZ2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImVyciIsInN0YWNrIiwib3V0IiwiZm5fbmFtZSIsImlkeCIsIm5leHRfbGluZSIsInN1YnN0cmluZyIsImluaGVyaXRzIiwiZXF1YWwiLCJub3RFcXVhbCIsImRlZXBFcXVhbCIsImRlZXBTdHJpY3RFcXVhbCIsIm5vdERlZXBFcXVhbCIsIm5vdERlZXBTdHJpY3RFcXVhbCIsInN0cmljdEVxdWFsIiwibm90U3RyaWN0RXF1YWwiLCJ0aHJvd3MiLCJkb2VzTm90VGhyb3ciLCJpZkVycm9yIiwia2V5cyIsImNyZWF0ZSIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIiwiYXJnIiwiY29weSIsImZpbGwiLCJyZWFkVUludDgiLCJmb3JtYXRSZWdFeHAiLCJmb3JtYXQiLCJmIiwiaXNTdHJpbmciLCJvYmplY3RzIiwiYXJndW1lbnRzIiwiam9pbiIsImFyZ3MiLCJzdHIiLCJTdHJpbmciLCJyZXBsYWNlIiwiTnVtYmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsIl8iLCJpc051bGwiLCJpc09iamVjdCIsImRlcHJlY2F0ZSIsImZuIiwibXNnIiwiaXNVbmRlZmluZWQiLCJwcm9jZXNzIiwiYXBwbHkiLCJub0RlcHJlY2F0aW9uIiwid2FybmVkIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJjb25zb2xlIiwidHJhY2UiLCJkZWJ1Z0Vudmlyb24iLCJkZWJ1Z3MiLCJvcHRzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGUiLCJzdHlsZXMiLCJyZWN1cnNlVGltZXMiLCJyZXQiLCJwcmltaXRpdmUiLCJzaW1wbGUiLCJpc051bWJlciIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiYXJyYXkiLCJoYXNoIiwiZm9yRWFjaCIsInZhbCIsImFycmF5VG9IYXNoIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvcm1hdEVycm9yIiwiUmVnRXhwIiwiRGF0ZSIsIm91dHB1dCIsImJhc2UiLCJicmFjZXMiLCJpc0FycmF5IiwidG9VVENTdHJpbmciLCJsIiwiZm9ybWF0UHJvcGVydHkiLCJmb3JtYXRBcnJheSIsIm1hcCIsInBvcCIsInJlZHVjZSIsInByZXYiLCJjdXIiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJzcGxpdCIsImxpbmUiLCJzdWJzdHIiLCJhciIsInJlIiwib2JqZWN0VG9TdHJpbmciLCJkIiwibyIsInBhZCIsImRlYnVnbG9nIiwiZW52IiwiTk9ERV9ERUJVRyIsInRvVXBwZXJDYXNlIiwicGlkIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc1N5bWJvbCIsIm1vbnRocyIsInRpbWVzdGFtcCIsInRpbWUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwicHJvcCIsImxvZyIsIm9yaWdpbiIsImFkZCIsImJ5dGVMZW5ndGgiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG9CeXRlQXJyYXkiLCJ0bXAiLCJhcnIiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJjaGFyQ29kZUF0IiwiZnJvbUJ5dGVBcnJheSIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibWF4Q2h1bmtMZW5ndGgiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJjb2RlIiwic3RhcnQiLCJlbmQiLCJudW0iLCJiYXNlNjQiLCJpZWVlNzU0IiwiY3VzdG9tSW5zcGVjdFN5bWJvbCIsIlN5bWJvbCIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiS19NQVhfTEVOR1RIIiwiY3JlYXRlQnVmZmVyIiwiUmFuZ2VFcnJvciIsImJ1ZiIsInNldFByb3RvdHlwZU9mIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbSIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsIndyaXRlIiwiZnJvbVN0cmluZyIsImFycmF5VmlldyIsImlzSW5zdGFuY2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheVZpZXciLCJTaGFyZWRBcnJheUJ1ZmZlciIsInZhbHVlT2YiLCJjaGVja2VkIiwidW5kZWZpbmVkIiwibnVtYmVySXNOYU4iLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsImFzc2VydFNpemUiLCJzaXplIiwibXVzdE1hdGNoIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwibSIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImhleFdyaXRlIiwib2Zmc2V0IiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJjIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwicmVzIiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwicHJvdG8iLCJmb28iLCJ0eXBlZEFycmF5U3VwcG9ydCIsImRlZmluZVByb3BlcnR5IiwicG9vbFNpemUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJtYXgiLCJ0cmltIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwiaGV4U2xpY2VMb29rdXBUYWJsZSIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIndydEJpZ1VJbnQ2NExFIiwiY2hlY2tJbnRCSSIsIkJpZ0ludCIsIndydEJpZ1VJbnQ2NEJFIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsImxpdHRsZUVuZGlhbiIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzdWJhcnJheSIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVpbnRCRSIsInJlYWRVSW50QkUiLCJyZWFkVWludDgiLCJyZWFkVWludDE2TEUiLCJyZWFkVUludDE2TEUiLCJyZWFkVWludDE2QkUiLCJyZWFkVWludDMyTEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVWludDMyQkUiLCJyZWFkVUludDMyQkUiLCJyZWFkQmlnVUludDY0TEUiLCJkZWZpbmVCaWdJbnRNZXRob2QiLCJ2YWxpZGF0ZU51bWJlciIsImZpcnN0IiwibGFzdCIsImJvdW5kc0Vycm9yIiwicmVhZEJpZ1VJbnQ2NEJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRCaWdJbnQ2NExFIiwicmVhZEJpZ0ludDY0QkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVaW50TEUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVWludEJFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVpbnQ4Iiwid3JpdGVVSW50OCIsIndyaXRlVWludDE2TEUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVaW50MTZCRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVpbnQzMkxFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVWludDMyQkUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVCaWdVSW50NjRMRSIsIndyaXRlQmlnVUludDY0QkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVCaWdJbnQ2NExFIiwid3JpdGVCaWdJbnQ2NEJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvcHlXaXRoaW4iLCJlcnJvcnMiLCJFIiwic3ltIiwiQmFzZSIsInN1cGVyIiwiYWRkTnVtZXJpY2FsU2VwYXJhdG9yIiwicmFuZ2UiLCJFUlJfT1VUX09GX1JBTkdFIiwiY2hlY2tCb3VuZHMiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsImZsb29yIiwiRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTIiwiaW5wdXQiLCJyZWNlaXZlZCIsImlzSW50ZWdlciIsImFicyIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJhbHBoYWJldCIsInRhYmxlIiwiaTE2IiwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsIkdldEludHJpbnNpYyIsImNhbGxCaW5kIiwiJGluZGV4T2YiLCJhbGxvd01pc3NpbmciLCJpbnRyaW5zaWMiLCJiaW5kIiwiJGFwcGx5IiwiJGNhbGwiLCIkcmVmbGVjdEFwcGx5IiwiJGdPUEQiLCIkZGVmaW5lUHJvcGVydHkiLCIkbWF4Iiwib3JpZ2luYWxGdW5jdGlvbiIsImFwcGx5QmluZCIsIm5vdyIsInRpbWVzIiwid2luZG93IiwiZnVuY3Rpb25zIiwid2FybiIsImxhYmVsIiwiZHVyYXRpb24iLCJleHByZXNzaW9uIiwidHVwbGUiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImlkIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIml0ZW0iLCJjb250ZW50IiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFycjIiLCJfaXRlbSIsIl9hcnJheVdpdGhIb2xlcyIsIml0ZXJhdG9yIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJuZXh0IiwiZG9uZSIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImlzIiwiaXNSZWdleCIsImZsYWdzIiwiaXNVbmRlZmluZWRPck51bGwiLCJhSXNSZWdleCIsImJJc1JlZ2V4IiwiYUlzQnVmZmVyIiwiYklzQnVmZmVyIiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIiQkdHlwZW9mIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJmb3IiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImNsb25lIiwiZGVlcG1lcmdlIiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJlbGVtZW50IiwiZ2V0S2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsInN5bWJvbCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNPbk9iamVjdCIsInByb3BlcnR5IiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJkZXN0aW5hdGlvbiIsInByb3BlcnR5SXNVbnNhZmUiLCJjdXN0b21NZXJnZSIsImdldE1lcmdlRnVuY3Rpb24iLCJtZXJnZU9iamVjdCIsImFsbCIsImRlZXBtZXJnZV8xIiwiaGFzU3ltYm9scyIsInRvU3RyIiwib3JpZ0RlZmluZVByb3BlcnR5Iiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsImFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQiLCJwcmVkaWNhdGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJlZGljYXRlcyIsInByb3BzIiwiZ09QRCIsImlzUGxhaW5PYmplY3QiLCJoYXNPd25Db25zdHJ1Y3RvciIsImhhc0lzUHJvdG90eXBlT2YiLCJzZXRQcm9wZXJ0eSIsIm5ld1ZhbHVlIiwiZ2V0UHJvcGVydHkiLCJleHRlbmQiLCJjb3B5SXNBcnJheSIsImRlZXAiLCJESUZGX0RFTEVURSIsImRpZmZfbWFpbiIsInRleHQxIiwidGV4dDIiLCJjdXJzb3JfcG9zIiwiY29tbW9ubGVuZ3RoIiwiZGlmZl9jb21tb25QcmVmaXgiLCJjb21tb25wcmVmaXgiLCJkaWZmX2NvbW1vblN1ZmZpeCIsImNvbW1vbnN1ZmZpeCIsImRpZmZzIiwibG9uZ3RleHQiLCJzaG9ydHRleHQiLCJobSIsImRpZmZfaGFsZk1hdGNoSV8iLCJiZXN0X2xvbmd0ZXh0X2EiLCJiZXN0X2xvbmd0ZXh0X2IiLCJiZXN0X3Nob3J0dGV4dF9hIiwiYmVzdF9zaG9ydHRleHRfYiIsInNlZWQiLCJiZXN0X2NvbW1vbiIsInByZWZpeExlbmd0aCIsInN1ZmZpeExlbmd0aCIsInRleHQxX2EiLCJ0ZXh0MV9iIiwidGV4dDJfYSIsInRleHQyX2IiLCJobTEiLCJjZWlsIiwiaG0yIiwiZGlmZl9oYWxmTWF0Y2hfIiwibWlkX2NvbW1vbiIsImRpZmZzX2EiLCJkaWZmc19iIiwidGV4dDFfbGVuZ3RoIiwidGV4dDJfbGVuZ3RoIiwibWF4X2QiLCJ2X29mZnNldCIsInZfbGVuZ3RoIiwidjEiLCJ2MiIsImRlbHRhIiwiZnJvbnQiLCJrMXN0YXJ0IiwiazFlbmQiLCJrMnN0YXJ0IiwiazJlbmQiLCJrMSIsImsxX29mZnNldCIsInkxIiwieDEiLCJjaGFyQXQiLCJrMl9vZmZzZXQiLCJ4MiIsImRpZmZfYmlzZWN0U3BsaXRfIiwiazIiLCJ5MiIsImRpZmZfYmlzZWN0XyIsImRpZmZfY29tcHV0ZV8iLCJ1bnNoaWZ0IiwiZGlmZl9jbGVhbnVwTWVyZ2UiLCJub3JtIiwiY3VycmVudF9wb3MiLCJuZXh0X3BvcyIsInNwbGl0X3BvcyIsImRfbGVmdCIsImRfcmlnaHQiLCJzcGxpY2UiLCJjdXJzb3Jfbm9ybWFsaXplX2RpZmYiLCJuZGlmZnMiLCJjdXJzb3JfcG9pbnRlciIsImRfbmV4dCIsIm1lcmdlX3R1cGxlcyIsInN1ZmZpeCIsImZpeF9jdXJzb3IiLCJjb21wYWN0Iiwic3RhcnRzX3dpdGhfcGFpcl9lbmQiLCJmaXhlZF9kaWZmcyIsImZpeF9lbW9qaSIsInRleHQxYSIsInRleHQyYSIsInRleHQxYiIsInRleHQyYiIsImRpZmZzYiIsInBvaW50ZXJtaW4iLCJwb2ludGVybWF4IiwicG9pbnRlcm1pZCIsInBvaW50ZXJzdGFydCIsInBvaW50ZXJlbmQiLCJwb2ludGVyIiwiY291bnRfZGVsZXRlIiwiY291bnRfaW5zZXJ0IiwidGV4dF9kZWxldGUiLCJ0ZXh0X2luc2VydCIsImNoYW5nZXMiLCJkaWZmIiwibGVmdF9kIiwicmlnaHRfZCIsIklOU0VSVCIsIkRFTEVURSIsIkVRVUFMIiwiRVJST1JfTUVTU0FHRSIsImZ1bmNUeXBlIiwidGhhdCIsImJvdW5kIiwiYmluZGVyIiwicmVzdWx0IiwiYm91bmRMZW5ndGgiLCJib3VuZEFyZ3MiLCJGdW5jdGlvbiIsIkVtcHR5IiwiaW1wbGVtZW50YXRpb24iLCIkU3ludGF4RXJyb3IiLCJTeW50YXhFcnJvciIsIiRGdW5jdGlvbiIsIiRUeXBlRXJyb3IiLCJnZXRFdmFsbGVkQ29uc3RydWN0b3IiLCJleHByZXNzaW9uU3ludGF4IiwidGhyb3dUeXBlRXJyb3IiLCJUaHJvd1R5cGVFcnJvciIsImNhbGxlZVRocm93cyIsImdPUER0aHJvd3MiLCJnZXRQcm90byIsIl9fcHJvdG9fXyIsIm5lZWRzRXZhbCIsIlR5cGVkQXJyYXkiLCJJTlRSSU5TSUNTIiwiQWdncmVnYXRlRXJyb3IiLCJBdG9taWNzIiwiQm9vbGVhbiIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImV2YWwiLCJFdmFsRXJyb3IiLCJGaW5hbGl6YXRpb25SZWdpc3RyeSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiaXNOYU4iLCJNYXAiLCJwYXJzZUZsb2F0IiwiUHJvbWlzZSIsIlByb3h5IiwiUmVmZXJlbmNlRXJyb3IiLCJSZWZsZWN0IiwiU2V0IiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiVVJJRXJyb3IiLCJXZWFrTWFwIiwiV2Vha1JlZiIsIldlYWtTZXQiLCJkb0V2YWwiLCJnZW4iLCJMRUdBQ1lfQUxJQVNFUyIsIiRjb25jYXQiLCIkc3BsaWNlQXBwbHkiLCIkcmVwbGFjZSIsIiRzdHJTbGljZSIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzdHJpbmdUb1BhdGgiLCJudW1iZXIiLCJxdW90ZSIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJhbGlhcyIsImludHJpbnNpY05hbWUiLCJpbnRyaW5zaWNCYXNlTmFtZSIsImludHJpbnNpY1JlYWxOYW1lIiwic2tpcEZ1cnRoZXJDYWNoaW5nIiwiaXNPd24iLCJwYXJ0Iiwib3JpZ1N5bWJvbCIsImhhc1N5bWJvbFNoYW0iLCJzeW1PYmoiLCJzeW1zIiwiZGVzY3JpcHRvciIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJMTjIiLCJoYXNUb1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiJHRvU3RyaW5nIiwiY2FsbEJvdW5kIiwiaXNTdGFuZGFyZEFyZ3VtZW50cyIsImlzTGVnYWN5QXJndW1lbnRzIiwiY2FsbGVlIiwic3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyIsImdldERheSIsInRyeURhdGVPYmplY3QiLCJoYXMiLCIkZXhlYyIsImlzUmVnZXhNYXJrZXIiLCJiYWRTdHJpbmdpZmllciIsInRocm93UmVnZXhNYXJrZXIiLCJwcm9wSXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJhc3NpZ24iLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidG8iLCJkZWZpbmUiLCJnZXRQb2x5ZmlsbCIsInNoaW0iLCJwb2x5ZmlsbCIsImtleXNTaGltIiwiaXNBcmdzIiwiaXNFbnVtZXJhYmxlIiwiaGFzRG9udEVudW1CdWciLCJoYXNQcm90b0VudW1CdWciLCJkb250RW51bXMiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSIsImV4Y2x1ZGVkS2V5cyIsIiRhcHBsaWNhdGlvbkNhY2hlIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG9ubW96ZnVsbHNjcmVlbmNoYW5nZSIsIiRvbm1vemZ1bGxzY3JlZW5lcnJvciIsIiRvdXRlckhlaWdodCIsIiRvdXRlcldpZHRoIiwiJHBhZ2VYT2Zmc2V0IiwiJHBhZ2VZT2Zmc2V0IiwiJHBhcmVudCIsIiRzY3JvbGxMZWZ0IiwiJHNjcm9sbFRvcCIsIiRzY3JvbGxYIiwiJHNjcm9sbFkiLCIkc2VsZiIsIiR3ZWJraXRJbmRleGVkREIiLCIkd2Via2l0U3RvcmFnZUluZm8iLCIkd2luZG93IiwiaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnIiwiayIsInRoZUtleXMiLCJza2lwUHJvdG8iLCJza2lwQ29uc3RydWN0b3IiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kiLCJvcmlnS2V5cyIsIm9yaWdpbmFsS2V5cyIsImZhY3RvcnkiLCJpbnN0YWxsZWRNb2R1bGVzIiwibW9kdWxlSWQiLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwicCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJQYXJjaG1lbnRFcnJvciIsIl9zdXBlciIsIl90aGlzIiwiU2NvcGUiLCJhdHRyaWJ1dGVzIiwiY2xhc3NlcyIsInRhZ3MiLCJ0eXBlcyIsInF1ZXJ5Iiwic2NvcGUiLCJBTlkiLCJUZXh0IiwiTm9kZSIsIlRFWFRfTk9ERSIsIkxFVkVMIiwiQkxPQ0siLCJJTkxJTkUiLCJIVE1MRWxlbWVudCIsIm5hbWVzIiwiZ2V0QXR0cmlidXRlIiwidGFnTmFtZSIsIlRZUEUiLCJEQVRBX0tFWSIsIkJsb3RDbGFzcyIsIm5vZGUiLCJmaW5kIiwiYnViYmxlIiwiYmxvdCIsInBhcmVudE5vZGUiLCJyZWdpc3RlciIsIkRlZmluaXRpb25zIiwiRGVmaW5pdGlvbiIsImJsb3ROYW1lIiwiYXR0ck5hbWUiLCJrZXlOYW1lIiwiY2xhc3NOYW1lIiwidGFnTmFtZXMiLCJ0YWciLCJSZWdpc3RyeSIsIkF0dHJpYnV0b3IiLCJhdHRyaWJ1dGVCaXQiLCJBVFRSSUJVVEUiLCJ3aGl0ZWxpc3QiLCJjYW5BZGQiLCJzZXRBdHRyaWJ1dGUiLCJCTE9UIiwicmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiZGVmYXVsdCIsImxpbmtlZF9saXN0XzEiLCJzaGFkb3dfMSIsIkNvbnRhaW5lckJsb3QiLCJkb21Ob2RlIiwiYnVpbGQiLCJhcHBlbmRDaGlsZCIsIm90aGVyIiwiaW5zZXJ0QmVmb3JlIiwiYXR0YWNoIiwiY2hpbGRyZW4iLCJjaGlsZCIsImNoaWxkTm9kZXMiLCJyZXZlcnNlIiwibWFrZUJsb3QiLCJoZWFkIiwiZGVsZXRlQXQiLCJpbmRleCIsImZvckVhY2hBdCIsImRlc2NlbmRhbnQiLCJjcml0ZXJpYSIsIl9hIiwiZGVzY2VuZGFudHMiLCJNQVhfVkFMVUUiLCJsZW5ndGhMZWZ0IiwiZGV0YWNoIiwiZm9ybWF0QXQiLCJpbnNlcnRBdCIsImRlZiIsImNoaWxkQmxvdCIsInJlZkJsb3QiLCJzdGF0aWNzIiwiYWxsb3dlZENoaWxkcmVuIiwic29tZSIsImluc2VydEludG8iLCJtZW1vIiwibW92ZUNoaWxkcmVuIiwidGFyZ2V0UGFyZW50IiwicmVmTm9kZSIsIm9wdGltaXplIiwiY29udGV4dCIsImRlZmF1bHRDaGlsZCIsInBhdGgiLCJpbmNsdXNpdmUiLCJwb3NpdGlvbiIsInJlbW92ZUNoaWxkIiwiZm9yY2UiLCJhZnRlciIsInBhcmVudCIsInVud3JhcCIsInVwZGF0ZSIsIm11dGF0aW9ucyIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJtdXRhdGlvbiIsImRvY3VtZW50IiwiYm9keSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwibmV4dFNpYmxpbmciLCJyZXBsYWNlQ2hpbGQiLCJhdHRyaWJ1dG9yXzEiLCJzdG9yZV8xIiwiY29udGFpbmVyXzEiLCJGb3JtYXRCbG90IiwiZm9ybWF0cyIsImF0dHJpYnV0ZSIsInJlcGxhY2VXaXRoIiwidmFsdWVzIiwicmVwbGFjZW1lbnQiLCJ3cmFwIiwid3JhcHBlciIsIm1vdmUiLCJMZWFmQmxvdCIsIklOTElORV9CTE9UIiwiU2hhZG93QmxvdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJzY3JvbGwiLCJjbG9uZU5vZGUiLCJpc29sYXRlIiwicGFyZW50XzEiLCJyZWYiLCJwYXJlbnRCbG90IiwicmVmRG9tTm9kZSIsInJvb3QiLCJjbGFzc18xIiwic3R5bGVfMSIsIkF0dHJpYnV0b3JTdG9yZSIsImF0dHIiLCJwcmVmaXgiLCJDbGFzc0F0dHJpYnV0b3IiLCJjYW1lbGl6ZSIsInJlc3QiLCJTdHlsZUF0dHJpYnV0b3IiLCJmb3JtYXRfMSIsImxlYWZfMSIsInNjcm9sbF8xIiwiaW5saW5lXzEiLCJibG9ja18xIiwiZW1iZWRfMSIsInRleHRfMSIsIlBhcmNobWVudCIsIkNvbnRhaW5lciIsIkZvcm1hdCIsIkxlYWYiLCJFbWJlZCIsIlNjcm9sbCIsIkJsb2NrIiwiSW5saW5lIiwiQXR0cmlidXRlIiwiQ2xhc3MiLCJTdHlsZSIsIlN0b3JlIiwiTGlua2VkTGlzdCIsInRhaWwiLCJhcHBlbmQiLCJub2RlcyIsImNvbnRhaW5zIiwiY3VyTm9kZSIsImxlbmd0aF8xIiwiY2FsbGJhY2siLCJzdGFydE5vZGUiLCJjdXJJbmRleCIsImN1ckxlbmd0aCIsIk9CU0VSVkVSX0NPTkZJRyIsImNoYXJhY3RlckRhdGEiLCJjaGFyYWN0ZXJEYXRhT2xkVmFsdWUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiU2Nyb2xsQmxvdCIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwicmVjb3JkcyIsInRha2VSZWNvcmRzIiwibWFyayIsIm1hcmtQYXJlbnQiLCJwcmV2aW91c1NpYmxpbmciLCJncmFuZENoaWxkIiwiQkxPQ0tfQkxPVCIsIklubGluZUJsb3QiLCJvYmoxIiwib2JqMiIsImlzRXF1YWwiLCJCbG9ja0Jsb3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJFbWJlZEJsb3QiLCJUZXh0QmxvdCIsInRleHQiLCJjcmVhdGVUZXh0Tm9kZSIsInNwbGl0VGV4dCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJvcCIsIk5VTExfQ0hBUkFDVEVSIiwiRGVsdGEiLCJvcHMiLCJpbnNlcnQiLCJuZXdPcCIsInJldGFpbiIsImxhc3RPcCIsImNob3AiLCJwYXJ0aXRpb24iLCJwYXNzZWQiLCJmYWlsZWQiLCJpbml0aWFsIiwiY2hhbmdlTGVuZ3RoIiwiZWxlbSIsImRlbGV0ZSIsIml0ZXIiLCJoYXNOZXh0IiwibmV4dE9wIiwiY29tcG9zZSIsInRoaXNJdGVyIiwib3RoZXJJdGVyIiwiZmlyc3RPdGhlciIsInBlZWsiLCJmaXJzdExlZnQiLCJwZWVrVHlwZSIsInBlZWtMZW5ndGgiLCJ0aGlzT3AiLCJvdGhlck9wIiwic3RyaW5ncyIsImRpZmZSZXN1bHQiLCJjb21wb25lbnQiLCJvcExlbmd0aCIsImVhY2hMaW5lIiwibmV3bGluZSIsInRyYW5zZm9ybSIsInByaW9yaXR5IiwidHJhbnNmb3JtUG9zaXRpb24iLCJuZXh0VHlwZSIsImxpYiIsImtlZXBOdWxsIiwiSXRlcmF0b3IiLCJyZXRPcCIsInRvZ2dsZSIsIl90b2dnbGUiLCJET01Ub2tlbkxpc3QiLCJ0b2tlbiIsInN0YXJ0c1dpdGgiLCJzZWFyY2hTdHJpbmciLCJlbmRzV2l0aCIsInN1YmplY3RTdHJpbmciLCJ0aGlzQXJnIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV4ZWNDb21tYW5kIiwiX2luc3RhbmNlb2YiLCJuYXRpdmVNYXAiLCJuYXRpdmVTZXQiLCJuYXRpdmVQcm9taXNlIiwiY2lyY3VsYXIiLCJpbmNsdWRlTm9uRW51bWVyYWJsZSIsImFsbFBhcmVudHMiLCJhbGxDaGlsZHJlbiIsInVzZUJ1ZmZlciIsIl9jbG9uZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aGVuIiwiX19pc0FycmF5IiwiX19pc1JlZ0V4cCIsIl9fZ2V0UmVnRXhwRmxhZ3MiLCJfX2lzRGF0ZSIsImtleUNoaWxkIiwidmFsdWVDaGlsZCIsImVudHJ5Q2hpbGQiLCJhdHRycyIsImFsbFByb3BlcnR5TmFtZXMiLCJwcm9wZXJ0eU5hbWUiLCJfX29ialRvU3RyIiwiY2xvbmVQcm90b3R5cGUiLCJFdmVudHMiLCJFRSIsIkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJldmVudE5hbWVzIiwiZXZlbnRzIiwiZXZlbnQiLCJleGlzdHMiLCJldnQiLCJhdmFpbGFibGUiLCJlZSIsImExIiwiYTIiLCJhMyIsImE0IiwiYTUiLCJsaXN0ZW5lciIsInNldE1heExpc3RlbmVycyIsInByZWZpeGVkIiwiJE9iamVjdCIsImRvdEFsbCIsInVuaWNvZGUiLCJzdGlja3kiLCJmbGFnc0JvdW5kIiwiVHlwZUVyciIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJjb3VudCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsIm5vbmNlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiYXBwbHlUb1RhZyIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVJbmRleCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwibWUiLCJEcmF3IiwibG9hZFBsdWdpbiIsImVkaXRvclVpIiwiZGVjbGFyZVVpRnVuY3Rpb25zIiwib3ZlcndyaXRlTWVyZ2UiLCJkZXN0aW5hdGlvbkFycmF5Iiwic291cmNlQXJyYXkiLCJkZWZhdWx0RWRpdG9yc0NvbmZpZyIsIkVkaXRvclVpIiwidXNlckNvbmZpZyIsIkVkaXRvciIsImNvbmZpZyIsInNob3dEaWFsb2dDZWxsIiwiY2VsbCIsInNoYXBlIiwiZWRpdG9yIiwiZ3JhcGgiLCJ2aWV3Iiwic3RhdGVzIiwibXhPYmplY3RJZCIsInNob3dEaWFsb2ciLCJpZ25vcmVEb3VibGVDbGljIiwibXhFdmVudCIsInNlbmRlciIsImlzQ2VsbEhhbmRsZWQiLCJjb25zdW1lIiwiY29udGV4dHVhbCIsInBvcHVwTWVudUhhbmRsZXIiLCJmYWN0b3J5TWV0aG9kIiwibWVudSIsImFkZEl0ZW0iLCJwYWxldHRlSXRlbXMiLCJwYWxldHRlTmFtZSIsInBhbGV0dGUiLCJwYWxldHRlTGFiZWwiLCJzZXREZWZhdWx0c1BhbGV0dGVJdGVtIiwic2lkZWJhciIsInBhbGV0dGVzIiwiYWRkUGFsZXR0ZUZ1bmN0aW9ucyIsIml0ZW1lbHQiLCJhZGREYXRhRW50cnkiLCJ3aWR0aCIsImhlaWdodCIsIm14VXRpbHMiLCJnZXRSb290Tm9kZSIsIm14Q2VsbCIsIm14R2VvbWV0cnkiLCJpY29uIiwidmVydGV4IiwiYXR0cmlidXRlTmFtZSIsImNyZWF0ZVZlcnRleFRlbXBsYXRlRnJvbUNlbGxzIiwiZGl2IiwiaW5uZXJIVE1MIiwiYnV0dG9ucyIsIndpbl93aWR0aCIsIndpbl9oZWlnaHQiLCJkaWFncmFtQ29udGFpbmVyIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJ3aW4iLCJteFdpbmRvdyIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJzZXRSZXNpemFibGUiLCJzZXRNYXhpbWl6YWJsZSIsInNldENsb3NhYmxlIiwiY2FuY2VsQnRuIiwibXhSZXNvdXJjZXMiLCJjYW5jZWwiLCJjYW5jZWxGaXJzdCIsIm9rQnRuIiwidmFsaWRhdGUiLCJzdG9wUHJvcGFnYXRpb24iLCJvbkZpbGxXaW5kb3ciLCJzaG93Iiwib25TaG93V2luZG93IiwidG9vbHRpcEhhbmRsZXIiLCJoaWRlIiwic3Bpbm5lciIsInNwaW4iLCJnZXRNb2RlbCIsImJlZ2luVXBkYXRlIiwic2V0U2hhcGVWYWx1ZSIsImdldEVkaXRvclZhbHVlIiwiZW5kVXBkYXRlIiwic3RvcCIsInN0YXRlIiwic2V0U2VsZWN0aW9uQ2VsbCIsInNjcm9sbENlbGxUb1Zpc2libGUiLCJkZXN0cm95IiwiZ2V0U2hhcGVWYWx1ZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9ycyIsImtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCIsImNhbGxiYWNraWZ5T25SZWplY3RlZCIsInJlYXNvbiIsImNiIiwibmV3UmVhc29uIiwicHJvbWlzaWZ5Iiwib3JpZ2luYWwiLCJwcm9taXNlUmVzb2x2ZSIsInByb21pc2VSZWplY3QiLCJwcm9taXNlIiwiY3VzdG9tIiwiY2FsbGJhY2tpZnkiLCJjYWxsYmFja2lmaWVkIiwibWF5YmVDYiIsInJlaiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwiZ2xvYmFsVGhpcyIsIkJyZWFrIiwic2VsZkluZGV4Iiwib3JkZXIiLCJvdGhlckluZGV4IiwiQmxvY2tFbWJlZCIsImNhY2hlIiwibGVhZiIsImJ1YmJsZUZvcm1hdHMiLCJsaW5lcyIsInNoaWZ0IiwiQ29kZSIsIkNvZGVCbG9jayIsInRleHRDb250ZW50IiwiZnJhZyIsIm5leHROZXdsaW5lIiwibmV3bGluZUluZGV4IiwicHJldk5ld2xpbmUiLCJpc29sYXRlTGVuZ3RoIiwic2VhcmNoSW5kZXgiLCJxdWVyeVNlbGVjdG9yQWxsIiwiVEFCIiwiQ3Vyc29yIiwic2VsZWN0aW9uIiwidGV4dE5vZGUiLCJDT05URU5UUyIsIl9sZW5ndGgiLCJjb21wb3NpbmciLCJyZXN0b3JlVGV4dCIsImdldE5hdGl2ZVJhbmdlIiwibGFzdENoaWxkIiwic3RhcnRPZmZzZXQiLCJlbmROb2RlIiwiZW5kT2Zmc2V0IiwicmVzdG9yZSIsIkFTQ0lJIiwiY29tYmluZUZvcm1hdHMiLCJjb21iaW5lZCIsIm1lcmdlZCIsImxldmVscyIsImxldmVsIiwiZGVidWciLCJtZXRob2QiLCJuYW1lc3BhY2UiLCJucyIsImxvZ2dlciIsIm5ld0xldmVsIiwiZXZlbnROYW1lIiwiX19xdWlsbCIsImVtaXR0ZXIiLCJoYW5kbGVET00iLCJFbWl0dGVyIiwiaGFuZGxlciIsIkVESVRPUl9DSEFOR0UiLCJTQ1JPTExfQkVGT1JFX1VQREFURSIsIlNDUk9MTF9PUFRJTUlaRSIsIlNDUk9MTF9VUERBVEUiLCJTRUxFQ1RJT05fQ0hBTkdFIiwiVEVYVF9DSEFOR0UiLCJBUEkiLCJTSUxFTlQiLCJVU0VSIiwiTW9kdWxlIiwicXVpbGwiLCJERUZBVUxUUyIsIlJhbmdlIiwiU2VsZWN0aW9uIiwibW91c2VEb3duIiwiY3Vyc29yIiwibGFzdFJhbmdlIiwic2F2ZWRSYW5nZSIsImhhbmRsZUNvbXBvc2l0aW9uIiwiaGFuZGxlRHJhZ2dpbmciLCJsaXN0ZW5ET00iLCJoYXNGb2N1cyIsIm5hdGl2ZSIsInNldE5hdGl2ZVJhbmdlIiwiaWdub3JlZCIsImZvY3VzIiwic2V0UmFuZ2UiLCJuYXRpdmVSYW5nZSIsImNvbGxhcHNlZCIsInNjcm9sbExlbmd0aCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0Iiwic2lkZSIsImJvdHRvbSIsInRvcCIsImxlZnQiLCJyaWdodCIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJnZXRSYW5nZUF0Iiwibm9ybWFsaXplTmF0aXZlIiwiaW5mbyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVkVG9SYW5nZSIsImFjdGl2ZUVsZW1lbnQiLCJwb3NpdGlvbnMiLCJpbmRleGVzIiwic3RhcnRDb250YWluZXIiLCJlbmRDb250YWluZXIiLCJzY3JvbGxpbmdDb250YWluZXIiLCJib3VuZHMiLCJnZXRCb3VuZHMiLCJzY3JvbGxCb3VuZHMiLCJzY3JvbGxUb3AiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImJsdXIiLCJyYW5nZVRvTmF0aXZlIiwib2xkUmFuZ2UiLCJnZXRSYW5nZSIsIlRoZW1lIiwiYWRkTW9kdWxlIiwibW9kdWxlQ2xhc3MiLCJpbXBvcnQiLCJ0aGVtZXMiLCJpbXBvcnRzIiwib3ZlcndyaXRlIiwiY29udGFpbmVyIiwiY2xpcGJvYXJkIiwia2V5Ym9hcmQiLCJoaXN0b3J5IiwidGhlbWUiLCJ0aGVtZUNvbmZpZyIsIm1vZHVsZUNvbmZpZyIsInRvb2xiYXIiLCJleHBhbmRDb25maWciLCJodG1sIiwiYWRkQ29udGFpbmVyIiwiZ2V0RGVsdGEiLCJjb25zdW1lTmV4dE5ld2xpbmUiLCJiYXRjaFN0YXJ0IiwiaW1hZ2UiLCJidWxsZXQiLCJub3JtYWxpemVEZWx0YSIsImJhdGNoRW5kIiwibGVuZ3RoUmVtYWluaW5nIiwibGluZUxlbmd0aCIsImNvZGVJbmRleCIsImNvZGVMZW5ndGgiLCJsZWF2ZXMiLCJmb3JtYXRzQXJyIiwiYmxvdHMiLCJnZXRDb250ZW50cyIsImVtYmVkIiwiZ2V0VGV4dCIsImFwcGx5RGVsdGEiLCJjaGFuZ2UiLCJjdXJzb3JJbmRleCIsIm9sZERlbHRhIiwidGV4dEJsb3QiLCJvbGRWYWx1ZSIsIm9sZFRleHQiLCJuZXdUZXh0IiwiaW5pdCIsImlzQmxhbmsiLCJtb2RpZnkiLCJjb250ZW50cyIsImNvbnZlcnQiLCJzZXRDb250ZW50cyIsImNsZWFyIiwicGxhY2Vob2xkZXIiLCJyZWFkT25seSIsImRpc2FibGUiLCJvdmVybG9hZCIsImRlbGV0ZVRleHQiLCJlbmFibGUiLCJlbmFibGVkIiwic2Nyb2xsSW50b1ZpZXciLCJmb3JtYXRMaW5lIiwiZm9ybWF0VGV4dCIsInNldFNlbGVjdGlvbiIsImNvbnRhaW5lckJvdW5kcyIsImdldExlbmd0aCIsImdldEZvcm1hdCIsImluc2VydEVtYmVkIiwiaW5zZXJ0VGV4dCIsImRhbmdlcm91c2x5UGFzdGVIVE1MIiwicmVtb3ZlRm9ybWF0IiwiZGVsZXRlZCIsImFwcGxpZWQiLCJtb2RpZmllciIsImlzRW5hYmxlZCIsInNoaWZ0UmFuZ2UiLCJRVUlMTF9WRVJTSU9OIiwiR1VBUkRfVEVYVCIsImNvbnRlbnROb2RlIiwiY2hpbGROb2RlIiwibGVmdEd1YXJkIiwicmlnaHRHdWFyZCIsInByZXZMZW5ndGgiLCJpc0xpbmUiLCJiYXRjaCIsImdldExpbmVzIiwiQWxpZ25BdHRyaWJ1dGUiLCJBbGlnbkNsYXNzIiwiQWxpZ25TdHlsZSIsIkNvbG9yQXR0cmlidXRvciIsIkNvbG9yQ2xhc3MiLCJDb2xvclN0eWxlIiwiQmFja2dyb3VuZENsYXNzIiwiQmFja2dyb3VuZFN0eWxlIiwiRGlyZWN0aW9uQXR0cmlidXRlIiwiRGlyZWN0aW9uQ2xhc3MiLCJEaXJlY3Rpb25TdHlsZSIsIkZvbnRDbGFzcyIsIkZvbnRTdHlsZUF0dHJpYnV0b3IiLCJGb250U3R5bGUiLCJTaXplQ2xhc3MiLCJTaXplU3R5bGUiLCJET01fS0VZIiwiQ0xJUEJPQVJEX0NPTkZJRyIsImNvbXB1dGVTdHlsZSIsIndoaXRlU3BhY2UiLCJyZXBsYWNlciIsImNvbGxhcHNlIiwibWF0Y2hOZXdsaW5lIiwiZGVsdGFFbmRzV2l0aCIsIkVMRU1FTlRfTk9ERSIsImFwcGx5Rm9ybWF0IiwibWF0Y2hTcGFjaW5nIiwiQVRUUklCVVRFX0FUVFJJQlVUT1JTIiwiU1RZTEVfQVRUUklCVVRPUlMiLCJmb250U3R5bGUiLCJpdGFsaWMiLCJmb250V2VpZ2h0IiwiYm9sZCIsInRleHRJbmRlbnQiLCJpbmRlbnQiLCJtYXRjaEFsaWFzIiwiQ2xpcGJvYXJkIiwib25QYXN0ZSIsIm1hdGNoZXJzIiwic2VsZWN0b3IiLCJtYXRjaGVyIiwibWF0Y2hWaXN1YWwiLCJhZGRNYXRjaGVyIiwiaW5uZXJUZXh0IiwiZWxlbWVudE1hdGNoZXJzIiwidGV4dE1hdGNoZXJzIiwicHJlcGFyZU1hdGNoaW5nIiwidHJhdmVyc2UiLCJwYXN0ZSIsInVwZGF0ZUNvbnRlbnRzIiwiZGVmYXVsdFByZXZlbnRlZCIsInBhaXIiLCJub2RlVHlwZSIsImdldENvbXB1dGVkU3R5bGUiLCJlbmRUZXh0IiwiZGlzcGxheSIsImNoaWxkcmVuRGVsdGEiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJub2RlSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiSGlzdG9yeSIsImxhc3RSZWNvcmRlZCIsImlnbm9yZUNoYW5nZSIsInVzZXJPbmx5IiwicmVjb3JkIiwiYWRkQmluZGluZyIsInNob3J0S2V5IiwidW5kbyIsInNoaWZ0S2V5IiwicmVkbyIsInBsYXRmb3JtIiwiZGVzdCIsImRlbGV0ZUxlbmd0aCIsImNoYW5nZUluZGV4IiwiZW5kc1dpdGhOZXdsaW5lQ2hhbmdlIiwiZ2V0TGFzdENoYW5nZUluZGV4IiwiY2hhbmdlRGVsdGEiLCJ1bmRvRGVsdGEiLCJkZWxheSIsIm1heFN0YWNrIiwiU0hPUlRLRVkiLCJLZXlib2FyZCIsIm5vcm1hbGl6ZSIsIndoaWNoIiwia2V5Q29kZSIsImJpbmRpbmdzIiwiRU5URVIiLCJoYW5kbGVFbnRlciIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiYWx0S2V5IiwiQkFDS1NQQUNFIiwiaGFuZGxlQmFja3NwYWNlIiwiaGFuZGxlRGVsZXRlIiwiaGFuZGxlRGVsZXRlUmFuZ2UiLCJsaXN0ZW4iLCJnZXRMaW5lIiwibGVhZlN0YXJ0Iiwib2Zmc2V0U3RhcnQiLCJnZXRMZWFmIiwibGVhZkVuZCIsIm9mZnNldEVuZCIsInByZWZpeFRleHQiLCJzdWZmaXhUZXh0IiwiY3VyQ29udGV4dCIsImVtcHR5IiwiZXZlcnkiLCJwcmV2ZW50RGVmYXVsdCIsIm1ha2VFbWJlZEFycm93SGFuZGxlciIsIndoZXJlIiwiTEVGVCIsIlJJR0hUIiwiY3VyRm9ybWF0cyIsInByZXZGb3JtYXRzIiwibmV4dExlbmd0aCIsIm5leHRGb3JtYXRzIiwiZmlyc3RGb3JtYXRzIiwibGFzdEZvcm1hdHMiLCJsaW5lRm9ybWF0cyIsIm1ha2VDb2RlQmxvY2tIYW5kbGVyIiwic2Nyb2xsSW5kZXgiLCJnZXRJbmRleCIsIm1ha2VGb3JtYXRIYW5kbGVyIiwiRVNDQVBFIiwiVVAiLCJET1dOIiwiY3V0b2ZmIiwiaGVhZGVyIiwiSWRlbnRBdHRyaWJ1dG9yIiwiSW5kZW50Q2xhc3MiLCJCbG9ja3F1b3RlIiwiSGVhZGVyIiwiTGlzdEl0ZW0iLCJMaXN0IiwiaGFzQXR0cmlidXRlIiwibGlzdEV2ZW50SGFuZGxlciIsIkJvbGQiLCJJdGFsaWMiLCJMaW5rIiwic2FuaXRpemUiLCJ1cmwiLCJQUk9UT0NPTF9XSElURUxJU1QiLCJTQU5JVElaRURfVVJMIiwicHJvdG9jb2xzIiwiYW5jaG9yIiwiaHJlZiIsInByb3RvY29sIiwiU2NyaXB0IiwiU3RyaWtlIiwiVW5kZXJsaW5lIiwiQVRUUklCVVRFUyIsIkltYWdlIiwiVmlkZW8iLCJGb3JtdWxhQmxvdCIsImthdGV4IiwicmVuZGVyIiwidGhyb3dPbkVycm9yIiwiZXJyb3JDb2xvciIsIlN5bnRheENvZGVCbG9jayIsImhpZ2hsaWdodCIsImNhY2hlZFRleHQiLCJDb2RlVG9rZW4iLCJTeW50YXgiLCJ0aW1lciIsImludGVydmFsIiwiaGxqcyIsImhpZ2hsaWdodEF1dG8iLCJUb29sYmFyIiwiZ3JvdXBzIiwiY29udHJvbHMiLCJncm91cCIsImNvbnRyb2wiLCJhZGRCdXR0b24iLCJvcHRpb24iLCJhZGRTZWxlY3QiLCJhZGRDb250cm9scyIsImhhbmRsZXJzIiwiYWRkSGFuZGxlciIsInNlbGVjdGVkSW5kZXgiLCJzZWxlY3RlZCIsInByb21wdCIsImlzQWN0aXZlIiwiY2xlYW4iLCJkaXJlY3Rpb24iLCJhbGlnbiIsImxpbmsiLCJvcHRpb25zQ291bnRlciIsInRvZ2dsZUFyaWFBdHRyaWJ1dGUiLCJzZWxlY3QiLCJidWlsZFBpY2tlciIsInRvZ2dsZVBpY2tlciIsImVzY2FwZSIsInRhYkluZGV4Iiwic2VsZWN0SXRlbSIsImJ1aWxkSXRlbSIsImJ1aWxkTGFiZWwiLCJidWlsZE9wdGlvbnMiLCJjbG9zZSIsInRyaWdnZXIiLCJFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJhY2tncm91bmRDb2xvciIsImNvbG9yTGFiZWwiLCJzdHJva2UiLCJpY29ucyIsImRlZmF1bHRJdGVtIiwiYm91bmRzQ29udGFpbmVyIiwiVEVNUExBVEUiLCJyZWZlcmVuY2UiLCJvZmZzZXRXaWR0aCIsInJvb3RCb3VuZHMiLCJ2ZXJ0aWNhbFNoaWZ0IiwiQUxJR05TIiwiQ09MT1JTIiwiRk9OVFMiLCJIRUFERVJTIiwiU0laRVMiLCJCYXNlVGhlbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidG9vbHRpcCIsInRleHRib3giLCJwaWNrZXJzIiwicGlja2VyIiwiZXh0ZW5kVG9vbGJhciIsImJ1dHRvbiIsInNlbGVjdHMiLCJmaWxsU2VsZWN0IiwiZm9ybXVsYSIsImVkaXQiLCJmaWxlSW5wdXQiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNEYXRhVVJMIiwiY2xpY2siLCJ2aWRlbyIsIkJhc2VUb29sdGlwIiwic2F2ZSIsIm1vZGUiLCJwcmV2aWV3IiwibGlua1JhbmdlIiwicmVzdG9yZUZvY3VzIiwiZXh0cmFjdFZpZGVvVXJsIiwiZGVmYXVsdFZhbHVlIiwiVE9PTEJBUl9DT05GSUciLCJCdWJibGVUaGVtZSIsIkJ1YmJsZVRvb2x0aXAiLCJidWlsZEJ1dHRvbnMiLCJidWlsZFBpY2tlcnMiLCJsYXN0TGluZSIsImFycm93IiwibWFyZ2luTGVmdCIsIlNub3dUaGVtZSIsIlNub3dUb29sdGlwIiwibWFpbmRpdiIsInBhZGRpbmciLCJleHRyYV90b29sYmFyIiwiZXh0cmFfbW9kdWxlcyJdLCJtYXBwaW5ncyI6IjswQ0FFQSxJQUFJQSxFQUFlLEVBQVEsT0FXM0IsU0FBU0MsRUFBUUMsRUFBR0MsR0FDbEIsR0FBSUQsSUFBTUMsRUFDUixPQUFPLEVBTVQsSUFIQSxJQUFJQyxFQUFJRixFQUFFRyxPQUNOQyxFQUFJSCxFQUFFRSxPQUVERSxFQUFJLEVBQUdDLEVBQU1DLEtBQUtDLElBQUlOLEVBQUdFLEdBQUlDLEVBQUlDLElBQU9ELEVBQy9DLEdBQUlMLEVBQUVLLEtBQU9KLEVBQUVJLEdBQUksQ0FDakJILEVBQUlGLEVBQUVLLEdBQ05ELEVBQUlILEVBQUVJ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QVVpRCxFQUFLUSxFQUFLN0MsSUFHbkMsWUFBQXFFLGVBQU4sU0FBcUJqRixFQUFlaUQsRUFBcUJRLEcsa21DQUV2RCxNQUFPLENBQVAsRUFBUTdzQyxLQUFLaWlDLFVBQW9CNUksS0FBS2lULGUsZ1NBR3hDLFlBQUFqQix1QkFBQSxTQUF1Qnp3QixHQUNoQkEsRUFBSyt3QixRQUFPL3dCLEVBQUsrd0IsTUFBUSxJQUN6Qi93QixFQUFLZ3hCLFNBQVFoeEIsRUFBS2d4QixPQUFTLElBRzNCaHhCLEVBQUtxeEIsTUFBU3J4QixFQUFLL04sT0FDdEIrTixFQUFLcXhCLEtBQU8saUJBQW1COXZCLEtBQUssT0FDakN2QixFQUFLMlgsTUFBUzNYLEVBQUsvTixPQUFNK04sRUFBSzJYLEtBQU8sY0FDckMzWCxFQUFLMmlCLE1BQVMzaUIsRUFBSy9OLE9BQU0rTixFQUFLMmlCLEtBOURoQixXQWdFbkIsWUFBTThOLHVCQUFzQixVQUFDendCLElBRWpDLEVBL0RBLENBQXVDLEtBaUV2QyxDQUFzQixRQUFTLENBQzdCdXhCLGNBQWUsWUFDZnZCLFdBQVksdUJBQ1o3TCxNQUFPLGVBQ1BrTSxhQUFjLENBQ1osQ0FDRS92QyxLQUFNLFFBQ05tZixNQUFPLFFBQ1A4d0IsUUFBUyxDQUFFandDLEtBQU0sVUFBV21mLE1BQU8sV0FDbkNsVixNQUFPLHNCIiwiZmlsZSI6InF1aWxsLXBsdWdpbi53ZWJwYWNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBjb21wYXJlIGFuZCBpc0J1ZmZlciB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuLy8gb3JpZ2luYWwgbm90aWNlOlxuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgaWYgKGdsb2JhbC5CdWZmZXIgJiYgdHlwZW9mIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihiKTtcbiAgfVxuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKTtcbn1cblxuLy8gYmFzZWQgb24gbm9kZSBhc3NlcnQsIG9yaWdpbmFsIG5vdGljZTpcbi8vIE5COiBUaGUgVVJMIHRvIHRoZSBDb21tb25KUyBzcGVjIGlzIGtlcHQganVzdCBmb3IgdHJhZGl0aW9uLlxuLy8gICAgIG5vZGUtYXNzZXJ0IGhhcyBldm9sdmVkIGEgbG90IHNpbmNlIHRoZW4sIGJvdGggaW4gQVBJIGFuZCBiZWhhdmlvci5cblxuLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxuLy9cbi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCFcbi8vXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbC8nKTtcbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9vKCkge30ubmFtZSA9PT0gJ2Zvbyc7XG59KCkpO1xuZnVuY3Rpb24gcFRvU3RyaW5nIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xufVxuZnVuY3Rpb24gaXNWaWV3KGFycmJ1Zikge1xuICBpZiAoaXNCdWZmZXIoYXJyYnVmKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJyYnVmKTtcbiAgfVxuICBpZiAoIWFycmJ1Zikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYXJyYnVmIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYXJyYnVmLmJ1ZmZlciAmJiBhcnJidWYuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG5cbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cbi8vIG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBtZXNzYWdlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxuXG52YXIgcmVnZXggPSAvXFxzKmZ1bmN0aW9uXFxzKyhbXlxcKFxcc10qKVxccyovO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9ibG9iL2FkZWVlZWM4YmZjYzYwNjhiMTg3ZDdkOWZiM2Q1YmIxZDNhMzA4OTkvaW1wbGVtZW50YXRpb24uanNcbmZ1bmN0aW9uIGdldE5hbWUoZnVuYykge1xuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihmdW5jKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKSB7XG4gICAgcmV0dXJuIGZ1bmMubmFtZTtcbiAgfVxuICB2YXIgc3RyID0gZnVuYy50b1N0cmluZygpO1xuICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2gocmVnZXgpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG59XG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XG4gIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gIHRoaXMuYWN0dWFsID0gb3B0aW9ucy5hY3R1YWw7XG4gIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjtcbiAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNZXNzYWdlKHRoaXMpO1xuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gIH1cbiAgdmFyIHN0YWNrU3RhcnRGdW5jdGlvbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uIHx8IGZhaWw7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHN0YWNrU3RhcnRGdW5jdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm9uIHY4IGJyb3dzZXJzIHNvIHdlIGNhbiBoYXZlIGEgc3RhY2t0cmFjZVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICB2YXIgb3V0ID0gZXJyLnN0YWNrO1xuXG4gICAgICAvLyB0cnkgdG8gc3RyaXAgdXNlbGVzcyBmcmFtZXNcbiAgICAgIHZhciBmbl9uYW1lID0gZ2V0TmFtZShzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICAgICAgdmFyIGlkeCA9IG91dC5pbmRleE9mKCdcXG4nICsgZm5fbmFtZSk7XG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgLy8gb25jZSB3ZSBoYXZlIGxvY2F0ZWQgdGhlIGZ1bmN0aW9uIGZyYW1lXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc3RyaXAgb3V0IGV2ZXJ5dGhpbmcgYmVmb3JlIGl0IChhbmQgaXRzIGxpbmUpXG4gICAgICAgIHZhciBuZXh0X2xpbmUgPSBvdXQuaW5kZXhPZignXFxuJywgaWR4ICsgMSk7XG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7XG4gICAgfVxuICB9XG59O1xuXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxudXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gdHJ1bmNhdGUocywgbikge1xuICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5mdW5jdGlvbiBpbnNwZWN0KHNvbWV0aGluZykge1xuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzIHx8ICF1dGlsLmlzRnVuY3Rpb24oc29tZXRoaW5nKSkge1xuICAgIHJldHVybiB1dGlsLmluc3BlY3Qoc29tZXRoaW5nKTtcbiAgfVxuICB2YXIgcmF3bmFtZSA9IGdldE5hbWUoc29tZXRoaW5nKTtcbiAgdmFyIG5hbWUgPSByYXduYW1lID8gJzogJyArIHJhd25hbWUgOiAnJztcbiAgcmV0dXJuICdbRnVuY3Rpb24nICsgIG5hbWUgKyAnXSc7XG59XG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNlbGYpIHtcbiAgcmV0dXJuIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5hY3R1YWwpLCAxMjgpICsgJyAnICtcbiAgICAgICAgIHNlbGYub3BlcmF0b3IgKyAnICcgK1xuICAgICAgICAgdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmV4cGVjdGVkKSwgMTI4KTtcbn1cblxuLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmRcbi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xuLy8gb3RoZXIga2V5cyB0byB0aGUgQXNzZXJ0aW9uRXJyb3IncyBjb25zdHJ1Y3RvciAtIHRoZXkgd2lsbCBiZVxuLy8gaWdub3JlZC5cblxuLy8gMy4gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZ1bmN0aW9uKSB7XG4gIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3Ioe1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0RnVuY3Rpb246IHN0YWNrU3RhcnRGdW5jdGlvblxuICB9KTtcbn1cblxuLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuXG5hc3NlcnQuZmFpbCA9IGZhaWw7XG5cbi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhZ3VhcmQuXG4vLyBhc3NlcnQub2soZ3VhcmQsIG1lc3NhZ2Vfb3B0KTtcbi8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsXG4vLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgZ3VhcmQsIG1lc3NhZ2Vfb3B0KTsuXG5cbmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5vayk7XG59XG5hc3NlcnQub2sgPSBvaztcblxuLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoXG4vLyA9PS5cbi8vIGFzc2VydC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQuZXF1YWwpO1xufTtcblxuLy8gNi4gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdCBlcXVhbFxuLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDcuIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcEVxdWFsJywgYXNzZXJ0LmRlZXBFcXVhbCk7XG4gIH1cbn07XG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBkZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwU3RyaWN0RXF1YWwnLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBzdHJpY3QsIG1lbW9zKSB7XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgJiYgaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCkgPT09IDA7XG5cbiAgLy8gNy4yLiBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBEYXRlIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNEYXRlKGFjdHVhbCkgJiYgdXRpbC5pc0RhdGUoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMgSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBSZWdFeHAgb2JqZWN0IHdpdGggdGhlIHNhbWUgc291cmNlIGFuZFxuICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNSZWdFeHAoYWN0dWFsKSAmJiB1dGlsLmlzUmVnRXhwKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuc291cmNlID09PSBleHBlY3RlZC5zb3VyY2UgJiZcbiAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmXG4gICAgICAgICAgIGFjdHVhbC5tdWx0aWxpbmUgPT09IGV4cGVjdGVkLm11bHRpbGluZSAmJlxuICAgICAgICAgICBhY3R1YWwubGFzdEluZGV4ID09PSBleHBlY3RlZC5sYXN0SW5kZXggJiZcbiAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7XG5cbiAgLy8gNy40LiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKChhY3R1YWwgPT09IG51bGwgfHwgdHlwZW9mIGFjdHVhbCAhPT0gJ29iamVjdCcpICYmXG4gICAgICAgICAgICAgKGV4cGVjdGVkID09PSBudWxsIHx8IHR5cGVvZiBleHBlY3RlZCAhPT0gJ29iamVjdCcpKSB7XG4gICAgcmV0dXJuIHN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gSWYgYm90aCB2YWx1ZXMgYXJlIGluc3RhbmNlcyBvZiB0eXBlZCBhcnJheXMsIHdyYXAgdGhlaXIgdW5kZXJseWluZ1xuICAvLyBBcnJheUJ1ZmZlcnMgaW4gYSBCdWZmZXIgZWFjaCB0byBpbmNyZWFzZSBwZXJmb3JtYW5jZVxuICAvLyBUaGlzIG9wdGltaXphdGlvbiByZXF1aXJlcyB0aGUgYXJyYXlzIHRvIGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBjaGVja2VkIGJ5XG4gIC8vIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgKGFrYSBwVG9TdHJpbmcpLiBOZXZlciBwZXJmb3JtIGJpbmFyeVxuICAvLyBjb21wYXJpc29ucyBmb3IgRmxvYXQqQXJyYXlzLCB0aG91Z2gsIHNpbmNlIGUuZy4gKzAgPT09IC0wIGJ1dCB0aGVpclxuICAvLyBiaXQgcGF0dGVybnMgYXJlIG5vdCBpZGVudGljYWwuXG4gIH0gZWxzZSBpZiAoaXNWaWV3KGFjdHVhbCkgJiYgaXNWaWV3KGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgIHBUb1N0cmluZyhhY3R1YWwpID09PSBwVG9TdHJpbmcoZXhwZWN0ZWQpICYmXG4gICAgICAgICAgICAgIShhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHxcbiAgICAgICAgICAgICAgIGFjdHVhbCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkpIHtcbiAgICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhY3R1YWwuYnVmZmVyKSxcbiAgICAgICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShleHBlY3RlZC5idWZmZXIpKSA9PT0gMDtcblxuICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgIT09IGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBtZW1vcyA9IG1lbW9zIHx8IHthY3R1YWw6IFtdLCBleHBlY3RlZDogW119O1xuXG4gICAgdmFyIGFjdHVhbEluZGV4ID0gbWVtb3MuYWN0dWFsLmluZGV4T2YoYWN0dWFsKTtcbiAgICBpZiAoYWN0dWFsSW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoYWN0dWFsSW5kZXggPT09IG1lbW9zLmV4cGVjdGVkLmluZGV4T2YoZXhwZWN0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9zLmFjdHVhbC5wdXNoKGFjdHVhbCk7XG4gICAgbWVtb3MuZXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG5cbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudHMob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykge1xuICBpZiAoYSA9PT0gbnVsbCB8fCBhID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBpZiBvbmUgaXMgYSBwcmltaXRpdmUsIHRoZSBvdGhlciBtdXN0IGJlIHNhbWVcbiAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSlcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgaWYgKHN0cmljdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBhSXNBcmdzID0gaXNBcmd1bWVudHMoYSk7XG4gIHZhciBiSXNBcmdzID0gaXNBcmd1bWVudHMoYik7XG4gIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGFJc0FyZ3MpIHtcbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIsIHN0cmljdCk7XG4gIH1cbiAgdmFyIGthID0gb2JqZWN0S2V5cyhhKTtcbiAgdmFyIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgdmFyIGtleSwgaTtcbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT09IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFfZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gOC4gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG4vLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBFcXVhbCcsIGFzc2VydC5ub3REZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwU3RyaWN0RXF1YWwnLCBub3REZWVwU3RyaWN0RXF1YWwpO1xuICB9XG59XG5cblxuLy8gOS4gVGhlIHN0cmljdCBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc3RyaWN0IGVxdWFsaXR5LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbi8vIGFzc2VydC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG4vLyAxMC4gVGhlIHN0cmljdCBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciBzdHJpY3QgaW5lcXVhbGl0eSwgYXNcbi8vIGRldGVybWluZWQgYnkgIT09LiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gbm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWQudGVzdChhY3R1YWwpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZS4gIFRoZSBpbnN0YW5jZW9mIGNoZWNrIGRvZXNuJ3Qgd29yayBmb3IgYXJyb3cgZnVuY3Rpb25zLlxuICB9XG5cbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIF90cnlCbG9jayhibG9jaykge1xuICB2YXIgZXJyb3I7XG4gIHRyeSB7XG4gICAgYmxvY2soKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVycm9yID0gZTtcbiAgfVxuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIF90aHJvd3Moc2hvdWxkVGhyb3csIGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICB2YXIgYWN0dWFsO1xuXG4gIGlmICh0eXBlb2YgYmxvY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJsb2NrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJykge1xuICAgIG1lc3NhZ2UgPSBleHBlY3RlZDtcbiAgICBleHBlY3RlZCA9IG51bGw7XG4gIH1cblxuICBhY3R1YWwgPSBfdHJ5QmxvY2soYmxvY2spO1xuXG4gIG1lc3NhZ2UgPSAoZXhwZWN0ZWQgJiYgZXhwZWN0ZWQubmFtZSA/ICcgKCcgKyBleHBlY3RlZC5uYW1lICsgJykuJyA6ICcuJykgK1xuICAgICAgICAgICAgKG1lc3NhZ2UgPyAnICcgKyBtZXNzYWdlIDogJy4nKTtcblxuICBpZiAoc2hvdWxkVGhyb3cgJiYgIWFjdHVhbCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ01pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgdmFyIHVzZXJQcm92aWRlZE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZyc7XG4gIHZhciBpc1Vud2FudGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIHV0aWwuaXNFcnJvcihhY3R1YWwpO1xuICB2YXIgaXNVbmV4cGVjdGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIGFjdHVhbCAmJiAhZXhwZWN0ZWQ7XG5cbiAgaWYgKChpc1Vud2FudGVkRXhjZXB0aW9uICYmXG4gICAgICB1c2VyUHJvdmlkZWRNZXNzYWdlICYmXG4gICAgICBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHxcbiAgICAgIGlzVW5leHBlY3RlZEV4Y2VwdGlvbikge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJlxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOlxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cyh0cnVlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3MoZmFsc2UsIGJsb2NrLCBlcnJvciwgbWVzc2FnZSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uKGVycikgeyBpZiAoZXJyKSB0aHJvdyBlcnI7IH07XG5cbi8vIEV4cG9zZSBhIHN0cmljdCBvbmx5IHZhcmlhbnQgb2YgYXNzZXJ0XG5mdW5jdGlvbiBzdHJpY3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09Jywgc3RyaWN0KTtcbn1cbmFzc2VydC5zdHJpY3QgPSBvYmplY3RBc3NpZ24oc3RyaWN0LCBhc3NlcnQsIHtcbiAgZXF1YWw6IGFzc2VydC5zdHJpY3RFcXVhbCxcbiAgZGVlcEVxdWFsOiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsLFxuICBub3RFcXVhbDogYXNzZXJ0Lm5vdFN0cmljdEVxdWFsLFxuICBub3REZWVwRXF1YWw6IGFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWxcbn0pO1xuYXNzZXJ0LnN0cmljdC5zdHJpY3QgPSBhc3NlcnQuc3RyaWN0O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbmNvbnN0IGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbmNvbnN0IGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG5jb25zdCBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGNvbnN0IHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICBsZXQgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICBjb25zdCBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBsZXQgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIGNvbnN0IGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIGxldCB4ID0gYS5sZW5ndGhcbiAgbGV0IHkgPSBiLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBsZXQgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIGxldCBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcbiAgICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgY29uc3QgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgY29uc3QgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgbGV0IHN0ciA9ICcnXG4gIGNvbnN0IG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIGxldCB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICBsZXQgeSA9IGVuZCAtIHN0YXJ0XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgY29uc3QgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgY29uc3QgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIGxldCBpbmRleFNpemUgPSAxXG4gIGxldCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIGxldCB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIGxldCBpXG4gIGlmIChkaXIpIHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIGNvbnN0IHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgY29uc3QgcmVzID0gW11cblxuICBsZXQgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGxcbiAgICBsZXQgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICBjb25zdCBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICBsZXQgb3V0ID0gJydcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICBsZXQgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICBjb25zdCBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIGxldCBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgbG8gPSBmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0XG5cbiAgY29uc3QgaGkgPSB0aGlzWysrb2Zmc2V0XSArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgbGFzdCAqIDIgKiogMjRcblxuICByZXR1cm4gQmlnSW50KGxvKSArIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBoaSA9IGZpcnN0ICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICBjb25zdCBsbyA9IHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdFxuXG4gIHJldHVybiAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKSArIEJpZ0ludChsbylcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgaSA9IGJ5dGVMZW5ndGhcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgNF0gK1xuICAgIHRoaXNbb2Zmc2V0ICsgNV0gKiAyICoqIDggK1xuICAgIHRoaXNbb2Zmc2V0ICsgNl0gKiAyICoqIDE2ICtcbiAgICAobGFzdCA8PCAyNCkgLy8gT3ZlcmZsb3dcblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQoZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSAoZmlyc3QgPDwgMjQpICsgLy8gT3ZlcmZsb3dcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludCh0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3QpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NExFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0QkUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDddID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA2XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNV0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDRdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyAzXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMl0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXRdID0gaGlcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSAwXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIGxldCBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIENVU1RPTSBFUlJPUlNcbi8vID09PT09PT09PT09PT1cblxuLy8gU2ltcGxpZmllZCB2ZXJzaW9ucyBmcm9tIE5vZGUsIGNoYW5nZWQgZm9yIEJ1ZmZlci1vbmx5IHVzYWdlXG5jb25zdCBlcnJvcnMgPSB7fVxuZnVuY3Rpb24gRSAoc3ltLCBnZXRNZXNzYWdlLCBCYXNlKSB7XG4gIGVycm9yc1tzeW1dID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgc3VwZXIoKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIHZhbHVlOiBnZXRNZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkZCB0aGUgZXJyb3IgY29kZSB0byB0aGUgbmFtZSB0byBpbmNsdWRlIGl0IGluIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgIHRoaXMubmFtZSA9IGAke3RoaXMubmFtZX0gWyR7c3ltfV1gXG4gICAgICAvLyBBY2Nlc3MgdGhlIHN0YWNrIHRvIGdlbmVyYXRlIHRoZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZVxuICAgICAgLy8gZnJvbSB0aGUgbmFtZS5cbiAgICAgIHRoaXMuc3RhY2sgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIC8vIFJlc2V0IHRoZSBuYW1lIHRvIHRoZSBhY3R1YWwgbmFtZS5cbiAgICAgIGRlbGV0ZSB0aGlzLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29kZSAoKSB7XG4gICAgICByZXR1cm4gc3ltXG4gICAgfVxuXG4gICAgc2V0IGNvZGUgKHZhbHVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvZGUnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFske3N5bX1dOiAke3RoaXMubWVzc2FnZX1gXG4gICAgfVxuICB9XG59XG5cbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsXG4gIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHNgXG4gICAgfVxuXG4gICAgcmV0dXJuICdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJ1xuICB9LCBSYW5nZUVycm9yKVxuRSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLFxuICBmdW5jdGlvbiAobmFtZSwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIGBUaGUgXCIke25hbWV9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YFxuICB9LCBUeXBlRXJyb3IpXG5FKCdFUlJfT1VUX09GX1JBTkdFJyxcbiAgZnVuY3Rpb24gKHN0ciwgcmFuZ2UsIGlucHV0KSB7XG4gICAgbGV0IG1zZyA9IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYFxuICAgIGxldCByZWNlaXZlZCA9IGlucHV0XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5wdXQpICYmIE1hdGguYWJzKGlucHV0KSA+IDIgKiogMzIpIHtcbiAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKFN0cmluZyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZWNlaXZlZCA9IFN0cmluZyhpbnB1dClcbiAgICAgIGlmIChpbnB1dCA+IEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpIHx8IGlucHV0IDwgLShCaWdJbnQoMikgKiogQmlnSW50KDMyKSkpIHtcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpXG4gICAgICB9XG4gICAgICByZWNlaXZlZCArPSAnbidcbiAgICB9XG4gICAgbXNnICs9IGAgSXQgbXVzdCBiZSAke3JhbmdlfS4gUmVjZWl2ZWQgJHtyZWNlaXZlZH1gXG4gICAgcmV0dXJuIG1zZ1xuICB9LCBSYW5nZUVycm9yKVxuXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IgKHZhbCkge1xuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSB2YWwubGVuZ3RoXG4gIGNvbnN0IHN0YXJ0ID0gdmFsWzBdID09PSAnLScgPyAxIDogMFxuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMykge1xuICAgIHJlcyA9IGBfJHt2YWwuc2xpY2UoaSAtIDMsIGkpfSR7cmVzfWBcbiAgfVxuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWBcbn1cblxuLy8gQ0hFQ0sgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZHMgKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGlmIChidWZbb2Zmc2V0XSA9PT0gdW5kZWZpbmVkIHx8IGJ1ZltvZmZzZXQgKyBieXRlTGVuZ3RoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCBidWYubGVuZ3RoIC0gKGJ5dGVMZW5ndGggKyAxKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ludEJJICh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikge1xuICAgIGNvbnN0IG4gPSB0eXBlb2YgbWluID09PSAnYmlnaW50JyA/ICduJyA6ICcnXG4gICAgbGV0IHJhbmdlXG4gICAgaWYgKGJ5dGVMZW5ndGggPiAzKSB7XG4gICAgICBpZiAobWluID09PSAwIHx8IG1pbiA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgIHJhbmdlID0gYD49IDAke259IGFuZCA8IDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDh9JHtufWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gYD49IC0oMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufSkgYW5kIDwgMiAqKiBgICtcbiAgICAgICAgICAgICAgICBgJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UgPSBgPj0gJHttaW59JHtufSBhbmQgPD0gJHttYXh9JHtufWBcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKCd2YWx1ZScsIHJhbmdlLCB2YWx1ZSlcbiAgfVxuICBjaGVja0JvdW5kcyhidWYsIG9mZnNldCwgYnl0ZUxlbmd0aClcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYm91bmRzRXJyb3IgKHZhbHVlLCBsZW5ndGgsIHR5cGUpIHtcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0eXBlKVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpXG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA+PSAke3R5cGUgPyAxIDogMH0gYW5kIDw9ICR7bGVuZ3RofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSlcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5jb25zdCBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgbGV0IGNvZGVQb2ludFxuICBjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgbGV0IGMsIGhpLCBsb1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG5jb25zdCBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBjb25zdCBpMTYgPSBpICogMTZcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcblxuLy8gUmV0dXJuIG5vdCBmdW5jdGlvbiB3aXRoIEVycm9yIGlmIEJpZ0ludCBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBkZWZpbmVCaWdJbnRNZXRob2QgKGZuKSB7XG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgOiBmblxufVxuXG5mdW5jdGlvbiBCdWZmZXJCaWdJbnROb3REZWZpbmVkICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCaWdJbnQgbm90IHN1cHBvcnRlZCcpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcbnZhciAkbWF4ID0gR2V0SW50cmluc2ljKCclTWF0aC5tYXglJyk7XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRpZiAoJGdPUEQgJiYgJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0dmFyIGRlc2MgPSAkZ09QRChmdW5jLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHQvLyBvcmlnaW5hbCBsZW5ndGgsIHBsdXMgdGhlIHJlY2VpdmVyLCBtaW51cyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgKGFmdGVyIHRoZSByZWNlaXZlcilcblx0XHRcdCRkZWZpbmVQcm9wZXJ0eShcblx0XHRcdFx0ZnVuYyxcblx0XHRcdFx0J2xlbmd0aCcsXG5cdFx0XHRcdHsgdmFsdWU6IDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSkgfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZ1bmM7XG59O1xuXG52YXIgYXBwbHlCaW5kID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdCRkZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ2FwcGx5JywgeyB2YWx1ZTogYXBwbHlCaW5kIH0pO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBhcHBseUJpbmQ7XG59XG4iLCIvKmdsb2JhbCB3aW5kb3csIGdsb2JhbCovXG52YXIgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpXG52YXIgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKVxuZnVuY3Rpb24gbm93KCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgfVxuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcbnZhciBjb25zb2xlXG52YXIgdGltZXMgPSB7fVxuXG5pZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY29uc29sZSkge1xuICAgIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZVxufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlXG59IGVsc2Uge1xuICAgIGNvbnNvbGUgPSB7fVxufVxuXG52YXIgZnVuY3Rpb25zID0gW1xuICAgIFtsb2csIFwibG9nXCJdLFxuICAgIFtpbmZvLCBcImluZm9cIl0sXG4gICAgW3dhcm4sIFwid2FyblwiXSxcbiAgICBbZXJyb3IsIFwiZXJyb3JcIl0sXG4gICAgW3RpbWUsIFwidGltZVwiXSxcbiAgICBbdGltZUVuZCwgXCJ0aW1lRW5kXCJdLFxuICAgIFt0cmFjZSwgXCJ0cmFjZVwiXSxcbiAgICBbZGlyLCBcImRpclwiXSxcbiAgICBbY29uc29sZUFzc2VydCwgXCJhc3NlcnRcIl1cbl1cblxuZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHVwbGUgPSBmdW5jdGlvbnNbaV1cbiAgICB2YXIgZiA9IHR1cGxlWzBdXG4gICAgdmFyIG5hbWUgPSB0dXBsZVsxXVxuXG4gICAgaWYgKCFjb25zb2xlW25hbWVdKSB7XG4gICAgICAgIGNvbnNvbGVbbmFtZV0gPSBmXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnNvbGVcblxuZnVuY3Rpb24gbG9nKCkge31cblxuZnVuY3Rpb24gaW5mbygpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiBlcnJvcigpIHtcbiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiB0aW1lKGxhYmVsKSB7XG4gICAgdGltZXNbbGFiZWxdID0gbm93KClcbn1cblxuZnVuY3Rpb24gdGltZUVuZChsYWJlbCkge1xuICAgIHZhciB0aW1lID0gdGltZXNbbGFiZWxdXG4gICAgaWYgKCF0aW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWw6IFwiICsgbGFiZWwpXG4gICAgfVxuXG4gICAgZGVsZXRlIHRpbWVzW2xhYmVsXVxuICAgIHZhciBkdXJhdGlvbiA9IG5vdygpIC0gdGltZVxuICAgIGNvbnNvbGUubG9nKGxhYmVsICsgXCI6IFwiICsgZHVyYXRpb24gKyBcIm1zXCIpXG59XG5cbmZ1bmN0aW9uIHRyYWNlKCkge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKVxuICAgIGVyci5uYW1lID0gXCJUcmFjZVwiXG4gICAgZXJyLm1lc3NhZ2UgPSB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2spXG59XG5cbmZ1bmN0aW9uIGRpcihvYmplY3QpIHtcbiAgICBjb25zb2xlLmxvZyh1dGlsLmluc3BlY3Qob2JqZWN0KSArIFwiXFxuXCIpXG59XG5cbmZ1bmN0aW9uIGNvbnNvbGVBc3NlcnQoZXhwcmVzc2lvbikge1xuICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgYXJyID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgICAgIGFzc2VydC5vayhmYWxzZSwgdXRpbC5mb3JtYXQuYXBwbHkobnVsbCwgYXJyKSlcbiAgICB9XG59XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiFcXG4gKiBRdWlsbCBFZGl0b3IgdjEuMy43XFxuICogaHR0cHM6Ly9xdWlsbGpzLmNvbS9cXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEphc29uIENoZW5cXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMsIHNhbGVzZm9yY2UuY29tXFxuICovXFxuLnFsLWNvbnRhaW5lciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBtYXJnaW46IDBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnFsLWNvbnRhaW5lci5xbC1kaXNhYmxlZCAucWwtdG9vbHRpcCB7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxufVxcbi5xbC1jb250YWluZXIucWwtZGlzYWJsZWQgLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWRdID4gbGk6OmJlZm9yZSB7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLnFsLWNsaXBib2FyZCB7XFxuICBsZWZ0OiAtMTAwMDAwcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbn1cXG4ucWwtY2xpcGJvYXJkIHAge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuLnFsLWVkaXRvciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbGluZS1oZWlnaHQ6IDEuNDI7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIHBhZGRpbmc6IDEycHggMTVweDtcXG4gIHRhYi1zaXplOiA0O1xcbiAgLW1vei10YWItc2l6ZTogNDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XFxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxufVxcbi5xbC1lZGl0b3IgPiAqIHtcXG4gIGN1cnNvcjogdGV4dDtcXG59XFxuLnFsLWVkaXRvciBwLFxcbi5xbC1lZGl0b3Igb2wsXFxuLnFsLWVkaXRvciB1bCxcXG4ucWwtZWRpdG9yIHByZSxcXG4ucWwtZWRpdG9yIGJsb2NrcXVvdGUsXFxuLnFsLWVkaXRvciBoMSxcXG4ucWwtZWRpdG9yIGgyLFxcbi5xbC1lZGl0b3IgaDMsXFxuLnFsLWVkaXRvciBoNCxcXG4ucWwtZWRpdG9yIGg1LFxcbi5xbC1lZGl0b3IgaDYge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtMSBsaXN0LTIgbGlzdC0zIGxpc3QtNCBsaXN0LTUgbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sLFxcbi5xbC1lZGl0b3IgdWwge1xcbiAgcGFkZGluZy1sZWZ0OiAxLjVlbTtcXG59XFxuLnFsLWVkaXRvciBvbCA+IGxpLFxcbi5xbC1lZGl0b3IgdWwgPiBsaSB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxufVxcbi5xbC1lZGl0b3IgdWwgPiBsaTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdcXFxcMjAyMic7XFxufVxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPXRydWVdLFxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPWZhbHNlXSB7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9dHJ1ZV0gPiBsaSAqLFxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPWZhbHNlXSA+IGxpICoge1xcbiAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG59XFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9dHJ1ZV0gPiBsaTo6YmVmb3JlLFxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPWZhbHNlXSA+IGxpOjpiZWZvcmUge1xcbiAgY29sb3I6ICM3Nzc7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb2ludGVyLWV2ZW50czogYWxsO1xcbn1cXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD10cnVlXSA+IGxpOjpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFwyNjExJztcXG59XFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9ZmFsc2VdID4gbGk6OmJlZm9yZSB7XFxuICBjb250ZW50OiAnXFxcXDI2MTAnO1xcbn1cXG4ucWwtZWRpdG9yIGxpOjpiZWZvcmUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHdpZHRoOiAxLjJlbTtcXG59XFxuLnFsLWVkaXRvciBsaTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpOjpiZWZvcmUge1xcbiAgbWFyZ2luLWxlZnQ6IC0xLjVlbTtcXG4gIG1hcmdpbi1yaWdodDogMC4zZW07XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1kaXJlY3Rpb24tcnRsOjpiZWZvcmUge1xcbiAgbWFyZ2luLWxlZnQ6IDAuM2VtO1xcbiAgbWFyZ2luLXJpZ2h0OiAtMS41ZW07XFxufVxcbi5xbC1lZGl0b3Igb2wgbGk6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSxcXG4ucWwtZWRpdG9yIHVsIGxpOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxLjVlbTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1kaXJlY3Rpb24tcnRsLFxcbi5xbC1lZGl0b3IgdWwgbGkucWwtZGlyZWN0aW9uLXJ0bCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxLjVlbTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaSB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTEgbGlzdC0yIGxpc3QtMyBsaXN0LTQgbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTA7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC0wLCBkZWNpbWFsKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0xIHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTE7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTE6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC0xLCBsb3dlci1hbHBoYSkgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMSB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTIgbGlzdC0zIGxpc3QtNCBsaXN0LTUgbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0yIHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTI7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC0yLCBsb3dlci1yb21hbikgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMiB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTMgbGlzdC00IGxpc3QtNSBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTMge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtMztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMzpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTMsIGRlY2ltYWwpICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTMge1xcbiAgY291bnRlci1yZXNldDogbGlzdC00IGxpc3QtNSBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTQge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtNDtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNDpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTQsIGxvd2VyLWFscGhhKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC00IHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtNSBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTUge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtNTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNTpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTUsIGxvd2VyLXJvbWFuKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC01IHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNiB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC02O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC02OmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtNiwgZGVjaW1hbCkgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNiB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNyB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC03O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC03OmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtNywgbG93ZXItYWxwaGEpICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTcge1xcbiAgY291bnRlci1yZXNldDogbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtOCB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC04O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC04OmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtOCwgbG93ZXItcm9tYW4pICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTgge1xcbiAgY291bnRlci1yZXNldDogbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC05IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC05LCBkZWNpbWFsKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogM2VtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC0xOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiA0LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTEucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAzZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTEucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiA0LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTI6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDZlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMjpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogNy41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC0yLnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogNmVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC0yLnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogNy41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC0zOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiA5ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTM6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEwLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTMucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiA5ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTMucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMC41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC00Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxMmVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC00Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxMy41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC00LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMTJlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNC5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEzLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTU6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDE1ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTU6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDE2LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTUucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxNWVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC01LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMTYuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNjpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMThlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNjpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTkuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNi5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDE4ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTYucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxOS41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC03Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAyMWVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC03Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAyMi41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC03LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMjFlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNy5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDIyLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTg6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDI0ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTg6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDI1LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTgucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyNGVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC04LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMjUuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtOTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMjdlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtOTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMjguNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtOS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDI3ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTkucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyOC41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLXZpZGVvIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC12aWRlby5xbC1hbGlnbi1jZW50ZXIge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcbi5xbC1lZGl0b3IgLnFsLXZpZGVvLnFsLWFsaWduLXJpZ2h0IHtcXG4gIG1hcmdpbjogMCAwIDAgYXV0bztcXG59XFxuLnFsLWVkaXRvciAucWwtYmctYmxhY2sge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG59XFxuLnFsLWVkaXRvciAucWwtYmctcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNjAwMDA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLW9yYW5nZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjkwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy15ZWxsb3cge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMDtcXG59XFxuLnFsLWVkaXRvciAucWwtYmctZ3JlZW4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwOGEwMDtcXG59XFxuLnFsLWVkaXRvciAucWwtYmctYmx1ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDZjO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1wdXJwbGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzkzZjtcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3Itd2hpdGUge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLXJlZCB7XFxuICBjb2xvcjogI2U2MDAwMDtcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3Itb3JhbmdlIHtcXG4gIGNvbG9yOiAjZjkwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci15ZWxsb3cge1xcbiAgY29sb3I6ICNmZjA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLWdyZWVuIHtcXG4gIGNvbG9yOiAjMDA4YTAwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci1ibHVlIHtcXG4gIGNvbG9yOiAjMDZjO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci1wdXJwbGUge1xcbiAgY29sb3I6ICM5M2Y7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWZvbnQtc2VyaWYge1xcbiAgZm9udC1mYW1pbHk6IEdlb3JnaWEsIFRpbWVzIE5ldyBSb21hbiwgc2VyaWY7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWZvbnQtbW9ub3NwYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBNb25hY28sIENvdXJpZXIgTmV3LCBtb25vc3BhY2U7XFxufVxcbi5xbC1lZGl0b3IgLnFsLXNpemUtc21hbGwge1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLXNpemUtbGFyZ2Uge1xcbiAgZm9udC1zaXplOiAxLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtc2l6ZS1odWdlIHtcXG4gIGZvbnQtc2l6ZTogMi41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWRpcmVjdGlvbi1ydGwge1xcbiAgZGlyZWN0aW9uOiBydGw7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1hbGlnbi1jZW50ZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1hbGlnbi1qdXN0aWZ5IHtcXG4gIHRleHQtYWxpZ246IGp1c3RpZnk7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG4ucWwtZWRpdG9yLnFsLWJsYW5rOjpiZWZvcmUge1xcbiAgY29sb3I6IHJnYmEoMCwwLDAsMC42KTtcXG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS1wbGFjZWhvbGRlcik7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBsZWZ0OiAxNXB4O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTVweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Rpc3QvcXVpbGwuY29yZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Ozs7O0VBS0U7QUFDRjtFQUNFLHNCQUFzQjtFQUN0Qix5Q0FBeUM7RUFDekMsZUFBZTtFQUNmLFlBQVk7RUFDWixXQUFXO0VBQ1gsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLG9CQUFvQjtBQUN0QjtBQUNBO0VBQ0UsZUFBZTtFQUNmLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLFFBQVE7QUFDVjtBQUNBO0VBQ0UsU0FBUztFQUNULFVBQVU7QUFDWjtBQUNBO0VBQ0Usc0JBQXNCO0VBQ3RCLGlCQUFpQjtFQUNqQixZQUFZO0VBQ1osYUFBYTtFQUNiLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIscUJBQXFCO0VBQ3JCLHFCQUFxQjtBQUN2QjtBQUNBO0VBQ0UsWUFBWTtBQUNkO0FBQ0E7Ozs7Ozs7Ozs7O0VBV0UsU0FBUztFQUNULFVBQVU7RUFDViw2RUFBNkU7QUFDL0U7QUFDQTs7RUFFRSxtQkFBbUI7QUFDckI7QUFDQTs7RUFFRSxxQkFBcUI7QUFDdkI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBOztFQUVFLG9CQUFvQjtBQUN0QjtBQUNBOztFQUVFLG1C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O0VBQ0UsY0FBYztBQUNoQjtBQUNBO0VBQ0Usa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLHlCQUF5QjtBQUMzQjtBQUNBO0VBQ0Usc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLHlCQUF5QjtBQUMzQjtBQUNBO0VBQ0Usc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLFdBQVc7QUFDYjtBQUNBO0VBQ0UsY0FBYztBQUNoQjtBQUNBO0VBQ0UsV0FBVztBQUNiO0FBQ0E7RUFDRSxXQUFXO0FBQ2I7QUFDQTtFQUNFLGNBQWM7QUFDaEI7QUFDQTtFQUNFLFdBQVc7QUFDYjtBQUNBO0VBQ0UsV0FBVztBQUNiO0FBQ0E7RUFDRSw0Q0FBNEM7QUFDOUM7QUFDQTtFQUNFLDJDQUEyQztBQUM3QztBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsY0FBYztFQUNkLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0Usa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxtQkFBbUI7QUFDckI7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0Usc0JBQXNCO0VBQ3RCLCtCQUErQjtFQUMvQixrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsV0FBVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIVxcbiAqIFF1aWxsIEVkaXRvciB2MS4zLjdcXG4gKiBodHRwczovL3F1aWxsanMuY29tL1xcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgSmFzb24gQ2hlblxcbiAqIENvcHlyaWdodCAoYykgMjAxMywgc2FsZXNmb3JjZS5jb21cXG4gKi9cXG4ucWwtY29udGFpbmVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMTNweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbjogMHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ucWwtY29udGFpbmVyLnFsLWRpc2FibGVkIC5xbC10b29sdGlwIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuLnFsLWNvbnRhaW5lci5xbC1kaXNhYmxlZCAucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZF0gPiBsaTo6YmVmb3JlIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4ucWwtY2xpcGJvYXJkIHtcXG4gIGxlZnQ6IC0xMDAwMDBweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxufVxcbi5xbC1jbGlwYm9hcmQgcCB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ucWwtZWRpdG9yIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBsaW5lLWhlaWdodDogMS40MjtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgcGFkZGluZzogMTJweCAxNXB4O1xcbiAgdGFiLXNpemU6IDQ7XFxuICAtbW96LXRhYi1zaXplOiA0O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG59XFxuLnFsLWVkaXRvciA+ICoge1xcbiAgY3Vyc29yOiB0ZXh0O1xcbn1cXG4ucWwtZWRpdG9yIHAsXFxuLnFsLWVkaXRvciBvbCxcXG4ucWwtZWRpdG9yIHVsLFxcbi5xbC1lZGl0b3IgcHJlLFxcbi5xbC1lZGl0b3IgYmxvY2txdW90ZSxcXG4ucWwtZWRpdG9yIGgxLFxcbi5xbC1lZGl0b3IgaDIsXFxuLnFsLWVkaXRvciBoMyxcXG4ucWwtZWRpdG9yIGg0LFxcbi5xbC1lZGl0b3IgaDUsXFxuLnFsLWVkaXRvciBoNiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgY291bnRlci1yZXNldDogbGlzdC0xIGxpc3QtMiBsaXN0LTMgbGlzdC00IGxpc3QtNSBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wsXFxuLnFsLWVkaXRvciB1bCB7XFxuICBwYWRkaW5nLWxlZnQ6IDEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIG9sID4gbGksXFxuLnFsLWVkaXRvciB1bCA+IGxpIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuLnFsLWVkaXRvciB1bCA+IGxpOjpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFwyMDIyJztcXG59XFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9dHJ1ZV0sXFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9ZmFsc2VdIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD10cnVlXSA+IGxpICosXFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9ZmFsc2VdID4gbGkgKiB7XFxuICBwb2ludGVyLWV2ZW50czogYWxsO1xcbn1cXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD10cnVlXSA+IGxpOjpiZWZvcmUsXFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9ZmFsc2VdID4gbGk6OmJlZm9yZSB7XFxuICBjb2xvcjogIzc3NztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxufVxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPXRydWVdID4gbGk6OmJlZm9yZSB7XFxuICBjb250ZW50OiAnXFxcXDI2MTEnO1xcbn1cXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD1mYWxzZV0gPiBsaTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdcXFxcMjYxMCc7XFxufVxcbi5xbC1lZGl0b3IgbGk6OmJlZm9yZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgd2lkdGg6IDEuMmVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCk6OmJlZm9yZSB7XFxuICBtYXJnaW4tbGVmdDogLTEuNWVtO1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjNlbTtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWRpcmVjdGlvbi1ydGw6OmJlZm9yZSB7XFxuICBtYXJnaW4tbGVmdDogMC4zZW07XFxuICBtYXJnaW4tcmlnaHQ6IC0xLjVlbTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpLFxcbi5xbC1lZGl0b3IgdWwgbGk6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWRpcmVjdGlvbi1ydGwsXFxuLnFsLWVkaXRvciB1bCBsaS5xbC1kaXJlY3Rpb24tcnRsIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpIHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtMSBsaXN0LTIgbGlzdC0zIGxpc3QtNCBsaXN0LTUgbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtMDtcXG59XFxuLnFsLWVkaXRvciBvbCBsaTpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTAsIGRlY2ltYWwpICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTEge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtMTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMTpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTEsIGxvd2VyLWFscGhhKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0xIHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtMiBsaXN0LTMgbGlzdC00IGxpc3QtNSBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTIge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtMjtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMjpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTIsIGxvd2VyLXJvbWFuKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0yIHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtMyBsaXN0LTQgbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMyB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC0zO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0zOmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtMywgZGVjaW1hbCkgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMyB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTQgbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNCB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC00O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC00OmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtNCwgbG93ZXItYWxwaGEpICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTQge1xcbiAgY291bnRlci1yZXNldDogbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNSB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC01O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC01OmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtNSwgbG93ZXItcm9tYW4pICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTUge1xcbiAgY291bnRlci1yZXNldDogbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC02IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTY7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC02LCBkZWNpbWFsKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC02IHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC03IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC03LCBsb3dlci1hbHBoYSkgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNyB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC04IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTg7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC04LCBsb3dlci1yb21hbikgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtOCB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTkge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtOTpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTksIGRlY2ltYWwpICcuICc7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC0xOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAzZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTE6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDQuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDNlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDQuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMjpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogNmVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC0yOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiA3LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTIucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiA2ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTIucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiA3LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTM6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDllbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMzpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTAuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMy5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDllbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMy5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTQ6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEyZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTQ6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEzLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTQucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMmVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC00LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMTMuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTVlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTYuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDE1ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTUucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxNi41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC02Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxOGVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC02Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxOS41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC02LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMThlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNi5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDE5LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTc6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDIxZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTc6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDIyLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTcucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyMWVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC03LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMjIuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtODpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMjRlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtODpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMjUuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtOC5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDI0ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTgucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyNS41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC05Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAyN2VtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC05Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAyOC41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC05LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMjdlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtOS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDI4LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtdmlkZW8ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxufVxcbi5xbC1lZGl0b3IgLnFsLXZpZGVvLnFsLWFsaWduLWNlbnRlciB7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuLnFsLWVkaXRvciAucWwtdmlkZW8ucWwtYWxpZ24tcmlnaHQge1xcbiAgbWFyZ2luOiAwIDAgMCBhdXRvO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1ibGFjayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1yZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2MDAwMDtcXG59XFxuLnFsLWVkaXRvciAucWwtYmctb3JhbmdlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOTA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLXllbGxvdyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1ncmVlbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA4YTAwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1ibHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwNmM7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLXB1cnBsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTNmO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci13aGl0ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3ItcmVkIHtcXG4gIGNvbG9yOiAjZTYwMDAwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci1vcmFuZ2Uge1xcbiAgY29sb3I6ICNmOTA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLXllbGxvdyB7XFxuICBjb2xvcjogI2ZmMDtcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3ItZ3JlZW4ge1xcbiAgY29sb3I6ICMwMDhhMDA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLWJsdWUge1xcbiAgY29sb3I6ICMwNmM7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLXB1cnBsZSB7XFxuICBjb2xvcjogIzkzZjtcXG59XFxuLnFsLWVkaXRvciAucWwtZm9udC1zZXJpZiB7XFxuICBmb250LWZhbWlseTogR2VvcmdpYSwgVGltZXMgTmV3IFJvbWFuLCBzZXJpZjtcXG59XFxuLnFsLWVkaXRvciAucWwtZm9udC1tb25vc3BhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE1vbmFjbywgQ291cmllciBOZXcsIG1vbm9zcGFjZTtcXG59XFxuLnFsLWVkaXRvciAucWwtc2l6ZS1zbWFsbCB7XFxuICBmb250LXNpemU6IDAuNzVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtc2l6ZS1sYXJnZSB7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1zaXplLWh1Z2Uge1xcbiAgZm9udC1zaXplOiAyLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtZGlyZWN0aW9uLXJ0bCB7XFxuICBkaXJlY3Rpb246IHJ0bDtcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWFsaWduLWNlbnRlciB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWFsaWduLWp1c3RpZnkge1xcbiAgdGV4dC1hbGlnbjoganVzdGlmeTtcXG59XFxuLnFsLWVkaXRvciAucWwtYWxpZ24tcmlnaHQge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcbi5xbC1lZGl0b3IucWwtYmxhbms6OmJlZm9yZSB7XFxuICBjb2xvcjogcmdiYSgwLDAsMCwwLjYpO1xcbiAgY29udGVudDogYXR0cihkYXRhLXBsYWNlaG9sZGVyKTtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGxlZnQ6IDE1cHg7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxNXB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyohXFxuICogUXVpbGwgRWRpdG9yIHYxLjMuN1xcbiAqIGh0dHBzOi8vcXVpbGxqcy5jb20vXFxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBKYXNvbiBDaGVuXFxuICogQ29weXJpZ2h0IChjKSAyMDEzLCBzYWxlc2ZvcmNlLmNvbVxcbiAqL1xcbi5xbC1jb250YWluZXIge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxM3B4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgbWFyZ2luOiAwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5xbC1jb250YWluZXIucWwtZGlzYWJsZWQgLnFsLXRvb2x0aXAge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG4ucWwtY29udGFpbmVyLnFsLWRpc2FibGVkIC5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkXSA+IGxpOjpiZWZvcmUge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5xbC1jbGlwYm9hcmQge1xcbiAgbGVmdDogLTEwMDAwMHB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBvdmVyZmxvdy15OiBoaWRkZW47XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG59XFxuLnFsLWNsaXBib2FyZCBwIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5xbC1lZGl0b3Ige1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjQyO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBwYWRkaW5nOiAxMnB4IDE1cHg7XFxuICB0YWItc2l6ZTogNDtcXG4gIC1tb3otdGFiLXNpemU6IDQ7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbn1cXG4ucWwtZWRpdG9yID4gKiB7XFxuICBjdXJzb3I6IHRleHQ7XFxufVxcbi5xbC1lZGl0b3IgcCxcXG4ucWwtZWRpdG9yIG9sLFxcbi5xbC1lZGl0b3IgdWwsXFxuLnFsLWVkaXRvciBwcmUsXFxuLnFsLWVkaXRvciBibG9ja3F1b3RlLFxcbi5xbC1lZGl0b3IgaDEsXFxuLnFsLWVkaXRvciBoMixcXG4ucWwtZWRpdG9yIGgzLFxcbi5xbC1lZGl0b3IgaDQsXFxuLnFsLWVkaXRvciBoNSxcXG4ucWwtZWRpdG9yIGg2IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTEgbGlzdC0yIGxpc3QtMyBsaXN0LTQgbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCxcXG4ucWwtZWRpdG9yIHVsIHtcXG4gIHBhZGRpbmctbGVmdDogMS41ZW07XFxufVxcbi5xbC1lZGl0b3Igb2wgPiBsaSxcXG4ucWwtZWRpdG9yIHVsID4gbGkge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG4ucWwtZWRpdG9yIHVsID4gbGk6OmJlZm9yZSB7XFxuICBjb250ZW50OiAnXFxcXDIwMjInO1xcbn1cXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD10cnVlXSxcXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD1mYWxzZV0ge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPXRydWVdID4gbGkgKixcXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD1mYWxzZV0gPiBsaSAqIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxufVxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPXRydWVdID4gbGk6OmJlZm9yZSxcXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD1mYWxzZV0gPiBsaTo6YmVmb3JlIHtcXG4gIGNvbG9yOiAjNzc3O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG59XFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9dHJ1ZV0gPiBsaTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdcXFxcMjYxMSc7XFxufVxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPWZhbHNlXSA+IGxpOjpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFwyNjEwJztcXG59XFxuLnFsLWVkaXRvciBsaTo6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB3aWR0aDogMS4yZW07XFxufVxcbi5xbC1lZGl0b3IgbGk6bm90KC5xbC1kaXJlY3Rpb24tcnRsKTo6YmVmb3JlIHtcXG4gIG1hcmdpbi1sZWZ0OiAtMS41ZW07XFxuICBtYXJnaW4tcmlnaHQ6IDAuM2VtO1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtZGlyZWN0aW9uLXJ0bDo6YmVmb3JlIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjNlbTtcXG4gIG1hcmdpbi1yaWdodDogLTEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCksXFxuLnFsLWVkaXRvciB1bCBsaTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMS41ZW07XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtZGlyZWN0aW9uLXJ0bCxcXG4ucWwtZWRpdG9yIHVsIGxpLnFsLWRpcmVjdGlvbi1ydGwge1xcbiAgcGFkZGluZy1yaWdodDogMS41ZW07XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkge1xcbiAgY291bnRlci1yZXNldDogbGlzdC0xIGxpc3QtMiBsaXN0LTMgbGlzdC00IGxpc3QtNSBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC0wO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpOmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtMCwgZGVjaW1hbCkgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMSB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC0xO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0xOmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtMSwgbG93ZXItYWxwaGEpICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTEge1xcbiAgY291bnRlci1yZXNldDogbGlzdC0yIGxpc3QtMyBsaXN0LTQgbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMiB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC0yO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0yOmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtMiwgbG93ZXItcm9tYW4pICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTIge1xcbiAgY291bnRlci1yZXNldDogbGlzdC0zIGxpc3QtNCBsaXN0LTUgbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0zIHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTM7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC0zLCBkZWNpbWFsKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0zIHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtNCBsaXN0LTUgbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC00IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTQ7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC00LCBsb3dlci1hbHBoYSkgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNCB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTUgbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC01IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTU7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC01LCBsb3dlci1yb21hbikgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNSB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTYge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtNjtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNjpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTYsIGRlY2ltYWwpICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTYge1xcbiAgY291bnRlci1yZXNldDogbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTcge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtNztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNzpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTcsIGxvd2VyLWFscGhhKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC03IHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTgge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtODtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtODpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTgsIGxvd2VyLXJvbWFuKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC04IHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtOSB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC05OmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtOSwgZGVjaW1hbCkgJy4gJztcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTE6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDNlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogNC41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC0xLnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogM2VtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC0xLnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogNC41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC0yOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiA2ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTI6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDcuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMi5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDZlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMi5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDcuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMzpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogOWVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC0zOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxMC41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC0zLnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogOWVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC0zLnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMTAuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNDpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTJlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNDpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTMuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNC5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEyZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTQucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMy41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC01Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxNWVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC01Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxNi41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC01LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMTVlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDE2LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTY6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDE4ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTY6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDE5LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTYucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxOGVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC02LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMTkuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNzpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMjFlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNzpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMjIuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNy5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDIxZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTcucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyMi41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC04Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAyNGVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC04Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAyNS41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC04LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMjRlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtOC5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDI1LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTk6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDI3ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTk6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDI4LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTkucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyN2VtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC05LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMjguNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC12aWRlbyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1heC13aWR0aDogMTAwJTtcXG59XFxuLnFsLWVkaXRvciAucWwtdmlkZW8ucWwtYWxpZ24tY2VudGVyIHtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC12aWRlby5xbC1hbGlnbi1yaWdodCB7XFxuICBtYXJnaW46IDAgMCAwIGF1dG87XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLWJsYWNrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTYwMDAwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1vcmFuZ2Uge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5MDtcXG59XFxuLnFsLWVkaXRvciAucWwtYmcteWVsbG93IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLWdyZWVuIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDhhMDA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLWJsdWUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzA2YztcXG59XFxuLnFsLWVkaXRvciAucWwtYmctcHVycGxlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5M2Y7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLXdoaXRlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci1yZWQge1xcbiAgY29sb3I6ICNlNjAwMDA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLW9yYW5nZSB7XFxuICBjb2xvcjogI2Y5MDtcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3IteWVsbG93IHtcXG4gIGNvbG9yOiAjZmYwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci1ncmVlbiB7XFxuICBjb2xvcjogIzAwOGEwMDtcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3ItYmx1ZSB7XFxuICBjb2xvcjogIzA2YztcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3ItcHVycGxlIHtcXG4gIGNvbG9yOiAjOTNmO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1mb250LXNlcmlmIHtcXG4gIGZvbnQtZmFtaWx5OiBHZW9yZ2lhLCBUaW1lcyBOZXcgUm9tYW4sIHNlcmlmO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1mb250LW1vbm9zcGFjZSB7XFxuICBmb250LWZhbWlseTogTW9uYWNvLCBDb3VyaWVyIE5ldywgbW9ub3NwYWNlO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1zaXplLXNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogMC43NWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1zaXplLWxhcmdlIHtcXG4gIGZvbnQtc2l6ZTogMS41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLXNpemUtaHVnZSB7XFxuICBmb250LXNpemU6IDIuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1kaXJlY3Rpb24tcnRsIHtcXG4gIGRpcmVjdGlvbjogcnRsO1xcbiAgdGV4dC1hbGlnbjogaW5oZXJpdDtcXG59XFxuLnFsLWVkaXRvciAucWwtYWxpZ24tY2VudGVyIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnFsLWVkaXRvciAucWwtYWxpZ24tanVzdGlmeSB7XFxuICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1hbGlnbi1yaWdodCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLnFsLWVkaXRvci5xbC1ibGFuazo6YmVmb3JlIHtcXG4gIGNvbG9yOiByZ2JhKDAsMCwwLDAuNik7XFxuICBjb250ZW50OiBhdHRyKGRhdGEtcGxhY2Vob2xkZXIpO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgbGVmdDogMTVweDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDE1cHg7XFxufVxcbi5xbC1zbm93LnFsLXRvb2xiYXI6YWZ0ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXI6YWZ0ZXIge1xcbiAgY2xlYXI6IGJvdGg7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IHRhYmxlO1xcbn1cXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbixcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b24ge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgaGVpZ2h0OiAyNHB4O1xcbiAgcGFkZGluZzogM3B4IDVweDtcXG4gIHdpZHRoOiAyOHB4O1xcbn1cXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbiBzdmcsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uIHN2ZyB7XFxuICBmbG9hdDogbGVmdDtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246YWN0aXZlOmhvdmVyLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbjphY3RpdmU6aG92ZXIge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLnFsLXNub3cucWwtdG9vbGJhciBpbnB1dC5xbC1pbWFnZVt0eXBlPWZpbGVdLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGlucHV0LnFsLWltYWdlW3R5cGU9ZmlsZV0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246aG92ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmZvY3VzLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbjpmb2N1cyxcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbi5xbC1hY3RpdmUsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uLnFsLWFjdGl2ZSxcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWw6aG92ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbDpob3ZlcixcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWwucWwtYWN0aXZlLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWwucWwtYWN0aXZlLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtOmhvdmVyLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbTpob3ZlcixcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbS5xbC1zZWxlY3RlZCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQge1xcbiAgY29sb3I6ICMwNmM7XFxufVxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyIC5xbC1maWxsLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbjpob3ZlciAucWwtZmlsbCxcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpmb2N1cyAucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246Zm9jdXMgLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b24ucWwtYWN0aXZlIC5xbC1maWxsLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbi5xbC1hY3RpdmUgLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsOmhvdmVyIC5xbC1maWxsLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWw6aG92ZXIgLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSAucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSAucWwtZmlsbCxcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbTpob3ZlciAucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW06aG92ZXIgLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQgLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtLnFsLXNlbGVjdGVkIC5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246aG92ZXIgLnFsLXN0cm9rZS5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmZvY3VzIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246Zm9jdXMgLnFsLXN0cm9rZS5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsOmhvdmVyIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsOmhvdmVyIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWwucWwtYWN0aXZlIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW06aG92ZXIgLnFsLXN0cm9rZS5xbC1maWxsLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbTpob3ZlciAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQgLnFsLXN0cm9rZS5xbC1maWxsLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbS5xbC1zZWxlY3RlZCAucWwtc3Ryb2tlLnFsLWZpbGwge1xcbiAgZmlsbDogIzA2YztcXG59XFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246aG92ZXIgLnFsLXN0cm9rZSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246aG92ZXIgLnFsLXN0cm9rZSxcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpmb2N1cyAucWwtc3Ryb2tlLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbjpmb2N1cyAucWwtc3Ryb2tlLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbi5xbC1hY3RpdmUgLnFsLXN0cm9rZSxcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWw6aG92ZXIgLnFsLXN0cm9rZSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsOmhvdmVyIC5xbC1zdHJva2UsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWwucWwtYWN0aXZlIC5xbC1zdHJva2UsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW06aG92ZXIgLnFsLXN0cm9rZSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW06aG92ZXIgLnFsLXN0cm9rZSxcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbS5xbC1zZWxlY3RlZCAucWwtc3Ryb2tlLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbS5xbC1zZWxlY3RlZCAucWwtc3Ryb2tlLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246Zm9jdXMgLnFsLXN0cm9rZS1taXRlcixcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246Zm9jdXMgLnFsLXN0cm9rZS1taXRlcixcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbi5xbC1hY3RpdmUgLnFsLXN0cm9rZS1taXRlcixcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b24ucWwtYWN0aXZlIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsOmhvdmVyIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbDpob3ZlciAucWwtc3Ryb2tlLW1pdGVyLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbC5xbC1hY3RpdmUgLnFsLXN0cm9rZS1taXRlcixcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLW1pdGVyLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtOmhvdmVyIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtOmhvdmVyIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQgLnFsLXN0cm9rZS1taXRlcixcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQgLnFsLXN0cm9rZS1taXRlciB7XFxuICBzdHJva2U6ICMwNmM7XFxufVxcbkBtZWRpYSAocG9pbnRlcjogY29hcnNlKSB7XFxuICAucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpob3Zlcjpub3QoLnFsLWFjdGl2ZSksXFxuICAucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246aG92ZXI6bm90KC5xbC1hY3RpdmUpIHtcXG4gICAgY29sb3I6ICM0NDQ7XFxuICB9XFxuICAucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpob3Zlcjpub3QoLnFsLWFjdGl2ZSkgLnFsLWZpbGwsXFxuICAucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246aG92ZXI6bm90KC5xbC1hY3RpdmUpIC5xbC1maWxsLFxcbiAgLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246aG92ZXI6bm90KC5xbC1hY3RpdmUpIC5xbC1zdHJva2UucWwtZmlsbCxcXG4gIC5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbjpob3Zlcjpub3QoLnFsLWFjdGl2ZSkgLnFsLXN0cm9rZS5xbC1maWxsIHtcXG4gICAgZmlsbDogIzQ0NDtcXG4gIH1cXG4gIC5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyOm5vdCgucWwtYWN0aXZlKSAucWwtc3Ryb2tlLFxcbiAgLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyOm5vdCgucWwtYWN0aXZlKSAucWwtc3Ryb2tlLFxcbiAgLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246aG92ZXI6bm90KC5xbC1hY3RpdmUpIC5xbC1zdHJva2UtbWl0ZXIsXFxuICAucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246aG92ZXI6bm90KC5xbC1hY3RpdmUpIC5xbC1zdHJva2UtbWl0ZXIge1xcbiAgICBzdHJva2U6ICM0NDQ7XFxuICB9XFxufVxcbi5xbC1zbm93IHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5xbC1zbm93ICoge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLnFsLXNub3cgLnFsLWhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4ucWwtc25vdyAucWwtb3V0LWJvdHRvbSxcXG4ucWwtc25vdyAucWwtb3V0LXRvcCB7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMHB4KTtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXAgYSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwLnFsLWZsaXAge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMHB4KTtcXG59XFxuLnFsLXNub3cgLnFsLWZvcm1hdHMge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuLnFsLXNub3cgLnFsLWZvcm1hdHM6YWZ0ZXIge1xcbiAgY2xlYXI6IGJvdGg7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IHRhYmxlO1xcbn1cXG4ucWwtc25vdyAucWwtc3Ryb2tlIHtcXG4gIGZpbGw6IG5vbmU7XFxuICBzdHJva2U6ICM0NDQ7XFxuICBzdHJva2UtbGluZWNhcDogcm91bmQ7XFxuICBzdHJva2UtbGluZWpvaW46IHJvdW5kO1xcbiAgc3Ryb2tlLXdpZHRoOiAyO1xcbn1cXG4ucWwtc25vdyAucWwtc3Ryb2tlLW1pdGVyIHtcXG4gIGZpbGw6IG5vbmU7XFxuICBzdHJva2U6ICM0NDQ7XFxuICBzdHJva2UtbWl0ZXJsaW1pdDogMTA7XFxuICBzdHJva2Utd2lkdGg6IDI7XFxufVxcbi5xbC1zbm93IC5xbC1maWxsLFxcbi5xbC1zbm93IC5xbC1zdHJva2UucWwtZmlsbCB7XFxuICBmaWxsOiAjNDQ0O1xcbn1cXG4ucWwtc25vdyAucWwtZW1wdHkge1xcbiAgZmlsbDogbm9uZTtcXG59XFxuLnFsLXNub3cgLnFsLWV2ZW4ge1xcbiAgZmlsbC1ydWxlOiBldmVub2RkO1xcbn1cXG4ucWwtc25vdyAucWwtdGhpbixcXG4ucWwtc25vdyAucWwtc3Ryb2tlLnFsLXRoaW4ge1xcbiAgc3Ryb2tlLXdpZHRoOiAxO1xcbn1cXG4ucWwtc25vdyAucWwtdHJhbnNwYXJlbnQge1xcbiAgb3BhY2l0eTogMC40O1xcbn1cXG4ucWwtc25vdyAucWwtZGlyZWN0aW9uIHN2ZzpsYXN0LWNoaWxkIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5xbC1zbm93IC5xbC1kaXJlY3Rpb24ucWwtYWN0aXZlIHN2ZzpsYXN0LWNoaWxkIHtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuLnFsLXNub3cgLnFsLWRpcmVjdGlvbi5xbC1hY3RpdmUgc3ZnOmZpcnN0LWNoaWxkIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgaDEge1xcbiAgZm9udC1zaXplOiAyZW07XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgaDIge1xcbiAgZm9udC1zaXplOiAxLjVlbTtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBoMyB7XFxuICBmb250LXNpemU6IDEuMTdlbTtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBoNCB7XFxuICBmb250LXNpemU6IDFlbTtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBoNSB7XFxuICBmb250LXNpemU6IDAuODNlbTtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBoNiB7XFxuICBmb250LXNpemU6IDAuNjdlbTtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBhIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbn1cXG4ucWwtc25vdyAucWwtZWRpdG9yIGJsb2NrcXVvdGUge1xcbiAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjY2NjO1xcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiAgbWFyZ2luLXRvcDogNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xcbn1cXG4ucWwtc25vdyAucWwtZWRpdG9yIGNvZGUsXFxuLnFsLXNub3cgLnFsLWVkaXRvciBwcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBwcmUge1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiAgbWFyZ2luLXRvcDogNXB4O1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgY29kZSB7XFxuICBmb250LXNpemU6IDg1JTtcXG4gIHBhZGRpbmc6IDJweCA0cHg7XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgcHJlLnFsLXN5bnRheCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjMyNDFmO1xcbiAgY29sb3I6ICNmOGY4ZjI7XFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBpbWcge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyIHtcXG4gIGNvbG9yOiAjNDQ0O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgaGVpZ2h0OiAyNHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci1sYWJlbCB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwYWRkaW5nLWxlZnQ6IDhweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDJweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLWxhYmVsOjpiZWZvcmUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbGluZS1oZWlnaHQ6IDIycHg7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXItb3B0aW9ucyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG1pbi13aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDRweCA4cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLW9wdGlvbnMgLnFsLXBpY2tlci1pdGVtIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZy1ib3R0b206IDVweDtcXG4gIHBhZGRpbmctdG9wOiA1cHg7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZXhwYW5kZWQgLnFsLXBpY2tlci1sYWJlbCB7XFxuICBjb2xvcjogI2NjYztcXG4gIHotaW5kZXg6IDI7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZXhwYW5kZWQgLnFsLXBpY2tlci1sYWJlbCAucWwtZmlsbCB7XFxuICBmaWxsOiAjY2NjO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWV4cGFuZGVkIC5xbC1waWNrZXItbGFiZWwgLnFsLXN0cm9rZSB7XFxuICBzdHJva2U6ICNjY2M7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZXhwYW5kZWQgLnFsLXBpY2tlci1vcHRpb25zIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luLXRvcDogLTFweDtcXG4gIHRvcDogMTAwJTtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi5xbC1zbm93IC5xbC1jb2xvci1waWNrZXIsXFxuLnFsLXNub3cgLnFsLWljb24tcGlja2VyIHtcXG4gIHdpZHRoOiAyOHB4O1xcbn1cXG4ucWwtc25vdyAucWwtY29sb3ItcGlja2VyIC5xbC1waWNrZXItbGFiZWwsXFxuLnFsLXNub3cgLnFsLWljb24tcGlja2VyIC5xbC1waWNrZXItbGFiZWwge1xcbiAgcGFkZGluZzogMnB4IDRweDtcXG59XFxuLnFsLXNub3cgLnFsLWNvbG9yLXBpY2tlciAucWwtcGlja2VyLWxhYmVsIHN2ZyxcXG4ucWwtc25vdyAucWwtaWNvbi1waWNrZXIgLnFsLXBpY2tlci1sYWJlbCBzdmcge1xcbiAgcmlnaHQ6IDRweDtcXG59XFxuLnFsLXNub3cgLnFsLWljb24tcGlja2VyIC5xbC1waWNrZXItb3B0aW9ucyB7XFxuICBwYWRkaW5nOiA0cHggMHB4O1xcbn1cXG4ucWwtc25vdyAucWwtaWNvbi1waWNrZXIgLnFsLXBpY2tlci1pdGVtIHtcXG4gIGhlaWdodDogMjRweDtcXG4gIHdpZHRoOiAyNHB4O1xcbiAgcGFkZGluZzogMnB4IDRweDtcXG59XFxuLnFsLXNub3cgLnFsLWNvbG9yLXBpY2tlciAucWwtcGlja2VyLW9wdGlvbnMge1xcbiAgcGFkZGluZzogM3B4IDVweDtcXG4gIHdpZHRoOiAxNTJweDtcXG59XFxuLnFsLXNub3cgLnFsLWNvbG9yLXBpY2tlciAucWwtcGlja2VyLWl0ZW0ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBmbG9hdDogbGVmdDtcXG4gIGhlaWdodDogMTZweDtcXG4gIG1hcmdpbjogMnB4O1xcbiAgcGFkZGluZzogMHB4O1xcbiAgd2lkdGg6IDE2cHg7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXI6bm90KC5xbC1jb2xvci1waWNrZXIpOm5vdCgucWwtaWNvbi1waWNrZXIpIHN2ZyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBtYXJnaW4tdG9wOiAtOXB4O1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IDUwJTtcXG4gIHdpZHRoOiAxOHB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWxhYmVsW2RhdGEtbGFiZWxdOm5vdChbZGF0YS1sYWJlbD0nJ10pOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1mb250IC5xbC1waWNrZXItbGFiZWxbZGF0YS1sYWJlbF06bm90KFtkYXRhLWxhYmVsPScnXSk6OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1sYWJlbFtkYXRhLWxhYmVsXTpub3QoW2RhdGEtbGFiZWw9JyddKTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLWxhYmVsXTpub3QoW2RhdGEtbGFiZWw9JyddKTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWl0ZW1bZGF0YS1sYWJlbF06bm90KFtkYXRhLWxhYmVsPScnXSk6OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1pdGVtW2RhdGEtbGFiZWxdOm5vdChbZGF0YS1sYWJlbD0nJ10pOjpiZWZvcmUge1xcbiAgY29udGVudDogYXR0cihkYXRhLWxhYmVsKTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIge1xcbiAgd2lkdGg6IDk4cHg7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItbGFiZWw6OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnTm9ybWFsJztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPVxcXCIxXFxcIl06OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1cXFwiMVxcXCJdOjpiZWZvcmUge1xcbiAgY29udGVudDogJ0hlYWRpbmcgMSc7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItbGFiZWxbZGF0YS12YWx1ZT1cXFwiMlxcXCJdOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjJcXFwiXTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdIZWFkaW5nIDInO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWxhYmVsW2RhdGEtdmFsdWU9XFxcIjNcXFwiXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPVxcXCIzXFxcIl06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnSGVhZGluZyAzJztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPVxcXCI0XFxcIl06OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1cXFwiNFxcXCJdOjpiZWZvcmUge1xcbiAgY29udGVudDogJ0hlYWRpbmcgNCc7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItbGFiZWxbZGF0YS12YWx1ZT1cXFwiNVxcXCJdOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjVcXFwiXTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdIZWFkaW5nIDUnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWxhYmVsW2RhdGEtdmFsdWU9XFxcIjZcXFwiXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPVxcXCI2XFxcIl06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnSGVhZGluZyA2JztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjFcXFwiXTo6YmVmb3JlIHtcXG4gIGZvbnQtc2l6ZTogMmVtO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1cXFwiMlxcXCJdOjpiZWZvcmUge1xcbiAgZm9udC1zaXplOiAxLjVlbTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjNcXFwiXTo6YmVmb3JlIHtcXG4gIGZvbnQtc2l6ZTogMS4xN2VtO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1cXFwiNFxcXCJdOjpiZWZvcmUge1xcbiAgZm9udC1zaXplOiAxZW07XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPVxcXCI1XFxcIl06OmJlZm9yZSB7XFxuICBmb250LXNpemU6IDAuODNlbTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjZcXFwiXTo6YmVmb3JlIHtcXG4gIGZvbnQtc2l6ZTogMC42N2VtO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWZvbnQge1xcbiAgd2lkdGg6IDEwOHB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWZvbnQgLnFsLXBpY2tlci1sYWJlbDo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWl0ZW06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnU2FucyBTZXJpZic7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWxhYmVsW2RhdGEtdmFsdWU9c2VyaWZdOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1mb250IC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPXNlcmlmXTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdTZXJpZic7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWxhYmVsW2RhdGEtdmFsdWU9bW9ub3NwYWNlXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1tb25vc3BhY2VdOjpiZWZvcmUge1xcbiAgY29udGVudDogJ01vbm9zcGFjZSc7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1zZXJpZl06OmJlZm9yZSB7XFxuICBmb250LWZhbWlseTogR2VvcmdpYSwgVGltZXMgTmV3IFJvbWFuLCBzZXJpZjtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1mb250IC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPW1vbm9zcGFjZV06OmJlZm9yZSB7XFxuICBmb250LWZhbWlseTogTW9uYWNvLCBDb3VyaWVyIE5ldywgbW9ub3NwYWNlO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUge1xcbiAgd2lkdGg6IDk4cHg7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtc2l6ZSAucWwtcGlja2VyLWxhYmVsOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItaXRlbTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdOb3JtYWwnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPXNtYWxsXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtc2l6ZSAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1zbWFsbF06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnU21hbGwnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPWxhcmdlXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtc2l6ZSAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1sYXJnZV06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnTGFyZ2UnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPWh1Z2VdOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPWh1Z2VdOjpiZWZvcmUge1xcbiAgY29udGVudDogJ0h1Z2UnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9c21hbGxdOjpiZWZvcmUge1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9bGFyZ2VdOjpiZWZvcmUge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9aHVnZV06OmJlZm9yZSB7XFxuICBmb250LXNpemU6IDMycHg7XFxufVxcbi5xbC1zbm93IC5xbC1jb2xvci1waWNrZXIucWwtYmFja2dyb3VuZCAucWwtcGlja2VyLWl0ZW0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuLnFsLXNub3cgLnFsLWNvbG9yLXBpY2tlci5xbC1jb2xvciAucWwtcGlja2VyLWl0ZW0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG59XFxuLnFsLXRvb2xiYXIucWwtc25vdyB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZjtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuLnFsLXRvb2xiYXIucWwtc25vdyAucWwtZm9ybWF0cyB7XFxuICBtYXJnaW4tcmlnaHQ6IDE1cHg7XFxufVxcbi5xbC10b29sYmFyLnFsLXNub3cgLnFsLXBpY2tlci1sYWJlbCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuLnFsLXRvb2xiYXIucWwtc25vdyAucWwtcGlja2VyLW9wdGlvbnMge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3gtc2hhZG93OiByZ2JhKDAsMCwwLDAuMikgMCAycHggOHB4O1xcbn1cXG4ucWwtdG9vbGJhci5xbC1zbm93IC5xbC1waWNrZXIucWwtZXhwYW5kZWQgLnFsLXBpY2tlci1sYWJlbCB7XFxuICBib3JkZXItY29sb3I6ICNjY2M7XFxufVxcbi5xbC10b29sYmFyLnFsLXNub3cgLnFsLXBpY2tlci5xbC1leHBhbmRlZCAucWwtcGlja2VyLW9wdGlvbnMge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjO1xcbn1cXG4ucWwtdG9vbGJhci5xbC1zbm93IC5xbC1jb2xvci1waWNrZXIgLnFsLXBpY2tlci1pdGVtLnFsLXNlbGVjdGVkLFxcbi5xbC10b29sYmFyLnFsLXNub3cgLnFsLWNvbG9yLXBpY2tlciAucWwtcGlja2VyLWl0ZW06aG92ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjMDAwO1xcbn1cXG4ucWwtdG9vbGJhci5xbC1zbm93ICsgLnFsLWNvbnRhaW5lci5xbC1zbm93IHtcXG4gIGJvcmRlci10b3A6IDBweDtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxuICBib3gtc2hhZG93OiAwcHggMHB4IDVweCAjZGRkO1xcbiAgY29sb3I6ICM0NDQ7XFxuICBwYWRkaW5nOiA1cHggMTJweDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlZpc2l0IFVSTDpcXFwiO1xcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XFxuICBtYXJnaW4tcmlnaHQ6IDhweDtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXAgaW5wdXRbdHlwZT10ZXh0XSB7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXG4gIGZvbnQtc2l6ZTogMTNweDtcXG4gIGhlaWdodDogMjZweDtcXG4gIG1hcmdpbjogMHB4O1xcbiAgcGFkZGluZzogM3B4IDVweDtcXG4gIHdpZHRoOiAxNzBweDtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXAgYS5xbC1wcmV2aWV3IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1heC13aWR0aDogMjAwcHg7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwIGEucWwtYWN0aW9uOjphZnRlciB7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjY2NjO1xcbiAgY29udGVudDogJ0VkaXQnO1xcbiAgbWFyZ2luLWxlZnQ6IDE2cHg7XFxuICBwYWRkaW5nLXJpZ2h0OiA4cHg7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwIGEucWwtcmVtb3ZlOjpiZWZvcmUge1xcbiAgY29udGVudDogJ1JlbW92ZSc7XFxuICBtYXJnaW4tbGVmdDogOHB4O1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcCBhIHtcXG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcC5xbC1lZGl0aW5nIGEucWwtcHJldmlldyxcXG4ucWwtc25vdyAucWwtdG9vbHRpcC5xbC1lZGl0aW5nIGEucWwtcmVtb3ZlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwLnFsLWVkaXRpbmcgaW5wdXRbdHlwZT10ZXh0XSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwLnFsLWVkaXRpbmcgYS5xbC1hY3Rpb246OmFmdGVyIHtcXG4gIGJvcmRlci1yaWdodDogMHB4O1xcbiAgY29udGVudDogJ1NhdmUnO1xcbiAgcGFkZGluZy1yaWdodDogMHB4O1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcFtkYXRhLW1vZGU9bGlua106OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiRW50ZXIgbGluazpcXFwiO1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcFtkYXRhLW1vZGU9Zm9ybXVsYV06OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiRW50ZXIgZm9ybXVsYTpcXFwiO1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcFtkYXRhLW1vZGU9dmlkZW9dOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIkVudGVyIHZpZGVvOlxcXCI7XFxufVxcbi5xbC1zbm93IGEge1xcbiAgY29sb3I6ICMwNmM7XFxufVxcbi5xbC1jb250YWluZXIucWwtc25vdyB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvcXVpbGwvZGlzdC9xdWls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aUI7QUFDbkI7QUFDQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsZUFBZTtFQUNmLFlBQVk7RUFDWixXQUFXO0VBQ1gsZ0JBQWdCO0VBQ2hCLFlBQVk7QUFDZDtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsNEJBQTRCO0VBQzVCLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7QUFDQTs7RUFFRSxhQUFhO0FBQ2Y7QUFDQTtFQUNFLHFCQUFxQjtBQUN2QjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UseUJBQXlCO0FBQzNCO0FBQ0E7RUFDRSx1QkFBdUI7QUFDekI7QUFDQTtFQUNFLFdBQVc7QUFDYjtBQUNBO0VBQ0Usc0JBQXNCO0FBQ3hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIVxcbiAqIFF1aWxsIEVkaXRvciB2MS4zLjdcXG4gKiBodHRwczovL3F1aWxsanMuY29tL1xcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgSmFzb24gQ2hlblxcbiAqIENvcHlyaWdodCAoYykgMjAxMywgc2FsZXNmb3JjZS5jb21cXG4gKi9cXG4ucWwtY29udGFpbmVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMTNweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbjogMHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ucWwtY29udGFpbmVyLnFsLWRpc2FibGVkIC5xbC10b29sdGlwIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuLnFsLWNvbnRhaW5lci5xbC1kaXNhYmxlZCAucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZF0gPiBsaTo6YmVmb3JlIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4ucWwtY2xpcGJvYXJkIHtcXG4gIGxlZnQ6IC0xMDAwMDBweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxufVxcbi5xbC1jbGlwYm9hcmQgcCB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ucWwtZWRpdG9yIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBsaW5lLWhlaWdodDogMS40MjtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgcGFkZGluZzogMTJweCAxNXB4O1xcbiAgdGFiLXNpemU6IDQ7XFxuICAtbW96LXRhYi1zaXplOiA0O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG59XFxuLnFsLWVkaXRvciA+ICoge1xcbiAgY3Vyc29yOiB0ZXh0O1xcbn1cXG4ucWwtZWRpdG9yIHAsXFxuLnFsLWVkaXRvciBvbCxcXG4ucWwtZWRpdG9yIHVsLFxcbi5xbC1lZGl0b3IgcHJlLFxcbi5xbC1lZGl0b3IgYmxvY2txdW90ZSxcXG4ucWwtZWRpdG9yIGgxLFxcbi5xbC1lZGl0b3IgaDIsXFxuLnFsLWVkaXRvciBoMyxcXG4ucWwtZWRpdG9yIGg0LFxcbi5xbC1lZGl0b3IgaDUsXFxuLnFsLWVkaXRvciBoNiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgY291bnRlci1yZXNldDogbGlzdC0xIGxpc3QtMiBsaXN0LTMgbGlzdC00IGxpc3QtNSBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wsXFxuLnFsLWVkaXRvciB1bCB7XFxuICBwYWRkaW5nLWxlZnQ6IDEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIG9sID4gbGksXFxuLnFsLWVkaXRvciB1bCA+IGxpIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuLnFsLWVkaXRvciB1bCA+IGxpOjpiZWZvcmUge1xcbiAgY29udGVudDogJ1xcXFwyMDIyJztcXG59XFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9dHJ1ZV0sXFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9ZmFsc2VdIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD10cnVlXSA+IGxpICosXFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9ZmFsc2VdID4gbGkgKiB7XFxuICBwb2ludGVyLWV2ZW50czogYWxsO1xcbn1cXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD10cnVlXSA+IGxpOjpiZWZvcmUsXFxuLnFsLWVkaXRvciB1bFtkYXRhLWNoZWNrZWQ9ZmFsc2VdID4gbGk6OmJlZm9yZSB7XFxuICBjb2xvcjogIzc3NztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxufVxcbi5xbC1lZGl0b3IgdWxbZGF0YS1jaGVja2VkPXRydWVdID4gbGk6OmJlZm9yZSB7XFxuICBjb250ZW50OiAnXFxcXDI2MTEnO1xcbn1cXG4ucWwtZWRpdG9yIHVsW2RhdGEtY2hlY2tlZD1mYWxzZV0gPiBsaTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdcXFxcMjYxMCc7XFxufVxcbi5xbC1lZGl0b3IgbGk6OmJlZm9yZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgd2lkdGg6IDEuMmVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCk6OmJlZm9yZSB7XFxuICBtYXJnaW4tbGVmdDogLTEuNWVtO1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjNlbTtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWRpcmVjdGlvbi1ydGw6OmJlZm9yZSB7XFxuICBtYXJnaW4tbGVmdDogMC4zZW07XFxuICBtYXJnaW4tcmlnaHQ6IC0xLjVlbTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpLFxcbi5xbC1lZGl0b3IgdWwgbGk6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWRpcmVjdGlvbi1ydGwsXFxuLnFsLWVkaXRvciB1bCBsaS5xbC1kaXJlY3Rpb24tcnRsIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpIHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtMSBsaXN0LTIgbGlzdC0zIGxpc3QtNCBsaXN0LTUgbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtMDtcXG59XFxuLnFsLWVkaXRvciBvbCBsaTpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTAsIGRlY2ltYWwpICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTEge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtMTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMTpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTEsIGxvd2VyLWFscGhhKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0xIHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtMiBsaXN0LTMgbGlzdC00IGxpc3QtNSBsaXN0LTYgbGlzdC03IGxpc3QtOCBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTIge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtMjtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMjpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTIsIGxvd2VyLXJvbWFuKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0yIHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtMyBsaXN0LTQgbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMyB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC0zO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC0zOmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtMywgZGVjaW1hbCkgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtMyB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTQgbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNCB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC00O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC00OmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtNCwgbG93ZXItYWxwaGEpICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTQge1xcbiAgY291bnRlci1yZXNldDogbGlzdC01IGxpc3QtNiBsaXN0LTcgbGlzdC04IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNSB7XFxuICBjb3VudGVyLWluY3JlbWVudDogbGlzdC01O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC01OmJlZm9yZSB7XFxuICBjb250ZW50OiBjb3VudGVyKGxpc3QtNSwgbG93ZXItcm9tYW4pICcuICc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTUge1xcbiAgY291bnRlci1yZXNldDogbGlzdC02IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC02IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTY7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC02LCBkZWNpbWFsKSAnLiAnO1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC02IHtcXG4gIGNvdW50ZXItcmVzZXQ6IGxpc3QtNyBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC03IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTc7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTc6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC03LCBsb3dlci1hbHBoYSkgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtNyB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTggbGlzdC05O1xcbn1cXG4ucWwtZWRpdG9yIG9sIGxpLnFsLWluZGVudC04IHtcXG4gIGNvdW50ZXItaW5jcmVtZW50OiBsaXN0LTg7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGlzdC04LCBsb3dlci1yb21hbikgJy4gJztcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtOCB7XFxuICBjb3VudGVyLXJlc2V0OiBsaXN0LTk7XFxufVxcbi5xbC1lZGl0b3Igb2wgbGkucWwtaW5kZW50LTkge1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpc3QtOTtcXG59XFxuLnFsLWVkaXRvciBvbCBsaS5xbC1pbmRlbnQtOTpiZWZvcmUge1xcbiAgY29udGVudDogY291bnRlcihsaXN0LTksIGRlY2ltYWwpICcuICc7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC0xOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAzZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTE6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDQuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDNlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDQuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMjpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogNmVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC0yOm5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiA3LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTIucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiA2ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTIucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiA3LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTM6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDllbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMzpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTAuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtMy5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDllbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtMy5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTQ6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEyZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTQ6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEzLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTQucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMmVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC00LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMTMuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTVlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNTpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMTYuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtNS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDE1ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTUucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAxNi41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC02Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxOGVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC02Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAxOS41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC02LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMThlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtNi5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDE5LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTc6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDIxZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTc6bm90KC5xbC1kaXJlY3Rpb24tcnRsKSB7XFxuICBwYWRkaW5nLWxlZnQ6IDIyLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtaW5kZW50LTcucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyMWVtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC03LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMjIuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtODpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMjRlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtODpub3QoLnFsLWRpcmVjdGlvbi1ydGwpIHtcXG4gIHBhZGRpbmctbGVmdDogMjUuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1pbmRlbnQtOC5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDI0ZW07XFxufVxcbi5xbC1lZGl0b3IgbGkucWwtaW5kZW50LTgucWwtZGlyZWN0aW9uLXJ0bC5xbC1hbGlnbi1yaWdodCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyNS41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC05Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAyN2VtO1xcbn1cXG4ucWwtZWRpdG9yIGxpLnFsLWluZGVudC05Om5vdCgucWwtZGlyZWN0aW9uLXJ0bCkge1xcbiAgcGFkZGluZy1sZWZ0OiAyOC41ZW07XFxufVxcbi5xbC1lZGl0b3IgLnFsLWluZGVudC05LnFsLWRpcmVjdGlvbi1ydGwucWwtYWxpZ24tcmlnaHQge1xcbiAgcGFkZGluZy1yaWdodDogMjdlbTtcXG59XFxuLnFsLWVkaXRvciBsaS5xbC1pbmRlbnQtOS5xbC1kaXJlY3Rpb24tcnRsLnFsLWFsaWduLXJpZ2h0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDI4LjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtdmlkZW8ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxufVxcbi5xbC1lZGl0b3IgLnFsLXZpZGVvLnFsLWFsaWduLWNlbnRlciB7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuLnFsLWVkaXRvciAucWwtdmlkZW8ucWwtYWxpZ24tcmlnaHQge1xcbiAgbWFyZ2luOiAwIDAgMCBhdXRvO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1ibGFjayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1yZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2MDAwMDtcXG59XFxuLnFsLWVkaXRvciAucWwtYmctb3JhbmdlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOTA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLXllbGxvdyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1ncmVlbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA4YTAwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1iZy1ibHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwNmM7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWJnLXB1cnBsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTNmO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci13aGl0ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3ItcmVkIHtcXG4gIGNvbG9yOiAjZTYwMDAwO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1jb2xvci1vcmFuZ2Uge1xcbiAgY29sb3I6ICNmOTA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLXllbGxvdyB7XFxuICBjb2xvcjogI2ZmMDtcXG59XFxuLnFsLWVkaXRvciAucWwtY29sb3ItZ3JlZW4ge1xcbiAgY29sb3I6ICMwMDhhMDA7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLWJsdWUge1xcbiAgY29sb3I6ICMwNmM7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWNvbG9yLXB1cnBsZSB7XFxuICBjb2xvcjogIzkzZjtcXG59XFxuLnFsLWVkaXRvciAucWwtZm9udC1zZXJpZiB7XFxuICBmb250LWZhbWlseTogR2VvcmdpYSwgVGltZXMgTmV3IFJvbWFuLCBzZXJpZjtcXG59XFxuLnFsLWVkaXRvciAucWwtZm9udC1tb25vc3BhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE1vbmFjbywgQ291cmllciBOZXcsIG1vbm9zcGFjZTtcXG59XFxuLnFsLWVkaXRvciAucWwtc2l6ZS1zbWFsbCB7XFxuICBmb250LXNpemU6IDAuNzVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtc2l6ZS1sYXJnZSB7XFxuICBmb250LXNpemU6IDEuNWVtO1xcbn1cXG4ucWwtZWRpdG9yIC5xbC1zaXplLWh1Z2Uge1xcbiAgZm9udC1zaXplOiAyLjVlbTtcXG59XFxuLnFsLWVkaXRvciAucWwtZGlyZWN0aW9uLXJ0bCB7XFxuICBkaXJlY3Rpb246IHJ0bDtcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWFsaWduLWNlbnRlciB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5xbC1lZGl0b3IgLnFsLWFsaWduLWp1c3RpZnkge1xcbiAgdGV4dC1hbGlnbjoganVzdGlmeTtcXG59XFxuLnFsLWVkaXRvciAucWwtYWxpZ24tcmlnaHQge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcbi5xbC1lZGl0b3IucWwtYmxhbms6OmJlZm9yZSB7XFxuICBjb2xvcjogcmdiYSgwLDAsMCwwLjYpO1xcbiAgY29udGVudDogYXR0cihkYXRhLXBsYWNlaG9sZGVyKTtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGxlZnQ6IDE1cHg7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxNXB4O1xcbn1cXG4ucWwtc25vdy5xbC10b29sYmFyOmFmdGVyLFxcbi5xbC1zbm93IC5xbC10b29sYmFyOmFmdGVyIHtcXG4gIGNsZWFyOiBib3RoO1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiB0YWJsZTtcXG59XFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b24sXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmbG9hdDogbGVmdDtcXG4gIGhlaWdodDogMjRweDtcXG4gIHBhZGRpbmc6IDNweCA1cHg7XFxuICB3aWR0aDogMjhweDtcXG59XFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b24gc3ZnLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbiBzdmcge1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmFjdGl2ZTpob3ZlcixcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246YWN0aXZlOmhvdmVyIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcbi5xbC1zbm93LnFsLXRvb2xiYXIgaW5wdXQucWwtaW1hZ2VbdHlwZT1maWxlXSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBpbnB1dC5xbC1pbWFnZVt0eXBlPWZpbGVdIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbjpob3ZlcixcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpmb2N1cyxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246Zm9jdXMsXFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b24ucWwtYWN0aXZlLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbi5xbC1hY3RpdmUsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsOmhvdmVyLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWw6aG92ZXIsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSxcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbTpob3ZlcixcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW06aG92ZXIsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtLnFsLXNlbGVjdGVkIHtcXG4gIGNvbG9yOiAjMDZjO1xcbn1cXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpob3ZlciAucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246aG92ZXIgLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246Zm9jdXMgLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmZvY3VzIC5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uLnFsLWFjdGl2ZSAucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b24ucWwtYWN0aXZlIC5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbDpob3ZlciAucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsOmhvdmVyIC5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbC5xbC1hY3RpdmUgLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbC5xbC1hY3RpdmUgLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW06aG92ZXIgLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtOmhvdmVyIC5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtLnFsLXNlbGVjdGVkIC5xbC1maWxsLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbS5xbC1zZWxlY3RlZCAucWwtZmlsbCxcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpob3ZlciAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpmb2N1cyAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmZvY3VzIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbi5xbC1hY3RpdmUgLnFsLXN0cm9rZS5xbC1maWxsLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbi5xbC1hY3RpdmUgLnFsLXN0cm9rZS5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbDpob3ZlciAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbDpob3ZlciAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbC5xbC1hY3RpdmUgLnFsLXN0cm9rZS5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtOmhvdmVyIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW06aG92ZXIgLnFsLXN0cm9rZS5xbC1maWxsLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtLnFsLXNlbGVjdGVkIC5xbC1zdHJva2UucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQgLnFsLXN0cm9rZS5xbC1maWxsIHtcXG4gIGZpbGw6ICMwNmM7XFxufVxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyIC5xbC1zdHJva2UsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyIC5xbC1zdHJva2UsXFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246Zm9jdXMgLnFsLXN0cm9rZSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246Zm9jdXMgLnFsLXN0cm9rZSxcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbi5xbC1hY3RpdmUgLnFsLXN0cm9rZSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciBidXR0b24ucWwtYWN0aXZlIC5xbC1zdHJva2UsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsOmhvdmVyIC5xbC1zdHJva2UsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbDpob3ZlciAucWwtc3Ryb2tlLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbC5xbC1hY3RpdmUgLnFsLXN0cm9rZSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWxhYmVsLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtOmhvdmVyIC5xbC1zdHJva2UsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtOmhvdmVyIC5xbC1zdHJva2UsXFxuLnFsLXNub3cucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQgLnFsLXN0cm9rZSxcXG4ucWwtc25vdyAucWwtdG9vbGJhciAucWwtcGlja2VyLWl0ZW0ucWwtc2VsZWN0ZWQgLnFsLXN0cm9rZSxcXG4ucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpob3ZlciAucWwtc3Ryb2tlLW1pdGVyLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbjpob3ZlciAucWwtc3Ryb2tlLW1pdGVyLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmZvY3VzIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmZvY3VzIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cucWwtdG9vbGJhciBidXR0b24ucWwtYWN0aXZlIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uLnFsLWFjdGl2ZSAucWwtc3Ryb2tlLW1pdGVyLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbDpob3ZlciAucWwtc3Ryb2tlLW1pdGVyLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWw6aG92ZXIgLnFsLXN0cm9rZS1taXRlcixcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItbGFiZWwucWwtYWN0aXZlIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1sYWJlbC5xbC1hY3RpdmUgLnFsLXN0cm9rZS1taXRlcixcXG4ucWwtc25vdy5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbTpob3ZlciAucWwtc3Ryb2tlLW1pdGVyLFxcbi5xbC1zbm93IC5xbC10b29sYmFyIC5xbC1waWNrZXItaXRlbTpob3ZlciAucWwtc3Ryb2tlLW1pdGVyLFxcbi5xbC1zbm93LnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtLnFsLXNlbGVjdGVkIC5xbC1zdHJva2UtbWl0ZXIsXFxuLnFsLXNub3cgLnFsLXRvb2xiYXIgLnFsLXBpY2tlci1pdGVtLnFsLXNlbGVjdGVkIC5xbC1zdHJva2UtbWl0ZXIge1xcbiAgc3Ryb2tlOiAjMDZjO1xcbn1cXG5AbWVkaWEgKHBvaW50ZXI6IGNvYXJzZSkge1xcbiAgLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246aG92ZXI6bm90KC5xbC1hY3RpdmUpLFxcbiAgLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyOm5vdCgucWwtYWN0aXZlKSB7XFxuICAgIGNvbG9yOiAjNDQ0O1xcbiAgfVxcbiAgLnFsLXNub3cucWwtdG9vbGJhciBidXR0b246aG92ZXI6bm90KC5xbC1hY3RpdmUpIC5xbC1maWxsLFxcbiAgLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyOm5vdCgucWwtYWN0aXZlKSAucWwtZmlsbCxcXG4gIC5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyOm5vdCgucWwtYWN0aXZlKSAucWwtc3Ryb2tlLnFsLWZpbGwsXFxuICAucWwtc25vdyAucWwtdG9vbGJhciBidXR0b246aG92ZXI6bm90KC5xbC1hY3RpdmUpIC5xbC1zdHJva2UucWwtZmlsbCB7XFxuICAgIGZpbGw6ICM0NDQ7XFxuICB9XFxuICAucWwtc25vdy5xbC10b29sYmFyIGJ1dHRvbjpob3Zlcjpub3QoLnFsLWFjdGl2ZSkgLnFsLXN0cm9rZSxcXG4gIC5xbC1zbm93IC5xbC10b29sYmFyIGJ1dHRvbjpob3Zlcjpub3QoLnFsLWFjdGl2ZSkgLnFsLXN0cm9rZSxcXG4gIC5xbC1zbm93LnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyOm5vdCgucWwtYWN0aXZlKSAucWwtc3Ryb2tlLW1pdGVyLFxcbiAgLnFsLXNub3cgLnFsLXRvb2xiYXIgYnV0dG9uOmhvdmVyOm5vdCgucWwtYWN0aXZlKSAucWwtc3Ryb2tlLW1pdGVyIHtcXG4gICAgc3Ryb2tlOiAjNDQ0O1xcbiAgfVxcbn1cXG4ucWwtc25vdyB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4ucWwtc25vdyAqIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5xbC1zbm93IC5xbC1oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLnFsLXNub3cgLnFsLW91dC1ib3R0b20sXFxuLnFsLXNub3cgLnFsLW91dC10b3Age1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTBweCk7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwIGEge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcC5xbC1mbGlwIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCk7XFxufVxcbi5xbC1zbm93IC5xbC1mb3JtYXRzIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcbi5xbC1zbm93IC5xbC1mb3JtYXRzOmFmdGVyIHtcXG4gIGNsZWFyOiBib3RoO1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiB0YWJsZTtcXG59XFxuLnFsLXNub3cgLnFsLXN0cm9rZSB7XFxuICBmaWxsOiBub25lO1xcbiAgc3Ryb2tlOiAjNDQ0O1xcbiAgc3Ryb2tlLWxpbmVjYXA6IHJvdW5kO1xcbiAgc3Ryb2tlLWxpbmVqb2luOiByb3VuZDtcXG4gIHN0cm9rZS13aWR0aDogMjtcXG59XFxuLnFsLXNub3cgLnFsLXN0cm9rZS1taXRlciB7XFxuICBmaWxsOiBub25lO1xcbiAgc3Ryb2tlOiAjNDQ0O1xcbiAgc3Ryb2tlLW1pdGVybGltaXQ6IDEwO1xcbiAgc3Ryb2tlLXdpZHRoOiAyO1xcbn1cXG4ucWwtc25vdyAucWwtZmlsbCxcXG4ucWwtc25vdyAucWwtc3Ryb2tlLnFsLWZpbGwge1xcbiAgZmlsbDogIzQ0NDtcXG59XFxuLnFsLXNub3cgLnFsLWVtcHR5IHtcXG4gIGZpbGw6IG5vbmU7XFxufVxcbi5xbC1zbm93IC5xbC1ldmVuIHtcXG4gIGZpbGwtcnVsZTogZXZlbm9kZDtcXG59XFxuLnFsLXNub3cgLnFsLXRoaW4sXFxuLnFsLXNub3cgLnFsLXN0cm9rZS5xbC10aGluIHtcXG4gIHN0cm9rZS13aWR0aDogMTtcXG59XFxuLnFsLXNub3cgLnFsLXRyYW5zcGFyZW50IHtcXG4gIG9wYWNpdHk6IDAuNDtcXG59XFxuLnFsLXNub3cgLnFsLWRpcmVjdGlvbiBzdmc6bGFzdC1jaGlsZCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4ucWwtc25vdyAucWwtZGlyZWN0aW9uLnFsLWFjdGl2ZSBzdmc6bGFzdC1jaGlsZCB7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxufVxcbi5xbC1zbm93IC5xbC1kaXJlY3Rpb24ucWwtYWN0aXZlIHN2ZzpmaXJzdC1jaGlsZCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4ucWwtc25vdyAucWwtZWRpdG9yIGgxIHtcXG4gIGZvbnQtc2l6ZTogMmVtO1xcbn1cXG4ucWwtc25vdyAucWwtZWRpdG9yIGgyIHtcXG4gIGZvbnQtc2l6ZTogMS41ZW07XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgaDMge1xcbiAgZm9udC1zaXplOiAxLjE3ZW07XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgaDQge1xcbiAgZm9udC1zaXplOiAxZW07XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgaDUge1xcbiAgZm9udC1zaXplOiAwLjgzZW07XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgaDYge1xcbiAgZm9udC1zaXplOiAwLjY3ZW07XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBibG9ja3F1b3RlIHtcXG4gIGJvcmRlci1sZWZ0OiA0cHggc29saWQgI2NjYztcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIHBhZGRpbmctbGVmdDogMTZweDtcXG59XFxuLnFsLXNub3cgLnFsLWVkaXRvciBjb2RlLFxcbi5xbC1zbm93IC5xbC1lZGl0b3IgcHJlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgcHJlIHtcXG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbn1cXG4ucWwtc25vdyAucWwtZWRpdG9yIGNvZGUge1xcbiAgZm9udC1zaXplOiA4NSU7XFxuICBwYWRkaW5nOiAycHggNHB4O1xcbn1cXG4ucWwtc25vdyAucWwtZWRpdG9yIHByZS5xbC1zeW50YXgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzMjQxZjtcXG4gIGNvbG9yOiAjZjhmOGYyO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcbi5xbC1zbm93IC5xbC1lZGl0b3IgaW1nIHtcXG4gIG1heC13aWR0aDogMTAwJTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlciB7XFxuICBjb2xvcjogIzQ0NDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGhlaWdodDogMjRweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXItbGFiZWwge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgcGFkZGluZy1sZWZ0OiA4cHg7XFxuICBwYWRkaW5nLXJpZ2h0OiAycHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci1sYWJlbDo6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLW9wdGlvbnMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBtaW4td2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiA0cHggOHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci1vcHRpb25zIC5xbC1waWNrZXItaXRlbSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmctYm90dG9tOiA1cHg7XFxuICBwYWRkaW5nLXRvcDogNXB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWV4cGFuZGVkIC5xbC1waWNrZXItbGFiZWwge1xcbiAgY29sb3I6ICNjY2M7XFxuICB6LWluZGV4OiAyO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWV4cGFuZGVkIC5xbC1waWNrZXItbGFiZWwgLnFsLWZpbGwge1xcbiAgZmlsbDogI2NjYztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1leHBhbmRlZCAucWwtcGlja2VyLWxhYmVsIC5xbC1zdHJva2Uge1xcbiAgc3Ryb2tlOiAjY2NjO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWV4cGFuZGVkIC5xbC1waWNrZXItb3B0aW9ucyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi10b3A6IC0xcHg7XFxuICB0b3A6IDEwMCU7XFxuICB6LWluZGV4OiAxO1xcbn1cXG4ucWwtc25vdyAucWwtY29sb3ItcGlja2VyLFxcbi5xbC1zbm93IC5xbC1pY29uLXBpY2tlciB7XFxuICB3aWR0aDogMjhweDtcXG59XFxuLnFsLXNub3cgLnFsLWNvbG9yLXBpY2tlciAucWwtcGlja2VyLWxhYmVsLFxcbi5xbC1zbm93IC5xbC1pY29uLXBpY2tlciAucWwtcGlja2VyLWxhYmVsIHtcXG4gIHBhZGRpbmc6IDJweCA0cHg7XFxufVxcbi5xbC1zbm93IC5xbC1jb2xvci1waWNrZXIgLnFsLXBpY2tlci1sYWJlbCBzdmcsXFxuLnFsLXNub3cgLnFsLWljb24tcGlja2VyIC5xbC1waWNrZXItbGFiZWwgc3ZnIHtcXG4gIHJpZ2h0OiA0cHg7XFxufVxcbi5xbC1zbm93IC5xbC1pY29uLXBpY2tlciAucWwtcGlja2VyLW9wdGlvbnMge1xcbiAgcGFkZGluZzogNHB4IDBweDtcXG59XFxuLnFsLXNub3cgLnFsLWljb24tcGlja2VyIC5xbC1waWNrZXItaXRlbSB7XFxuICBoZWlnaHQ6IDI0cHg7XFxuICB3aWR0aDogMjRweDtcXG4gIHBhZGRpbmc6IDJweCA0cHg7XFxufVxcbi5xbC1zbm93IC5xbC1jb2xvci1waWNrZXIgLnFsLXBpY2tlci1vcHRpb25zIHtcXG4gIHBhZGRpbmc6IDNweCA1cHg7XFxuICB3aWR0aDogMTUycHg7XFxufVxcbi5xbC1zbm93IC5xbC1jb2xvci1waWNrZXIgLnFsLXBpY2tlci1pdGVtIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBoZWlnaHQ6IDE2cHg7XFxuICBtYXJnaW46IDJweDtcXG4gIHBhZGRpbmc6IDBweDtcXG4gIHdpZHRoOiAxNnB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyOm5vdCgucWwtY29sb3ItcGlja2VyKTpub3QoLnFsLWljb24tcGlja2VyKSBzdmcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbWFyZ2luLXRvcDogLTlweDtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiA1MCU7XFxuICB3aWR0aDogMThweDtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1sYWJlbFtkYXRhLWxhYmVsXTpub3QoW2RhdGEtbGFiZWw9JyddKTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWxhYmVsW2RhdGEtbGFiZWxdOm5vdChbZGF0YS1sYWJlbD0nJ10pOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItbGFiZWxbZGF0YS1sYWJlbF06bm90KFtkYXRhLWxhYmVsPScnXSk6OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW1bZGF0YS1sYWJlbF06bm90KFtkYXRhLWxhYmVsPScnXSk6OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWZvbnQgLnFsLXBpY2tlci1pdGVtW2RhdGEtbGFiZWxdOm5vdChbZGF0YS1sYWJlbD0nJ10pOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItaXRlbVtkYXRhLWxhYmVsXTpub3QoW2RhdGEtbGFiZWw9JyddKTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS1sYWJlbCk7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIHtcXG4gIHdpZHRoOiA5OHB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWxhYmVsOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtOjpiZWZvcmUge1xcbiAgY29udGVudDogJ05vcm1hbCc7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItbGFiZWxbZGF0YS12YWx1ZT1cXFwiMVxcXCJdOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjFcXFwiXTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdIZWFkaW5nIDEnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWxhYmVsW2RhdGEtdmFsdWU9XFxcIjJcXFwiXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPVxcXCIyXFxcIl06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnSGVhZGluZyAyJztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPVxcXCIzXFxcIl06OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1cXFwiM1xcXCJdOjpiZWZvcmUge1xcbiAgY29udGVudDogJ0hlYWRpbmcgMyc7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItbGFiZWxbZGF0YS12YWx1ZT1cXFwiNFxcXCJdOjpiZWZvcmUsXFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjRcXFwiXTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdIZWFkaW5nIDQnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWxhYmVsW2RhdGEtdmFsdWU9XFxcIjVcXFwiXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPVxcXCI1XFxcIl06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnSGVhZGluZyA1JztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPVxcXCI2XFxcIl06OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1cXFwiNlxcXCJdOjpiZWZvcmUge1xcbiAgY29udGVudDogJ0hlYWRpbmcgNic7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPVxcXCIxXFxcIl06OmJlZm9yZSB7XFxuICBmb250LXNpemU6IDJlbTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjJcXFwiXTo6YmVmb3JlIHtcXG4gIGZvbnQtc2l6ZTogMS41ZW07XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPVxcXCIzXFxcIl06OmJlZm9yZSB7XFxuICBmb250LXNpemU6IDEuMTdlbTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1oZWFkZXIgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9XFxcIjRcXFwiXTo6YmVmb3JlIHtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWhlYWRlciAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1cXFwiNVxcXCJdOjpiZWZvcmUge1xcbiAgZm9udC1zaXplOiAwLjgzZW07XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtaGVhZGVyIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPVxcXCI2XFxcIl06OmJlZm9yZSB7XFxuICBmb250LXNpemU6IDAuNjdlbTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1mb250IHtcXG4gIHdpZHRoOiAxMDhweDtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1mb250IC5xbC1waWNrZXItbGFiZWw6OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWZvbnQgLnFsLXBpY2tlci1pdGVtOjpiZWZvcmUge1xcbiAgY29udGVudDogJ1NhbnMgU2VyaWYnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWZvbnQgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPXNlcmlmXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1zZXJpZl06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnU2VyaWYnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWZvbnQgLnFsLXBpY2tlci1sYWJlbFtkYXRhLXZhbHVlPW1vbm9zcGFjZV06OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWZvbnQgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9bW9ub3NwYWNlXTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdNb25vc3BhY2UnO1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLWZvbnQgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9c2VyaWZdOjpiZWZvcmUge1xcbiAgZm9udC1mYW1pbHk6IEdlb3JnaWEsIFRpbWVzIE5ldyBSb21hbiwgc2VyaWY7XFxufVxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtZm9udCAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1tb25vc3BhY2VdOjpiZWZvcmUge1xcbiAgZm9udC1mYW1pbHk6IE1vbmFjbywgQ291cmllciBOZXcsIG1vbm9zcGFjZTtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIHtcXG4gIHdpZHRoOiA5OHB4O1xcbn1cXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1sYWJlbDo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtc2l6ZSAucWwtcGlja2VyLWl0ZW06OmJlZm9yZSB7XFxuICBjb250ZW50OiAnTm9ybWFsJztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItbGFiZWxbZGF0YS12YWx1ZT1zbWFsbF06OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9c21hbGxdOjpiZWZvcmUge1xcbiAgY29udGVudDogJ1NtYWxsJztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItbGFiZWxbZGF0YS12YWx1ZT1sYXJnZV06OmJlZm9yZSxcXG4ucWwtc25vdyAucWwtcGlja2VyLnFsLXNpemUgLnFsLXBpY2tlci1pdGVtW2RhdGEtdmFsdWU9bGFyZ2VdOjpiZWZvcmUge1xcbiAgY29udGVudDogJ0xhcmdlJztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItbGFiZWxbZGF0YS12YWx1ZT1odWdlXTo6YmVmb3JlLFxcbi5xbC1zbm93IC5xbC1waWNrZXIucWwtc2l6ZSAucWwtcGlja2VyLWl0ZW1bZGF0YS12YWx1ZT1odWdlXTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdIdWdlJztcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPXNtYWxsXTo6YmVmb3JlIHtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPWxhcmdlXTo6YmVmb3JlIHtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG59XFxuLnFsLXNub3cgLnFsLXBpY2tlci5xbC1zaXplIC5xbC1waWNrZXItaXRlbVtkYXRhLXZhbHVlPWh1Z2VdOjpiZWZvcmUge1xcbiAgZm9udC1zaXplOiAzMnB4O1xcbn1cXG4ucWwtc25vdyAucWwtY29sb3ItcGlja2VyLnFsLWJhY2tncm91bmQgLnFsLXBpY2tlci1pdGVtIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcbi5xbC1zbm93IC5xbC1jb2xvci1waWNrZXIucWwtY29sb3IgLnFsLXBpY2tlci1pdGVtIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxufVxcbi5xbC10b29sYmFyLnFsLXNub3cge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBmb250LWZhbWlseTogJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWY7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcbi5xbC10b29sYmFyLnFsLXNub3cgLnFsLWZvcm1hdHMge1xcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xcbn1cXG4ucWwtdG9vbGJhci5xbC1zbm93IC5xbC1waWNrZXItbGFiZWwge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcbi5xbC10b29sYmFyLnFsLXNub3cgLnFsLXBpY2tlci1vcHRpb25zIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogcmdiYSgwLDAsMCwwLjIpIDAgMnB4IDhweDtcXG59XFxuLnFsLXRvb2xiYXIucWwtc25vdyAucWwtcGlja2VyLnFsLWV4cGFuZGVkIC5xbC1waWNrZXItbGFiZWwge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjO1xcbn1cXG4ucWwtdG9vbGJhci5xbC1zbm93IC5xbC1waWNrZXIucWwtZXhwYW5kZWQgLnFsLXBpY2tlci1vcHRpb25zIHtcXG4gIGJvcmRlci1jb2xvcjogI2NjYztcXG59XFxuLnFsLXRvb2xiYXIucWwtc25vdyAucWwtY29sb3ItcGlja2VyIC5xbC1waWNrZXItaXRlbS5xbC1zZWxlY3RlZCxcXG4ucWwtdG9vbGJhci5xbC1zbm93IC5xbC1jb2xvci1waWNrZXIgLnFsLXBpY2tlci1pdGVtOmhvdmVyIHtcXG4gIGJvcmRlci1jb2xvcjogIzAwMDtcXG59XFxuLnFsLXRvb2xiYXIucWwtc25vdyArIC5xbC1jb250YWluZXIucWwtc25vdyB7XFxuICBib3JkZXItdG9wOiAwcHg7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcbiAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggI2RkZDtcXG4gIGNvbG9yOiAjNDQ0O1xcbiAgcGFkZGluZzogNXB4IDEycHg7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcDo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJWaXNpdCBVUkw6XFxcIjtcXG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwIGlucHV0W3R5cGU9dGV4dF0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBoZWlnaHQ6IDI2cHg7XFxuICBtYXJnaW46IDBweDtcXG4gIHBhZGRpbmc6IDNweCA1cHg7XFxuICB3aWR0aDogMTcwcHg7XFxufVxcbi5xbC1zbm93IC5xbC10b29sdGlwIGEucWwtcHJldmlldyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXgtd2lkdGg6IDIwMHB4O1xcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcCBhLnFsLWFjdGlvbjo6YWZ0ZXIge1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2NjYztcXG4gIGNvbnRlbnQ6ICdFZGl0JztcXG4gIG1hcmdpbi1sZWZ0OiAxNnB4O1xcbiAgcGFkZGluZy1yaWdodDogOHB4O1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcCBhLnFsLXJlbW92ZTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICdSZW1vdmUnO1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXAgYSB7XFxuICBsaW5lLWhlaWdodDogMjZweDtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXAucWwtZWRpdGluZyBhLnFsLXByZXZpZXcsXFxuLnFsLXNub3cgLnFsLXRvb2x0aXAucWwtZWRpdGluZyBhLnFsLXJlbW92ZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcC5xbC1lZGl0aW5nIGlucHV0W3R5cGU9dGV4dF0ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4ucWwtc25vdyAucWwtdG9vbHRpcC5xbC1lZGl0aW5nIGEucWwtYWN0aW9uOjphZnRlciB7XFxuICBib3JkZXItcmlnaHQ6IDBweDtcXG4gIGNvbnRlbnQ6ICdTYXZlJztcXG4gIHBhZGRpbmctcmlnaHQ6IDBweDtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXBbZGF0YS1tb2RlPWxpbmtdOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIkVudGVyIGxpbms6XFxcIjtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXBbZGF0YS1tb2RlPWZvcm11bGFdOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIkVudGVyIGZvcm11bGE6XFxcIjtcXG59XFxuLnFsLXNub3cgLnFsLXRvb2x0aXBbZGF0YS1tb2RlPXZpZGVvXTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJFbnRlciB2aWRlbzpcXFwiO1xcbn1cXG4ucWwtc25vdyBhIHtcXG4gIGNvbG9yOiAjMDZjO1xcbn1cXG4ucWwtY29udGFpbmVyLnFsLXNub3cge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsInZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJ2lzLWFyZ3VtZW50cycpO1xudmFyIGlzID0gcmVxdWlyZSgnb2JqZWN0LWlzJyk7XG52YXIgaXNSZWdleCA9IHJlcXVpcmUoJ2lzLXJlZ2V4Jyk7XG52YXIgZmxhZ3MgPSByZXF1aXJlKCdyZWdleHAucHJvdG90eXBlLmZsYWdzJyk7XG52YXIgaXNEYXRlID0gcmVxdWlyZSgnaXMtZGF0ZS1vYmplY3QnKTtcblxudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xuXG5mdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmIChvcHRzLnN0cmljdCA/IGlzKGFjdHVhbCwgZXhwZWN0ZWQpIDogYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gNy4zLiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLCBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgKHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnICYmIHR5cGVvZiBleHBlY3RlZCAhPT0gJ29iamVjdCcpKSB7XG4gICAgcmV0dXJuIG9wdHMuc3RyaWN0ID8gaXMoYWN0dWFsLCBleHBlY3RlZCkgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG4gIH1cblxuICAvKlxuICAgKiA3LjQuIEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgICogZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gICAqIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgICogKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAgKiBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAgKiBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkT3JOdWxsKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlcih4KSB7XG4gIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHgubGVuZ3RoICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIHguY29weSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeC5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoeC5sZW5ndGggPiAwICYmIHR5cGVvZiB4WzBdICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgb3B0cykge1xuICAvKiBlc2xpbnQgbWF4LXN0YXRlbWVudHM6IFsyLCA1MF0gKi9cbiAgdmFyIGksIGtleTtcbiAgaWYgKHR5cGVvZiBhICE9PSB0eXBlb2YgYikgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKGlzVW5kZWZpbmVkT3JOdWxsKGEpIHx8IGlzVW5kZWZpbmVkT3JOdWxsKGIpKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAoaXNBcmd1bWVudHMoYSkgIT09IGlzQXJndW1lbnRzKGIpKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIHZhciBhSXNSZWdleCA9IGlzUmVnZXgoYSk7XG4gIHZhciBiSXNSZWdleCA9IGlzUmVnZXgoYik7XG4gIGlmIChhSXNSZWdleCAhPT0gYklzUmVnZXgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmIChhSXNSZWdleCB8fCBiSXNSZWdleCkge1xuICAgIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgZmxhZ3MoYSkgPT09IGZsYWdzKGIpO1xuICB9XG5cbiAgaWYgKGlzRGF0ZShhKSAmJiBpc0RhdGUoYikpIHtcbiAgICByZXR1cm4gZ2V0VGltZS5jYWxsKGEpID09PSBnZXRUaW1lLmNhbGwoYik7XG4gIH1cblxuICB2YXIgYUlzQnVmZmVyID0gaXNCdWZmZXIoYSk7XG4gIHZhciBiSXNCdWZmZXIgPSBpc0J1ZmZlcihiKTtcbiAgaWYgKGFJc0J1ZmZlciAhPT0gYklzQnVmZmVyKSB7IHJldHVybiBmYWxzZTsgfVxuICBpZiAoYUlzQnVmZmVyIHx8IGJJc0J1ZmZlcikgeyAvLyAmJiB3b3VsZCB3b3JrIHRvbywgYmVjYXVzZSBib3RoIGFyZSB0cnVlIG9yIGJvdGggZmFsc2UgaGVyZVxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSAhPT0gdHlwZW9mIGIpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgdHJ5IHtcbiAgICB2YXIga2EgPSBvYmplY3RLZXlzKGEpO1xuICAgIHZhciBrYiA9IG9iamVjdEtleXMoYik7XG4gIH0gY2F0Y2ggKGUpIHsgLy8gaGFwcGVucyB3aGVuIG9uZSBpcyBhIHN0cmluZyBsaXRlcmFsIGFuZCB0aGUgb3RoZXIgaXNuJ3RcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlcyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIHRoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuICBrYS5zb3J0KCk7XG4gIGtiLnNvcnQoKTtcbiAgLy8gfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pIHsgcmV0dXJuIGZhbHNlOyB9XG4gIH1cbiAgLy8gZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBvcHRzKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBFcXVhbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0aWYgKCFvcHRpb25zLmN1c3RvbU1lcmdlKSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZVxuXHR9XG5cdHZhciBjdXN0b21NZXJnZSA9IG9wdGlvbnMuY3VzdG9tTWVyZ2Uoa2V5KTtcblx0cmV0dXJuIHR5cGVvZiBjdXN0b21NZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbU1lcmdlIDogZGVlcG1lcmdlXG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzXG5cdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0cmV0dXJuIHRhcmdldC5wcm9wZXJ0eUlzRW51bWVyYWJsZShzeW1ib2wpXG5cdFx0fSlcblx0XHQ6IFtdXG59XG5cbmZ1bmN0aW9uIGdldEtleXModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLmNvbmNhdChnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpXG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5SXNPbk9iamVjdChvYmplY3QsIHByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHByb3BlcnR5IGluIG9iamVjdFxuXHR9IGNhdGNoKF8pIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG4vLyBQcm90ZWN0cyBmcm9tIHByb3RvdHlwZSBwb2lzb25pbmcgYW5kIHVuZXhwZWN0ZWQgbWVyZ2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluLlxuZnVuY3Rpb24gcHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkge1xuXHRyZXR1cm4gcHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAvLyBQcm9wZXJ0aWVzIGFyZSBzYWZlIHRvIG1lcmdlIGlmIHRoZXkgZG9uJ3QgZXhpc3QgaW4gdGhlIHRhcmdldCB5ZXQsXG5cdFx0JiYgIShPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkgLy8gdW5zYWZlIGlmIHRoZXkgZXhpc3QgdXAgdGhlIHByb3RvdHlwZSBjaGFpbixcblx0XHRcdCYmIE9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldCwga2V5KSkgLy8gYW5kIGFsc28gdW5zYWZlIGlmIHRoZXkncmUgbm9uZW51bWVyYWJsZS5cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRnZXRLZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0Z2V0S2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKHByb3BlcnR5SXNVbnNhZmUodGFyZ2V0LCBrZXkpKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHRpZiAocHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cdC8vIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIGlzIGFkZGVkIHRvIGBvcHRpb25zYCBzbyB0aGF0IGN1c3RvbSBhcnJheU1lcmdlKClcblx0Ly8gaW1wbGVtZW50YXRpb25zIGNhbiB1c2UgaXQuIFRoZSBjYWxsZXIgbWF5IG5vdCByZXBsYWNlIGl0LlxuXHRvcHRpb25zLmNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQ7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwbWVyZ2VfMTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woJ2ZvbycpID09PSAnc3ltYm9sJztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIG9yaWdEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgb2JqID0ge307XG5cdHRyeSB7XG5cdFx0b3JpZ0RlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycywgbm8tcmVzdHJpY3RlZC1zeW50YXhcblx0XHRmb3IgKHZhciBfIGluIG9iaikgeyAvLyBqc2NzOmlnbm9yZSBkaXNhbGxvd1VudXNlZFZhcmlhYmxlc1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gb2JqLnggPT09IG9iajtcblx0fSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIElFIDguICovXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSBvcmlnRGVmaW5lUHJvcGVydHkgJiYgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCgpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCB2YWx1ZSwgcHJlZGljYXRlKSB7XG5cdGlmIChuYW1lIGluIG9iamVjdCAmJiAoIWlzRnVuY3Rpb24ocHJlZGljYXRlKSB8fCAhcHJlZGljYXRlKCkpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0b3JpZ0RlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdG9iamVjdFtuYW1lXSA9IHZhbHVlO1xuXHR9XG59O1xuXG52YXIgZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmplY3QsIG1hcCkge1xuXHR2YXIgcHJlZGljYXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDoge307XG5cdHZhciBwcm9wcyA9IGtleXMobWFwKTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRwcm9wcyA9IGNvbmNhdC5jYWxsKHByb3BzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG1hcCkpO1xuXHR9XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BzW2ldLCBtYXBbcHJvcHNbaV1dLCBwcmVkaWNhdGVzW3Byb3BzW2ldXSk7XG5cdH1cbn07XG5cbmRlZmluZVByb3BlcnRpZXMuc3VwcG9ydHNEZXNjcmlwdG9ycyA9ICEhc3VwcG9ydHNEZXNjcmlwdG9ycztcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0aWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgeyAvKiovIH1cblxuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufTtcblxuLy8gSWYgbmFtZSBpcyAnX19wcm90b19fJywgYW5kIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBhdmFpbGFibGUsIGRlZmluZSBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5IG9uIHRhcmdldFxudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkodGFyZ2V0LCBvcHRpb25zKSB7XG5cdGlmIChkZWZpbmVQcm9wZXJ0eSAmJiBvcHRpb25zLm5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBvcHRpb25zLm5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogb3B0aW9ucy5uZXdWYWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0W29wdGlvbnMubmFtZV0gPSBvcHRpb25zLm5ld1ZhbHVlO1xuXHR9XG59O1xuXG4vLyBSZXR1cm4gdW5kZWZpbmVkIGluc3RlYWQgb2YgX19wcm90b19fIGlmICdfX3Byb3RvX18nIGlzIG5vdCBhbiBvd24gcHJvcGVydHlcbnZhciBnZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5KG9iaiwgbmFtZSkge1xuXHRpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRpZiAoIWhhc093bi5jYWxsKG9iaiwgbmFtZSkpIHtcblx0XHRcdHJldHVybiB2b2lkIDA7XG5cdFx0fSBlbHNlIGlmIChnT1BEKSB7XG5cdFx0XHQvLyBJbiBlYXJseSB2ZXJzaW9ucyBvZiBub2RlLCBvYmpbJ19fcHJvdG9fXyddIGlzIGJ1Z2d5IHdoZW4gb2JqIGhhc1xuXHRcdFx0Ly8gX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eS4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcigpIHdvcmtzLlxuXHRcdFx0cmV0dXJuIGdPUEQob2JqLCBuYW1lKS52YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb2JqW25hbWVdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQoKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZTtcblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblx0dmFyIGkgPSAxO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0aSA9IDI7XG5cdH1cblx0aWYgKHRhcmdldCA9PSBudWxsIHx8ICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Zm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmIChvcHRpb25zICE9IG51bGwpIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHNyYyA9IGdldFByb3BlcnR5KHRhcmdldCwgbmFtZSk7XG5cdFx0XHRcdGNvcHkgPSBnZXRQcm9wZXJ0eShvcHRpb25zLCBuYW1lKTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICh0YXJnZXQgIT09IGNvcHkpIHtcblx0XHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0XHRpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGlzQXJyYXkoY29weSkpKSkge1xuXHRcdFx0XHRcdFx0aWYgKGNvcHlJc0FycmF5KSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBleHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpIH0pO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGNvcHkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGNvcHkgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCIvKipcbiAqIFRoaXMgbGlicmFyeSBtb2RpZmllcyB0aGUgZGlmZi1wYXRjaC1tYXRjaCBsaWJyYXJ5IGJ5IE5laWwgRnJhc2VyXG4gKiBieSByZW1vdmluZyB0aGUgcGF0Y2ggYW5kIG1hdGNoIGZ1bmN0aW9uYWxpdHkgYW5kIGNlcnRhaW4gYWR2YW5jZWRcbiAqIG9wdGlvbnMgaW4gdGhlIGRpZmYgZnVuY3Rpb24uIFRoZSBvcmlnaW5hbCBsaWNlbnNlIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogPT09XG4gKlxuICogRGlmZiBNYXRjaCBhbmQgUGF0Y2hcbiAqXG4gKiBDb3B5cmlnaHQgMjAwNiBHb29nbGUgSW5jLlxuICogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dvb2dsZS1kaWZmLW1hdGNoLXBhdGNoL1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIFRoZSBkYXRhIHN0cnVjdHVyZSByZXByZXNlbnRpbmcgYSBkaWZmIGlzIGFuIGFycmF5IG9mIHR1cGxlczpcbiAqIFtbRElGRl9ERUxFVEUsICdIZWxsbyddLCBbRElGRl9JTlNFUlQsICdHb29kYnllJ10sIFtESUZGX0VRVUFMLCAnIHdvcmxkLiddXVxuICogd2hpY2ggbWVhbnM6IGRlbGV0ZSAnSGVsbG8nLCBhZGQgJ0dvb2RieWUnIGFuZCBrZWVwICcgd29ybGQuJ1xuICovXG52YXIgRElGRl9ERUxFVEUgPSAtMTtcbnZhciBESUZGX0lOU0VSVCA9IDE7XG52YXIgRElGRl9FUVVBTCA9IDA7XG5cblxuLyoqXG4gKiBGaW5kIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHR3byB0ZXh0cy4gIFNpbXBsaWZpZXMgdGhlIHByb2JsZW0gYnkgc3RyaXBwaW5nXG4gKiBhbnkgY29tbW9uIHByZWZpeCBvciBzdWZmaXggb2ZmIHRoZSB0ZXh0cyBiZWZvcmUgZGlmZmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBPbGQgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBOZXcgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIEV4cGVjdGVkIGVkaXQgcG9zaXRpb24gaW4gdGV4dDEgKG9wdGlvbmFsKVxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX21haW4odGV4dDEsIHRleHQyLCBjdXJzb3JfcG9zKSB7XG4gIC8vIENoZWNrIGZvciBlcXVhbGl0eSAoc3BlZWR1cCkuXG4gIGlmICh0ZXh0MSA9PSB0ZXh0Mikge1xuICAgIGlmICh0ZXh0MSkge1xuICAgICAgcmV0dXJuIFtbRElGRl9FUVVBTCwgdGV4dDFdXTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gQ2hlY2sgY3Vyc29yX3BvcyB3aXRoaW4gYm91bmRzXG4gIGlmIChjdXJzb3JfcG9zIDwgMCB8fCB0ZXh0MS5sZW5ndGggPCBjdXJzb3JfcG9zKSB7XG4gICAgY3Vyc29yX3BvcyA9IG51bGw7XG4gIH1cblxuICAvLyBUcmltIG9mZiBjb21tb24gcHJlZml4IChzcGVlZHVwKS5cbiAgdmFyIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mik7XG4gIHZhciBjb21tb25wcmVmaXggPSB0ZXh0MS5zdWJzdHJpbmcoMCwgY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcoY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDIgPSB0ZXh0Mi5zdWJzdHJpbmcoY29tbW9ubGVuZ3RoKTtcblxuICAvLyBUcmltIG9mZiBjb21tb24gc3VmZml4IChzcGVlZHVwKS5cbiAgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25TdWZmaXgodGV4dDEsIHRleHQyKTtcbiAgdmFyIGNvbW1vbnN1ZmZpeCA9IHRleHQxLnN1YnN0cmluZyh0ZXh0MS5sZW5ndGggLSBjb21tb25sZW5ndGgpO1xuICB0ZXh0MSA9IHRleHQxLnN1YnN0cmluZygwLCB0ZXh0MS5sZW5ndGggLSBjb21tb25sZW5ndGgpO1xuICB0ZXh0MiA9IHRleHQyLnN1YnN0cmluZygwLCB0ZXh0Mi5sZW5ndGggLSBjb21tb25sZW5ndGgpO1xuXG4gIC8vIENvbXB1dGUgdGhlIGRpZmYgb24gdGhlIG1pZGRsZSBibG9jay5cbiAgdmFyIGRpZmZzID0gZGlmZl9jb21wdXRlXyh0ZXh0MSwgdGV4dDIpO1xuXG4gIC8vIFJlc3RvcmUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICBpZiAoY29tbW9ucHJlZml4KSB7XG4gICAgZGlmZnMudW5zaGlmdChbRElGRl9FUVVBTCwgY29tbW9ucHJlZml4XSk7XG4gIH1cbiAgaWYgKGNvbW1vbnN1ZmZpeCkge1xuICAgIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIGNvbW1vbnN1ZmZpeF0pO1xuICB9XG4gIGRpZmZfY2xlYW51cE1lcmdlKGRpZmZzKTtcbiAgaWYgKGN1cnNvcl9wb3MgIT0gbnVsbCkge1xuICAgIGRpZmZzID0gZml4X2N1cnNvcihkaWZmcywgY3Vyc29yX3Bvcyk7XG4gIH1cbiAgZGlmZnMgPSBmaXhfZW1vamkoZGlmZnMpO1xuICByZXR1cm4gZGlmZnM7XG59O1xuXG5cbi8qKlxuICogRmluZCB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0d28gdGV4dHMuICBBc3N1bWVzIHRoYXQgdGhlIHRleHRzIGRvIG5vdFxuICogaGF2ZSBhbnkgY29tbW9uIHByZWZpeCBvciBzdWZmaXguXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tcHV0ZV8odGV4dDEsIHRleHQyKSB7XG4gIHZhciBkaWZmcztcblxuICBpZiAoIXRleHQxKSB7XG4gICAgLy8gSnVzdCBhZGQgc29tZSB0ZXh0IChzcGVlZHVwKS5cbiAgICByZXR1cm4gW1tESUZGX0lOU0VSVCwgdGV4dDJdXTtcbiAgfVxuXG4gIGlmICghdGV4dDIpIHtcbiAgICAvLyBKdXN0IGRlbGV0ZSBzb21lIHRleHQgKHNwZWVkdXApLlxuICAgIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV1dO1xuICB9XG5cbiAgdmFyIGxvbmd0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDEgOiB0ZXh0MjtcbiAgdmFyIHNob3J0dGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQyIDogdGV4dDE7XG4gIHZhciBpID0gbG9uZ3RleHQuaW5kZXhPZihzaG9ydHRleHQpO1xuICBpZiAoaSAhPSAtMSkge1xuICAgIC8vIFNob3J0ZXIgdGV4dCBpcyBpbnNpZGUgdGhlIGxvbmdlciB0ZXh0IChzcGVlZHVwKS5cbiAgICBkaWZmcyA9IFtbRElGRl9JTlNFUlQsIGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpKV0sXG4gICAgICAgICAgICAgW0RJRkZfRVFVQUwsIHNob3J0dGV4dF0sXG4gICAgICAgICAgICAgW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoaSArIHNob3J0dGV4dC5sZW5ndGgpXV07XG4gICAgLy8gU3dhcCBpbnNlcnRpb25zIGZvciBkZWxldGlvbnMgaWYgZGlmZiBpcyByZXZlcnNlZC5cbiAgICBpZiAodGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoKSB7XG4gICAgICBkaWZmc1swXVswXSA9IGRpZmZzWzJdWzBdID0gRElGRl9ERUxFVEU7XG4gICAgfVxuICAgIHJldHVybiBkaWZmcztcbiAgfVxuXG4gIGlmIChzaG9ydHRleHQubGVuZ3RoID09IDEpIHtcbiAgICAvLyBTaW5nbGUgY2hhcmFjdGVyIHN0cmluZy5cbiAgICAvLyBBZnRlciB0aGUgcHJldmlvdXMgc3BlZWR1cCwgdGhlIGNoYXJhY3RlciBjYW4ndCBiZSBhbiBlcXVhbGl0eS5cbiAgICByZXR1cm4gW1tESUZGX0RFTEVURSwgdGV4dDFdLCBbRElGRl9JTlNFUlQsIHRleHQyXV07XG4gIH1cblxuICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIHByb2JsZW0gY2FuIGJlIHNwbGl0IGluIHR3by5cbiAgdmFyIGhtID0gZGlmZl9oYWxmTWF0Y2hfKHRleHQxLCB0ZXh0Mik7XG4gIGlmIChobSkge1xuICAgIC8vIEEgaGFsZi1tYXRjaCB3YXMgZm91bmQsIHNvcnQgb3V0IHRoZSByZXR1cm4gZGF0YS5cbiAgICB2YXIgdGV4dDFfYSA9IGhtWzBdO1xuICAgIHZhciB0ZXh0MV9iID0gaG1bMV07XG4gICAgdmFyIHRleHQyX2EgPSBobVsyXTtcbiAgICB2YXIgdGV4dDJfYiA9IGhtWzNdO1xuICAgIHZhciBtaWRfY29tbW9uID0gaG1bNF07XG4gICAgLy8gU2VuZCBib3RoIHBhaXJzIG9mZiBmb3Igc2VwYXJhdGUgcHJvY2Vzc2luZy5cbiAgICB2YXIgZGlmZnNfYSA9IGRpZmZfbWFpbih0ZXh0MV9hLCB0ZXh0Ml9hKTtcbiAgICB2YXIgZGlmZnNfYiA9IGRpZmZfbWFpbih0ZXh0MV9iLCB0ZXh0Ml9iKTtcbiAgICAvLyBNZXJnZSB0aGUgcmVzdWx0cy5cbiAgICByZXR1cm4gZGlmZnNfYS5jb25jYXQoW1tESUZGX0VRVUFMLCBtaWRfY29tbW9uXV0sIGRpZmZzX2IpO1xuICB9XG5cbiAgcmV0dXJuIGRpZmZfYmlzZWN0Xyh0ZXh0MSwgdGV4dDIpO1xufTtcblxuXG4vKipcbiAqIEZpbmQgdGhlICdtaWRkbGUgc25ha2UnIG9mIGEgZGlmZiwgc3BsaXQgdGhlIHByb2JsZW0gaW4gdHdvXG4gKiBhbmQgcmV0dXJuIHRoZSByZWN1cnNpdmVseSBjb25zdHJ1Y3RlZCBkaWZmLlxuICogU2VlIE15ZXJzIDE5ODYgcGFwZXI6IEFuIE8oTkQpIERpZmZlcmVuY2UgQWxnb3JpdGhtIGFuZCBJdHMgVmFyaWF0aW9ucy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBPbGQgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBOZXcgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRpZmZfYmlzZWN0Xyh0ZXh0MSwgdGV4dDIpIHtcbiAgLy8gQ2FjaGUgdGhlIHRleHQgbGVuZ3RocyB0byBwcmV2ZW50IG11bHRpcGxlIGNhbGxzLlxuICB2YXIgdGV4dDFfbGVuZ3RoID0gdGV4dDEubGVuZ3RoO1xuICB2YXIgdGV4dDJfbGVuZ3RoID0gdGV4dDIubGVuZ3RoO1xuICB2YXIgbWF4X2QgPSBNYXRoLmNlaWwoKHRleHQxX2xlbmd0aCArIHRleHQyX2xlbmd0aCkgLyAyKTtcbiAgdmFyIHZfb2Zmc2V0ID0gbWF4X2Q7XG4gIHZhciB2X2xlbmd0aCA9IDIgKiBtYXhfZDtcbiAgdmFyIHYxID0gbmV3IEFycmF5KHZfbGVuZ3RoKTtcbiAgdmFyIHYyID0gbmV3IEFycmF5KHZfbGVuZ3RoKTtcbiAgLy8gU2V0dGluZyBhbGwgZWxlbWVudHMgdG8gLTEgaXMgZmFzdGVyIGluIENocm9tZSAmIEZpcmVmb3ggdGhhbiBtaXhpbmdcbiAgLy8gaW50ZWdlcnMgYW5kIHVuZGVmaW5lZC5cbiAgZm9yICh2YXIgeCA9IDA7IHggPCB2X2xlbmd0aDsgeCsrKSB7XG4gICAgdjFbeF0gPSAtMTtcbiAgICB2Mlt4XSA9IC0xO1xuICB9XG4gIHYxW3Zfb2Zmc2V0ICsgMV0gPSAwO1xuICB2Mlt2X29mZnNldCArIDFdID0gMDtcbiAgdmFyIGRlbHRhID0gdGV4dDFfbGVuZ3RoIC0gdGV4dDJfbGVuZ3RoO1xuICAvLyBJZiB0aGUgdG90YWwgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaXMgb2RkLCB0aGVuIHRoZSBmcm9udCBwYXRoIHdpbGwgY29sbGlkZVxuICAvLyB3aXRoIHRoZSByZXZlcnNlIHBhdGguXG4gIHZhciBmcm9udCA9IChkZWx0YSAlIDIgIT0gMCk7XG4gIC8vIE9mZnNldHMgZm9yIHN0YXJ0IGFuZCBlbmQgb2YgayBsb29wLlxuICAvLyBQcmV2ZW50cyBtYXBwaW5nIG9mIHNwYWNlIGJleW9uZCB0aGUgZ3JpZC5cbiAgdmFyIGsxc3RhcnQgPSAwO1xuICB2YXIgazFlbmQgPSAwO1xuICB2YXIgazJzdGFydCA9IDA7XG4gIHZhciBrMmVuZCA9IDA7XG4gIGZvciAodmFyIGQgPSAwOyBkIDwgbWF4X2Q7IGQrKykge1xuICAgIC8vIFdhbGsgdGhlIGZyb250IHBhdGggb25lIHN0ZXAuXG4gICAgZm9yICh2YXIgazEgPSAtZCArIGsxc3RhcnQ7IGsxIDw9IGQgLSBrMWVuZDsgazEgKz0gMikge1xuICAgICAgdmFyIGsxX29mZnNldCA9IHZfb2Zmc2V0ICsgazE7XG4gICAgICB2YXIgeDE7XG4gICAgICBpZiAoazEgPT0gLWQgfHwgKGsxICE9IGQgJiYgdjFbazFfb2Zmc2V0IC0gMV0gPCB2MVtrMV9vZmZzZXQgKyAxXSkpIHtcbiAgICAgICAgeDEgPSB2MVtrMV9vZmZzZXQgKyAxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgxID0gdjFbazFfb2Zmc2V0IC0gMV0gKyAxO1xuICAgICAgfVxuICAgICAgdmFyIHkxID0geDEgLSBrMTtcbiAgICAgIHdoaWxlICh4MSA8IHRleHQxX2xlbmd0aCAmJiB5MSA8IHRleHQyX2xlbmd0aCAmJlxuICAgICAgICAgICAgIHRleHQxLmNoYXJBdCh4MSkgPT0gdGV4dDIuY2hhckF0KHkxKSkge1xuICAgICAgICB4MSsrO1xuICAgICAgICB5MSsrO1xuICAgICAgfVxuICAgICAgdjFbazFfb2Zmc2V0XSA9IHgxO1xuICAgICAgaWYgKHgxID4gdGV4dDFfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIHJpZ2h0IG9mIHRoZSBncmFwaC5cbiAgICAgICAgazFlbmQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoeTEgPiB0ZXh0Ml9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgYm90dG9tIG9mIHRoZSBncmFwaC5cbiAgICAgICAgazFzdGFydCArPSAyO1xuICAgICAgfSBlbHNlIGlmIChmcm9udCkge1xuICAgICAgICB2YXIgazJfb2Zmc2V0ID0gdl9vZmZzZXQgKyBkZWx0YSAtIGsxO1xuICAgICAgICBpZiAoazJfb2Zmc2V0ID49IDAgJiYgazJfb2Zmc2V0IDwgdl9sZW5ndGggJiYgdjJbazJfb2Zmc2V0XSAhPSAtMSkge1xuICAgICAgICAgIC8vIE1pcnJvciB4MiBvbnRvIHRvcC1sZWZ0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAgICAgIHZhciB4MiA9IHRleHQxX2xlbmd0aCAtIHYyW2syX29mZnNldF07XG4gICAgICAgICAgaWYgKHgxID49IHgyKSB7XG4gICAgICAgICAgICAvLyBPdmVybGFwIGRldGVjdGVkLlxuICAgICAgICAgICAgcmV0dXJuIGRpZmZfYmlzZWN0U3BsaXRfKHRleHQxLCB0ZXh0MiwgeDEsIHkxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXYWxrIHRoZSByZXZlcnNlIHBhdGggb25lIHN0ZXAuXG4gICAgZm9yICh2YXIgazIgPSAtZCArIGsyc3RhcnQ7IGsyIDw9IGQgLSBrMmVuZDsgazIgKz0gMikge1xuICAgICAgdmFyIGsyX29mZnNldCA9IHZfb2Zmc2V0ICsgazI7XG4gICAgICB2YXIgeDI7XG4gICAgICBpZiAoazIgPT0gLWQgfHwgKGsyICE9IGQgJiYgdjJbazJfb2Zmc2V0IC0gMV0gPCB2MltrMl9vZmZzZXQgKyAxXSkpIHtcbiAgICAgICAgeDIgPSB2MltrMl9vZmZzZXQgKyAxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgyID0gdjJbazJfb2Zmc2V0IC0gMV0gKyAxO1xuICAgICAgfVxuICAgICAgdmFyIHkyID0geDIgLSBrMjtcbiAgICAgIHdoaWxlICh4MiA8IHRleHQxX2xlbmd0aCAmJiB5MiA8IHRleHQyX2xlbmd0aCAmJlxuICAgICAgICAgICAgIHRleHQxLmNoYXJBdCh0ZXh0MV9sZW5ndGggLSB4MiAtIDEpID09XG4gICAgICAgICAgICAgdGV4dDIuY2hhckF0KHRleHQyX2xlbmd0aCAtIHkyIC0gMSkpIHtcbiAgICAgICAgeDIrKztcbiAgICAgICAgeTIrKztcbiAgICAgIH1cbiAgICAgIHYyW2syX29mZnNldF0gPSB4MjtcbiAgICAgIGlmICh4MiA+IHRleHQxX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSBsZWZ0IG9mIHRoZSBncmFwaC5cbiAgICAgICAgazJlbmQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoeTIgPiB0ZXh0Ml9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgdG9wIG9mIHRoZSBncmFwaC5cbiAgICAgICAgazJzdGFydCArPSAyO1xuICAgICAgfSBlbHNlIGlmICghZnJvbnQpIHtcbiAgICAgICAgdmFyIGsxX29mZnNldCA9IHZfb2Zmc2V0ICsgZGVsdGEgLSBrMjtcbiAgICAgICAgaWYgKGsxX29mZnNldCA+PSAwICYmIGsxX29mZnNldCA8IHZfbGVuZ3RoICYmIHYxW2sxX29mZnNldF0gIT0gLTEpIHtcbiAgICAgICAgICB2YXIgeDEgPSB2MVtrMV9vZmZzZXRdO1xuICAgICAgICAgIHZhciB5MSA9IHZfb2Zmc2V0ICsgeDEgLSBrMV9vZmZzZXQ7XG4gICAgICAgICAgLy8gTWlycm9yIHgyIG9udG8gdG9wLWxlZnQgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICAgICAgeDIgPSB0ZXh0MV9sZW5ndGggLSB4MjtcbiAgICAgICAgICBpZiAoeDEgPj0geDIpIHtcbiAgICAgICAgICAgIC8vIE92ZXJsYXAgZGV0ZWN0ZWQuXG4gICAgICAgICAgICByZXR1cm4gZGlmZl9iaXNlY3RTcGxpdF8odGV4dDEsIHRleHQyLCB4MSwgeTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaWZmIHRvb2sgdG9vIGxvbmcgYW5kIGhpdCB0aGUgZGVhZGxpbmUgb3JcbiAgLy8gbnVtYmVyIG9mIGRpZmZzIGVxdWFscyBudW1iZXIgb2YgY2hhcmFjdGVycywgbm8gY29tbW9uYWxpdHkgYXQgYWxsLlxuICByZXR1cm4gW1tESUZGX0RFTEVURSwgdGV4dDFdLCBbRElGRl9JTlNFUlQsIHRleHQyXV07XG59O1xuXG5cbi8qKlxuICogR2l2ZW4gdGhlIGxvY2F0aW9uIG9mIHRoZSAnbWlkZGxlIHNuYWtlJywgc3BsaXQgdGhlIGRpZmYgaW4gdHdvIHBhcnRzXG4gKiBhbmQgcmVjdXJzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBPbGQgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBOZXcgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB4IEluZGV4IG9mIHNwbGl0IHBvaW50IGluIHRleHQxLlxuICogQHBhcmFtIHtudW1iZXJ9IHkgSW5kZXggb2Ygc3BsaXQgcG9pbnQgaW4gdGV4dDIuXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfYmlzZWN0U3BsaXRfKHRleHQxLCB0ZXh0MiwgeCwgeSkge1xuICB2YXIgdGV4dDFhID0gdGV4dDEuc3Vic3RyaW5nKDAsIHgpO1xuICB2YXIgdGV4dDJhID0gdGV4dDIuc3Vic3RyaW5nKDAsIHkpO1xuICB2YXIgdGV4dDFiID0gdGV4dDEuc3Vic3RyaW5nKHgpO1xuICB2YXIgdGV4dDJiID0gdGV4dDIuc3Vic3RyaW5nKHkpO1xuXG4gIC8vIENvbXB1dGUgYm90aCBkaWZmcyBzZXJpYWxseS5cbiAgdmFyIGRpZmZzID0gZGlmZl9tYWluKHRleHQxYSwgdGV4dDJhKTtcbiAgdmFyIGRpZmZzYiA9IGRpZmZfbWFpbih0ZXh0MWIsIHRleHQyYik7XG5cbiAgcmV0dXJuIGRpZmZzLmNvbmNhdChkaWZmc2IpO1xufTtcblxuXG4vKipcbiAqIERldGVybWluZSB0aGUgY29tbW9uIHByZWZpeCBvZiB0d28gc3RyaW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBGaXJzdCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgU2Vjb25kIHN0cmluZy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbW1vbiB0byB0aGUgc3RhcnQgb2YgZWFjaFxuICogICAgIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9jb21tb25QcmVmaXgodGV4dDEsIHRleHQyKSB7XG4gIC8vIFF1aWNrIGNoZWNrIGZvciBjb21tb24gbnVsbCBjYXNlcy5cbiAgaWYgKCF0ZXh0MSB8fCAhdGV4dDIgfHwgdGV4dDEuY2hhckF0KDApICE9IHRleHQyLmNoYXJBdCgwKSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIC8vIEJpbmFyeSBzZWFyY2guXG4gIC8vIFBlcmZvcm1hbmNlIGFuYWx5c2lzOiBodHRwOi8vbmVpbC5mcmFzZXIubmFtZS9uZXdzLzIwMDcvMTAvMDkvXG4gIHZhciBwb2ludGVybWluID0gMDtcbiAgdmFyIHBvaW50ZXJtYXggPSBNYXRoLm1pbih0ZXh0MS5sZW5ndGgsIHRleHQyLmxlbmd0aCk7XG4gIHZhciBwb2ludGVybWlkID0gcG9pbnRlcm1heDtcbiAgdmFyIHBvaW50ZXJzdGFydCA9IDA7XG4gIHdoaWxlIChwb2ludGVybWluIDwgcG9pbnRlcm1pZCkge1xuICAgIGlmICh0ZXh0MS5zdWJzdHJpbmcocG9pbnRlcnN0YXJ0LCBwb2ludGVybWlkKSA9PVxuICAgICAgICB0ZXh0Mi5zdWJzdHJpbmcocG9pbnRlcnN0YXJ0LCBwb2ludGVybWlkKSkge1xuICAgICAgcG9pbnRlcm1pbiA9IHBvaW50ZXJtaWQ7XG4gICAgICBwb2ludGVyc3RhcnQgPSBwb2ludGVybWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludGVybWF4ID0gcG9pbnRlcm1pZDtcbiAgICB9XG4gICAgcG9pbnRlcm1pZCA9IE1hdGguZmxvb3IoKHBvaW50ZXJtYXggLSBwb2ludGVybWluKSAvIDIgKyBwb2ludGVybWluKTtcbiAgfVxuICByZXR1cm4gcG9pbnRlcm1pZDtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGNvbW1vbiBzdWZmaXggb2YgdHdvIHN0cmluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgRmlyc3Qgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIFNlY29uZCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb21tb24gdG8gdGhlIGVuZCBvZiBlYWNoIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9jb21tb25TdWZmaXgodGV4dDEsIHRleHQyKSB7XG4gIC8vIFF1aWNrIGNoZWNrIGZvciBjb21tb24gbnVsbCBjYXNlcy5cbiAgaWYgKCF0ZXh0MSB8fCAhdGV4dDIgfHxcbiAgICAgIHRleHQxLmNoYXJBdCh0ZXh0MS5sZW5ndGggLSAxKSAhPSB0ZXh0Mi5jaGFyQXQodGV4dDIubGVuZ3RoIC0gMSkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICAvLyBCaW5hcnkgc2VhcmNoLlxuICAvLyBQZXJmb3JtYW5jZSBhbmFseXNpczogaHR0cDovL25laWwuZnJhc2VyLm5hbWUvbmV3cy8yMDA3LzEwLzA5L1xuICB2YXIgcG9pbnRlcm1pbiA9IDA7XG4gIHZhciBwb2ludGVybWF4ID0gTWF0aC5taW4odGV4dDEubGVuZ3RoLCB0ZXh0Mi5sZW5ndGgpO1xuICB2YXIgcG9pbnRlcm1pZCA9IHBvaW50ZXJtYXg7XG4gIHZhciBwb2ludGVyZW5kID0gMDtcbiAgd2hpbGUgKHBvaW50ZXJtaW4gPCBwb2ludGVybWlkKSB7XG4gICAgaWYgKHRleHQxLnN1YnN0cmluZyh0ZXh0MS5sZW5ndGggLSBwb2ludGVybWlkLCB0ZXh0MS5sZW5ndGggLSBwb2ludGVyZW5kKSA9PVxuICAgICAgICB0ZXh0Mi5zdWJzdHJpbmcodGV4dDIubGVuZ3RoIC0gcG9pbnRlcm1pZCwgdGV4dDIubGVuZ3RoIC0gcG9pbnRlcmVuZCkpIHtcbiAgICAgIHBvaW50ZXJtaW4gPSBwb2ludGVybWlkO1xuICAgICAgcG9pbnRlcmVuZCA9IHBvaW50ZXJtaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50ZXJtYXggPSBwb2ludGVybWlkO1xuICAgIH1cbiAgICBwb2ludGVybWlkID0gTWF0aC5mbG9vcigocG9pbnRlcm1heCAtIHBvaW50ZXJtaW4pIC8gMiArIHBvaW50ZXJtaW4pO1xuICB9XG4gIHJldHVybiBwb2ludGVybWlkO1xufTtcblxuXG4vKipcbiAqIERvIHRoZSB0d28gdGV4dHMgc2hhcmUgYSBzdWJzdHJpbmcgd2hpY2ggaXMgYXQgbGVhc3QgaGFsZiB0aGUgbGVuZ3RoIG9mIHRoZVxuICogbG9uZ2VyIHRleHQ/XG4gKiBUaGlzIHNwZWVkdXAgY2FuIHByb2R1Y2Ugbm9uLW1pbmltYWwgZGlmZnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgRmlyc3Qgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIFNlY29uZCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gRml2ZSBlbGVtZW50IEFycmF5LCBjb250YWluaW5nIHRoZSBwcmVmaXggb2ZcbiAqICAgICB0ZXh0MSwgdGhlIHN1ZmZpeCBvZiB0ZXh0MSwgdGhlIHByZWZpeCBvZiB0ZXh0MiwgdGhlIHN1ZmZpeCBvZlxuICogICAgIHRleHQyIGFuZCB0aGUgY29tbW9uIG1pZGRsZS4gIE9yIG51bGwgaWYgdGhlcmUgd2FzIG5vIG1hdGNoLlxuICovXG5mdW5jdGlvbiBkaWZmX2hhbGZNYXRjaF8odGV4dDEsIHRleHQyKSB7XG4gIHZhciBsb25ndGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDI7XG4gIHZhciBzaG9ydHRleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MiA6IHRleHQxO1xuICBpZiAobG9uZ3RleHQubGVuZ3RoIDwgNCB8fCBzaG9ydHRleHQubGVuZ3RoICogMiA8IGxvbmd0ZXh0Lmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsOyAgLy8gUG9pbnRsZXNzLlxuICB9XG5cbiAgLyoqXG4gICAqIERvZXMgYSBzdWJzdHJpbmcgb2Ygc2hvcnR0ZXh0IGV4aXN0IHdpdGhpbiBsb25ndGV4dCBzdWNoIHRoYXQgdGhlIHN1YnN0cmluZ1xuICAgKiBpcyBhdCBsZWFzdCBoYWxmIHRoZSBsZW5ndGggb2YgbG9uZ3RleHQ/XG4gICAqIENsb3N1cmUsIGJ1dCBkb2VzIG5vdCByZWZlcmVuY2UgYW55IGV4dGVybmFsIHZhcmlhYmxlcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvbmd0ZXh0IExvbmdlciBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaG9ydHRleHQgU2hvcnRlciBzdHJpbmcuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpIFN0YXJ0IGluZGV4IG9mIHF1YXJ0ZXIgbGVuZ3RoIHN1YnN0cmluZyB3aXRoaW4gbG9uZ3RleHQuXG4gICAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSBGaXZlIGVsZW1lbnQgQXJyYXksIGNvbnRhaW5pbmcgdGhlIHByZWZpeCBvZlxuICAgKiAgICAgbG9uZ3RleHQsIHRoZSBzdWZmaXggb2YgbG9uZ3RleHQsIHRoZSBwcmVmaXggb2Ygc2hvcnR0ZXh0LCB0aGUgc3VmZml4XG4gICAqICAgICBvZiBzaG9ydHRleHQgYW5kIHRoZSBjb21tb24gbWlkZGxlLiAgT3IgbnVsbCBpZiB0aGVyZSB3YXMgbm8gbWF0Y2guXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBkaWZmX2hhbGZNYXRjaElfKGxvbmd0ZXh0LCBzaG9ydHRleHQsIGkpIHtcbiAgICAvLyBTdGFydCB3aXRoIGEgMS80IGxlbmd0aCBzdWJzdHJpbmcgYXQgcG9zaXRpb24gaSBhcyBhIHNlZWQuXG4gICAgdmFyIHNlZWQgPSBsb25ndGV4dC5zdWJzdHJpbmcoaSwgaSArIE1hdGguZmxvb3IobG9uZ3RleHQubGVuZ3RoIC8gNCkpO1xuICAgIHZhciBqID0gLTE7XG4gICAgdmFyIGJlc3RfY29tbW9uID0gJyc7XG4gICAgdmFyIGJlc3RfbG9uZ3RleHRfYSwgYmVzdF9sb25ndGV4dF9iLCBiZXN0X3Nob3J0dGV4dF9hLCBiZXN0X3Nob3J0dGV4dF9iO1xuICAgIHdoaWxlICgoaiA9IHNob3J0dGV4dC5pbmRleE9mKHNlZWQsIGogKyAxKSkgIT0gLTEpIHtcbiAgICAgIHZhciBwcmVmaXhMZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeChsb25ndGV4dC5zdWJzdHJpbmcoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnR0ZXh0LnN1YnN0cmluZyhqKSk7XG4gICAgICB2YXIgc3VmZml4TGVuZ3RoID0gZGlmZl9jb21tb25TdWZmaXgobG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoMCwgaikpO1xuICAgICAgaWYgKGJlc3RfY29tbW9uLmxlbmd0aCA8IHN1ZmZpeExlbmd0aCArIHByZWZpeExlbmd0aCkge1xuICAgICAgICBiZXN0X2NvbW1vbiA9IHNob3J0dGV4dC5zdWJzdHJpbmcoaiAtIHN1ZmZpeExlbmd0aCwgaikgK1xuICAgICAgICAgICAgc2hvcnR0ZXh0LnN1YnN0cmluZyhqLCBqICsgcHJlZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9sb25ndGV4dF9hID0gbG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkgLSBzdWZmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X2xvbmd0ZXh0X2IgPSBsb25ndGV4dC5zdWJzdHJpbmcoaSArIHByZWZpeExlbmd0aCk7XG4gICAgICAgIGJlc3Rfc2hvcnR0ZXh0X2EgPSBzaG9ydHRleHQuc3Vic3RyaW5nKDAsIGogLSBzdWZmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X3Nob3J0dGV4dF9iID0gc2hvcnR0ZXh0LnN1YnN0cmluZyhqICsgcHJlZml4TGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJlc3RfY29tbW9uLmxlbmd0aCAqIDIgPj0gbG9uZ3RleHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW2Jlc3RfbG9uZ3RleHRfYSwgYmVzdF9sb25ndGV4dF9iLFxuICAgICAgICAgICAgICBiZXN0X3Nob3J0dGV4dF9hLCBiZXN0X3Nob3J0dGV4dF9iLCBiZXN0X2NvbW1vbl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpcnN0IGNoZWNrIGlmIHRoZSBzZWNvbmQgcXVhcnRlciBpcyB0aGUgc2VlZCBmb3IgYSBoYWxmLW1hdGNoLlxuICB2YXIgaG0xID0gZGlmZl9oYWxmTWF0Y2hJXyhsb25ndGV4dCwgc2hvcnR0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNlaWwobG9uZ3RleHQubGVuZ3RoIC8gNCkpO1xuICAvLyBDaGVjayBhZ2FpbiBiYXNlZCBvbiB0aGUgdGhpcmQgcXVhcnRlci5cbiAgdmFyIGhtMiA9IGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGxvbmd0ZXh0Lmxlbmd0aCAvIDIpKTtcbiAgdmFyIGhtO1xuICBpZiAoIWhtMSAmJiAhaG0yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAoIWhtMikge1xuICAgIGhtID0gaG0xO1xuICB9IGVsc2UgaWYgKCFobTEpIHtcbiAgICBobSA9IGhtMjtcbiAgfSBlbHNlIHtcbiAgICAvLyBCb3RoIG1hdGNoZWQuICBTZWxlY3QgdGhlIGxvbmdlc3QuXG4gICAgaG0gPSBobTFbNF0ubGVuZ3RoID4gaG0yWzRdLmxlbmd0aCA/IGhtMSA6IGhtMjtcbiAgfVxuXG4gIC8vIEEgaGFsZi1tYXRjaCB3YXMgZm91bmQsIHNvcnQgb3V0IHRoZSByZXR1cm4gZGF0YS5cbiAgdmFyIHRleHQxX2EsIHRleHQxX2IsIHRleHQyX2EsIHRleHQyX2I7XG4gIGlmICh0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGgpIHtcbiAgICB0ZXh0MV9hID0gaG1bMF07XG4gICAgdGV4dDFfYiA9IGhtWzFdO1xuICAgIHRleHQyX2EgPSBobVsyXTtcbiAgICB0ZXh0Ml9iID0gaG1bM107XG4gIH0gZWxzZSB7XG4gICAgdGV4dDJfYSA9IGhtWzBdO1xuICAgIHRleHQyX2IgPSBobVsxXTtcbiAgICB0ZXh0MV9hID0gaG1bMl07XG4gICAgdGV4dDFfYiA9IGhtWzNdO1xuICB9XG4gIHZhciBtaWRfY29tbW9uID0gaG1bNF07XG4gIHJldHVybiBbdGV4dDFfYSwgdGV4dDFfYiwgdGV4dDJfYSwgdGV4dDJfYiwgbWlkX2NvbW1vbl07XG59O1xuXG5cbi8qKlxuICogUmVvcmRlciBhbmQgbWVyZ2UgbGlrZSBlZGl0IHNlY3Rpb25zLiAgTWVyZ2UgZXF1YWxpdGllcy5cbiAqIEFueSBlZGl0IHNlY3Rpb24gY2FuIG1vdmUgYXMgbG9uZyBhcyBpdCBkb2Vzbid0IGNyb3NzIGFuIGVxdWFsaXR5LlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY2xlYW51cE1lcmdlKGRpZmZzKSB7XG4gIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsICcnXSk7ICAvLyBBZGQgYSBkdW1teSBlbnRyeSBhdCB0aGUgZW5kLlxuICB2YXIgcG9pbnRlciA9IDA7XG4gIHZhciBjb3VudF9kZWxldGUgPSAwO1xuICB2YXIgY291bnRfaW5zZXJ0ID0gMDtcbiAgdmFyIHRleHRfZGVsZXRlID0gJyc7XG4gIHZhciB0ZXh0X2luc2VydCA9ICcnO1xuICB2YXIgY29tbW9ubGVuZ3RoO1xuICB3aGlsZSAocG9pbnRlciA8IGRpZmZzLmxlbmd0aCkge1xuICAgIHN3aXRjaCAoZGlmZnNbcG9pbnRlcl1bMF0pIHtcbiAgICAgIGNhc2UgRElGRl9JTlNFUlQ6XG4gICAgICAgIGNvdW50X2luc2VydCsrO1xuICAgICAgICB0ZXh0X2luc2VydCArPSBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9ERUxFVEU6XG4gICAgICAgIGNvdW50X2RlbGV0ZSsrO1xuICAgICAgICB0ZXh0X2RlbGV0ZSArPSBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9FUVVBTDpcbiAgICAgICAgLy8gVXBvbiByZWFjaGluZyBhbiBlcXVhbGl0eSwgY2hlY2sgZm9yIHByaW9yIHJlZHVuZGFuY2llcy5cbiAgICAgICAgaWYgKGNvdW50X2RlbGV0ZSArIGNvdW50X2luc2VydCA+IDEpIHtcbiAgICAgICAgICBpZiAoY291bnRfZGVsZXRlICE9PSAwICYmIGNvdW50X2luc2VydCAhPT0gMCkge1xuICAgICAgICAgICAgLy8gRmFjdG9yIG91dCBhbnkgY29tbW9uIHByZWZpeGllcy5cbiAgICAgICAgICAgIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uUHJlZml4KHRleHRfaW5zZXJ0LCB0ZXh0X2RlbGV0ZSk7XG4gICAgICAgICAgICBpZiAoY29tbW9ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgIGlmICgocG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCkgPiAwICYmXG4gICAgICAgICAgICAgICAgICBkaWZmc1twb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0IC0gMV1bMF0gPT1cbiAgICAgICAgICAgICAgICAgIERJRkZfRVFVQUwpIHtcbiAgICAgICAgICAgICAgICBkaWZmc1twb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0IC0gMV1bMV0gKz1cbiAgICAgICAgICAgICAgICAgICAgdGV4dF9pbnNlcnQuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlmZnMuc3BsaWNlKDAsIDAsIFtESUZGX0VRVUFMLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9pbnNlcnQuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCldKTtcbiAgICAgICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGV4dF9pbnNlcnQgPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcoY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgdGV4dF9kZWxldGUgPSB0ZXh0X2RlbGV0ZS5zdWJzdHJpbmcoY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZhY3RvciBvdXQgYW55IGNvbW1vbiBzdWZmaXhpZXMuXG4gICAgICAgICAgICBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblN1ZmZpeCh0ZXh0X2luc2VydCwgdGV4dF9kZWxldGUpO1xuICAgICAgICAgICAgaWYgKGNvbW1vbmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9IHRleHRfaW5zZXJ0LnN1YnN0cmluZyh0ZXh0X2luc2VydC5sZW5ndGggLVxuICAgICAgICAgICAgICAgICAgY29tbW9ubGVuZ3RoKSArIGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICAgICAgICB0ZXh0X2luc2VydCA9IHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCB0ZXh0X2luc2VydC5sZW5ndGggLVxuICAgICAgICAgICAgICAgICAgY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgdGV4dF9kZWxldGUgPSB0ZXh0X2RlbGV0ZS5zdWJzdHJpbmcoMCwgdGV4dF9kZWxldGUubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIERlbGV0ZSB0aGUgb2ZmZW5kaW5nIHJlY29yZHMgYW5kIGFkZCB0aGUgbWVyZ2VkIG9uZXMuXG4gICAgICAgICAgaWYgKGNvdW50X2RlbGV0ZSA9PT0gMCkge1xuICAgICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudF9pbnNlcnQsXG4gICAgICAgICAgICAgICAgY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0LCBbRElGRl9JTlNFUlQsIHRleHRfaW5zZXJ0XSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb3VudF9pbnNlcnQgPT09IDApIHtcbiAgICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnRfZGVsZXRlLFxuICAgICAgICAgICAgICAgIGNvdW50X2RlbGV0ZSArIGNvdW50X2luc2VydCwgW0RJRkZfREVMRVRFLCB0ZXh0X2RlbGV0ZV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCxcbiAgICAgICAgICAgICAgICBjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQsIFtESUZGX0RFTEVURSwgdGV4dF9kZWxldGVdLFxuICAgICAgICAgICAgICAgIFtESUZGX0lOU0VSVCwgdGV4dF9pbnNlcnRdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnRlciA9IHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQgK1xuICAgICAgICAgICAgICAgICAgICAoY291bnRfZGVsZXRlID8gMSA6IDApICsgKGNvdW50X2luc2VydCA/IDEgOiAwKSArIDE7XG4gICAgICAgIH0gZWxzZSBpZiAocG9pbnRlciAhPT0gMCAmJiBkaWZmc1twb2ludGVyIC0gMV1bMF0gPT0gRElGRl9FUVVBTCkge1xuICAgICAgICAgIC8vIE1lcmdlIHRoaXMgZXF1YWxpdHkgd2l0aCB0aGUgcHJldmlvdXMgb25lLlxuICAgICAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArPSBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGNvdW50X2luc2VydCA9IDA7XG4gICAgICAgIGNvdW50X2RlbGV0ZSA9IDA7XG4gICAgICAgIHRleHRfZGVsZXRlID0gJyc7XG4gICAgICAgIHRleHRfaW5zZXJ0ID0gJyc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoZGlmZnNbZGlmZnMubGVuZ3RoIC0gMV1bMV0gPT09ICcnKSB7XG4gICAgZGlmZnMucG9wKCk7ICAvLyBSZW1vdmUgdGhlIGR1bW15IGVudHJ5IGF0IHRoZSBlbmQuXG4gIH1cblxuICAvLyBTZWNvbmQgcGFzczogbG9vayBmb3Igc2luZ2xlIGVkaXRzIHN1cnJvdW5kZWQgb24gYm90aCBzaWRlcyBieSBlcXVhbGl0aWVzXG4gIC8vIHdoaWNoIGNhbiBiZSBzaGlmdGVkIHNpZGV3YXlzIHRvIGVsaW1pbmF0ZSBhbiBlcXVhbGl0eS5cbiAgLy8gZS5nOiBBPGlucz5CQTwvaW5zPkMgLT4gPGlucz5BQjwvaW5zPkFDXG4gIHZhciBjaGFuZ2VzID0gZmFsc2U7XG4gIHBvaW50ZXIgPSAxO1xuICAvLyBJbnRlbnRpb25hbGx5IGlnbm9yZSB0aGUgZmlyc3QgYW5kIGxhc3QgZWxlbWVudCAoZG9uJ3QgbmVlZCBjaGVja2luZykuXG4gIHdoaWxlIChwb2ludGVyIDwgZGlmZnMubGVuZ3RoIC0gMSkge1xuICAgIGlmIChkaWZmc1twb2ludGVyIC0gMV1bMF0gPT0gRElGRl9FUVVBTCAmJlxuICAgICAgICBkaWZmc1twb2ludGVyICsgMV1bMF0gPT0gRElGRl9FUVVBTCkge1xuICAgICAgLy8gVGhpcyBpcyBhIHNpbmdsZSBlZGl0IHN1cnJvdW5kZWQgYnkgZXF1YWxpdGllcy5cbiAgICAgIGlmIChkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoIC1cbiAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKSA9PSBkaWZmc1twb2ludGVyIC0gMV1bMV0pIHtcbiAgICAgICAgLy8gU2hpZnQgdGhlIGVkaXQgb3ZlciB0aGUgcHJldmlvdXMgZXF1YWxpdHkuXG4gICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdICtcbiAgICAgICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZygwLCBkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXS5sZW5ndGgpO1xuICAgICAgICBkaWZmc1twb2ludGVyICsgMV1bMV0gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0gKyBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gMSwgMSk7XG4gICAgICAgIGNoYW5nZXMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlciArIDFdWzFdLmxlbmd0aCkgPT1cbiAgICAgICAgICBkaWZmc1twb2ludGVyICsgMV1bMV0pIHtcbiAgICAgICAgLy8gU2hpZnQgdGhlIGVkaXQgb3ZlciB0aGUgbmV4dCBlcXVhbGl0eS5cbiAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdICs9IGRpZmZzW3BvaW50ZXIgKyAxXVsxXTtcbiAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0gPVxuICAgICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKGRpZmZzW3BvaW50ZXIgKyAxXVsxXS5sZW5ndGgpICtcbiAgICAgICAgICAgIGRpZmZzW3BvaW50ZXIgKyAxXVsxXTtcbiAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgKyAxLCAxKTtcbiAgICAgICAgY2hhbmdlcyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHBvaW50ZXIrKztcbiAgfVxuICAvLyBJZiBzaGlmdHMgd2VyZSBtYWRlLCB0aGUgZGlmZiBuZWVkcyByZW9yZGVyaW5nIGFuZCBhbm90aGVyIHNoaWZ0IHN3ZWVwLlxuICBpZiAoY2hhbmdlcykge1xuICAgIGRpZmZfY2xlYW51cE1lcmdlKGRpZmZzKTtcbiAgfVxufTtcblxuXG52YXIgZGlmZiA9IGRpZmZfbWFpbjtcbmRpZmYuSU5TRVJUID0gRElGRl9JTlNFUlQ7XG5kaWZmLkRFTEVURSA9IERJRkZfREVMRVRFO1xuZGlmZi5FUVVBTCA9IERJRkZfRVFVQUw7XG5cbm1vZHVsZS5leHBvcnRzID0gZGlmZjtcblxuLypcbiAqIE1vZGlmeSBhIGRpZmYgc3VjaCB0aGF0IHRoZSBjdXJzb3IgcG9zaXRpb24gcG9pbnRzIHRvIHRoZSBzdGFydCBvZiBhIGNoYW5nZTpcbiAqIEUuZy5cbiAqICAgY3Vyc29yX25vcm1hbGl6ZV9kaWZmKFtbRElGRl9FUVVBTCwgJ2FiYyddXSwgMSlcbiAqICAgICA9PiBbMSwgW1tESUZGX0VRVUFMLCAnYSddLCBbRElGRl9FUVVBTCwgJ2JjJ11dXVxuICogICBjdXJzb3Jfbm9ybWFsaXplX2RpZmYoW1tESUZGX0lOU0VSVCwgJ25ldyddLCBbRElGRl9ERUxFVEUsICd4eXonXV0sIDIpXG4gKiAgICAgPT4gWzIsIFtbRElGRl9JTlNFUlQsICduZXcnXSwgW0RJRkZfREVMRVRFLCAneHknXSwgW0RJRkZfREVMRVRFLCAneiddXV1cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBkaWZmcyBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICogQHBhcmFtIHtJbnR9IGN1cnNvcl9wb3MgU3VnZ2VzdGVkIGVkaXQgcG9zaXRpb24uIE11c3Qgbm90IGJlIG91dCBvZiBib3VuZHMhXG4gKiBAcmV0dXJuIHtBcnJheX0gQSB0dXBsZSBbY3Vyc29yIGxvY2F0aW9uIGluIHRoZSBtb2RpZmllZCBkaWZmLCBtb2RpZmllZCBkaWZmXVxuICovXG5mdW5jdGlvbiBjdXJzb3Jfbm9ybWFsaXplX2RpZmYgKGRpZmZzLCBjdXJzb3JfcG9zKSB7XG4gIGlmIChjdXJzb3JfcG9zID09PSAwKSB7XG4gICAgcmV0dXJuIFtESUZGX0VRVUFMLCBkaWZmc107XG4gIH1cbiAgZm9yICh2YXIgY3VycmVudF9wb3MgPSAwLCBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGQgPSBkaWZmc1tpXTtcbiAgICBpZiAoZFswXSA9PT0gRElGRl9ERUxFVEUgfHwgZFswXSA9PT0gRElGRl9FUVVBTCkge1xuICAgICAgdmFyIG5leHRfcG9zID0gY3VycmVudF9wb3MgKyBkWzFdLmxlbmd0aDtcbiAgICAgIGlmIChjdXJzb3JfcG9zID09PSBuZXh0X3Bvcykge1xuICAgICAgICByZXR1cm4gW2kgKyAxLCBkaWZmc107XG4gICAgICB9IGVsc2UgaWYgKGN1cnNvcl9wb3MgPCBuZXh0X3Bvcykge1xuICAgICAgICAvLyBjb3B5IHRvIHByZXZlbnQgc2lkZSBlZmZlY3RzXG4gICAgICAgIGRpZmZzID0gZGlmZnMuc2xpY2UoKTtcbiAgICAgICAgLy8gc3BsaXQgZCBpbnRvIHR3byBkaWZmIGNoYW5nZXNcbiAgICAgICAgdmFyIHNwbGl0X3BvcyA9IGN1cnNvcl9wb3MgLSBjdXJyZW50X3BvcztcbiAgICAgICAgdmFyIGRfbGVmdCA9IFtkWzBdLCBkWzFdLnNsaWNlKDAsIHNwbGl0X3BvcyldO1xuICAgICAgICB2YXIgZF9yaWdodCA9IFtkWzBdLCBkWzFdLnNsaWNlKHNwbGl0X3BvcyldO1xuICAgICAgICBkaWZmcy5zcGxpY2UoaSwgMSwgZF9sZWZ0LCBkX3JpZ2h0KTtcbiAgICAgICAgcmV0dXJuIFtpICsgMSwgZGlmZnNdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudF9wb3MgPSBuZXh0X3BvcztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdjdXJzb3JfcG9zIGlzIG91dCBvZiBib3VuZHMhJylcbn1cblxuLypcbiAqIE1vZGlmeSBhIGRpZmYgc3VjaCB0aGF0IHRoZSBlZGl0IHBvc2l0aW9uIGlzIFwic2hpZnRlZFwiIHRvIHRoZSBwcm9wb3NlZCBlZGl0IGxvY2F0aW9uIChjdXJzb3JfcG9zaXRpb24pLlxuICpcbiAqIENhc2UgMSlcbiAqICAgQ2hlY2sgaWYgYSBuYWl2ZSBzaGlmdCBpcyBwb3NzaWJsZTpcbiAqICAgICBbMCwgWF0sIFsgMSwgWV0gLT4gWyAxLCBZXSwgWzAsIFhdICAgIChpZiBYICsgWSA9PT0gWSArIFgpXG4gKiAgICAgWzAsIFhdLCBbLTEsIFldIC0+IFstMSwgWV0sIFswLCBYXSAgICAoaWYgWCArIFkgPT09IFkgKyBYKSAtIGhvbGRzIHNhbWUgcmVzdWx0XG4gKiBDYXNlIDIpXG4gKiAgIENoZWNrIGlmIHRoZSBmb2xsb3dpbmcgc2hpZnRzIGFyZSBwb3NzaWJsZTpcbiAqICAgICBbMCwgJ3ByZSddLCBbIDEsICdwcmVmaXgnXSAtPiBbIDEsICdwcmUnXSwgWzAsICdwcmUnXSwgWyAxLCAnZml4J11cbiAqICAgICBbMCwgJ3ByZSddLCBbLTEsICdwcmVmaXgnXSAtPiBbLTEsICdwcmUnXSwgWzAsICdwcmUnXSwgWy0xLCAnZml4J11cbiAqICAgICAgICAgXiAgICAgICAgICAgIF5cbiAqICAgICAgICAgZCAgICAgICAgICBkX25leHRcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBkaWZmcyBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICogQHBhcmFtIHtJbnR9IGN1cnNvcl9wb3MgU3VnZ2VzdGVkIGVkaXQgcG9zaXRpb24uIE11c3Qgbm90IGJlIG91dCBvZiBib3VuZHMhXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqL1xuZnVuY3Rpb24gZml4X2N1cnNvciAoZGlmZnMsIGN1cnNvcl9wb3MpIHtcbiAgdmFyIG5vcm0gPSBjdXJzb3Jfbm9ybWFsaXplX2RpZmYoZGlmZnMsIGN1cnNvcl9wb3MpO1xuICB2YXIgbmRpZmZzID0gbm9ybVsxXTtcbiAgdmFyIGN1cnNvcl9wb2ludGVyID0gbm9ybVswXTtcbiAgdmFyIGQgPSBuZGlmZnNbY3Vyc29yX3BvaW50ZXJdO1xuICB2YXIgZF9uZXh0ID0gbmRpZmZzW2N1cnNvcl9wb2ludGVyICsgMV07XG5cbiAgaWYgKGQgPT0gbnVsbCkge1xuICAgIC8vIFRleHQgd2FzIGRlbGV0ZWQgZnJvbSBlbmQgb2Ygb3JpZ2luYWwgc3RyaW5nLFxuICAgIC8vIGN1cnNvciBpcyBub3cgb3V0IG9mIGJvdW5kcyBpbiBuZXcgc3RyaW5nXG4gICAgcmV0dXJuIGRpZmZzO1xuICB9IGVsc2UgaWYgKGRbMF0gIT09IERJRkZfRVFVQUwpIHtcbiAgICAvLyBBIG1vZGlmaWNhdGlvbiBoYXBwZW5lZCBhdCB0aGUgY3Vyc29yIGxvY2F0aW9uLlxuICAgIC8vIFRoaXMgaXMgdGhlIGV4cGVjdGVkIG91dGNvbWUsIHNvIHdlIGNhbiByZXR1cm4gdGhlIG9yaWdpbmFsIGRpZmYuXG4gICAgcmV0dXJuIGRpZmZzO1xuICB9IGVsc2Uge1xuICAgIGlmIChkX25leHQgIT0gbnVsbCAmJiBkWzFdICsgZF9uZXh0WzFdID09PSBkX25leHRbMV0gKyBkWzFdKSB7XG4gICAgICAvLyBDYXNlIDEpXG4gICAgICAvLyBJdCBpcyBwb3NzaWJsZSB0byBwZXJmb3JtIGEgbmFpdmUgc2hpZnRcbiAgICAgIG5kaWZmcy5zcGxpY2UoY3Vyc29yX3BvaW50ZXIsIDIsIGRfbmV4dCwgZClcbiAgICAgIHJldHVybiBtZXJnZV90dXBsZXMobmRpZmZzLCBjdXJzb3JfcG9pbnRlciwgMilcbiAgICB9IGVsc2UgaWYgKGRfbmV4dCAhPSBudWxsICYmIGRfbmV4dFsxXS5pbmRleE9mKGRbMV0pID09PSAwKSB7XG4gICAgICAvLyBDYXNlIDIpXG4gICAgICAvLyBkWzFdIGlzIGEgcHJlZml4IG9mIGRfbmV4dFsxXVxuICAgICAgLy8gV2UgY2FuIGFzc3VtZSB0aGF0IGRfbmV4dFswXSAhPT0gMCwgc2luY2UgZFswXSA9PT0gMFxuICAgICAgLy8gU2hpZnQgZWRpdCBsb2NhdGlvbnMuLlxuICAgICAgbmRpZmZzLnNwbGljZShjdXJzb3JfcG9pbnRlciwgMiwgW2RfbmV4dFswXSwgZFsxXV0sIFswLCBkWzFdXSk7XG4gICAgICB2YXIgc3VmZml4ID0gZF9uZXh0WzFdLnNsaWNlKGRbMV0ubGVuZ3RoKTtcbiAgICAgIGlmIChzdWZmaXgubGVuZ3RoID4gMCkge1xuICAgICAgICBuZGlmZnMuc3BsaWNlKGN1cnNvcl9wb2ludGVyICsgMiwgMCwgW2RfbmV4dFswXSwgc3VmZml4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVyZ2VfdHVwbGVzKG5kaWZmcywgY3Vyc29yX3BvaW50ZXIsIDMpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5vdCBwb3NzaWJsZSB0byBwZXJmb3JtIGFueSBtb2RpZmljYXRpb25cbiAgICAgIHJldHVybiBkaWZmcztcbiAgICB9XG4gIH1cbn1cblxuLypcbiAqIENoZWNrIGRpZmYgZGlkIG5vdCBzcGxpdCBzdXJyb2dhdGUgcGFpcnMuXG4gKiBFeC4gWzAsICdcXHVEODNEJ10sIFstMSwgJ1xcdURDMzYnXSwgWzEsICdcXHVEQzJGJ10gLT4gWy0xLCAnXFx1RDgzRFxcdURDMzYnXSwgWzEsICdcXHVEODNEXFx1REMyRiddXG4gKiAgICAgJ1xcdUQ4M0RcXHVEQzM2JyA9PT0gJ/CfkLYnLCAnXFx1RDgzRFxcdURDMkYnID09PSAn8J+QrydcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBkaWZmcyBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKi9cbmZ1bmN0aW9uIGZpeF9lbW9qaSAoZGlmZnMpIHtcbiAgdmFyIGNvbXBhY3QgPSBmYWxzZTtcbiAgdmFyIHN0YXJ0c193aXRoX3BhaXJfZW5kID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KDApID49IDB4REMwMCAmJiBzdHIuY2hhckNvZGVBdCgwKSA8PSAweERGRkY7XG4gIH1cbiAgdmFyIGVuZHNfd2l0aF9wYWlyX3N0YXJ0ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KHN0ci5sZW5ndGgtMSkgPj0gMHhEODAwICYmIHN0ci5jaGFyQ29kZUF0KHN0ci5sZW5ndGgtMSkgPD0gMHhEQkZGO1xuICB9XG4gIGZvciAodmFyIGkgPSAyOyBpIDwgZGlmZnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZGlmZnNbaS0yXVswXSA9PT0gRElGRl9FUVVBTCAmJiBlbmRzX3dpdGhfcGFpcl9zdGFydChkaWZmc1tpLTJdWzFdKSAmJlxuICAgICAgICBkaWZmc1tpLTFdWzBdID09PSBESUZGX0RFTEVURSAmJiBzdGFydHNfd2l0aF9wYWlyX2VuZChkaWZmc1tpLTFdWzFdKSAmJlxuICAgICAgICBkaWZmc1tpXVswXSA9PT0gRElGRl9JTlNFUlQgJiYgc3RhcnRzX3dpdGhfcGFpcl9lbmQoZGlmZnNbaV1bMV0pKSB7XG4gICAgICBjb21wYWN0ID0gdHJ1ZTtcblxuICAgICAgZGlmZnNbaS0xXVsxXSA9IGRpZmZzW2ktMl1bMV0uc2xpY2UoLTEpICsgZGlmZnNbaS0xXVsxXTtcbiAgICAgIGRpZmZzW2ldWzFdID0gZGlmZnNbaS0yXVsxXS5zbGljZSgtMSkgKyBkaWZmc1tpXVsxXTtcblxuICAgICAgZGlmZnNbaS0yXVsxXSA9IGRpZmZzW2ktMl1bMV0uc2xpY2UoMCwgLTEpO1xuICAgIH1cbiAgfVxuICBpZiAoIWNvbXBhY3QpIHtcbiAgICByZXR1cm4gZGlmZnM7XG4gIH1cbiAgdmFyIGZpeGVkX2RpZmZzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGlmZnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZGlmZnNbaV1bMV0ubGVuZ3RoID4gMCkge1xuICAgICAgZml4ZWRfZGlmZnMucHVzaChkaWZmc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmaXhlZF9kaWZmcztcbn1cblxuLypcbiAqIFRyeSB0byBtZXJnZSB0dXBsZXMgd2l0aCB0aGVpciBuZWlnYm9ycyBpbiBhIGdpdmVuIHJhbmdlLlxuICogRS5nLiBbMCwgJ2EnXSwgWzAsICdiJ10gLT4gWzAsICdhYiddXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKiBAcGFyYW0ge0ludH0gc3RhcnQgUG9zaXRpb24gb2YgdGhlIGZpcnN0IGVsZW1lbnQgdG8gbWVyZ2UgKGRpZmZzW3N0YXJ0XSBpcyBhbHNvIG1lcmdlZCB3aXRoIGRpZmZzW3N0YXJ0IC0gMV0pLlxuICogQHBhcmFtIHtJbnR9IGxlbmd0aCBOdW1iZXIgb2YgY29uc2VjdXRpdmUgZWxlbWVudHMgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgbWVyZ2VkIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBtZXJnZV90dXBsZXMgKGRpZmZzLCBzdGFydCwgbGVuZ3RoKSB7XG4gIC8vIENoZWNrIGZyb20gKHN0YXJ0LTEpIHRvIChzdGFydCtsZW5ndGgpLlxuICBmb3IgKHZhciBpID0gc3RhcnQgKyBsZW5ndGggLSAxOyBpID49IDAgJiYgaSA+PSBzdGFydCAtIDE7IGktLSkge1xuICAgIGlmIChpICsgMSA8IGRpZmZzLmxlbmd0aCkge1xuICAgICAgdmFyIGxlZnRfZCA9IGRpZmZzW2ldO1xuICAgICAgdmFyIHJpZ2h0X2QgPSBkaWZmc1tpKzFdO1xuICAgICAgaWYgKGxlZnRfZFswXSA9PT0gcmlnaHRfZFsxXSkge1xuICAgICAgICBkaWZmcy5zcGxpY2UoaSwgMiwgW2xlZnRfZFswXSwgbGVmdF9kWzFdICsgcmlnaHRfZFsxXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGlmZnM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRTeW50YXhFcnJvciA9IFN5bnRheEVycm9yO1xudmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxudmFyIG5lZWRzRXZhbCA9IHt9O1xuXG52YXIgVHlwZWRBcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0JyVBZ2dyZWdhdGVFcnJvciUnOiB0eXBlb2YgQWdncmVnYXRlRXJyb3IgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQWdncmVnYXRlRXJyb3IsXG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Z1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBuZWVkc0V2YWwsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJpZ0ludCUnOiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludCxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6IEVycm9yLFxuXHQnJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCclRXZhbEVycm9yJSc6IEV2YWxFcnJvcixcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogJFN5bnRheEVycm9yLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVVJJRXJyb3IlJzogVVJJRXJyb3IsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtSZWYlJzogdHlwZW9mIFdlYWtSZWYgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1JlZixcblx0JyVXZWFrU2V0JSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXRcbn07XG5cbnZhciBkb0V2YWwgPSBmdW5jdGlvbiBkb0V2YWwobmFtZSkge1xuXHR2YXIgdmFsdWU7XG5cdGlmIChuYW1lID09PSAnJUFzeW5jRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yJScpIHtcblx0XHR2YXIgZm4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpO1xuXHRcdGlmIChmbikge1xuXHRcdFx0dmFsdWUgPSBmbi5wcm90b3R5cGU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnKSB7XG5cdFx0dmFyIGdlbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yJScpO1xuXHRcdGlmIChnZW4pIHtcblx0XHRcdHZhbHVlID0gZ2V0UHJvdG8oZ2VuLnByb3RvdHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0SU5UUklOU0lDU1tuYW1lXSA9IHZhbHVlO1xuXG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBMRUdBQ1lfQUxJQVNFUyA9IHtcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXMnKTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG5cdHZhciBsYXN0ID0gJHN0clNsaWNlKHN0cmluZywgLTEpO1xuXHRpZiAoZmlyc3QgPT09ICclJyAmJiBsYXN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgJyk7XG5cdH0gZWxzZSBpZiAobGFzdCA9PT0gJyUnICYmIGZpcnN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgJyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuXHRcdFx0dmFsdWUgPSBkb0V2YWwoaW50cmluc2ljTmFtZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGlhczogYWxpYXMsXG5cdFx0XHRuYW1lOiBpbnRyaW5zaWNOYW1lLFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fTtcblx0fVxuXG5cdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXHR2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJztcblxuXHR2YXIgaW50cmluc2ljID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0dmFyIGludHJpbnNpY1JlYWxOYW1lID0gaW50cmluc2ljLm5hbWU7XG5cdHZhciB2YWx1ZSA9IGludHJpbnNpYy52YWx1ZTtcblx0dmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuXG5cdHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcblx0aWYgKGFsaWFzKSB7XG5cdFx0aW50cmluc2ljQmFzZU5hbWUgPSBhbGlhc1swXTtcblx0XHQkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDEsIGlzT3duID0gdHJ1ZTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFyIHBhcnQgPSBwYXJ0c1tpXTtcblx0XHR2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG5cdFx0dmFyIGxhc3QgPSAkc3RyU2xpY2UocGFydCwgLTEpO1xuXHRcdGlmIChcblx0XHRcdChcblx0XHRcdFx0KGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gJ2AnKVxuXHRcdFx0XHR8fCAobGFzdCA9PT0gJ1wiJyB8fCBsYXN0ID09PSBcIidcIiB8fCBsYXN0ID09PSAnYCcpXG5cdFx0XHQpXG5cdFx0XHQmJiBmaXJzdCAhPT0gbGFzdFxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigncHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3RlcycpO1xuXHRcdH1cblx0XHRpZiAocGFydCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCAhaXNPd24pIHtcblx0XHRcdHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aW50cmluc2ljQmFzZU5hbWUgKz0gJy4nICsgcGFydDtcblx0XHRpbnRyaW5zaWNSZWFsTmFtZSA9ICclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnO1xuXG5cdFx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNSZWFsTmFtZSkpIHtcblx0XHRcdHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIShwYXJ0IGluIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0aXNPd24gPSAhIWRlc2M7XG5cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuIiwiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcblxudmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGlzU3RhbmRhcmRBcmd1bWVudHModmFsdWUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0JHRvU3RyaW5nKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cyk7XG59KCkpO1xuXG5pc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7IC8vIGZvciB0ZXN0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXREYXkgPSBEYXRlLnByb3RvdHlwZS5nZXREYXk7XG52YXIgdHJ5RGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHRyeURhdGVHZXREYXlDYWxsKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0Z2V0RGF5LmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRhdGVDbGFzcyA9ICdbb2JqZWN0IERhdGVdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeURhdGVPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IGRhdGVDbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IGhhc1N5bWJvbHMgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG52YXIgaGFzO1xudmFyICRleGVjO1xudmFyIGlzUmVnZXhNYXJrZXI7XG52YXIgYmFkU3RyaW5naWZpZXI7XG5cbmlmIChoYXNUb1N0cmluZ1RhZykge1xuXHRoYXMgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHknKTtcblx0JGV4ZWMgPSBjYWxsQm91bmQoJ1JlZ0V4cC5wcm90b3R5cGUuZXhlYycpO1xuXHRpc1JlZ2V4TWFya2VyID0ge307XG5cblx0dmFyIHRocm93UmVnZXhNYXJrZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhyb3cgaXNSZWdleE1hcmtlcjtcblx0fTtcblx0YmFkU3RyaW5naWZpZXIgPSB7XG5cdFx0dG9TdHJpbmc6IHRocm93UmVnZXhNYXJrZXIsXG5cdFx0dmFsdWVPZjogdGhyb3dSZWdleE1hcmtlclxuXHR9O1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sLnRvUHJpbWl0aXZlID09PSAnc3ltYm9sJykge1xuXHRcdGJhZFN0cmluZ2lmaWVyW1N5bWJvbC50b1ByaW1pdGl2ZV0gPSB0aHJvd1JlZ2V4TWFya2VyO1xuXHR9XG59XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciByZWdleENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzVG9TdHJpbmdUYWdcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdD8gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRcdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciBkZXNjcmlwdG9yID0gZ09QRCh2YWx1ZSwgJ2xhc3RJbmRleCcpO1xuXHRcdHZhciBoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKTtcblx0XHRpZiAoIWhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHQkZXhlYyh2YWx1ZSwgYmFkU3RyaW5naWZpZXIpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBlID09PSBpc1JlZ2V4TWFya2VyO1xuXHRcdH1cblx0fVxuXHQ6IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHtcblx0XHQvLyBJbiBvbGRlciBicm93c2VycywgdHlwZW9mIHJlZ2V4IGluY29ycmVjdGx5IHJldHVybnMgJ2Z1bmN0aW9uJ1xuXHRcdGlmICghdmFsdWUgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiAkdG9TdHJpbmcodmFsdWUpID09PSByZWdleENsYXNzO1xuXHR9O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG51bWJlcklzTmFOID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzKGEsIGIpIHtcblx0aWYgKGEgPT09IDAgJiYgYiA9PT0gMCkge1xuXHRcdHJldHVybiAxIC8gYSA9PT0gMSAvIGI7XG5cdH1cblx0aWYgKGEgPT09IGIpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAobnVtYmVySXNOYU4oYSkgJiYgbnVtYmVySXNOYU4oYikpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBwb2x5ZmlsbCA9IGNhbGxCaW5kKGdldFBvbHlmaWxsKCksIE9iamVjdCk7XG5cbmRlZmluZShwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QuaXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuaXMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1PYmplY3RJcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBpczogcG9seWZpbGwgfSwge1xuXHRcdGlzOiBmdW5jdGlvbiB0ZXN0T2JqZWN0SXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmlzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5c1NoaW07XG5pZiAoIU9iamVjdC5rZXlzKSB7XG5cdC8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG5cdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHR2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG5cdHZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHR2YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtZXJhYmxlLmNhbGwoeyB0b1N0cmluZzogbnVsbCB9LCAndG9TdHJpbmcnKTtcblx0dmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG5cdHZhciBkb250RW51bXMgPSBbXG5cdFx0J3RvU3RyaW5nJyxcblx0XHQndG9Mb2NhbGVTdHJpbmcnLFxuXHRcdCd2YWx1ZU9mJyxcblx0XHQnaGFzT3duUHJvcGVydHknLFxuXHRcdCdpc1Byb3RvdHlwZU9mJyxcblx0XHQncHJvcGVydHlJc0VudW1lcmFibGUnLFxuXHRcdCdjb25zdHJ1Y3Rvcidcblx0XTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcblx0XHR2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG5cdH07XG5cdHZhciBleGNsdWRlZEtleXMgPSB7XG5cdFx0JGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG5cdFx0JGNvbnNvbGU6IHRydWUsXG5cdFx0JGV4dGVybmFsOiB0cnVlLFxuXHRcdCRmcmFtZTogdHJ1ZSxcblx0XHQkZnJhbWVFbGVtZW50OiB0cnVlLFxuXHRcdCRmcmFtZXM6IHRydWUsXG5cdFx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHRcdCRpbm5lcldpZHRoOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuXHRcdCRvdXRlckhlaWdodDogdHJ1ZSxcblx0XHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0XHQkcGFnZVhPZmZzZXQ6IHRydWUsXG5cdFx0JHBhZ2VZT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYXJlbnQ6IHRydWUsXG5cdFx0JHNjcm9sbExlZnQ6IHRydWUsXG5cdFx0JHNjcm9sbFRvcDogdHJ1ZSxcblx0XHQkc2Nyb2xsWDogdHJ1ZSxcblx0XHQkc2Nyb2xsWTogdHJ1ZSxcblx0XHQkc2VsZjogdHJ1ZSxcblx0XHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHRcdCR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcblx0XHQkd2luZG93OiB0cnVlXG5cdH07XG5cdHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm9yICh2YXIgayBpbiB3aW5kb3cpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0oKSk7XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAobykge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0a2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jztcblx0XHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0XHR2YXIgaXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KTtcblx0XHR2YXIgaXNTdHJpbmcgPSBpc09iamVjdCAmJiB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXHRcdHZhciB0aGVLZXlzID0gW107XG5cblx0XHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblx0XHRpZiAoaXNTdHJpbmcgJiYgb2JqZWN0Lmxlbmd0aCA+IDAgJiYgIWhhcy5jYWxsKG9iamVjdCwgMCkpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpc0FyZ3VtZW50cyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3QubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcobmFtZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0XHR2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG5cblx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgZG9udEVudW1zLmxlbmd0aDsgKytrKSB7XG5cdFx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bXNba10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGVLZXlzO1xuXHR9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTtcblxudmFyIG9yaWdLZXlzID0gT2JqZWN0LmtleXM7XG52YXIga2V5c1NoaW0gPSBvcmlnS2V5cyA/IGZ1bmN0aW9uIGtleXMobykgeyByZXR1cm4gb3JpZ0tleXMobyk7IH0gOiByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBvcmlnaW5hbEtleXMgPSBPYmplY3Qua2V5cztcblxua2V5c1NoaW0uc2hpbSA9IGZ1bmN0aW9uIHNoaW1PYmplY3RLZXlzKCkge1xuXHRpZiAoT2JqZWN0LmtleXMpIHtcblx0XHR2YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBTYWZhcmkgNS4wIGJ1Z1xuXHRcdFx0dmFyIGFyZ3MgPSBPYmplY3Qua2V5cyhhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIGFyZ3MgJiYgYXJncy5sZW5ndGggPT09IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0fSgxLCAyKSk7XG5cdFx0aWYgKCFrZXlzV29ya3NXaXRoQXJndW1lbnRzKSB7XG5cdFx0XHRPYmplY3Qua2V5cyA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG5cdFx0XHRcdGlmIChpc0FyZ3Mob2JqZWN0KSkge1xuXHRcdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMoc2xpY2UuY2FsbChvYmplY3QpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKG9iamVjdCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRPYmplY3Qua2V5cyA9IGtleXNTaGltO1xuXHR9XG5cdHJldHVybiBPYmplY3Qua2V5cyB8fCBrZXlzU2hpbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0dmFyIHN0ciA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHR2YXIgaXNBcmdzID0gc3RyID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0aWYgKCFpc0FyZ3MpIHtcblx0XHRpc0FyZ3MgPSBzdHIgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHRcdHZhbHVlICE9PSBudWxsICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHRcdHRvU3RyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRyZXR1cm4gaXNBcmdzO1xufTtcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlBhcmNobWVudFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJQYXJjaG1lbnRcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUGFyY2htZW50RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBhcmNobWVudEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBhcmNobWVudEVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgbWVzc2FnZSA9ICdbUGFyY2htZW50XSAnICsgbWVzc2FnZTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgX3RoaXMubmFtZSA9IF90aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFBhcmNobWVudEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5QYXJjaG1lbnRFcnJvciA9IFBhcmNobWVudEVycm9yO1xudmFyIGF0dHJpYnV0ZXMgPSB7fTtcbnZhciBjbGFzc2VzID0ge307XG52YXIgdGFncyA9IHt9O1xudmFyIHR5cGVzID0ge307XG5leHBvcnRzLkRBVEFfS0VZID0gJ19fYmxvdCc7XG52YXIgU2NvcGU7XG4oZnVuY3Rpb24gKFNjb3BlKSB7XG4gICAgU2NvcGVbU2NvcGVbXCJUWVBFXCJdID0gM10gPSBcIlRZUEVcIjtcbiAgICBTY29wZVtTY29wZVtcIkxFVkVMXCJdID0gMTJdID0gXCJMRVZFTFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQVRUUklCVVRFXCJdID0gMTNdID0gXCJBVFRSSUJVVEVcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT1RcIl0gPSAxNF0gPSBcIkJMT1RcIjtcbiAgICBTY29wZVtTY29wZVtcIklOTElORVwiXSA9IDddID0gXCJJTkxJTkVcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT0NLXCJdID0gMTFdID0gXCJCTE9DS1wiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPQ0tfQkxPVFwiXSA9IDEwXSA9IFwiQkxPQ0tfQkxPVFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiSU5MSU5FX0JMT1RcIl0gPSA2XSA9IFwiSU5MSU5FX0JMT1RcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT0NLX0FUVFJJQlVURVwiXSA9IDldID0gXCJCTE9DS19BVFRSSUJVVEVcIjtcbiAgICBTY29wZVtTY29wZVtcIklOTElORV9BVFRSSUJVVEVcIl0gPSA1XSA9IFwiSU5MSU5FX0FUVFJJQlVURVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQU5ZXCJdID0gMTVdID0gXCJBTllcIjtcbn0pKFNjb3BlID0gZXhwb3J0cy5TY29wZSB8fCAoZXhwb3J0cy5TY29wZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGUoaW5wdXQsIHZhbHVlKSB7XG4gICAgdmFyIG1hdGNoID0gcXVlcnkoaW5wdXQpO1xuICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJjaG1lbnRFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgXCIgKyBpbnB1dCArIFwiIGJsb3RcIik7XG4gICAgfVxuICAgIHZhciBCbG90Q2xhc3MgPSBtYXRjaDtcbiAgICB2YXIgbm9kZSA9IFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpbnB1dCBpbnN0YW5jZW9mIE5vZGUgfHwgaW5wdXRbJ25vZGVUeXBlJ10gPT09IE5vZGUuVEVYVF9OT0RFID8gaW5wdXQgOiBCbG90Q2xhc3MuY3JlYXRlKHZhbHVlKTtcbiAgICByZXR1cm4gbmV3IEJsb3RDbGFzcyhub2RlLCB2YWx1ZSk7XG59XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmZ1bmN0aW9uIGZpbmQobm9kZSwgYnViYmxlKSB7XG4gICAgaWYgKGJ1YmJsZSA9PT0gdm9pZCAwKSB7IGJ1YmJsZSA9IGZhbHNlOyB9XG4gICAgaWYgKG5vZGUgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChub2RlW2V4cG9ydHMuREFUQV9LRVldICE9IG51bGwpXG4gICAgICAgIHJldHVybiBub2RlW2V4cG9ydHMuREFUQV9LRVldLmJsb3Q7XG4gICAgaWYgKGJ1YmJsZSlcbiAgICAgICAgcmV0dXJuIGZpbmQobm9kZS5wYXJlbnROb2RlLCBidWJibGUpO1xuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5maW5kID0gZmluZDtcbmZ1bmN0aW9uIHF1ZXJ5KHF1ZXJ5LCBzY29wZSkge1xuICAgIGlmIChzY29wZSA9PT0gdm9pZCAwKSB7IHNjb3BlID0gU2NvcGUuQU5ZOyB9XG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hdGNoID0gdHlwZXNbcXVlcnldIHx8IGF0dHJpYnV0ZXNbcXVlcnldO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgfVxuICAgIGVsc2UgaWYgKHF1ZXJ5IGluc3RhbmNlb2YgVGV4dCB8fCBxdWVyeVsnbm9kZVR5cGUnXSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgbWF0Y2ggPSB0eXBlc1sndGV4dCddO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcXVlcnkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChxdWVyeSAmIFNjb3BlLkxFVkVMICYgU2NvcGUuQkxPQ0spIHtcbiAgICAgICAgICAgIG1hdGNoID0gdHlwZXNbJ2Jsb2NrJ107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocXVlcnkgJiBTY29wZS5MRVZFTCAmIFNjb3BlLklOTElORSkge1xuICAgICAgICAgICAgbWF0Y2ggPSB0eXBlc1snaW5saW5lJ107XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocXVlcnkgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICB2YXIgbmFtZXMgPSAocXVlcnkuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBmb3IgKHZhciBpIGluIG5hbWVzKSB7XG4gICAgICAgICAgICBtYXRjaCA9IGNsYXNzZXNbbmFtZXNbaV1dO1xuICAgICAgICAgICAgaWYgKG1hdGNoKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoID0gbWF0Y2ggfHwgdGFnc1txdWVyeS50YWdOYW1lXTtcbiAgICB9XG4gICAgaWYgKG1hdGNoID09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoc2NvcGUgJiBTY29wZS5MRVZFTCAmIG1hdGNoLnNjb3BlICYmIHNjb3BlICYgU2NvcGUuVFlQRSAmIG1hdGNoLnNjb3BlKVxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLnF1ZXJ5ID0gcXVlcnk7XG5mdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICB2YXIgRGVmaW5pdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBEZWZpbml0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAoRGVmaW5pdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm4gRGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnaXN0ZXIoZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgRGVmaW5pdGlvbiA9IERlZmluaXRpb25zWzBdO1xuICAgIGlmICh0eXBlb2YgRGVmaW5pdGlvbi5ibG90TmFtZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIERlZmluaXRpb24uYXR0ck5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJjaG1lbnRFcnJvcignSW52YWxpZCBkZWZpbml0aW9uJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKERlZmluaXRpb24uYmxvdE5hbWUgPT09ICdhYnN0cmFjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcmNobWVudEVycm9yKCdDYW5ub3QgcmVnaXN0ZXIgYWJzdHJhY3QgY2xhc3MnKTtcbiAgICB9XG4gICAgdHlwZXNbRGVmaW5pdGlvbi5ibG90TmFtZSB8fCBEZWZpbml0aW9uLmF0dHJOYW1lXSA9IERlZmluaXRpb247XG4gICAgaWYgKHR5cGVvZiBEZWZpbml0aW9uLmtleU5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbRGVmaW5pdGlvbi5rZXlOYW1lXSA9IERlZmluaXRpb247XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoRGVmaW5pdGlvbi5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2xhc3Nlc1tEZWZpbml0aW9uLmNsYXNzTmFtZV0gPSBEZWZpbml0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChEZWZpbml0aW9uLnRhZ05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoRGVmaW5pdGlvbi50YWdOYW1lKSkge1xuICAgICAgICAgICAgICAgIERlZmluaXRpb24udGFnTmFtZSA9IERlZmluaXRpb24udGFnTmFtZS5tYXAoZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIERlZmluaXRpb24udGFnTmFtZSA9IERlZmluaXRpb24udGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRhZ05hbWVzID0gQXJyYXkuaXNBcnJheShEZWZpbml0aW9uLnRhZ05hbWUpID8gRGVmaW5pdGlvbi50YWdOYW1lIDogW0RlZmluaXRpb24udGFnTmFtZV07XG4gICAgICAgICAgICB0YWdOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnc1t0YWddID09IG51bGwgfHwgRGVmaW5pdGlvbi5jbGFzc05hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0YWdzW3RhZ10gPSBEZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBEZWZpbml0aW9uO1xufVxuZXhwb3J0cy5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF0dHJpYnV0b3IoYXR0ck5hbWUsIGtleU5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy5hdHRyTmFtZSA9IGF0dHJOYW1lO1xuICAgICAgICB0aGlzLmtleU5hbWUgPSBrZXlOYW1lO1xuICAgICAgICB2YXIgYXR0cmlidXRlQml0ID0gUmVnaXN0cnkuU2NvcGUuVFlQRSAmIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2NvcGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSWdub3JlIHR5cGUgYml0cywgZm9yY2UgYXR0cmlidXRlIGJpdFxuICAgICAgICAgICAgdGhpcy5zY29wZSA9IChvcHRpb25zLnNjb3BlICYgUmVnaXN0cnkuU2NvcGUuTEVWRUwpIHwgYXR0cmlidXRlQml0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy53aGl0ZWxpc3QgIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMud2hpdGVsaXN0ID0gb3B0aW9ucy53aGl0ZWxpc3Q7XG4gICAgfVxuICAgIEF0dHJpYnV0b3Iua2V5cyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBbXS5tYXAuY2FsbChub2RlLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUodGhpcy5rZXlOYW1lLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUuY2FuQWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IFJlZ2lzdHJ5LnF1ZXJ5KG5vZGUsIFJlZ2lzdHJ5LlNjb3BlLkJMT1QgJiAodGhpcy5zY29wZSB8IFJlZ2lzdHJ5LlNjb3BlLlRZUEUpKTtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLndoaXRlbGlzdCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aGl0ZWxpc3QuaW5kZXhPZih2YWx1ZS5yZXBsYWNlKC9bXCInXS9nLCAnJykpID4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aGl0ZWxpc3QuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUodGhpcy5rZXlOYW1lKTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3IucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy5rZXlOYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIHJldHVybiBBdHRyaWJ1dG9yO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEF0dHJpYnV0b3I7XG5cblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBsaW5rZWRfbGlzdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgc2hhZG93XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBDb250YWluZXJCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb250YWluZXJCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbnRhaW5lckJsb3QoZG9tTm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkb21Ob2RlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWlsZCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKG90aGVyKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5hdHRhY2guY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuYXR0YWNoKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgbGlua2VkX2xpc3RfMS5kZWZhdWx0KCk7XG4gICAgICAgIC8vIE5lZWQgdG8gYmUgcmV2ZXJzZWQgZm9yIGlmIERPTSBub2RlcyBhbHJlYWR5IGluIG9yZGVyXG4gICAgICAgIFtdLnNsaWNlXG4gICAgICAgICAgICAuY2FsbCh0aGlzLmRvbU5vZGUuY2hpbGROb2RlcylcbiAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IG1ha2VCbG90KG5vZGUpO1xuICAgICAgICAgICAgICAgIF90aGlzLmluc2VydEJlZm9yZShjaGlsZCwgX3RoaXMuY2hpbGRyZW4uaGVhZCB8fCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBSZWdpc3RyeS5QYXJjaG1lbnRFcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoQXQoaW5kZXgsIGxlbmd0aCwgZnVuY3Rpb24gKGNoaWxkLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICAgICAgY2hpbGQuZGVsZXRlQXQob2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlc2NlbmRhbnQgPSBmdW5jdGlvbiAoY3JpdGVyaWEsIGluZGV4KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCksIGNoaWxkID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICBpZiAoKGNyaXRlcmlhLmJsb3ROYW1lID09IG51bGwgJiYgY3JpdGVyaWEoY2hpbGQpKSB8fFxuICAgICAgICAgICAgKGNyaXRlcmlhLmJsb3ROYW1lICE9IG51bGwgJiYgY2hpbGQgaW5zdGFuY2VvZiBjcml0ZXJpYSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbY2hpbGQsIG9mZnNldF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hpbGQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQuZGVzY2VuZGFudChjcml0ZXJpYSwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbbnVsbCwgLTFdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5kZXNjZW5kYW50cyA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IDA7IH1cbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7IGxlbmd0aCA9IE51bWJlci5NQVhfVkFMVUU7IH1cbiAgICAgICAgdmFyIGRlc2NlbmRhbnRzID0gW107XG4gICAgICAgIHZhciBsZW5ndGhMZWZ0ID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICgoY3JpdGVyaWEuYmxvdE5hbWUgPT0gbnVsbCAmJiBjcml0ZXJpYShjaGlsZCkpIHx8XG4gICAgICAgICAgICAgICAgKGNyaXRlcmlhLmJsb3ROYW1lICE9IG51bGwgJiYgY2hpbGQgaW5zdGFuY2VvZiBjcml0ZXJpYSkpIHtcbiAgICAgICAgICAgICAgICBkZXNjZW5kYW50cy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgICAgICBkZXNjZW5kYW50cyA9IGRlc2NlbmRhbnRzLmNvbmNhdChjaGlsZC5kZXNjZW5kYW50cyhjcml0ZXJpYSwgaW5kZXgsIGxlbmd0aExlZnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlbmd0aExlZnQgLT0gbGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlc2NlbmRhbnRzO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBjaGlsZC5kZXRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGV0YWNoLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGlsZC5mb3JtYXRBdChvZmZzZXQsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCksIGNoaWxkID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLmluc2VydEF0KG9mZnNldCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYmxvdCA9IGRlZiA9PSBudWxsID8gUmVnaXN0cnkuY3JlYXRlKCd0ZXh0JywgdmFsdWUpIDogUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChibG90KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24gKGNoaWxkQmxvdCwgcmVmQmxvdCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0aWNzLmFsbG93ZWRDaGlsZHJlbiAhPSBudWxsICYmXG4gICAgICAgICAgICAhdGhpcy5zdGF0aWNzLmFsbG93ZWRDaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZEJsb3QgaW5zdGFuY2VvZiBjaGlsZDtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVnaXN0cnkuUGFyY2htZW50RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IFwiICsgY2hpbGRCbG90LnN0YXRpY3MuYmxvdE5hbWUgKyBcIiBpbnRvIFwiICsgdGhpcy5zdGF0aWNzLmJsb3ROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZEJsb3QuaW5zZXJ0SW50byh0aGlzLCByZWZCbG90KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBjaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1lbW8gKyBjaGlsZC5sZW5ndGgoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5tb3ZlQ2hpbGRyZW4gPSBmdW5jdGlvbiAodGFyZ2V0UGFyZW50LCByZWZOb2RlKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHRhcmdldFBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHJlZk5vZGUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICAgICAgY2hpbGQub3B0aW1pemUoY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGluY2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCwgaW5jbHVzaXZlKSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IFtbdGhpcywgaW5kZXhdXTtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQ29udGFpbmVyQmxvdCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uLmNvbmNhdChjaGlsZC5wYXRoKG9mZnNldCwgaW5jbHVzaXZlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hpbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcG9zaXRpb24ucHVzaChbY2hpbGQsIG9mZnNldF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlKGNoaWxkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICB0YXJnZXQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUucmVwbGFjZS5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHsgZm9yY2UgPSBmYWxzZTsgfVxuICAgICAgICBpZiAoIWZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShhZnRlciwgdGhpcy5uZXh0KTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoQXQoaW5kZXgsIHRoaXMubGVuZ3RoKCksIGZ1bmN0aW9uIChjaGlsZCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGQuc3BsaXQob2Zmc2V0LCBmb3JjZSk7XG4gICAgICAgICAgICBhZnRlci5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS51bndyYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubW92ZUNoaWxkcmVuKHRoaXMucGFyZW50LCB0aGlzLm5leHQpO1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYWRkZWROb2RlcyA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZE5vZGVzID0gW107XG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgaWYgKG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZSAmJiBtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgICAgICAgIGFkZGVkTm9kZXMucHVzaC5hcHBseShhZGRlZE5vZGVzLCBtdXRhdGlvbi5hZGRlZE5vZGVzKTtcbiAgICAgICAgICAgICAgICByZW1vdmVkTm9kZXMucHVzaC5hcHBseShyZW1vdmVkTm9kZXMsIG11dGF0aW9uLnJlbW92ZWROb2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgbm9kZSBoYXMgYWN0dWFsbHkgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICAvLyBPbmUgZXhjZXB0aW9uIGlzIENocm9tZSBkb2VzIG5vdCBpbW1lZGlhdGVseSByZW1vdmUgSUZSQU1Fc1xuICAgICAgICAgICAgLy8gZnJvbSBET00gYnV0IE11dGF0aW9uUmVjb3JkIGlzIGNvcnJlY3QgaW4gaXRzIHJlcG9ydGVkIHJlbW92YWxcbiAgICAgICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBub2RlLnRhZ05hbWUgIT09ICdJRlJBTUUnICYmXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlLnBhcmVudE5vZGUgPT0gbnVsbCB8fCBibG90LmRvbU5vZGUucGFyZW50Tm9kZSA9PT0gX3RoaXMuZG9tTm9kZSkge1xuICAgICAgICAgICAgICAgIGJsb3QuZGV0YWNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhZGRlZE5vZGVzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlID09IF90aGlzLmRvbU5vZGU7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgaWYgKGEgPT09IGIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBpZiAoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIHJlZkJsb3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlZkJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJsb3QgPSBtYWtlQmxvdChub2RlKTtcbiAgICAgICAgICAgIGlmIChibG90Lm5leHQgIT0gcmVmQmxvdCB8fCBibG90Lm5leHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChibG90LnBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb3QucGFyZW50LnJlbW92ZUNoaWxkKF90aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZkJsb3QgfHwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGFpbmVyQmxvdDtcbn0oc2hhZG93XzEuZGVmYXVsdCkpO1xuZnVuY3Rpb24gbWFrZUJsb3Qobm9kZSkge1xuICAgIHZhciBibG90ID0gUmVnaXN0cnkuZmluZChub2RlKTtcbiAgICBpZiAoYmxvdCA9PSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBibG90ID0gUmVnaXN0cnkuY3JlYXRlKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBibG90ID0gUmVnaXN0cnkuY3JlYXRlKFJlZ2lzdHJ5LlNjb3BlLklOTElORSk7XG4gICAgICAgICAgICBbXS5zbGljZS5jYWxsKG5vZGUuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoYmxvdC5kb21Ob2RlLCBub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb3QuYXR0YWNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJsb3Q7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDb250YWluZXJCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBzdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEZvcm1hdEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdEJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWF0QmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvbU5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmF0dHJpYnV0ZXMgPSBuZXcgc3RvcmVfMS5kZWZhdWx0KF90aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZvcm1hdEJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWdOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9tTm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEZvcm1hdEJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gUmVnaXN0cnkucXVlcnkobmFtZSk7XG4gICAgICAgIGlmIChmb3JtYXQgaW5zdGFuY2VvZiBhdHRyaWJ1dG9yXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmF0dHJpYnV0ZShmb3JtYXQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCAhPSBudWxsICYmIChuYW1lICE9PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgfHwgdGhpcy5mb3JtYXRzKClbbmFtZV0gIT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVdpdGgobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS5mb3JtYXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm9ybWF0cyA9IHRoaXMuYXR0cmlidXRlcy52YWx1ZXMoKTtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIGlmIChmb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9ybWF0c1t0aGlzLnN0YXRpY3MuYmxvdE5hbWVdID0gZm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRzO1xuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUucmVwbGFjZVdpdGggPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gX3N1cGVyLnByb3RvdHlwZS5yZXBsYWNlV2l0aC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmNvcHkocmVwbGFjZW1lbnQpO1xuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgbXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZSAmJiBtdXRhdGlvbi50eXBlID09PSAnYXR0cmlidXRlcyc7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYnVpbGQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IF9zdXBlci5wcm90b3R5cGUud3JhcC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBGb3JtYXRCbG90ICYmIHdyYXBwZXIuc3RhdGljcy5zY29wZSA9PT0gdGhpcy5zdGF0aWNzLnNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMubW92ZSh3cmFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9O1xuICAgIHJldHVybiBGb3JtYXRCbG90O1xufShjb250YWluZXJfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBGb3JtYXRCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc2hhZG93XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBMZWFmQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTGVhZkJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGVhZkJsb3QoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTGVhZkJsb3QudmFsdWUgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uIChub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZSA9PT0gbm9kZSB8fFxuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihvZmZzZXQsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS5wb3NpdGlvbiA9IGZ1bmN0aW9uIChpbmRleCwgaW5jbHVzaXZlKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBbXS5pbmRleE9mLmNhbGwodGhpcy5wYXJlbnQuZG9tTm9kZS5jaGlsZE5vZGVzLCB0aGlzLmRvbU5vZGUpO1xuICAgICAgICBpZiAoaW5kZXggPiAwKVxuICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIHJldHVybiBbdGhpcy5wYXJlbnQuZG9tTm9kZSwgb2Zmc2V0XTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9hID0ge30sIF9hW3RoaXMuc3RhdGljcy5ibG90TmFtZV0gPSB0aGlzLnN0YXRpY3MudmFsdWUodGhpcy5kb21Ob2RlKSB8fCB0cnVlLCBfYTtcbiAgICAgICAgdmFyIF9hO1xuICAgIH07XG4gICAgTGVhZkJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5JTkxJTkVfQkxPVDtcbiAgICByZXR1cm4gTGVhZkJsb3Q7XG59KHNoYWRvd18xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExlYWZCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBTaGFkb3dCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNoYWRvd0Jsb3QoZG9tTm9kZSkge1xuICAgICAgICB0aGlzLmRvbU5vZGUgPSBkb21Ob2RlO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gPSB7IGJsb3Q6IHRoaXMgfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNoYWRvd0Jsb3QucHJvdG90eXBlLCBcInN0YXRpY3NcIiwge1xuICAgICAgICAvLyBIYWNrIGZvciBhY2Nlc3NpbmcgaW5oZXJpdGVkIHN0YXRpYyBtZXRob2RzXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFNoYWRvd0Jsb3QuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRhZ05hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZ2lzdHJ5LlBhcmNobWVudEVycm9yKCdCbG90IGRlZmluaXRpb24gbWlzc2luZyB0YWdOYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGU7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCh2YWx1ZSkudG9TdHJpbmcoKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWVbdmFsdWUgLSAxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRhZ05hbWUuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gdGhpcy5wYXJlbnQuc2Nyb2xsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRvbU5vZGUgPSB0aGlzLmRvbU5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIFJlZ2lzdHJ5LmNyZWF0ZShkb21Ob2RlKTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBkZWxldGUgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGJsb3QgPSB0aGlzLmlzb2xhdGUoaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIGJsb3QucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT1QpICE9IG51bGwgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIGJsb3Qud3JhcChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFKSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5zdGF0aWNzLnNjb3BlKTtcbiAgICAgICAgICAgIGJsb3Qud3JhcChwYXJlbnRfMSk7XG4gICAgICAgICAgICBwYXJlbnRfMS5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICB2YXIgYmxvdCA9IGRlZiA9PSBudWxsID8gUmVnaXN0cnkuY3JlYXRlKCd0ZXh0JywgdmFsdWUpIDogUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICB2YXIgcmVmID0gdGhpcy5zcGxpdChpbmRleCk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShibG90LCByZWYpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuaW5zZXJ0SW50byA9IGZ1bmN0aW9uIChwYXJlbnRCbG90LCByZWZCbG90KSB7XG4gICAgICAgIGlmIChyZWZCbG90ID09PSB2b2lkIDApIHsgcmVmQmxvdCA9IG51bGw7IH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmRG9tTm9kZSA9IG51bGw7XG4gICAgICAgIHBhcmVudEJsb3QuY2hpbGRyZW4uaW5zZXJ0QmVmb3JlKHRoaXMsIHJlZkJsb3QpO1xuICAgICAgICBpZiAocmVmQmxvdCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZWZEb21Ob2RlID0gcmVmQmxvdC5kb21Ob2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGUucGFyZW50Tm9kZSAhPSBwYXJlbnRCbG90LmRvbU5vZGUgfHxcbiAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5uZXh0U2libGluZyAhPSByZWZEb21Ob2RlKSB7XG4gICAgICAgICAgICBwYXJlbnRCbG90LmRvbU5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tTm9kZSwgcmVmRG9tTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRCbG90O1xuICAgICAgICB0aGlzLmF0dGFjaCgpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuaXNvbGF0ZSA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgdGFyZ2V0LnNwbGl0KGxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgaWYgKHJvb3QgPT09IHZvaWQgMCkgeyByb290ID0gdGhpcy5wYXJlbnQ7IH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50ID09IG51bGwgfHwgdGhpcyA9PSByb290KVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbi5vZmZzZXQodGhpcykgKyB0aGlzLnBhcmVudC5vZmZzZXQocm9vdCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIC8vIFRPRE8gY2xlYW4gdXAgb25jZSB3ZSB1c2UgV2Vha01hcFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucztcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlLnBhcmVudE5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldC5wYXJlbnQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGFyZ2V0LnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgdGFyZ2V0Lm5leHQpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5yZXBsYWNlV2l0aCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBSZWdpc3RyeS5jcmVhdGUobmFtZSwgdmFsdWUpIDogbmFtZTtcbiAgICAgICAgcmVwbGFjZW1lbnQucmVwbGFjZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50O1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoaW5kZXgsIGZvcmNlKSB7XG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IHRoaXMgOiB0aGlzLm5leHQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIC8vIE5vdGhpbmcgdG8gZG8gYnkgZGVmYXVsdFxuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IFJlZ2lzdHJ5LmNyZWF0ZShuYW1lLCB2YWx1ZSkgOiBuYW1lO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHRoaXMubmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LmJsb3ROYW1lID0gJ2Fic3RyYWN0JztcbiAgICByZXR1cm4gU2hhZG93QmxvdDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTaGFkb3dCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgY2xhc3NfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG52YXIgc3R5bGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEF0dHJpYnV0b3JTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdHRyaWJ1dG9yU3RvcmUoZG9tTm9kZSkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5kb21Ob2RlID0gZG9tTm9kZTtcbiAgICAgICAgdGhpcy5idWlsZCgpO1xuICAgIH1cbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLmF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgICAgIC8vIHZlcmJcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLmFkZCh0aGlzLmRvbU5vZGUsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmFsdWUodGhpcy5kb21Ob2RlKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGUuYXR0ck5hbWVdID0gYXR0cmlidXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGUuYXR0ck5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5yZW1vdmUodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlLmF0dHJOYW1lXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gYXR0cmlidXRvcl8xLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzXzEuZGVmYXVsdC5rZXlzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIHZhciBzdHlsZXMgPSBzdHlsZV8xLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAuY29uY2F0KGNsYXNzZXMpXG4gICAgICAgICAgICAuY29uY2F0KHN0eWxlcylcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgYXR0ciA9IFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURSk7XG4gICAgICAgICAgICBpZiAoYXR0ciBpbnN0YW5jZW9mIGF0dHJpYnV0b3JfMS5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYXR0cmlidXRlc1thdHRyLmF0dHJOYW1lXSA9IGF0dHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMuYXR0cmlidXRlc1trZXldLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICAgICAgdGFyZ2V0LmZvcm1hdChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29weSh0YXJnZXQpO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgX3RoaXMuYXR0cmlidXRlc1trZXldLnJlbW92ZShfdGhpcy5kb21Ob2RlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoYXR0cmlidXRlcywgbmFtZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlc1tuYW1lXSA9IF90aGlzLmF0dHJpYnV0ZXNbbmFtZV0udmFsdWUoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICAgICAgfSwge30pO1xuICAgIH07XG4gICAgcmV0dXJuIEF0dHJpYnV0b3JTdG9yZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBBdHRyaWJ1dG9yU3RvcmU7XG5cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuZnVuY3Rpb24gbWF0Y2gobm9kZSwgcHJlZml4KSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuICAgIHJldHVybiBjbGFzc05hbWUuc3BsaXQoL1xccysvKS5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUuaW5kZXhPZihwcmVmaXggKyBcIi1cIikgPT09IDA7XG4gICAgfSk7XG59XG52YXIgQ2xhc3NBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDbGFzc0F0dHJpYnV0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2xhc3NBdHRyaWJ1dG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIENsYXNzQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIChub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykuc3BsaXQoL1xccysvKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lXG4gICAgICAgICAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAgICAgLmpvaW4oJy0nKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5yZW1vdmUobm9kZSk7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLmtleU5hbWUgKyBcIi1cIiArIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gbWF0Y2gobm9kZSwgdGhpcy5rZXlOYW1lKTtcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2xhc3NBdHRyaWJ1dG9yLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBtYXRjaChub2RlLCB0aGlzLmtleU5hbWUpWzBdIHx8ICcnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQuc2xpY2UodGhpcy5rZXlOYW1lLmxlbmd0aCArIDEpOyAvLyArMSBmb3IgaHlwaGVuXG4gICAgICAgIHJldHVybiB0aGlzLmNhbkFkZChub2RlLCB2YWx1ZSkgPyB2YWx1ZSA6ICcnO1xuICAgIH07XG4gICAgcmV0dXJuIENsYXNzQXR0cmlidXRvcjtcbn0oYXR0cmlidXRvcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENsYXNzQXR0cmlidXRvcjtcblxuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5mdW5jdGlvbiBjYW1lbGl6ZShuYW1lKSB7XG4gICAgdmFyIHBhcnRzID0gbmFtZS5zcGxpdCgnLScpO1xuICAgIHZhciByZXN0ID0gcGFydHNcbiAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRbMF0udG9VcHBlckNhc2UoKSArIHBhcnQuc2xpY2UoMSk7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oJycpO1xuICAgIHJldHVybiBwYXJ0c1swXSArIHJlc3Q7XG59XG52YXIgU3R5bGVBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdHlsZUF0dHJpYnV0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3R5bGVBdHRyaWJ1dG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFN0eWxlQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIChub2RlLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSB8fCAnJykuc3BsaXQoJzsnKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gdmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIHJldHVybiBhcnJbMF0udHJpbSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN0eWxlQXR0cmlidXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIG5vZGUuc3R5bGVbY2FtZWxpemUodGhpcy5rZXlOYW1lKV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBTdHlsZUF0dHJpYnV0b3IucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbm9kZS5zdHlsZVtjYW1lbGl6ZSh0aGlzLmtleU5hbWUpXSA9ICcnO1xuICAgICAgICBpZiAoIW5vZGUuZ2V0QXR0cmlidXRlKCdzdHlsZScpKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5zdHlsZVtjYW1lbGl6ZSh0aGlzLmtleU5hbWUpXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSA/IHZhbHVlIDogJyc7XG4gICAgfTtcbiAgICByZXR1cm4gU3R5bGVBdHRyaWJ1dG9yO1xufShhdHRyaWJ1dG9yXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3R5bGVBdHRyaWJ1dG9yO1xuXG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIGxlYWZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgc2Nyb2xsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbnZhciBpbmxpbmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xudmFyIGJsb2NrXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcbnZhciBlbWJlZF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG52YXIgdGV4dF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBjbGFzc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbnZhciBzdHlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbnZhciBzdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgUGFyY2htZW50ID0ge1xuICAgIFNjb3BlOiBSZWdpc3RyeS5TY29wZSxcbiAgICBjcmVhdGU6IFJlZ2lzdHJ5LmNyZWF0ZSxcbiAgICBmaW5kOiBSZWdpc3RyeS5maW5kLFxuICAgIHF1ZXJ5OiBSZWdpc3RyeS5xdWVyeSxcbiAgICByZWdpc3RlcjogUmVnaXN0cnkucmVnaXN0ZXIsXG4gICAgQ29udGFpbmVyOiBjb250YWluZXJfMS5kZWZhdWx0LFxuICAgIEZvcm1hdDogZm9ybWF0XzEuZGVmYXVsdCxcbiAgICBMZWFmOiBsZWFmXzEuZGVmYXVsdCxcbiAgICBFbWJlZDogZW1iZWRfMS5kZWZhdWx0LFxuICAgIFNjcm9sbDogc2Nyb2xsXzEuZGVmYXVsdCxcbiAgICBCbG9jazogYmxvY2tfMS5kZWZhdWx0LFxuICAgIElubGluZTogaW5saW5lXzEuZGVmYXVsdCxcbiAgICBUZXh0OiB0ZXh0XzEuZGVmYXVsdCxcbiAgICBBdHRyaWJ1dG9yOiB7XG4gICAgICAgIEF0dHJpYnV0ZTogYXR0cmlidXRvcl8xLmRlZmF1bHQsXG4gICAgICAgIENsYXNzOiBjbGFzc18xLmRlZmF1bHQsXG4gICAgICAgIFN0eWxlOiBzdHlsZV8xLmRlZmF1bHQsXG4gICAgICAgIFN0b3JlOiBzdG9yZV8xLmRlZmF1bHQsXG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBQYXJjaG1lbnQ7XG5cblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExpbmtlZExpc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGlua2VkTGlzdCgpIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbm9kZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluc2VydEJlZm9yZShub2Rlc1swXSwgbnVsbCk7XG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZC5hcHBseSh0aGlzLCBub2Rlcy5zbGljZSgxKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICBpZiAoY3VyID09PSBub2RlKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChub2RlLCByZWZOb2RlKSB7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbm9kZS5uZXh0ID0gcmVmTm9kZTtcbiAgICAgICAgaWYgKHJlZk5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gcmVmTm9kZS5wcmV2O1xuICAgICAgICAgICAgaWYgKHJlZk5vZGUucHJldiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmTm9kZS5wcmV2Lm5leHQgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVmTm9kZS5wcmV2ID0gbm9kZTtcbiAgICAgICAgICAgIGlmIChyZWZOb2RlID09PSB0aGlzLmhlYWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWQgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudGFpbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRhaWwubmV4dCA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLnByZXYgPSB0aGlzLnRhaWw7XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMCwgY3VyID0gdGhpcy5oZWFkO1xuICAgICAgICB3aGlsZSAoY3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdXIgPT09IHRhcmdldClcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCArPSBjdXIubGVuZ3RoKCk7XG4gICAgICAgICAgICBjdXIgPSBjdXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbnMobm9kZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChub2RlLnByZXYgIT0gbnVsbClcbiAgICAgICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICBpZiAobm9kZS5uZXh0ICE9IG51bGwpXG4gICAgICAgICAgICBub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZClcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IG5vZGUubmV4dDtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMudGFpbClcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5vZGUucHJldjtcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24gKGN1ck5vZGUpIHtcbiAgICAgICAgaWYgKGN1ck5vZGUgPT09IHZvaWQgMCkgeyBjdXJOb2RlID0gdGhpcy5oZWFkOyB9XG4gICAgICAgIC8vIFRPRE8gdXNlIHlpZWxkIHdoZW4gd2UgY2FuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gY3VyTm9kZTtcbiAgICAgICAgICAgIGlmIChjdXJOb2RlICE9IG51bGwpXG4gICAgICAgICAgICAgICAgY3VyTm9kZSA9IGN1ck5vZGUubmV4dDtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGluY2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBjdXIsIG5leHQgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aF8xID0gY3VyLmxlbmd0aCgpO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoXzEgfHxcbiAgICAgICAgICAgICAgICAoaW5jbHVzaXZlICYmIGluZGV4ID09PSBsZW5ndGhfMSAmJiAoY3VyLm5leHQgPT0gbnVsbCB8fCBjdXIubmV4dC5sZW5ndGgoKSAhPT0gMCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjdXIsIGluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZGV4IC09IGxlbmd0aF8xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbnVsbCwgMF07XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBjdXIsIG5leHQgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgY2FsbGJhY2soY3VyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuZm9yRWFjaEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChsZW5ndGggPD0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5maW5kKGluZGV4KSwgc3RhcnROb2RlID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICB2YXIgY3VyLCBjdXJJbmRleCA9IGluZGV4IC0gb2Zmc2V0LCBuZXh0ID0gdGhpcy5pdGVyYXRvcihzdGFydE5vZGUpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkgJiYgY3VySW5kZXggPCBpbmRleCArIGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGN1ckxlbmd0aCA9IGN1ci5sZW5ndGgoKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IGN1ckluZGV4KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY3VyLCBpbmRleCAtIGN1ckluZGV4LCBNYXRoLm1pbihsZW5ndGgsIGN1ckluZGV4ICsgY3VyTGVuZ3RoIC0gaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGN1ciwgMCwgTWF0aC5taW4oY3VyTGVuZ3RoLCBpbmRleCArIGxlbmd0aCAtIGN1ckluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJJbmRleCArPSBjdXJMZW5ndGg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGN1cikge1xuICAgICAgICAgICAgbWVtby5wdXNoKGNhbGxiYWNrKGN1cikpO1xuICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sIFtdKTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgbWVtbykge1xuICAgICAgICB2YXIgY3VyLCBuZXh0ID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkpIHtcbiAgICAgICAgICAgIG1lbW8gPSBjYWxsYmFjayhtZW1vLCBjdXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gICAgcmV0dXJuIExpbmtlZExpc3Q7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGlua2VkTGlzdDtcblxuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIE9CU0VSVkVSX0NPTkZJRyA9IHtcbiAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiB0cnVlLFxuICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICBzdWJ0cmVlOiB0cnVlLFxufTtcbnZhciBNQVhfT1BUSU1JWkVfSVRFUkFUSU9OUyA9IDEwMDtcbnZhciBTY3JvbGxCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTY3JvbGxCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjcm9sbEJsb3Qobm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBub2RlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY3JvbGwgPSBfdGhpcztcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgICAgICBfdGhpcy51cGRhdGUobXV0YXRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLm9ic2VydmVyLm9ic2VydmUoX3RoaXMuZG9tTm9kZSwgT0JTRVJWRVJfQ09ORklHKTtcbiAgICAgICAgX3RoaXMuYXR0YWNoKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRldGFjaC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGNoaWxkLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlbGV0ZUF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0QXQuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluc2VydEF0LmNhbGwodGhpcywgaW5kZXgsIHZhbHVlLCBkZWYpO1xuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChtdXRhdGlvbnMgPT09IHZvaWQgMCkgeyBtdXRhdGlvbnMgPSBbXTsgfVxuICAgICAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSB7fTsgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIC8vIFdlIG11c3QgbW9kaWZ5IG11dGF0aW9ucyBkaXJlY3RseSwgY2Fubm90IG1ha2UgY29weSBhbmQgdGhlbiBtb2RpZnlcbiAgICAgICAgdmFyIHJlY29yZHMgPSBbXS5zbGljZS5jYWxsKHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7XG4gICAgICAgIC8vIEFycmF5LnB1c2ggY3VycmVudGx5IHNlZW1zIHRvIGJlIGltcGxlbWVudGVkIGJ5IGEgbm9uLXRhaWwgcmVjdXJzaXZlIGZ1bmN0aW9uXG4gICAgICAgIC8vIHNvIHdlIGNhbm5vdCBqdXN0IG11dGF0aW9ucy5wdXNoLmFwcGx5KG11dGF0aW9ucywgdGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgd2hpbGUgKHJlY29yZHMubGVuZ3RoID4gMClcbiAgICAgICAgICAgIG11dGF0aW9ucy5wdXNoKHJlY29yZHMucG9wKCkpO1xuICAgICAgICAvLyBUT0RPIHVzZSBXZWFrTWFwXG4gICAgICAgIHZhciBtYXJrID0gZnVuY3Rpb24gKGJsb3QsIG1hcmtQYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChtYXJrUGFyZW50ID09PSB2b2lkIDApIHsgbWFya1BhcmVudCA9IHRydWU7IH1cbiAgICAgICAgICAgIGlmIChibG90ID09IG51bGwgfHwgYmxvdCA9PT0gX3RoaXMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGJsb3QuZG9tTm9kZS5wYXJlbnROb2RlID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXJrUGFyZW50KVxuICAgICAgICAgICAgICAgIG1hcmsoYmxvdC5wYXJlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb3B0aW1pemUgPSBmdW5jdGlvbiAoYmxvdCkge1xuICAgICAgICAgICAgLy8gUG9zdC1vcmRlciB0cmF2ZXJzYWxcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBjb250YWluZXJfMS5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgYmxvdC5jaGlsZHJlbi5mb3JFYWNoKG9wdGltaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb3Qub3B0aW1pemUoY29udGV4dCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZW1haW5pbmcgPSBtdXRhdGlvbnM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyByZW1haW5pbmcubGVuZ3RoID4gMDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBNQVhfT1BUSU1JWkVfSVRFUkFUSU9OUykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1BhcmNobWVudF0gTWF4aW11bSBvcHRpbWl6ZSBpdGVyYXRpb25zIHJlYWNoZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbWFpbmluZy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBibG90ID0gUmVnaXN0cnkuZmluZChtdXRhdGlvbi50YXJnZXQsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChibG90ID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlID09PSBtdXRhdGlvbi50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrKFJlZ2lzdHJ5LmZpbmQobXV0YXRpb24ucHJldmlvdXNTaWJsaW5nLCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKG11dGF0aW9uLmFkZGVkTm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gUmVnaXN0cnkuZmluZChub2RlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyayhjaGlsZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIGNvbnRhaW5lcl8xLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoZ3JhbmRDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyayhncmFuZENoaWxkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyayhibG90LnByZXYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hcmsoYmxvdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChvcHRpbWl6ZSk7XG4gICAgICAgICAgICByZW1haW5pbmcgPSBbXS5zbGljZS5jYWxsKHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7XG4gICAgICAgICAgICByZWNvcmRzID0gcmVtYWluaW5nLnNsaWNlKCk7XG4gICAgICAgICAgICB3aGlsZSAocmVjb3Jkcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5wdXNoKHJlY29yZHMucG9wKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IHt9OyB9XG4gICAgICAgIG11dGF0aW9ucyA9IG11dGF0aW9ucyB8fCB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCk7XG4gICAgICAgIC8vIFRPRE8gdXNlIFdlYWtNYXBcbiAgICAgICAgbXV0YXRpb25zXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG11dGF0aW9uLnRhcmdldCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPSBbbXV0YXRpb25dO1xuICAgICAgICAgICAgICAgIHJldHVybiBibG90O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zLnB1c2gobXV0YXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGJsb3QpIHtcbiAgICAgICAgICAgIGlmIChibG90ID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICBibG90ID09PSBfdGhpcyB8fFxuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBibG90LnVwZGF0ZShibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyB8fCBbXSwgY29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGltaXplKG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LmJsb3ROYW1lID0gJ3Njcm9sbCc7XG4gICAgU2Nyb2xsQmxvdC5kZWZhdWx0Q2hpbGQgPSAnYmxvY2snO1xuICAgIFNjcm9sbEJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5CTE9DS19CTE9UO1xuICAgIFNjcm9sbEJsb3QudGFnTmFtZSA9ICdESVYnO1xuICAgIHJldHVybiBTY3JvbGxCbG90O1xufShjb250YWluZXJfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTY3JvbGxCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGZvcm1hdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vLyBTaGFsbG93IG9iamVjdCBjb21wYXJpc29uXG5mdW5jdGlvbiBpc0VxdWFsKG9iajEsIG9iajIpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMob2JqMSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmoyKS5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmoxKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKG9iajFbcHJvcF0gIT09IG9iajJbcHJvcF0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxudmFyIElubGluZUJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElubGluZUJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5saW5lQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBJbmxpbmVCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSBJbmxpbmVCbG90LnRhZ05hbWUpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3N1cGVyLmZvcm1hdHMuY2FsbCh0aGlzLCBkb21Ob2RlKTtcbiAgICB9O1xuICAgIElubGluZUJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgZm9ybWF0XzEuZGVmYXVsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC53cmFwKElubGluZUJsb3QuYmxvdE5hbWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzLmNvcHkoY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVud3JhcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXQuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElubGluZUJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdHMoKVtuYW1lXSAhPSBudWxsIHx8IFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURSkpIHtcbiAgICAgICAgICAgIHZhciBibG90ID0gdGhpcy5pc29sYXRlKGluZGV4LCBsZW5ndGgpO1xuICAgICAgICAgICAgYmxvdC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5mb3JtYXRzKCk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVud3JhcCgpOyAvLyB1bmZvcm1hdHRlZCBzcGFuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHQ7XG4gICAgICAgIGlmIChuZXh0IGluc3RhbmNlb2YgSW5saW5lQmxvdCAmJiBuZXh0LnByZXYgPT09IHRoaXMgJiYgaXNFcXVhbChmb3JtYXRzLCBuZXh0LmZvcm1hdHMoKSkpIHtcbiAgICAgICAgICAgIG5leHQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICAgICAgbmV4dC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5ibG90TmFtZSA9ICdpbmxpbmUnO1xuICAgIElubGluZUJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5JTkxJTkVfQkxPVDtcbiAgICBJbmxpbmVCbG90LnRhZ05hbWUgPSAnU1BBTic7XG4gICAgcmV0dXJuIElubGluZUJsb3Q7XG59KGZvcm1hdF8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IElubGluZUJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBCbG9ja0Jsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJsb2NrQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCbG9ja0Jsb3QoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQmxvY2tCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICB2YXIgdGFnTmFtZSA9IFJlZ2lzdHJ5LnF1ZXJ5KEJsb2NrQmxvdC5ibG90TmFtZSkudGFnTmFtZTtcbiAgICAgICAgaWYgKGRvbU5vZGUudGFnTmFtZSA9PT0gdGFnTmFtZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfc3VwZXIuZm9ybWF0cy5jYWxsKHRoaXMsIGRvbU5vZGUpO1xuICAgIH07XG4gICAgQmxvY2tCbG90LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT0NLKSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlV2l0aChCbG9ja0Jsb3QuYmxvdE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXQuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT0NLKSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIGlmIChkZWYgPT0gbnVsbCB8fCBSZWdpc3RyeS5xdWVyeSh2YWx1ZSwgUmVnaXN0cnkuU2NvcGUuSU5MSU5FKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJbnNlcnQgdGV4dCBvciBpbmxpbmVcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgICAgIHZhciBibG90ID0gUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICAgICAgYWZ0ZXIucGFyZW50Lmluc2VydEJlZm9yZShibG90LCBhZnRlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC8pKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5ibG90TmFtZSA9ICdibG9jayc7XG4gICAgQmxvY2tCbG90LnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuQkxPQ0tfQkxPVDtcbiAgICBCbG9ja0Jsb3QudGFnTmFtZSA9ICdQJztcbiAgICByZXR1cm4gQmxvY2tCbG90O1xufShmb3JtYXRfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBCbG9ja0Jsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGVhZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBFbWJlZEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVtYmVkQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbWJlZEJsb3QoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgRW1iZWRCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgRW1iZWRCbG90LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgLy8gc3VwZXIuZm9ybWF0QXQgd3JhcHMsIHdoaWNoIGlzIHdoYXQgd2Ugd2FudCBpbiBnZW5lcmFsLFxuICAgICAgICAvLyBidXQgdGhpcyBhbGxvd3Mgc3ViY2xhc3NlcyB0byBvdmVyd3JpdGUgZm9yIGZvcm1hdHNcbiAgICAgICAgLy8gdGhhdCBqdXN0IGFwcGx5IHRvIHBhcnRpY3VsYXIgZW1iZWRzXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0QXQuY2FsbCh0aGlzLCAwLCB0aGlzLmxlbmd0aCgpLCBuYW1lLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBFbWJlZEJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBsZW5ndGggPT09IHRoaXMubGVuZ3RoKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0QXQuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEVtYmVkQmxvdC5wcm90b3R5cGUuZm9ybWF0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRW1iZWRCbG90O1xufShsZWFmXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gRW1iZWRCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxlYWZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFRleHRCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUZXh0QmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0QmxvdChub2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnRleHQgPSBfdGhpcy5zdGF0aWNzLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRleHRCbG90LmNyZWF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpO1xuICAgIH07XG4gICAgVGV4dEJsb3QudmFsdWUgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICB2YXIgdGV4dCA9IGRvbU5vZGUuZGF0YTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodGV4dFsnbm9ybWFsaXplJ10pXG4gICAgICAgICAgICB0ZXh0ID0gdGV4dFsnbm9ybWFsaXplJ10oKTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLmRvbU5vZGUuZGF0YSA9IHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBpbmRleCkgKyB0aGlzLnRleHQuc2xpY2UoaW5kZXggKyBsZW5ndGgpO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlID09PSBub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICBpZiAoZGVmID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBpbmRleCkgKyB2YWx1ZSArIHRoaXMudGV4dC5zbGljZShpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUuZGF0YSA9IHRoaXMudGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQubGVuZ3RoO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnN0YXRpY3MudmFsdWUodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgaWYgKHRoaXMudGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5uZXh0IGluc3RhbmNlb2YgVGV4dEJsb3QgJiYgdGhpcy5uZXh0LnByZXYgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0QXQodGhpcy5sZW5ndGgoKSwgdGhpcy5uZXh0LnZhbHVlKCkpO1xuICAgICAgICAgICAgdGhpcy5uZXh0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIFt0aGlzLmRvbU5vZGUsIGluZGV4XTtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHsgZm9yY2UgPSBmYWxzZTsgfVxuICAgICAgICBpZiAoIWZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWZ0ZXIgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5kb21Ob2RlLnNwbGl0VGV4dChpbmRleCkpO1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoYWZ0ZXIsIHRoaXMubmV4dCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQ7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5ibG90TmFtZSA9ICd0ZXh0JztcbiAgICBUZXh0QmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIHJldHVybiBUZXh0QmxvdDtcbn0obGVhZl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRleHRCbG90O1xuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyY2htZW50LmpzLm1hcCIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgZGlmZiA9IHJlcXVpcmUoJ2Zhc3QtZGlmZicpO1xudmFyIGVxdWFsID0gcmVxdWlyZSgnZGVlcC1lcXVhbCcpO1xudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpO1xudmFyIG9wID0gcmVxdWlyZSgnLi9vcCcpO1xuXG5cbnZhciBOVUxMX0NIQVJBQ1RFUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCk7ICAvLyBQbGFjZWhvbGRlciBjaGFyIGZvciBlbWJlZCBpbiBkaWZmKClcblxuXG52YXIgRGVsdGEgPSBmdW5jdGlvbiAob3BzKSB7XG4gIC8vIEFzc3VtZSB3ZSBhcmUgZ2l2ZW4gYSB3ZWxsIGZvcm1lZCBvcHNcbiAgaWYgKEFycmF5LmlzQXJyYXkob3BzKSkge1xuICAgIHRoaXMub3BzID0gb3BzO1xuICB9IGVsc2UgaWYgKG9wcyAhPSBudWxsICYmIEFycmF5LmlzQXJyYXkob3BzLm9wcykpIHtcbiAgICB0aGlzLm9wcyA9IG9wcy5vcHM7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHMgPSBbXTtcbiAgfVxufTtcblxuXG5EZWx0YS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKHRleHQsIGF0dHJpYnV0ZXMpIHtcbiAgdmFyIG5ld09wID0ge307XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXM7XG4gIG5ld09wLmluc2VydCA9IHRleHQ7XG4gIGlmIChhdHRyaWJ1dGVzICE9IG51bGwgJiYgdHlwZW9mIGF0dHJpYnV0ZXMgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDApIHtcbiAgICBuZXdPcC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgfVxuICByZXR1cm4gdGhpcy5wdXNoKG5ld09wKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuIHRoaXM7XG4gIHJldHVybiB0aGlzLnB1c2goeyAnZGVsZXRlJzogbGVuZ3RoIH0pO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnJldGFpbiA9IGZ1bmN0aW9uIChsZW5ndGgsIGF0dHJpYnV0ZXMpIHtcbiAgaWYgKGxlbmd0aCA8PSAwKSByZXR1cm4gdGhpcztcbiAgdmFyIG5ld09wID0geyByZXRhaW46IGxlbmd0aCB9O1xuICBpZiAoYXR0cmlidXRlcyAhPSBudWxsICYmIHR5cGVvZiBhdHRyaWJ1dGVzID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwKSB7XG4gICAgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gIH1cbiAgcmV0dXJuIHRoaXMucHVzaChuZXdPcCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChuZXdPcCkge1xuICB2YXIgaW5kZXggPSB0aGlzLm9wcy5sZW5ndGg7XG4gIHZhciBsYXN0T3AgPSB0aGlzLm9wc1tpbmRleCAtIDFdO1xuICBuZXdPcCA9IGV4dGVuZCh0cnVlLCB7fSwgbmV3T3ApO1xuICBpZiAodHlwZW9mIGxhc3RPcCA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAodHlwZW9mIG5ld09wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3RPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLm9wc1tpbmRleCAtIDFdID0geyAnZGVsZXRlJzogbGFzdE9wWydkZWxldGUnXSArIG5ld09wWydkZWxldGUnXSB9O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIFNpbmNlIGl0IGRvZXMgbm90IG1hdHRlciBpZiB3ZSBpbnNlcnQgYmVmb3JlIG9yIGFmdGVyIGRlbGV0aW5nIGF0IHRoZSBzYW1lIGluZGV4LFxuICAgIC8vIGFsd2F5cyBwcmVmZXIgdG8gaW5zZXJ0IGZpcnN0XG4gICAgaWYgKHR5cGVvZiBsYXN0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJyAmJiBuZXdPcC5pbnNlcnQgIT0gbnVsbCkge1xuICAgICAgaW5kZXggLT0gMTtcbiAgICAgIGxhc3RPcCA9IHRoaXMub3BzW2luZGV4IC0gMV07XG4gICAgICBpZiAodHlwZW9mIGxhc3RPcCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhpcy5vcHMudW5zaGlmdChuZXdPcCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXF1YWwobmV3T3AuYXR0cmlidXRlcywgbGFzdE9wLmF0dHJpYnV0ZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIG5ld09wLmluc2VydCA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGxhc3RPcC5pbnNlcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMub3BzW2luZGV4IC0gMV0gPSB7IGluc2VydDogbGFzdE9wLmluc2VydCArIG5ld09wLmluc2VydCB9O1xuICAgICAgICBpZiAodHlwZW9mIG5ld09wLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnKSB0aGlzLm9wc1tpbmRleCAtIDFdLmF0dHJpYnV0ZXMgPSBuZXdPcC5hdHRyaWJ1dGVzXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmV3T3AucmV0YWluID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbGFzdE9wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy5vcHNbaW5kZXggLSAxXSA9IHsgcmV0YWluOiBsYXN0T3AucmV0YWluICsgbmV3T3AucmV0YWluIH07XG4gICAgICAgIGlmICh0eXBlb2YgbmV3T3AuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcpIHRoaXMub3BzW2luZGV4IC0gMV0uYXR0cmlidXRlcyA9IG5ld09wLmF0dHJpYnV0ZXNcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpbmRleCA9PT0gdGhpcy5vcHMubGVuZ3RoKSB7XG4gICAgdGhpcy5vcHMucHVzaChuZXdPcCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHMuc3BsaWNlKGluZGV4LCAwLCBuZXdPcCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY2hvcCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxhc3RPcCA9IHRoaXMub3BzW3RoaXMub3BzLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdE9wICYmIGxhc3RPcC5yZXRhaW4gJiYgIWxhc3RPcC5hdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5vcHMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICByZXR1cm4gdGhpcy5vcHMuZmlsdGVyKHByZWRpY2F0ZSk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgdGhpcy5vcHMuZm9yRWFjaChwcmVkaWNhdGUpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIHRoaXMub3BzLm1hcChwcmVkaWNhdGUpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnBhcnRpdGlvbiA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgdmFyIHBhc3NlZCA9IFtdLCBmYWlsZWQgPSBbXTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKG9wKSB7XG4gICAgdmFyIHRhcmdldCA9IHByZWRpY2F0ZShvcCkgPyBwYXNzZWQgOiBmYWlsZWQ7XG4gICAgdGFyZ2V0LnB1c2gob3ApO1xuICB9KTtcbiAgcmV0dXJuIFtwYXNzZWQsIGZhaWxlZF07XG59O1xuXG5EZWx0YS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgaW5pdGlhbCkge1xuICByZXR1cm4gdGhpcy5vcHMucmVkdWNlKHByZWRpY2F0ZSwgaW5pdGlhbCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY2hhbmdlTGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKGxlbmd0aCwgZWxlbSkge1xuICAgIGlmIChlbGVtLmluc2VydCkge1xuICAgICAgcmV0dXJuIGxlbmd0aCArIG9wLmxlbmd0aChlbGVtKTtcbiAgICB9IGVsc2UgaWYgKGVsZW0uZGVsZXRlKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoIC0gZWxlbS5kZWxldGU7XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGg7XG4gIH0sIDApO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChsZW5ndGgsIGVsZW0pIHtcbiAgICByZXR1cm4gbGVuZ3RoICsgb3AubGVuZ3RoKGVsZW0pO1xuICB9LCAwKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInKSBlbmQgPSBJbmZpbml0eTtcbiAgdmFyIG9wcyA9IFtdO1xuICB2YXIgaXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGluZGV4IDwgZW5kICYmIGl0ZXIuaGFzTmV4dCgpKSB7XG4gICAgdmFyIG5leHRPcDtcbiAgICBpZiAoaW5kZXggPCBzdGFydCkge1xuICAgICAgbmV4dE9wID0gaXRlci5uZXh0KHN0YXJ0IC0gaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0T3AgPSBpdGVyLm5leHQoZW5kIC0gaW5kZXgpO1xuICAgICAgb3BzLnB1c2gobmV4dE9wKTtcbiAgICB9XG4gICAgaW5kZXggKz0gb3AubGVuZ3RoKG5leHRPcCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBEZWx0YShvcHMpO1xufTtcblxuXG5EZWx0YS5wcm90b3R5cGUuY29tcG9zZSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICB2YXIgdGhpc0l0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBvdGhlckl0ZXIgPSBvcC5pdGVyYXRvcihvdGhlci5vcHMpO1xuICB2YXIgb3BzID0gW107XG4gIHZhciBmaXJzdE90aGVyID0gb3RoZXJJdGVyLnBlZWsoKTtcbiAgaWYgKGZpcnN0T3RoZXIgIT0gbnVsbCAmJiB0eXBlb2YgZmlyc3RPdGhlci5yZXRhaW4gPT09ICdudW1iZXInICYmIGZpcnN0T3RoZXIuYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgdmFyIGZpcnN0TGVmdCA9IGZpcnN0T3RoZXIucmV0YWluO1xuICAgIHdoaWxlICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0JyAmJiB0aGlzSXRlci5wZWVrTGVuZ3RoKCkgPD0gZmlyc3RMZWZ0KSB7XG4gICAgICBmaXJzdExlZnQgLT0gdGhpc0l0ZXIucGVla0xlbmd0aCgpO1xuICAgICAgb3BzLnB1c2godGhpc0l0ZXIubmV4dCgpKTtcbiAgICB9XG4gICAgaWYgKGZpcnN0T3RoZXIucmV0YWluIC0gZmlyc3RMZWZ0ID4gMCkge1xuICAgICAgb3RoZXJJdGVyLm5leHQoZmlyc3RPdGhlci5yZXRhaW4gLSBmaXJzdExlZnQpO1xuICAgIH1cbiAgfVxuICB2YXIgZGVsdGEgPSBuZXcgRGVsdGEob3BzKTtcbiAgd2hpbGUgKHRoaXNJdGVyLmhhc05leHQoKSB8fCBvdGhlckl0ZXIuaGFzTmV4dCgpKSB7XG4gICAgaWYgKG90aGVySXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0Jykge1xuICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dCgpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXNJdGVyLnBlZWtUeXBlKCkgPT09ICdkZWxldGUnKSB7XG4gICAgICBkZWx0YS5wdXNoKHRoaXNJdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbih0aGlzSXRlci5wZWVrTGVuZ3RoKCksIG90aGVySXRlci5wZWVrTGVuZ3RoKCkpO1xuICAgICAgdmFyIHRoaXNPcCA9IHRoaXNJdGVyLm5leHQobGVuZ3RoKTtcbiAgICAgIHZhciBvdGhlck9wID0gb3RoZXJJdGVyLm5leHQobGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2Ygb3RoZXJPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBuZXdPcCA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXNPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgbmV3T3AucmV0YWluID0gbGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld09wLmluc2VydCA9IHRoaXNPcC5pbnNlcnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJlc2VydmUgbnVsbCB3aGVuIGNvbXBvc2luZyB3aXRoIGEgcmV0YWluLCBvdGhlcndpc2UgcmVtb3ZlIGl0IGZvciBpbnNlcnRzXG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gb3AuYXR0cmlidXRlcy5jb21wb3NlKHRoaXNPcC5hdHRyaWJ1dGVzLCBvdGhlck9wLmF0dHJpYnV0ZXMsIHR5cGVvZiB0aGlzT3AucmV0YWluID09PSAnbnVtYmVyJyk7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzKSBuZXdPcC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgZGVsdGEucHVzaChuZXdPcCk7XG5cbiAgICAgICAgLy8gT3B0aW1pemF0aW9uIGlmIHJlc3Qgb2Ygb3RoZXIgaXMganVzdCByZXRhaW5cbiAgICAgICAgaWYgKCFvdGhlckl0ZXIuaGFzTmV4dCgpICYmIGVxdWFsKGRlbHRhLm9wc1tkZWx0YS5vcHMubGVuZ3RoIC0gMV0sIG5ld09wKSkge1xuICAgICAgICAgIHZhciByZXN0ID0gbmV3IERlbHRhKHRoaXNJdGVyLnJlc3QoKSk7XG4gICAgICAgICAgcmV0dXJuIGRlbHRhLmNvbmNhdChyZXN0KS5jaG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgLy8gT3RoZXIgb3Agc2hvdWxkIGJlIGRlbGV0ZSwgd2UgY291bGQgYmUgYW4gaW5zZXJ0IG9yIHJldGFpblxuICAgICAgLy8gSW5zZXJ0ICsgZGVsZXRlIGNhbmNlbHMgb3V0XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvdGhlck9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHRoaXNPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YS5jaG9wKCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSh0aGlzLm9wcy5zbGljZSgpKTtcbiAgaWYgKG90aGVyLm9wcy5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEucHVzaChvdGhlci5vcHNbMF0pO1xuICAgIGRlbHRhLm9wcyA9IGRlbHRhLm9wcy5jb25jYXQob3RoZXIub3BzLnNsaWNlKDEpKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChvdGhlciwgaW5kZXgpIHtcbiAgaWYgKHRoaXMub3BzID09PSBvdGhlci5vcHMpIHtcbiAgICByZXR1cm4gbmV3IERlbHRhKCk7XG4gIH1cbiAgdmFyIHN0cmluZ3MgPSBbdGhpcywgb3RoZXJdLm1hcChmdW5jdGlvbiAoZGVsdGEpIHtcbiAgICByZXR1cm4gZGVsdGEubWFwKGZ1bmN0aW9uIChvcCkge1xuICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/IG9wLmluc2VydCA6IE5VTExfQ0hBUkFDVEVSO1xuICAgICAgfVxuICAgICAgdmFyIHByZXAgPSAoZGVsdGEgPT09IG90aGVyKSA/ICdvbicgOiAnd2l0aCc7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpZmYoKSBjYWxsZWQgJyArIHByZXAgKyAnIG5vbi1kb2N1bWVudCcpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9KTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHZhciBkaWZmUmVzdWx0ID0gZGlmZihzdHJpbmdzWzBdLCBzdHJpbmdzWzFdLCBpbmRleCk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG90aGVySXRlciA9IG9wLml0ZXJhdG9yKG90aGVyLm9wcyk7XG4gIGRpZmZSZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvbXBvbmVudFsxXS5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBvcExlbmd0aCA9IDA7XG4gICAgICBzd2l0Y2ggKGNvbXBvbmVudFswXSkge1xuICAgICAgICBjYXNlIGRpZmYuSU5TRVJUOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4ob3RoZXJJdGVyLnBlZWtMZW5ndGgoKSwgbGVuZ3RoKTtcbiAgICAgICAgICBkZWx0YS5wdXNoKG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZGlmZi5ERUxFVEU6XG4gICAgICAgICAgb3BMZW5ndGggPSBNYXRoLm1pbihsZW5ndGgsIHRoaXNJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICAgICAgdGhpc0l0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgZGVsdGFbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBkaWZmLkVRVUFMOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpLCBsZW5ndGgpO1xuICAgICAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICBpZiAoZXF1YWwodGhpc09wLmluc2VydCwgb3RoZXJPcC5pbnNlcnQpKSB7XG4gICAgICAgICAgICBkZWx0YS5yZXRhaW4ob3BMZW5ndGgsIG9wLmF0dHJpYnV0ZXMuZGlmZih0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcClbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZW5ndGggLT0gb3BMZW5ndGg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlbHRhLmNob3AoKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5lYWNoTGluZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIG5ld2xpbmUpIHtcbiAgbmV3bGluZSA9IG5ld2xpbmUgfHwgJ1xcbic7XG4gIHZhciBpdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgbGluZSA9IG5ldyBEZWx0YSgpO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChpdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChpdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSByZXR1cm47XG4gICAgdmFyIHRoaXNPcCA9IGl0ZXIucGVlaygpO1xuICAgIHZhciBzdGFydCA9IG9wLmxlbmd0aCh0aGlzT3ApIC0gaXRlci5wZWVrTGVuZ3RoKCk7XG4gICAgdmFyIGluZGV4ID0gdHlwZW9mIHRoaXNPcC5pbnNlcnQgPT09ICdzdHJpbmcnID9cbiAgICAgIHRoaXNPcC5pbnNlcnQuaW5kZXhPZihuZXdsaW5lLCBzdGFydCkgLSBzdGFydCA6IC0xO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmIChpbmRleCA+IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoaW5kZXgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZWRpY2F0ZShsaW5lLCBpdGVyLm5leHQoMSkuYXR0cmlidXRlcyB8fCB7fSwgaSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGkgKz0gMTtcbiAgICAgIGxpbmUgPSBuZXcgRGVsdGEoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGxpbmUubGVuZ3RoKCkgPiAwKSB7XG4gICAgcHJlZGljYXRlKGxpbmUsIHt9LCBpKTtcbiAgfVxufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChvdGhlciwgcHJpb3JpdHkpIHtcbiAgcHJpb3JpdHkgPSAhIXByaW9yaXR5O1xuICBpZiAodHlwZW9mIG90aGVyID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybVBvc2l0aW9uKG90aGVyLCBwcmlvcml0eSk7XG4gIH1cbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0JyAmJiAocHJpb3JpdHkgfHwgb3RoZXJJdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSkge1xuICAgICAgZGVsdGEucmV0YWluKG9wLmxlbmd0aCh0aGlzSXRlci5uZXh0KCkpKTtcbiAgICB9IGVsc2UgaWYgKG90aGVySXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0Jykge1xuICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKHRoaXNJdGVyLnBlZWtMZW5ndGgoKSwgb3RoZXJJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICB2YXIgdGhpc09wID0gdGhpc0l0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgdmFyIG90aGVyT3AgPSBvdGhlckl0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgaWYgKHRoaXNPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgLy8gT3VyIGRlbGV0ZSBlaXRoZXIgbWFrZXMgdGhlaXIgZGVsZXRlIHJlZHVuZGFudCBvciByZW1vdmVzIHRoZWlyIHJldGFpblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAob3RoZXJPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgZGVsdGEucHVzaChvdGhlck9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIHJldGFpbiBlaXRoZXIgdGhlaXIgcmV0YWluIG9yIGluc2VydFxuICAgICAgICBkZWx0YS5yZXRhaW4obGVuZ3RoLCBvcC5hdHRyaWJ1dGVzLnRyYW5zZm9ybSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCBwcmlvcml0eSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuY2hvcCgpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybVBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4LCBwcmlvcml0eSkge1xuICBwcmlvcml0eSA9ICEhcHJpb3JpdHk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgJiYgb2Zmc2V0IDw9IGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXNJdGVyLnBlZWtMZW5ndGgoKTtcbiAgICB2YXIgbmV4dFR5cGUgPSB0aGlzSXRlci5wZWVrVHlwZSgpO1xuICAgIHRoaXNJdGVyLm5leHQoKTtcbiAgICBpZiAobmV4dFR5cGUgPT09ICdkZWxldGUnKSB7XG4gICAgICBpbmRleCAtPSBNYXRoLm1pbihsZW5ndGgsIGluZGV4IC0gb2Zmc2V0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAobmV4dFR5cGUgPT09ICdpbnNlcnQnICYmIChvZmZzZXQgPCBpbmRleCB8fCAhcHJpb3JpdHkpKSB7XG4gICAgICBpbmRleCArPSBsZW5ndGg7XG4gICAgfVxuICAgIG9mZnNldCArPSBsZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERlbHRhO1xuIiwidmFyIGVxdWFsID0gcmVxdWlyZSgnZGVlcC1lcXVhbCcpO1xudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpO1xuXG5cbnZhciBsaWIgPSB7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBjb21wb3NlOiBmdW5jdGlvbiAoYSwgYiwga2VlcE51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPT0gJ29iamVjdCcpIGEgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgYiAhPT0gJ29iamVjdCcpIGIgPSB7fTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gZXh0ZW5kKHRydWUsIHt9LCBiKTtcbiAgICAgIGlmICgha2VlcE51bGwpIHtcbiAgICAgICAgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoY29weSwga2V5KSB7XG4gICAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb3B5W2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgICB9LCB7fSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoYVtrZXldICE9PSB1bmRlZmluZWQgJiYgYltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBhW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgZGlmZjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JykgYSA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiBiICE9PSAnb2JqZWN0JykgYiA9IHt9O1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhhKS5jb25jYXQoT2JqZWN0LmtleXMoYikpLnJlZHVjZShmdW5jdGlvbiAoYXR0cmlidXRlcywga2V5KSB7XG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gYltrZXldID09PSB1bmRlZmluZWQgPyBudWxsIDogYltrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgfSwge30pO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDAgPyBhdHRyaWJ1dGVzIDogdW5kZWZpbmVkO1xuICAgIH0sXG5cbiAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIChhLCBiLCBwcmlvcml0eSkge1xuICAgICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JykgcmV0dXJuIGI7XG4gICAgICBpZiAodHlwZW9mIGIgIT09ICdvYmplY3QnKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKCFwcmlvcml0eSkgcmV0dXJuIGI7ICAvLyBiIHNpbXBseSBvdmVyd3JpdGVzIHVzIHdpdGhvdXQgcHJpb3JpdHlcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoYikucmVkdWNlKGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBrZXkpIHtcbiAgICAgICAgaWYgKGFba2V5XSA9PT0gdW5kZWZpbmVkKSBhdHRyaWJ1dGVzW2tleV0gPSBiW2tleV07ICAvLyBudWxsIGlzIGEgdmFsaWQgdmFsdWVcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gICAgICB9LCB7fSk7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCA/IGF0dHJpYnV0ZXMgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuXG4gIGl0ZXJhdG9yOiBmdW5jdGlvbiAob3BzKSB7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihvcHMpO1xuICB9LFxuXG4gIGxlbmd0aDogZnVuY3Rpb24gKG9wKSB7XG4gICAgaWYgKHR5cGVvZiBvcFsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gb3BbJ2RlbGV0ZSddO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBvcC5yZXRhaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/IG9wLmluc2VydC5sZW5ndGggOiAxO1xuICAgIH1cbiAgfVxufTtcblxuXG5mdW5jdGlvbiBJdGVyYXRvcihvcHMpIHtcbiAgdGhpcy5vcHMgPSBvcHM7XG4gIHRoaXMuaW5kZXggPSAwO1xuICB0aGlzLm9mZnNldCA9IDA7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucGVla0xlbmd0aCgpIDwgSW5maW5pdHk7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIGxlbmd0aCA9IEluZmluaXR5O1xuICB2YXIgbmV4dE9wID0gdGhpcy5vcHNbdGhpcy5pbmRleF07XG4gIGlmIChuZXh0T3ApIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgdmFyIG9wTGVuZ3RoID0gbGliLmxlbmd0aChuZXh0T3ApXG4gICAgaWYgKGxlbmd0aCA+PSBvcExlbmd0aCAtIG9mZnNldCkge1xuICAgICAgbGVuZ3RoID0gb3BMZW5ndGggLSBvZmZzZXQ7XG4gICAgICB0aGlzLmluZGV4ICs9IDE7XG4gICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuZXh0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHsgJ2RlbGV0ZSc6IGxlbmd0aCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmV0T3AgPSB7fTtcbiAgICAgIGlmIChuZXh0T3AuYXR0cmlidXRlcykge1xuICAgICAgICByZXRPcC5hdHRyaWJ1dGVzID0gbmV4dE9wLmF0dHJpYnV0ZXM7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG5leHRPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldE9wLnJldGFpbiA9IGxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRPcC5pbnNlcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldE9wLmluc2VydCA9IG5leHRPcC5pbnNlcnQuc3Vic3RyKG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG9mZnNldCBzaG91bGQgPT09IDAsIGxlbmd0aCBzaG91bGQgPT09IDFcbiAgICAgICAgcmV0T3AuaW5zZXJ0ID0gbmV4dE9wLmluc2VydDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXRPcDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgcmV0YWluOiBJbmZpbml0eSB9O1xuICB9XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMub3BzW3RoaXMuaW5kZXhdO1xufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnBlZWtMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm9wc1t0aGlzLmluZGV4XSkge1xuICAgIC8vIFNob3VsZCBuZXZlciByZXR1cm4gMCBpZiBvdXIgaW5kZXggaXMgYmVpbmcgbWFuYWdlZCBjb3JyZWN0bHlcbiAgICByZXR1cm4gbGliLmxlbmd0aCh0aGlzLm9wc1t0aGlzLmluZGV4XSkgLSB0aGlzLm9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gSW5maW5pdHk7XG4gIH1cbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5wZWVrVHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMub3BzW3RoaXMuaW5kZXhdKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wc1t0aGlzLmluZGV4XVsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJ2RlbGV0ZSc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5vcHNbdGhpcy5pbmRleF0ucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuICdyZXRhaW4nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2luc2VydCc7XG4gICAgfVxuICB9XG4gIHJldHVybiAncmV0YWluJztcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5yZXN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaGFzTmV4dCgpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2UgaWYgKHRoaXMub2Zmc2V0ID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMub3BzLnNsaWNlKHRoaXMuaW5kZXgpO1xuICB9IGVsc2Uge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgIHZhciBuZXh0ID0gdGhpcy5uZXh0KCk7XG4gICAgdmFyIHJlc3QgPSB0aGlzLm9wcy5zbGljZSh0aGlzLmluZGV4KTtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgcmV0dXJuIFtuZXh0XS5jb25jYXQocmVzdCk7XG4gIH1cbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBsaWI7XG4iLCJsZXQgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuZWxlbS5jbGFzc0xpc3QudG9nZ2xlKCd0ZXN0LWNsYXNzJywgZmFsc2UpO1xuaWYgKGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXN0LWNsYXNzJykpIHtcbiAgbGV0IF90b2dnbGUgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZTtcbiAgRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbih0b2tlbiwgZm9yY2UpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgIXRoaXMuY29udGFpbnModG9rZW4pID09PSAhZm9yY2UpIHtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIF90b2dnbGUuY2FsbCh0aGlzLCB0b2tlbik7XG4gICAgfVxuICB9O1xufVxuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCkge1xuICBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggPSBmdW5jdGlvbihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKXtcbiAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIHx8IDA7XG4gICAgcmV0dXJuIHRoaXMuc3Vic3RyKHBvc2l0aW9uLCBzZWFyY2hTdHJpbmcubGVuZ3RoKSA9PT0gc2VhcmNoU3RyaW5nO1xuICB9O1xufVxuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgpIHtcbiAgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9IGZ1bmN0aW9uKHNlYXJjaFN0cmluZywgcG9zaXRpb24pIHtcbiAgICB2YXIgc3ViamVjdFN0cmluZyA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICBpZiAodHlwZW9mIHBvc2l0aW9uICE9PSAnbnVtYmVyJyB8fCAhaXNGaW5pdGUocG9zaXRpb24pIHx8IE1hdGguZmxvb3IocG9zaXRpb24pICE9PSBwb3NpdGlvbiB8fCBwb3NpdGlvbiA+IHN1YmplY3RTdHJpbmcubGVuZ3RoKSB7XG4gICAgICBwb3NpdGlvbiA9IHN1YmplY3RTdHJpbmcubGVuZ3RoO1xuICAgIH1cbiAgICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICAgIHZhciBsYXN0SW5kZXggPSBzdWJqZWN0U3RyaW5nLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbiAgfTtcbn1cblxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcImZpbmRcIiwge1xuICAgIHZhbHVlOiBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0aGlzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5maW5kIGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGggPj4+IDA7XG4gICAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IGxpc3RbaV07XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaSwgbGlzdCkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9KTtcbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oKSB7XG4gIC8vIERpc2FibGUgcmVzaXppbmcgaW4gRmlyZWZveFxuICBkb2N1bWVudC5leGVjQ29tbWFuZChcImVuYWJsZU9iamVjdFJlc2l6aW5nXCIsIGZhbHNlLCBmYWxzZSk7XG4gIC8vIERpc2FibGUgYXV0b21hdGljIGxpbmtpZnlpbmcgaW4gSUUxMVxuICBkb2N1bWVudC5leGVjQ29tbWFuZChcImF1dG9VcmxEZXRlY3RcIiwgZmFsc2UsIGZhbHNlKTtcbn0pO1xuIiwidmFyIGNsb25lID0gKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW5zdGFuY2VvZihvYmosIHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgIT0gbnVsbCAmJiBvYmogaW5zdGFuY2VvZiB0eXBlO1xufVxuXG52YXIgbmF0aXZlTWFwO1xudHJ5IHtcbiAgbmF0aXZlTWFwID0gTWFwO1xufSBjYXRjaChfKSB7XG4gIC8vIG1heWJlIGEgcmVmZXJlbmNlIGVycm9yIGJlY2F1c2Ugbm8gYE1hcGAuIEdpdmUgaXQgYSBkdW1teSB2YWx1ZSB0aGF0IG5vXG4gIC8vIHZhbHVlIHdpbGwgZXZlciBiZSBhbiBpbnN0YW5jZW9mLlxuICBuYXRpdmVNYXAgPSBmdW5jdGlvbigpIHt9O1xufVxuXG52YXIgbmF0aXZlU2V0O1xudHJ5IHtcbiAgbmF0aXZlU2V0ID0gU2V0O1xufSBjYXRjaChfKSB7XG4gIG5hdGl2ZVNldCA9IGZ1bmN0aW9uKCkge307XG59XG5cbnZhciBuYXRpdmVQcm9taXNlO1xudHJ5IHtcbiAgbmF0aXZlUHJvbWlzZSA9IFByb21pc2U7XG59IGNhdGNoKF8pIHtcbiAgbmF0aXZlUHJvbWlzZSA9IGZ1bmN0aW9uKCkge307XG59XG5cbi8qKlxuICogQ2xvbmVzIChjb3BpZXMpIGFuIE9iamVjdCB1c2luZyBkZWVwIGNvcHlpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBzdXBwb3J0cyBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IGRlZmF1bHQsIGJ1dCBpZiB5b3UgYXJlIGNlcnRhaW5cbiAqIHRoZXJlIGFyZSBubyBjaXJjdWxhciByZWZlcmVuY2VzIGluIHlvdXIgb2JqZWN0LCB5b3UgY2FuIHNhdmUgc29tZSBDUFUgdGltZVxuICogYnkgY2FsbGluZyBjbG9uZShvYmosIGZhbHNlKS5cbiAqXG4gKiBDYXV0aW9uOiBpZiBgY2lyY3VsYXJgIGlzIGZhbHNlIGFuZCBgcGFyZW50YCBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2VzLFxuICogeW91ciBwcm9ncmFtIG1heSBlbnRlciBhbiBpbmZpbml0ZSBsb29wIGFuZCBjcmFzaC5cbiAqXG4gKiBAcGFyYW0gYHBhcmVudGAgLSB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZFxuICogQHBhcmFtIGBjaXJjdWxhcmAgLSBzZXQgdG8gdHJ1ZSBpZiB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZCBtYXkgY29udGFpblxuICogICAgY2lyY3VsYXIgcmVmZXJlbmNlcy4gKG9wdGlvbmFsIC0gdHJ1ZSBieSBkZWZhdWx0KVxuICogQHBhcmFtIGBkZXB0aGAgLSBzZXQgdG8gYSBudW1iZXIgaWYgdGhlIG9iamVjdCBpcyBvbmx5IHRvIGJlIGNsb25lZCB0b1xuICogICAgYSBwYXJ0aWN1bGFyIGRlcHRoLiAob3B0aW9uYWwgLSBkZWZhdWx0cyB0byBJbmZpbml0eSlcbiAqIEBwYXJhbSBgcHJvdG90eXBlYCAtIHNldHMgdGhlIHByb3RvdHlwZSB0byBiZSB1c2VkIHdoZW4gY2xvbmluZyBhbiBvYmplY3QuXG4gKiAgICAob3B0aW9uYWwgLSBkZWZhdWx0cyB0byBwYXJlbnQgcHJvdG90eXBlKS5cbiAqIEBwYXJhbSBgaW5jbHVkZU5vbkVudW1lcmFibGVgIC0gc2V0IHRvIHRydWUgaWYgdGhlIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAqICAgIHNob3VsZCBiZSBjbG9uZWQgYXMgd2VsbC4gTm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBvbiB0aGUgcHJvdG90eXBlXG4gKiAgICBjaGFpbiB3aWxsIGJlIGlnbm9yZWQuIChvcHRpb25hbCAtIGZhbHNlIGJ5IGRlZmF1bHQpXG4qL1xuZnVuY3Rpb24gY2xvbmUocGFyZW50LCBjaXJjdWxhciwgZGVwdGgsIHByb3RvdHlwZSwgaW5jbHVkZU5vbkVudW1lcmFibGUpIHtcbiAgaWYgKHR5cGVvZiBjaXJjdWxhciA9PT0gJ29iamVjdCcpIHtcbiAgICBkZXB0aCA9IGNpcmN1bGFyLmRlcHRoO1xuICAgIHByb3RvdHlwZSA9IGNpcmN1bGFyLnByb3RvdHlwZTtcbiAgICBpbmNsdWRlTm9uRW51bWVyYWJsZSA9IGNpcmN1bGFyLmluY2x1ZGVOb25FbnVtZXJhYmxlO1xuICAgIGNpcmN1bGFyID0gY2lyY3VsYXIuY2lyY3VsYXI7XG4gIH1cbiAgLy8gbWFpbnRhaW4gdHdvIGFycmF5cyBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcywgd2hlcmUgY29ycmVzcG9uZGluZyBwYXJlbnRzXG4gIC8vIGFuZCBjaGlsZHJlbiBoYXZlIHRoZSBzYW1lIGluZGV4XG4gIHZhciBhbGxQYXJlbnRzID0gW107XG4gIHZhciBhbGxDaGlsZHJlbiA9IFtdO1xuXG4gIHZhciB1c2VCdWZmZXIgPSB0eXBlb2YgQnVmZmVyICE9ICd1bmRlZmluZWQnO1xuXG4gIGlmICh0eXBlb2YgY2lyY3VsYXIgPT0gJ3VuZGVmaW5lZCcpXG4gICAgY2lyY3VsYXIgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZGVwdGggPT0gJ3VuZGVmaW5lZCcpXG4gICAgZGVwdGggPSBJbmZpbml0eTtcblxuICAvLyByZWN1cnNlIHRoaXMgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzZXQgYWxsUGFyZW50cyBhbmQgYWxsQ2hpbGRyZW5cbiAgZnVuY3Rpb24gX2Nsb25lKHBhcmVudCwgZGVwdGgpIHtcbiAgICAvLyBjbG9uaW5nIG51bGwgYWx3YXlzIHJldHVybnMgbnVsbFxuICAgIGlmIChwYXJlbnQgPT09IG51bGwpXG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGlmIChkZXB0aCA9PT0gMClcbiAgICAgIHJldHVybiBwYXJlbnQ7XG5cbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIHByb3RvO1xuICAgIGlmICh0eXBlb2YgcGFyZW50ICE9ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cblxuICAgIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZU1hcCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IG5hdGl2ZU1hcCgpO1xuICAgIH0gZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVTZXQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBuYXRpdmVTZXQoKTtcbiAgICB9IGVsc2UgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlUHJvbWlzZSkpIHtcbiAgICAgIGNoaWxkID0gbmV3IG5hdGl2ZVByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBwYXJlbnQudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJlc29sdmUoX2Nsb25lKHZhbHVlLCBkZXB0aCAtIDEpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KF9jbG9uZShlcnIsIGRlcHRoIC0gMSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoY2xvbmUuX19pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gW107XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzUmVnRXhwKHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IFJlZ0V4cChwYXJlbnQuc291cmNlLCBfX2dldFJlZ0V4cEZsYWdzKHBhcmVudCkpO1xuICAgICAgaWYgKHBhcmVudC5sYXN0SW5kZXgpIGNoaWxkLmxhc3RJbmRleCA9IHBhcmVudC5sYXN0SW5kZXg7XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzRGF0ZShwYXJlbnQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBEYXRlKHBhcmVudC5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSBpZiAodXNlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihwYXJlbnQpKSB7XG4gICAgICBpZiAoQnVmZmVyLmFsbG9jVW5zYWZlKSB7XG4gICAgICAgIC8vIE5vZGUuanMgPj0gNC41LjBcbiAgICAgICAgY2hpbGQgPSBCdWZmZXIuYWxsb2NVbnNhZmUocGFyZW50Lmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPbGRlciBOb2RlLmpzIHZlcnNpb25zXG4gICAgICAgIGNoaWxkID0gbmV3IEJ1ZmZlcihwYXJlbnQubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudC5jb3B5KGNoaWxkKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9IGVsc2UgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgRXJyb3IpKSB7XG4gICAgICBjaGlsZCA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBwcm90b3R5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFyZW50KTtcbiAgICAgICAgY2hpbGQgPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjaGlsZCA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcbiAgICAgICAgcHJvdG8gPSBwcm90b3R5cGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNpcmN1bGFyKSB7XG4gICAgICB2YXIgaW5kZXggPSBhbGxQYXJlbnRzLmluZGV4T2YocGFyZW50KTtcblxuICAgICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICAgIHJldHVybiBhbGxDaGlsZHJlbltpbmRleF07XG4gICAgICB9XG4gICAgICBhbGxQYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIGFsbENoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZU1hcCkpIHtcbiAgICAgIHBhcmVudC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgdmFyIGtleUNoaWxkID0gX2Nsb25lKGtleSwgZGVwdGggLSAxKTtcbiAgICAgICAgdmFyIHZhbHVlQ2hpbGQgPSBfY2xvbmUodmFsdWUsIGRlcHRoIC0gMSk7XG4gICAgICAgIGNoaWxkLnNldChrZXlDaGlsZCwgdmFsdWVDaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlU2V0KSkge1xuICAgICAgcGFyZW50LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGVudHJ5Q2hpbGQgPSBfY2xvbmUodmFsdWUsIGRlcHRoIC0gMSk7XG4gICAgICAgIGNoaWxkLmFkZChlbnRyeUNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgaW4gcGFyZW50KSB7XG4gICAgICB2YXIgYXR0cnM7XG4gICAgICBpZiAocHJvdG8pIHtcbiAgICAgICAgYXR0cnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF0dHJzICYmIGF0dHJzLnNldCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY2hpbGRbaV0gPSBfY2xvbmUocGFyZW50W2ldLCBkZXB0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocGFyZW50KTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBEb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGNsb25pbmcgYSBzeW1ib2wgYmVjYXVzZSBpdCBpcyBhIHByaW1pdGl2ZSxcbiAgICAgICAgLy8gbGlrZSBhIG51bWJlciBvciBzdHJpbmcuXG4gICAgICAgIHZhciBzeW1ib2wgPSBzeW1ib2xzW2ldO1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGFyZW50LCBzeW1ib2wpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5lbnVtZXJhYmxlICYmICFpbmNsdWRlTm9uRW51bWVyYWJsZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkW3N5bWJvbF0gPSBfY2xvbmUocGFyZW50W3N5bWJvbF0sIGRlcHRoIC0gMSk7XG4gICAgICAgIGlmICghZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkLCBzeW1ib2wsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5jbHVkZU5vbkVudW1lcmFibGUpIHtcbiAgICAgIHZhciBhbGxQcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocGFyZW50KTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsUHJvcGVydHlOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gYWxsUHJvcGVydHlOYW1lc1tpXTtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRbcHJvcGVydHlOYW1lXSA9IF9jbG9uZShwYXJlbnRbcHJvcGVydHlOYW1lXSwgZGVwdGggLSAxKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkLCBwcm9wZXJ0eU5hbWUsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICByZXR1cm4gX2Nsb25lKHBhcmVudCwgZGVwdGgpO1xufVxuXG4vKipcbiAqIFNpbXBsZSBmbGF0IGNsb25lIHVzaW5nIHByb3RvdHlwZSwgYWNjZXB0cyBvbmx5IG9iamVjdHMsIHVzZWZ1bGwgZm9yIHByb3BlcnR5XG4gKiBvdmVycmlkZSBvbiBGTEFUIGNvbmZpZ3VyYXRpb24gb2JqZWN0IChubyBuZXN0ZWQgcHJvcHMpLlxuICpcbiAqIFVTRSBXSVRIIENBVVRJT04hIFRoaXMgbWF5IG5vdCBiZWhhdmUgYXMgeW91IHdpc2ggaWYgeW91IGRvIG5vdCBrbm93IGhvdyB0aGlzXG4gKiB3b3Jrcy5cbiAqL1xuY2xvbmUuY2xvbmVQcm90b3R5cGUgPSBmdW5jdGlvbiBjbG9uZVByb3RvdHlwZShwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICB2YXIgYyA9IGZ1bmN0aW9uICgpIHt9O1xuICBjLnByb3RvdHlwZSA9IHBhcmVudDtcbiAgcmV0dXJuIG5ldyBjKCk7XG59O1xuXG4vLyBwcml2YXRlIHV0aWxpdHkgZnVuY3Rpb25zXG5cbmZ1bmN0aW9uIF9fb2JqVG9TdHIobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuY2xvbmUuX19vYmpUb1N0ciA9IF9fb2JqVG9TdHI7XG5cbmZ1bmN0aW9uIF9faXNEYXRlKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfX29ialRvU3RyKG8pID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5jbG9uZS5fX2lzRGF0ZSA9IF9faXNEYXRlO1xuXG5mdW5jdGlvbiBfX2lzQXJyYXkobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIF9fb2JqVG9TdHIobykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5jbG9uZS5fX2lzQXJyYXkgPSBfX2lzQXJyYXk7XG5cbmZ1bmN0aW9uIF9faXNSZWdFeHAobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIF9fb2JqVG9TdHIobykgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuY2xvbmUuX19pc1JlZ0V4cCA9IF9faXNSZWdFeHA7XG5cbmZ1bmN0aW9uIF9fZ2V0UmVnRXhwRmxhZ3MocmUpIHtcbiAgdmFyIGZsYWdzID0gJyc7XG4gIGlmIChyZS5nbG9iYWwpIGZsYWdzICs9ICdnJztcbiAgaWYgKHJlLmlnbm9yZUNhc2UpIGZsYWdzICs9ICdpJztcbiAgaWYgKHJlLm11bHRpbGluZSkgZmxhZ3MgKz0gJ20nO1xuICByZXR1cm4gZmxhZ3M7XG59XG5jbG9uZS5fX2dldFJlZ0V4cEZsYWdzID0gX19nZXRSZWdFeHBGbGFncztcblxucmV0dXJuIGNsb25lO1xufSkoKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY2xvbmU7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogTWluaW1hbCBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZXhpc3RzIE9ubHkgY2hlY2sgaWYgdGhlcmUgYXJlIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtBcnJheXxCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQsIGV4aXN0cykge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgYXZhaWxhYmxlID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGV4aXN0cykgcmV0dXJuICEhYXZhaWxhYmxlO1xuICBpZiAoIWF2YWlsYWJsZSkgcmV0dXJuIFtdO1xuICBpZiAoYXZhaWxhYmxlLmZuKSByZXR1cm4gW2F2YWlsYWJsZS5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdmFpbGFibGUubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gYXZhaWxhYmxlW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZWxzZSBgZmFsc2VgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCB0aGlzKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCB0aGlzLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghdGhpcy5fZXZlbnRzW2V2dF0uZm4pIHRoaXMuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIHRoaXMuX2V2ZW50c1tldnRdID0gW3RoaXMuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcywgdHJ1ZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgdGhpcy5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgdGhpcy5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIXRoaXMuX2V2ZW50c1tldnRdLmZuKSB0aGlzLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSB0aGlzLl9ldmVudHNbZXZ0XSA9IFt0aGlzLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IGhhdmUgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuXG4gICAgICAmJiAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpXG4gICAgICAmJiAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgICAgZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2dF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm5cbiAgICAgICAgfHwgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKVxuICAgICAgICB8fCAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2dF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkge1xuICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIFRoaXMgZnVuY3Rpb24gZG9lc24ndCBhcHBseSBhbnltb3JlLlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgJ2FsaWduJzoge1xuICAgICcnICAgICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9hbGlnbi1sZWZ0LnN2ZycpLFxuICAgICdjZW50ZXInICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9hbGlnbi1jZW50ZXIuc3ZnJyksXG4gICAgJ3JpZ2h0JyAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2FsaWduLXJpZ2h0LnN2ZycpLFxuICAgICdqdXN0aWZ5JyA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9hbGlnbi1qdXN0aWZ5LnN2ZycpXG4gIH0sXG4gICdiYWNrZ3JvdW5kJzogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2JhY2tncm91bmQuc3ZnJyksXG4gICdibG9ja3F1b3RlJzogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Jsb2NrcXVvdGUuc3ZnJyksXG4gICdib2xkJyAgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2JvbGQuc3ZnJyksXG4gICdjbGVhbicgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2NsZWFuLnN2ZycpLFxuICAnY29kZScgICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9jb2RlLnN2ZycpLFxuICAnY29kZS1ibG9jayc6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9jb2RlLnN2ZycpLFxuICAnY29sb3InICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9jb2xvci5zdmcnKSxcbiAgJ2RpcmVjdGlvbicgOiB7XG4gICAgJycgICAgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2RpcmVjdGlvbi1sdHIuc3ZnJyksXG4gICAgJ3J0bCcgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2RpcmVjdGlvbi1ydGwuc3ZnJylcbiAgfSxcbiAgJ2Zsb2F0Jzoge1xuICAgICdjZW50ZXInICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9mbG9hdC1jZW50ZXIuc3ZnJyksXG4gICAgJ2Z1bGwnICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Zsb2F0LWZ1bGwuc3ZnJyksXG4gICAgJ2xlZnQnICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Zsb2F0LWxlZnQuc3ZnJyksXG4gICAgJ3JpZ2h0JyAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Zsb2F0LXJpZ2h0LnN2ZycpXG4gIH0sXG4gICdmb3JtdWxhJyAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Zvcm11bGEuc3ZnJyksXG4gICdoZWFkZXInOiB7XG4gICAgJzEnICAgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2hlYWRlci5zdmcnKSxcbiAgICAnMicgICAgICAgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvaGVhZGVyLTIuc3ZnJylcbiAgfSxcbiAgJ2l0YWxpYycgICAgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvaXRhbGljLnN2ZycpLFxuICAnaW1hZ2UnICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9pbWFnZS5zdmcnKSxcbiAgJ2luZGVudCc6IHtcbiAgICAnKzEnICAgICAgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvaW5kZW50LnN2ZycpLFxuICAgICctMScgICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9vdXRkZW50LnN2ZycpXG4gIH0sXG4gICdsaW5rJyAgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2xpbmsuc3ZnJyksXG4gICdsaXN0Jzoge1xuICAgICdvcmRlcmVkJyA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9saXN0LW9yZGVyZWQuc3ZnJyksXG4gICAgJ2J1bGxldCcgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2xpc3QtYnVsbGV0LnN2ZycpLFxuICAgICdjaGVjaycgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9saXN0LWNoZWNrLnN2ZycpXG4gIH0sXG4gICdzY3JpcHQnOiB7XG4gICAgJ3N1YicgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL3N1YnNjcmlwdC5zdmcnKSxcbiAgICAnc3VwZXInICAgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvc3VwZXJzY3JpcHQuc3ZnJyksXG4gIH0sXG4gICdzdHJpa2UnICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL3N0cmlrZS5zdmcnKSxcbiAgJ3VuZGVybGluZScgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvdW5kZXJsaW5lLnN2ZycpLFxuICAndmlkZW8nICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy92aWRlby5zdmcnKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFncygpIHtcblx0aWYgKHRoaXMgIT0gbnVsbCAmJiB0aGlzICE9PSAkT2JqZWN0KHRoaXMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgZ2V0dGVyIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9ICcnO1xuXHRpZiAodGhpcy5nbG9iYWwpIHtcblx0XHRyZXN1bHQgKz0gJ2cnO1xuXHR9XG5cdGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcblx0XHRyZXN1bHQgKz0gJ2knO1xuXHR9XG5cdGlmICh0aGlzLm11bHRpbGluZSkge1xuXHRcdHJlc3VsdCArPSAnbSc7XG5cdH1cblx0aWYgKHRoaXMuZG90QWxsKSB7XG5cdFx0cmVzdWx0ICs9ICdzJztcblx0fVxuXHRpZiAodGhpcy51bmljb2RlKSB7XG5cdFx0cmVzdWx0ICs9ICd1Jztcblx0fVxuXHRpZiAodGhpcy5zdGlja3kpIHtcblx0XHRyZXN1bHQgKz0gJ3knO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgZmxhZ3NCb3VuZCA9IGNhbGxCaW5kKGltcGxlbWVudGF0aW9uKTtcblxuZGVmaW5lKGZsYWdzQm91bmQsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYWdzQm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICghc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdSZWdFeHAucHJvdG90eXBlLmZsYWdzIHJlcXVpcmVzIGEgdHJ1ZSBFUzUgZW52aXJvbm1lbnQgdGhhdCBzdXBwb3J0cyBwcm9wZXJ0eSBkZXNjcmlwdG9ycycpO1xuXHR9XG5cdGlmICgoL2EvbWlnKS5mbGFncyA9PT0gJ2dpbScpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9ICRnT1BEKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycpO1xuXHRcdGlmIChkZXNjcmlwdG9yICYmIHR5cGVvZiBkZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgKC9hLykuZG90QWxsID09PSAnYm9vbGVhbicpIHtcblx0XHRcdHJldHVybiBkZXNjcmlwdG9yLmdldDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgVHlwZUVyciA9IFR5cGVFcnJvcjtcbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciByZWdleCA9IC9hLztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRmxhZ3MoKSB7XG5cdGlmICghc3VwcG9ydHNEZXNjcmlwdG9ycyB8fCAhZ2V0UHJvdG8pIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycignUmVnRXhwLnByb3RvdHlwZS5mbGFncyByZXF1aXJlcyBhIHRydWUgRVM1IGVudmlyb25tZW50IHRoYXQgc3VwcG9ydHMgcHJvcGVydHkgZGVzY3JpcHRvcnMnKTtcblx0fVxuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHR2YXIgcHJvdG8gPSBnZXRQcm90byhyZWdleCk7XG5cdHZhciBkZXNjcmlwdG9yID0gZ09QRChwcm90bywgJ2ZsYWdzJyk7XG5cdGlmICghZGVzY3JpcHRvciB8fCBkZXNjcmlwdG9yLmdldCAhPT0gcG9seWZpbGwpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eShwcm90bywgJ2ZsYWdzJywge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRnZXQ6IHBvbHlmaWxsXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTVcXFwiIHgyPVxcXCIzXFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTRcXFwiIHgyPVxcXCI0XFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxMlxcXCIgeDI9XFxcIjZcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTVcXFwiIHgyPVxcXCIzXFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTVcXFwiIHgyPVxcXCIzXFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxNVxcXCIgeDI9XFxcIjNcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiM1xcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiM1xcXCIgeDI9XFxcIjEzXFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIzXFxcIiB4Mj1cXFwiOVxcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxNVxcXCIgeDI9XFxcIjNcXFwiIHkxPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxNVxcXCIgeDI9XFxcIjVcXFwiIHkxPVxcXCIxNFxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjE1XFxcIiB4Mj1cXFwiOVxcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxnIGNsYXNzPVxcXCJxbC1maWxsIHFsLWNvbG9yLWxhYmVsXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjYgNi44NjggNiA2IDUgNiA1IDcgNS45NDIgNyA2IDYuODY4XFxcIj48L3BvbHlnb24+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiNFxcXCIgeT1cXFwiNFxcXCI+PC9yZWN0Pjxwb2x5Z29uIHBvaW50cz1cXFwiNi44MTcgNSA2IDUgNiA2IDYuMzggNiA2LjgxNyA1XFxcIj48L3BvbHlnb24+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMlxcXCIgeT1cXFwiNlxcXCI+PC9yZWN0PjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjNcXFwiIHk9XFxcIjVcXFwiPjwvcmVjdD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCI0XFxcIiB5PVxcXCI3XFxcIj48L3JlY3Q+PHBvbHlnb24gcG9pbnRzPVxcXCI0IDExLjQzOSA0IDExIDMgMTEgMyAxMiAzLjc1NSAxMiA0IDExLjQzOVxcXCI+PC9wb2x5Z29uPjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjJcXFwiIHk9XFxcIjEyXFxcIj48L3JlY3Q+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMlxcXCIgeT1cXFwiOVxcXCI+PC9yZWN0PjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjJcXFwiIHk9XFxcIjE1XFxcIj48L3JlY3Q+PHBvbHlnb24gcG9pbnRzPVxcXCI0LjYzIDEwIDQgMTAgNCAxMSA0LjE5MiAxMSA0LjYzIDEwXFxcIj48L3BvbHlnb24+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiM1xcXCIgeT1cXFwiOFxcXCI+PC9yZWN0PjxwYXRoIGQ9XFxcIk0xMC44MzIsNC4yTDExLDQuNTgyVjRIMTAuNzA4QTEuOTQ4LDEuOTQ4LDAsMCwxLDEwLjgzMiw0LjJaXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTcsNC41ODJMNy4xNjgsNC4yQTEuOTI5LDEuOTI5LDAsMCwxLDcuMjkyLDRIN1Y0LjU4MlpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNOCwxM0g3LjY4M2wtMC4zNTEuOGExLjkzMywxLjkzMywwLDAsMS0uMTI0LjJIOFYxM1pcXFwiPjwvcGF0aD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxMlxcXCIgeT1cXFwiMlxcXCI+PC9yZWN0PjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjExXFxcIiB5PVxcXCIzXFxcIj48L3JlY3Q+PHBhdGggZD1cXFwiTTksM0g4VjMuMjgyQTEuOTg1LDEuOTg1LDAsMCwxLDksM1pcXFwiPjwvcGF0aD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIyXFxcIiB5PVxcXCIzXFxcIj48L3JlY3Q+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiNlxcXCIgeT1cXFwiMlxcXCI+PC9yZWN0PjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjNcXFwiIHk9XFxcIjJcXFwiPjwvcmVjdD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCI1XFxcIiB5PVxcXCIzXFxcIj48L3JlY3Q+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiOVxcXCIgeT1cXFwiMlxcXCI+PC9yZWN0PjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjE1XFxcIiB5PVxcXCIxNFxcXCI+PC9yZWN0Pjxwb2x5Z29uIHBvaW50cz1cXFwiMTMuNDQ3IDEwLjE3NCAxMy40NjkgMTAuMjI1IDEzLjQ3MiAxMC4yMzIgMTMuODA4IDExIDE0IDExIDE0IDEwIDEzLjM3IDEwIDEzLjQ0NyAxMC4xNzRcXFwiPjwvcG9seWdvbj48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxM1xcXCIgeT1cXFwiN1xcXCI+PC9yZWN0PjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjE1XFxcIiB5PVxcXCI1XFxcIj48L3JlY3Q+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTRcXFwiIHk9XFxcIjZcXFwiPjwvcmVjdD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxNVxcXCIgeT1cXFwiOFxcXCI+PC9yZWN0PjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjE0XFxcIiB5PVxcXCI5XFxcIj48L3JlY3Q+PHBhdGggZD1cXFwiTTMuNzc1LDE0SDN2MUg0VjE0LjMxNEExLjk3LDEuOTcsMCwwLDEsMy43NzUsMTRaXFxcIj48L3BhdGg+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTRcXFwiIHk9XFxcIjNcXFwiPjwvcmVjdD48cG9seWdvbiBwb2ludHM9XFxcIjEyIDYuODY4IDEyIDYgMTEuNjIgNiAxMiA2Ljg2OFxcXCI+PC9wb2x5Z29uPjxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjE1XFxcIiB5PVxcXCIyXFxcIj48L3JlY3Q+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTJcXFwiIHk9XFxcIjVcXFwiPjwvcmVjdD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxM1xcXCIgeT1cXFwiNFxcXCI+PC9yZWN0Pjxwb2x5Z29uIHBvaW50cz1cXFwiMTIuOTMzIDkgMTMgOSAxMyA4IDEyLjQ5NSA4IDEyLjkzMyA5XFxcIj48L3BvbHlnb24+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiOVxcXCIgeT1cXFwiMTRcXFwiPjwvcmVjdD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCI4XFxcIiB5PVxcXCIxNVxcXCI+PC9yZWN0PjxwYXRoIGQ9XFxcIk02LDE0LjkyNlYxNUg3VjE0LjMxNkExLjk5MywxLjk5MywwLDAsMSw2LDE0LjkyNlpcXFwiPjwvcGF0aD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCI1XFxcIiB5PVxcXCIxNVxcXCI+PC9yZWN0PjxwYXRoIGQ9XFxcIk0xMC42NjgsMTMuOEwxMC4zMTcsMTNIMTB2MWgwLjc5MkExLjk0NywxLjk0NywwLDAsMSwxMC42NjgsMTMuOFpcXFwiPjwvcGF0aD48cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxMVxcXCIgeT1cXFwiMTVcXFwiPjwvcmVjdD48cGF0aCBkPVxcXCJNMTQuMzMyLDEyLjJhMS45OSwxLjk5LDAsMCwxLC4xNjYuOEgxNVYxMkgxNC4yNDVaXFxcIj48L3BhdGg+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTRcXFwiIHk9XFxcIjE1XFxcIj48L3JlY3Q+PHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTVcXFwiIHk9XFxcIjExXFxcIj48L3JlY3Q+PC9nPjxwb2x5bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiBwb2ludHM9XFxcIjUuNSAxMyA5IDUgMTIuNSAxM1xcXCI+PC9wb2x5bGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTEuNjNcXFwiIHgyPVxcXCI2LjM4XFxcIiB5MT1cXFwiMTFcXFwiIHkyPVxcXCIxMVxcXCI+PC9saW5lPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48cmVjdCBjbGFzcz1cXFwicWwtZmlsbCBxbC1zdHJva2VcXFwiIGhlaWdodD1cXFwiM1xcXCIgd2lkdGg9XFxcIjNcXFwiIHg9XFxcIjRcXFwiIHk9XFxcIjVcXFwiPjwvcmVjdD48cmVjdCBjbGFzcz1cXFwicWwtZmlsbCBxbC1zdHJva2VcXFwiIGhlaWdodD1cXFwiM1xcXCIgd2lkdGg9XFxcIjNcXFwiIHg9XFxcIjExXFxcIiB5PVxcXCI1XFxcIj48L3JlY3Q+PHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtZmlsbCBxbC1zdHJva2VcXFwiIGQ9XFxcIk03LDhjMCw0LjAzMS0zLDUtMyw1XFxcIj48L3BhdGg+PHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtZmlsbCBxbC1zdHJva2VcXFwiIGQ9XFxcIk0xNCw4YzAsNC4wMzEtMyw1LTMsNVxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48cGF0aCBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiBkPVxcXCJNNSw0SDkuNUEyLjUsMi41LDAsMCwxLDEyLDYuNXYwQTIuNSwyLjUsMCwwLDEsOS41LDlINUEwLDAsMCwwLDEsNSw5VjRBMCwwLDAsMCwxLDUsNFpcXFwiPjwvcGF0aD48cGF0aCBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiBkPVxcXCJNNSw5aDUuNUEyLjUsMi41LDAsMCwxLDEzLDExLjV2MEEyLjUsMi41LDAsMCwxLDEwLjUsMTRINWEwLDAsMCwwLDEsMCwwVjlBMCwwLDAsMCwxLDUsOVpcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGNsYXNzIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjVcXFwiIHgyPVxcXCIxM1xcXCIgeTE9XFxcIjNcXFwiIHkyPVxcXCIzXFxcIj48L2xpbmU+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjZcXFwiIHgyPVxcXCI5LjM1XFxcIiB5MT1cXFwiMTJcXFwiIHkyPVxcXCIzXFxcIj48L2xpbmU+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjExXFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCIxMVxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjE1XFxcIiB4Mj1cXFwiMTFcXFwiIHkxPVxcXCIxMVxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+PHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMVxcXCIgcng9XFxcIjAuNVxcXCIgcnk9XFxcIjAuNVxcXCIgd2lkdGg9XFxcIjdcXFwiIHg9XFxcIjJcXFwiIHk9XFxcIjE0XFxcIj48L3JlY3Q+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxwb2x5bGluZSBjbGFzcz1cXFwicWwtZXZlbiBxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiNSA3IDMgOSA1IDExXFxcIj48L3BvbHlsaW5lPjxwb2x5bGluZSBjbGFzcz1cXFwicWwtZXZlbiBxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiMTMgNyAxNSA5IDEzIDExXFxcIj48L3BvbHlsaW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxMFxcXCIgeDI9XFxcIjhcXFwiIHkxPVxcXCI1XFxcIiB5Mj1cXFwiMTNcXFwiPjwvbGluZT48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+PGxpbmUgY2xhc3M9XFxcInFsLWNvbG9yLWxhYmVsIHFsLXN0cm9rZSBxbC10cmFuc3BhcmVudFxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjE1XFxcIiB5Mj1cXFwiMTVcXFwiPjwvbGluZT48cG9seWxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCI1LjUgMTEgOSAzIDEyLjUgMTFcXFwiPjwvcG9seWxpbmU+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjExLjYzXFxcIiB4Mj1cXFwiNi4zOFxcXCIgeTE9XFxcIjlcXFwiIHkyPVxcXCI5XFxcIj48L2xpbmU+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxwb2x5Z29uIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgcG9pbnRzPVxcXCIzIDExIDUgOSAzIDcgMyAxMVxcXCI+PC9wb2x5Z29uPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgeDE9XFxcIjE1XFxcIiB4Mj1cXFwiMTFcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTEsM2EzLDMsMCwwLDAsMCw2aDFWM0gxMVpcXFwiPjwvcGF0aD48cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgaGVpZ2h0PVxcXCIxMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjExXFxcIiB5PVxcXCI0XFxcIj48L3JlY3Q+PHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMTFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxM1xcXCIgeT1cXFwiNFxcXCI+PC9yZWN0Pjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48cG9seWdvbiBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLWZpbGxcXFwiIHBvaW50cz1cXFwiMTUgMTIgMTMgMTAgMTUgOCAxNSAxMlxcXCI+PC9wb2x5Z29uPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgeDE9XFxcIjlcXFwiIHgyPVxcXCI1XFxcIiB5MT1cXFwiNFxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT48cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTUsM0EzLDMsMCwwLDAsNSw5SDZWM0g1WlxcXCI+PC9wYXRoPjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjExXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiNVxcXCIgeT1cXFwiNFxcXCI+PC9yZWN0PjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjExXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiN1xcXCIgeT1cXFwiNFxcXCI+PC9yZWN0Pjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48cG9seWdvbiBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiBwb2ludHM9XFxcIjcgMTEgOSAxMyAxMSAxMSA3IDExXFxcIj48L3BvbHlnb24+PHBvbHlnb24gY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCI3IDcgOSA1IDExIDcgNyA3XFxcIj48L3BvbHlnb24+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTQsMTZINGExLDEsMCwwLDEsMC0ySDE0QTEsMSwwLDAsMSwxNCwxNlpcXFwiPjwvcGF0aD48cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTE0LDRINEExLDEsMCwwLDEsNCwySDE0QTEsMSwwLDAsMSwxNCw0WlxcXCI+PC9wYXRoPjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCI2XFxcIiB3aWR0aD1cXFwiMTJcXFwiIGhlaWdodD1cXFwiNlxcXCIgcng9XFxcIjFcXFwiIHJ5PVxcXCIxXFxcIj48L3JlY3Q+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTMsMTZINWExLDEsMCwwLDEsMC0yaDhBMSwxLDAsMCwxLDEzLDE2WlxcXCI+PC9wYXRoPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTMsNEg1QTEsMSwwLDAsMSw1LDJoOEExLDEsMCwwLDEsMTMsNFpcXFwiPjwvcGF0aD48cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgeD1cXFwiMlxcXCIgeT1cXFwiNlxcXCIgd2lkdGg9XFxcIjE0XFxcIiBoZWlnaHQ9XFxcIjZcXFwiIHJ4PVxcXCIxXFxcIiByeT1cXFwiMVxcXCI+PC9yZWN0Pjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTE1LDhIMTNhMSwxLDAsMCwxLDAtMmgyQTEsMSwwLDAsMSwxNSw4WlxcXCI+PC9wYXRoPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTUsMTJIMTNhMSwxLDAsMCwxLDAtMmgyQTEsMSwwLDAsMSwxNSwxMlpcXFwiPjwvcGF0aD48cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTE1LDE2SDVhMSwxLDAsMCwxLDAtMkgxNUExLDEsMCwwLDEsMTUsMTZaXFxcIj48L3BhdGg+PHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xNSw0SDVBMSwxLDAsMCwxLDUsMkgxNUExLDEsMCwwLDEsMTUsNFpcXFwiPjwvcGF0aD48cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgeD1cXFwiMlxcXCIgeT1cXFwiNlxcXCIgd2lkdGg9XFxcIjhcXFwiIGhlaWdodD1cXFwiNlxcXCIgcng9XFxcIjFcXFwiIHJ5PVxcXCIxXFxcIj48L3JlY3Q+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNNSw4SDNBMSwxLDAsMCwxLDMsNkg1QTEsMSwwLDAsMSw1LDhaXFxcIj48L3BhdGg+PHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk01LDEySDNhMSwxLDAsMCwxLDAtMkg1QTEsMSwwLDAsMSw1LDEyWlxcXCI+PC9wYXRoPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTMsMTZIM2ExLDEsMCwwLDEsMC0ySDEzQTEsMSwwLDAsMSwxMywxNlpcXFwiPjwvcGF0aD48cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTEzLDRIM0ExLDEsMCwwLDEsMywySDEzQTEsMSwwLDAsMSwxMyw0WlxcXCI+PC9wYXRoPjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiB4PVxcXCI4XFxcIiB5PVxcXCI2XFxcIiB3aWR0aD1cXFwiOFxcXCIgaGVpZ2h0PVxcXCI2XFxcIiByeD1cXFwiMVxcXCIgcnk9XFxcIjFcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDI0IDE4KSByb3RhdGUoLTE4MClcXFwiPjwvcmVjdD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+PHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xMS43NTksMi40ODJhMi41NjEsMi41NjEsMCwwLDAtMy41My42MDdBNy42NTYsNy42NTYsMCwwLDAsNi44LDYuMkM2LjEwOSw5LjE4OCw1LjI3NSwxNC42NzcsNC4xNSwxNC45MjdhMS41NDUsMS41NDUsMCwwLDAtMS4zLS45MzNBMC45MjIsMC45MjIsMCwwLDAsMiwxNS4wMzZTMS45NTQsMTYsNC4xMTksMTZzMy4wOTEtMi42OTEsMy43LTUuNTUzYzAuMTc3LS44MjYuMzYtMS43MjYsMC41NTQtMi42TDguNzc1LDYuMmMwLjM4MS0xLjQyMS44MDctMi41MjEsMS4zMDYtMi42NzZhMS4wMTQsMS4wMTQsMCwwLDAsMS4wMi41NkEwLjk2NiwwLjk2NiwwLDAsMCwxMS43NTksMi40ODJaXFxcIj48L3BhdGg+PHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMS42XFxcIiByeD1cXFwiMC44XFxcIiByeT1cXFwiMC44XFxcIiB3aWR0aD1cXFwiNVxcXCIgeD1cXFwiNS4xNVxcXCIgeT1cXFwiNi4yXFxcIj48L3JlY3Q+PHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xMy42NjMsMTIuMDI3YTEuNjYyLDEuNjYyLDAsMCwxLC4yNjYtMC4yNzZxMC4xOTMsMC4wNjkuNDU2LDAuMTM4YTIuMSwyLjEsMCwwLDAsLjUzNS4wNjksMS4wNzUsMS4wNzUsMCwwLDAsLjc2Ny0wLjMsMS4wNDQsMS4wNDQsMCwwLDAsLjMxNC0wLjgsMC44NCwwLjg0LDAsMCwwLS4yMzgtMC42MTksMC44LDAuOCwwLDAsMC0uNTk0LTAuMjM5LDEuMTU0LDEuMTU0LDAsMCwwLS43ODEuMyw0LjYwNyw0LjYwNywwLDAsMC0uNzgxLDFxLTAuMDkxLjE1LS4yMTgsMC4zNDZsLTAuMjQ2LjM4Yy0wLjA2OC0uMjg4LTAuMTM3LTAuNTgyLTAuMjEyLTAuODg1LTAuNDU5LTEuODQ3LTIuNDk0LS45ODQtMi45NDEtMC44LTAuNDgyLjItLjM1MywwLjY0Ny0wLjA5NCwwLjUyOWEwLjg2OSwwLjg2OSwwLDAsMSwxLjI4MS41ODVjMC4yMTcsMC43NTEuMzc3LDEuNDM2LDAuNTI3LDIuMDM4YTUuNjg4LDUuNjg4LDAsMCwxLS4zNjIuNDY3LDIuNjksMi42OSwwLDAsMS0uMjY0LjI3MXEtMC4yMjEtLjA4LTAuNDcxLTAuMTQ3YTIuMDI5LDIuMDI5LDAsMCwwLS41MjItMC4wNjYsMS4wNzksMS4wNzksMCwwLDAtLjc2OC4zQTEuMDU4LDEuMDU4LDAsMCwwLDksMTUuMTMxYTAuODIsMC44MiwwLDAsMCwuODMyLjg1MiwxLjEzNCwxLjEzNCwwLDAsMCwuNzg3LTAuMyw1LjExLDUuMTEsMCwwLDAsLjc3Ni0wLjk5M3EwLjE0MS0uMjE5LjIxNS0wLjM0YzAuMDQ2LS4wNzYuMTIyLTAuMTk0LDAuMjIzLTAuMzQ2YTIuNzg2LDIuNzg2LDAsMCwwLC45MTgsMS43MjYsMi41ODIsMi41ODIsMCwwLDAsMi4zNzYtLjE4NWMwLjMxNy0uMTgxLjIxMi0wLjU2NSwwLTAuNDk0QTAuODA3LDAuODA3LDAsMCwxLDE0LjE3NiwxNWE1LjE1OSw1LjE1OSwwLDAsMS0uOTEzLTIuNDQ2bDAsMFExMy40ODcsMTIuMjQsMTMuNjYzLDEyLjAyN1pcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdCb3g9XFxcIjAgMCAxOCAxOFxcXCI+PHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xNi43Mzk3NSwxMy44MTQ0NXYuNDM5NDVhLjU0MDg1LjU0MDg1LDAsMCwxLS42MDUuNjA1NDdIMTEuODU1YS41ODM5Mi41ODM5MiwwLDAsMS0uNjQ4OTMtLjYwNTQ3VjE0LjAxMjdjMC0yLjkwNTI3LDMuMzk5NDEtMy40MjE4NywzLjM5OTQxLTQuNTU0NjlhLjc3Njc1Ljc3Njc1LDAsMCwwLS44NDcxNy0uNzgxMjUsMS4xNzY4NCwxLjE3Njg0LDAsMCwwLS44MzU5NC4zODQ3N2MtLjI3NDkuMjYzNjctLjU2MS4zNzQtLjg1NzkxLjEzMTg0bC0uNDI5Mi0uMzQwODJjLS4zMDgxMS0uMjQyMTktLjM4NTI1LS41MTc1OC0uMTU0My0uODE0NDVhMi45NzE1NSwyLjk3MTU1LDAsMCwxLDIuNDUzNjEtMS4xNzY3NiwyLjQ1MzkzLDIuNDUzOTMsMCwwLDEsMi42ODQwOCwyLjQwOTE4YzAsMi40NTMxMi0zLjE3OTIsMi45MjY3Ni0zLjI3ODMyLDMuOTM4NDhoMi43OTQ0M0EuNTQwODUuNTQwODUsMCwwLDEsMTYuNzM5NzUsMTMuODE0NDVaTTksM0EuOTk5NzQuOTk5NzQsMCwwLDAsOCw0VjhIM1Y0QTEsMSwwLDAsMCwxLDRWMTRhMSwxLDAsMCwwLDIsMFYxMEg4djRhMSwxLDAsMCwwLDIsMFY0QS45OTk3NC45OTk3NCwwLDAsMCw5LDNaXFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMTggMThcXFwiPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTAsNFYxNGExLDEsMCwwLDEtMiwwVjEwSDN2NGExLDEsMCwwLDEtMiwwVjRBMSwxLDAsMCwxLDMsNFY4SDhWNGExLDEsMCwwLDEsMiwwWm02LjA2Nzg3LDkuMjA5SDE0Ljk4OTc1VjcuNTk4NjNhLjU0MDg1LjU0MDg1LDAsMCwwLS42MDUtLjYwNTQ3aC0uNjI3NDRhMS4wMTExOSwxLjAxMTE5LDAsMCwwLS43NDguMjk2ODhMMTEuNjQ1LDguNTY2NDFhLjU0MzUuNTQzNSwwLDAsMC0uMDIyLjg1ODRsLjI4NjEzLjMwNzYyYS41Mzg2MS41Mzg2MSwwLDAsMCwuODQ3MTcuMDMzMmwuMDk5MTItLjA4Nzg5YTEuMjEzNywxLjIxMzcsMCwwLDAsLjI0MTctLjM1MjU0aC4wMjI0NnMtLjAxMTIzLjMwODU5LS4wMTEyMy42MDU0N1YxMy4yMDlIMTIuMDQxYS41NDA4NS41NDA4NSwwLDAsMC0uNjA1LjYwNTQ3di40Mzk0NWEuNTQwODUuNTQwODUsMCwwLDAsLjYwNS42MDU0N2g0LjAyNjg2YS41NDA4NS41NDA4NSwwLDAsMCwuNjA1LS42MDU0N3YtLjQzOTQ1QS41NDA4NS41NDA4NSwwLDAsMCwxNi4wNjc4NywxMy4yMDlaXFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxyZWN0IGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIGhlaWdodD1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxMlxcXCIgeD1cXFwiM1xcXCIgeT1cXFwiNFxcXCI+PC9yZWN0PjxjaXJjbGUgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGN4PVxcXCI2XFxcIiBjeT1cXFwiN1xcXCIgcj1cXFwiMVxcXCI+PC9jaXJjbGU+PHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1ldmVuIHFsLWZpbGxcXFwiIHBvaW50cz1cXFwiNSAxMiA1IDExIDcgOSA4IDEwIDExIDcgMTMgOSAxMyAxMiA1IDEyXFxcIj48L3BvbHlsaW5lPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiM1xcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIzXFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI5XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPjxwb2x5bGluZSBjbGFzcz1cXFwicWwtZmlsbCBxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiMyA3IDMgMTEgNSA5IDMgN1xcXCI+PC9wb2x5bGluZT48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjdcXFwiIHgyPVxcXCIxM1xcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjVcXFwiIHgyPVxcXCIxMVxcXCIgeTE9XFxcIjE0XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiOFxcXCIgeDI9XFxcIjEwXFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI3XFxcIiB4Mj1cXFwiMTFcXFwiIHkxPVxcXCI3XFxcIiB5Mj1cXFwiMTFcXFwiPjwvbGluZT48cGF0aCBjbGFzcz1cXFwicWwtZXZlbiBxbC1zdHJva2VcXFwiIGQ9XFxcIk04LjksNC41NzdhMy40NzYsMy40NzYsMCwwLDEsLjM2LDQuNjc5QTMuNDc2LDMuNDc2LDAsMCwxLDQuNTc3LDguOUMzLjE4NSw3LjUsMi4wMzUsNi40LDQuMjE3LDQuMjE3UzcuNSwzLjE4NSw4LjksNC41NzdaXFxcIj48L3BhdGg+PHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtc3Ryb2tlXFxcIiBkPVxcXCJNMTMuNDIzLDkuMWEzLjQ3NiwzLjQ3NiwwLDAsMC00LjY3OS0uMzYsMy40NzYsMy40NzYsMCwwLDAsLjM2LDQuNjc5YzEuMzkyLDEuMzkyLDIuNSwyLjU0Miw0LjY3OS4zNlMxNC44MTUsMTAuNSwxMy40MjMsOS4xWlxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiNlxcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiNFxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiNlxcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiNlxcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIzXFxcIiB4Mj1cXFwiM1xcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIzXFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiM1xcXCIgeDI9XFxcIjNcXFwiIHkxPVxcXCIxNFxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI5XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPjxwb2x5bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiBwb2ludHM9XFxcIjMgNCA0IDUgNiAzXFxcIj48L3BvbHlsaW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI5XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCIxNFxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+PHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiMyAxNCA0IDE1IDYgMTNcXFwiPjwvcG9seWxpbmU+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjlcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjlcXFwiIHkyPVxcXCI5XFxcIj48L2xpbmU+PHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiMyA5IDQgMTAgNiA4XFxcIj48L3BvbHlsaW5lPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiN1xcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiNFxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiN1xcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiN1xcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPjxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtdGhpblxcXCIgeDE9XFxcIjIuNVxcXCIgeDI9XFxcIjQuNVxcXCIgeTE9XFxcIjUuNVxcXCIgeTI9XFxcIjUuNVxcXCI+PC9saW5lPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMy41LDZBMC41LDAuNSwwLDAsMSwzLDUuNVYzLjA4NWwtMC4yNzYuMTM4QTAuNSwwLjUsMCwwLDEsMi4wNTMsM2MtMC4xMjQtLjI0Ny0wLjAyMy0wLjMyNC4yMjQtMC40NDdsMS0uNUEwLjUsMC41LDAsMCwxLDQsMi41djNBMC41LDAuNSwwLDAsMSwzLjUsNlpcXFwiPjwvcGF0aD48cGF0aCBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIGQ9XFxcIk00LjUsMTAuNWgtMmMwLS4yMzQsMS44NS0xLjA3NiwxLjg1LTIuMjM0QTAuOTU5LDAuOTU5LDAsMCwwLDIuNSw4LjE1NlxcXCI+PC9wYXRoPjxwYXRoIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtdGhpblxcXCIgZD1cXFwiTTIuNSwxNC44NDZhMC45NTksMC45NTksMCwwLDAsMS44NS0uMTA5QTAuNywwLjcsMCwwLDAsMy43NSwxNGEwLjY4OCwwLjY4OCwwLDAsMCwuNi0wLjczNiwwLjk1OSwwLjk1OSwwLDAsMC0xLjg1LS4xMDlcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+PGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjE0XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiM1xcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiNFxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiOVxcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT48cG9seWxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCI1IDcgNSAxMSAzIDkgNSA3XFxcIj48L3BvbHlsaW5lPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIHgxPVxcXCIxNS41XFxcIiB4Mj1cXFwiMi41XFxcIiB5MT1cXFwiOC41XFxcIiB5Mj1cXFwiOS41XFxcIj48L2xpbmU+PHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk05LjAwNyw4QzYuNTQyLDcuNzkxLDYsNy41MTksNiw2LjUsNiw1Ljc5Miw3LjI4Myw1LDksNWMxLjU3MSwwLDIuNzY1LjY3OSwyLjk2OSwxLjMwOWExLDEsMCwwLDAsMS45LS42MTdDMTMuMzU2LDQuMTA2LDExLjM1NCwzLDksMyw2LjIsMyw0LDQuNTM4LDQsNi41YTMuMiwzLjIsMCwwLDAsLjUsMS44NDNaXFxcIj48L3BhdGg+PHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk04Ljk4NCwxMEMxMS40NTcsMTAuMjA4LDEyLDEwLjQ3OSwxMiwxMS41YzAsMC43MDgtMS4yODMsMS41LTMsMS41LTEuNTcxLDAtMi43NjUtLjY3OS0yLjk2OS0xLjMwOWExLDEsMCwxLDAtMS45LjYxN0M0LjY0NCwxMy44OTQsNi42NDYsMTUsOSwxNWMyLjgsMCw1LTEuNTM4LDUtMy41YTMuMiwzLjIsMCwwLDAtLjUtMS44NDNaXFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTUuNSwxNUgxMy44NjFhMy44NTgsMy44NTgsMCwwLDAsMS45MTQtMi45NzUsMS44LDEuOCwwLDAsMC0xLjYtMS43NTFBMS45MjEsMS45MjEsMCwwLDAsMTIuMDIxLDExLjdhMC41MDAxMywwLjUwMDEzLDAsMSwwLC45NTcuMjkxaDBhMC45MTQsMC45MTQsMCwwLDEsMS4wNTMtLjcyNSwwLjgxLDAuODEsMCwwLDEsLjc0NC43NjJjMCwxLjA3Ni0xLjE2OTcxLDEuODY5ODItMS45Mzk3MSwyLjQzMDgyQTEuNDU2MzksMS40NTYzOSwwLDAsMCwxMiwxNS41YTAuNSwwLjUsMCwwLDAsLjUuNWgzQTAuNSwwLjUsMCwwLDAsMTUuNSwxNVpcXFwiPjwvcGF0aD48cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTkuNjUsNS4yNDFhMSwxLDAsMCwwLTEuNDA5LjEwOEw2LDcuOTY0LDMuNzU5LDUuMzQ5QTEsMSwwLDAsMCwyLjE5Miw2LjU5MTc4UTIuMjE1NDEsNi42MjEzLDIuMjQxLDYuNjQ5TDQuNjg0LDkuNSwyLjI0MSwxMi4zNUExLDEsMCwwLDAsMy43MSwxMy43MDcyMnEwLjAyNTU3LS4wMjc2OC4wNDktMC4wNTcyMkw2LDExLjAzNiw4LjI0MSwxMy42NWExLDEsMCwxLDAsMS41NjctMS4yNDI3N1E5Ljc4NDU5LDEyLjM3NzcsOS43NTksMTIuMzVMNy4zMTYsOS41LDkuNzU5LDYuNjUxQTEsMSwwLDAsMCw5LjY1LDUuMjQxWlxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj48cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTE1LjUsN0gxMy44NjFhNC4wMTUsNC4wMTUsMCwwLDAsMS45MTQtMi45NzUsMS44LDEuOCwwLDAsMC0xLjYtMS43NTFBMS45MjIsMS45MjIsMCwwLDAsMTIuMDIxLDMuN2EwLjUsMC41LDAsMSwwLC45NTcuMjkxLDAuOTE3LDAuOTE3LDAsMCwxLDEuMDUzLS43MjUsMC44MSwwLjgxLDAsMCwxLC43NDQuNzYyYzAsMS4wNzctMS4xNjQsMS45MjUtMS45MzQsMi40ODZBMS40MjMsMS40MjMsMCwwLDAsMTIsNy41YTAuNSwwLjUsMCwwLDAsLjUuNWgzQTAuNSwwLjUsMCwwLDAsMTUuNSw3WlxcXCI+PC9wYXRoPjxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNOS42NTEsNS4yNDFhMSwxLDAsMCwwLTEuNDEuMTA4TDYsNy45NjQsMy43NTksNS4zNDlhMSwxLDAsMSwwLTEuNTE5LDEuM0w0LjY4Myw5LjUsMi4yNDEsMTIuMzVhMSwxLDAsMSwwLDEuNTE5LDEuM0w2LDExLjAzNiw4LjI0MSwxMy42NWExLDEsMCwwLDAsMS41MTktMS4zTDcuMzE3LDkuNSw5Ljc1OSw2LjY1MUExLDEsMCwwLDAsOS42NTEsNS4yNDFaXFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPjxwYXRoIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIGQ9XFxcIk01LDNWOWE0LjAxMiw0LjAxMiwwLDAsMCw0LDRIOWE0LjAxMiw0LjAxMiwwLDAsMCw0LTRWM1xcXCI+PC9wYXRoPjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHJ4PVxcXCIwLjVcXFwiIHJ5PVxcXCIwLjVcXFwiIHdpZHRoPVxcXCIxMlxcXCIgeD1cXFwiM1xcXCIgeT1cXFwiMTVcXFwiPjwvcmVjdD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+PHJlY3QgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgaGVpZ2h0PVxcXCIxMlxcXCIgd2lkdGg9XFxcIjEyXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCIzXFxcIj48L3JlY3Q+PHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMTJcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCI1XFxcIiB5PVxcXCIzXFxcIj48L3JlY3Q+PHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMTJcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxMlxcXCIgeT1cXFwiM1xcXCI+PC9yZWN0PjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjJcXFwiIHdpZHRoPVxcXCI4XFxcIiB4PVxcXCI1XFxcIiB5PVxcXCI4XFxcIj48L3JlY3Q+PHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjNcXFwiIHg9XFxcIjNcXFwiIHk9XFxcIjVcXFwiPjwvcmVjdD48cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiM1xcXCIgeD1cXFwiM1xcXCIgeT1cXFwiN1xcXCI+PC9yZWN0PjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCIxMFxcXCI+PC9yZWN0PjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCIxMlxcXCI+PC9yZWN0PjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIxMlxcXCIgeT1cXFwiNVxcXCI+PC9yZWN0PjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIxMlxcXCIgeT1cXFwiN1xcXCI+PC9yZWN0PjxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIxMlxcXCIgeT1cXFwiMTBcXFwiPjwvcmVjdD48cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiM1xcXCIgeD1cXFwiMTJcXFwiIHk9XFxcIjEyXFxcIj48L3JlY3Q+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA5NDIgNTU5LjlcXFwiPjxjaXJjbGUgY3g9XFxcIjc0OVxcXCIgY3k9XFxcIjEyNS41XFxcIiByPVxcXCIyNS43XFxcIiBjbGFzcz1cXFwibG9nb1xcXCI+PC9jaXJjbGU+PHBhdGggZD1cXFwiTTY0My4zIDIxMS41YzAgMjEuMiAwIDc2LjUgMCA5MS44IDAgMTkuNS0zLjUgOTAuOS03Ni4xIDkwLjktNzUuOSAwLTc0LjMtNzEuMy03NC4zLTk4LjggMC0yMy40IDAtNzAuNCAwLTgzLjhoLTM5djk0LjFzLTguMSAxMjguNSAxMTEuMyAxMjguNWMxMTkuNCAwIDExNS40LTEyNC41IDExNS40LTEyNC41di05OC4yaC0zNy4zek04MTYuNSA0NS4ySDg1NXYzNzguNWgtMzguNXpNNTA0IDQ3Mi43Yy03OS40IDAtMTk0LjktMTItMjY4LjMtMTIuOC0xMi4yIDAtMjMgMS41LTMyLjYgMy45bDEzLTExLjZjMTQuMy0xMi45IDM3LjYtMjAuOSA0My40LTIyIDk0LjQtMTguNiAxNjQuOC05My43IDE2NC44LTIxMi44QzQyNC4zIDgzLjIgMzI5LjMgMCAyMTIuMSAwUzAgNzYuOSAwIDIxNy4zYzAgMTI2LjggODQuOSAyMDggMTkzLjEgMjE2LjUgMCAwIDUuNy4xIDYuNCAzLjYuNiAzLjEtNC44IDcuNi00LjggNy42bC02NC40IDU5LjYgMTIuNCAxMy40IDIzLjgtMjEuM2MxMy4zLTEwLjYgMzUuMS0yMy42IDYyLjEtMjMuNiA4OS4zIDAgMTg4LjIgODkuMSAyODAuMSA4Ni45IDEzNC40LTMuMiAxNjUuNy05MyAxNjkuMS0xMDQuNi4yLS40LTU1LjYgMTcuMy0xNzMuOCAxNy4zek0zOS40IDIxNy4zYzAtMTE0LjMgNzcuMy0xNzcgMTcyLjgtMTc3IDk1LjQgMCAxNzIuOCA2Ny43IDE3Mi44IDE3NyAwIDExMi42LTc3LjMgMTc3LTE3Mi44IDE3Ny05NS41LS4xLTE3Mi44LTY3LjgtMTcyLjgtMTc3ek05MDMuNSA0NS4ySDk0MnYzNzguNWgtMzguNXpNNzI5LjUgMjExLjFINzY4djIxMi41aC0zOC41elxcXCIgY2xhc3M9XFxcImxvZ29cXFwiPjwvcGF0aD48L3N2Zz5cIiIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSB3aW5kb3c7IiwiaW1wb3J0ICB7IG14V2luZG93LCBteFV0aWxzLCBteFJlc291cmNlcywgbXhTaGFwZSwgbXhDZWxsLCBteEV2ZW50LCBteEdlb21ldHJ5IH0gZnJvbSBcIm14Z3JhcGhcIjtcbmltcG9ydCAqIGFzIG1lcmdlIGZyb20gJ2RlZXBtZXJnZSdcblxuLyoqIERlZmF1bHQgb3B0aW9ucyBmb3IgZWRpdG9yICovXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VFZGl0b3JPcHRpb25zIHtcbiAgICAvKiogVGhlIG5hbWUgb2YgYXR0cmlidXRlIHRvIGNvbnNpZGVyICovXG4gICAgYXR0cmlidXRlTmFtZTogc3RyaW5nXG5cbiAgICAvKiogV2VpdGhlciB0aGUgZWRpdG9yIHNob3VsZCByZWFjdCBvbiBkb3VibGUgY2xpYyBvciBub3QgKGRlZmF1bHQ6IGZhbHNlKSAqL1xuICAgIGlnbm9yZURvdWJsZUNsaWM/OiBib29sZWFuXG5cbiAgICAvKiogSWYgZGVmaW5lZCBhbmQgbm90IGVtcHR5LCBhZGRzIGEgbWVudSB3aXRoIHRoaXMgdGl0bGUgdG8gZWRpdCB0aGUgaXRlbSAqL1xuICAgIGNvbnRleHR1YWw/OiBzdHJpbmdcblxuICAgIC8qKiBFZGl0IHdpbmRvdyB0aXRsZSAqL1xuICAgIHRpdGxlPzogc3RyaW5nXG5cbiAgICAvKiogRGVmaW5lIHRoZSB3YXkgdG8gZGlzcGxheSBpdGVtIDsgc3VwcG9ydGVkXG4gICAgICogICAtIFwic2hhcGVcIiA6IGRvZXMgbm90IGFmZmVjdCB0aGUgd2F5IHRoZSBzaGFwZSBpcyBkaXNwbGF5ZWRcbiAgICAgKi9cbiAgICBkaXNwbGF5PzogXCJzaGFwZVwiXG5cbiAgICAvKiogRGVmaW5lIHRoZSBwYWxldHRlIGl0ZW1zICovXG4gICAgcGFsZXR0ZUl0ZW1zPzogQmFzZUVkaXRvclBhbGV0dGVJdGVtW11cblxuICAgIC8qKiBFeHRyYSBjb25maWcgb2YgdGhlIGNvbXBvbmVudHMgKHBsdWdpbiBpbnRlcm5hbHMgZGVwZW5kYW50KVxuICAgICovXG4gICAgY29uZmlnPzogYW55O1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUVkaXRvclBhbGV0dGVJdGVtIHtcblxuICAvKiogVGhlIHBhbGV0dGUgdG8gaW5sdWRlIHRoZSBwYWxldHRlIGl0ZW0gaW4uIFxuICAgICogIFRoZSBwYWxldHRlIHdpbGwgYmUgc2VhcmNoIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUuIFxuICAgICogIElmIG5vdCBmb3VuZCwgd2lsbCBiZSBjcmVhdGVkLCB3aXRoIHRoZSBsYWJlbCBpZiBwcm92aWRlZCBvciB3aXRoIHRoZSBuYW1lIGlmIG5vdC5cbiAgICAqL1xuICBwYWxldHRlOiBzdHJpbmcgfCB7IG5hbWU6IHN0cmluZywgbGFiZWw6IHN0cmluZ31cblxuICAvKiogVGhlIG5hbWUgb2YgdGhlIHBhbGV0dGUgaXRlbSAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBsYWJlbCBvZiB0aGUgcGFsZXR0ZSBpdGVtICovXG4gIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKiBUaGUgd2lkdGggb2YgdGhlIHBhbGV0dGUgaXRlbSAqL1xuICB3aWR0aD86IG51bWJlcjtcblxuICAvKiogVGhlIGhlaWdodCBvZiB0aGUgcGFsZXR0ZSBpdGVtICovXG4gIGhlaWdodD86IG51bWJlcjtcblxuICAvKiogVGhlIGRhdGEgb2YgdGhlIHBhbGV0dGUgaXRlbS5cbiAgICAqICBEYXRhIGNyZWF0ZWQgd2l0aCBwYXN0aW5nIHRoZSBjb3BpZWQgaXRlbSBpbiBodHRwczovL2pncmFwaC5naXRodWIuaW8vZHJhd2lvLXRvb2xzL3Rvb2xzL2NvbnZlcnQuaHRtbFxuICAgICogICBhbmQgVVJMIERlY29kZSB0aGVuIEVuY29kZS5cbiAgICAqICBXaGVuIGRhdGEgaXMgdXNlZCwgYW55IG90aGVyIGF0dHJpYnV0ZSBiZWxvdyBpcyBpZ25vcmVkLlxuICAgICovXG4gIGRhdGE/OiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBkYXRhIG9mIHRoZSBpY29uIHRvIGRpc3BsYXkgKi9cbiAgaWNvbj86IHN0cmluZztcblxuICAvKiogVGhlIHRleHQgaW5jbHVkZWQgaW4gdGhlIHBhbGV0dGUgaXRlbSAqL1xuICB0ZXh0Pzogc3RyaW5nO1xuXG4gIC8qKiBUaGUgc3R5bGUgdG8gYmUgYXBwZW5kZWQgdG8gdGhlIHBhbGV0dGUgaXRlbSAqL1xuICBzdHlsZT86IHN0cmluZztcblxuICAvKiogVGhlIG5vZGUgZGVmaW5pdGlvbiBpbiB0aGUgcGFsZXR0ZSBpdGVtICh0aGUgWE1MIHdpbGwgYmUgcGFyc2VkKS4gXG4gICAgKiAgU2hvdWxkIGluY2x1ZGUgdGhlIGF0dHJpYnV0ZU5hbWUuXG4gICAgKiAgSWYgbm9uZSBwcm92aWRlZCwgYSBub2RlIHdpdGggYXR0cmlidXRlTmFtZSBkZWZpbmVkIHdpbGwgYmUgY3JlYXRlZC5cbiAgICAqL1xuICBub2RlPzogc3RyaW5nO1xuXG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlRWRpdG9yIHtcblxuICBlZGl0b3JVaTogYW55O1xuICBuYW1lOiBzdHJpbmc7XG4gIG9wdGlvbnM6IEJhc2VFZGl0b3JPcHRpb25zO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgb3B0aW9ucyA6IEJhc2VFZGl0b3JPcHRpb25zKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgbGV0IG1lID0gdGhpcztcbiAgICAvL0B0cy1pZ25vcmVcbiAgICBEcmF3LmxvYWRQbHVnaW4oZnVuY3Rpb24gKGVkaXRvclVpOiBhbnkpIHtcbiAgICAgIG1lLmRlY2xhcmVVaUZ1bmN0aW9ucyhlZGl0b3JVaSk7XG4gICAgfSlcblxuICB9XG5cbiAgZGVjbGFyZVVpRnVuY3Rpb25zKGVkaXRvclVpOiBhbnkpIHtcbiAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgdGhpcy5lZGl0b3JVaSA9IGVkaXRvclVpO1xuXG4gICAgLy8gSGFuZGxlIG9wdGlvbnNcblxuICAgIGNvbnN0IG92ZXJ3cml0ZU1lcmdlID0gKGRlc3RpbmF0aW9uQXJyYXksIHNvdXJjZUFycmF5LCBvcHRpb25zKSA9PiBzb3VyY2VBcnJheVxuICAgIC8vIERlZmF1bHQgb3B0aW9ucyBhcmUgcHJvdmlkZWQgYnkgdGhlIHBsdWdpblxuICAgIGxldCBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgICAvLyBUaGVuIGFwcGx5IG9wdGlvbnMgb2YgZGVmYXVsdEVkaXRvcnNDb25maWcgaWYgYW55IChkZWZpbmUgaXQgaW4gUHJlQ29uZmlnLmpzKVxuICAgIC8vQHRzLWlnbm9yZVxuICAgIGxldCBkZWZhdWx0RWRpdG9yc0NvbmZpZyA9IHdpbmRvdy5FZGl0b3JVaS5kZWZhdWx0RWRpdG9yc0NvbmZpZztcbiAgICBpZiAoZGVmYXVsdEVkaXRvcnNDb25maWcgJiYgZGVmYXVsdEVkaXRvcnNDb25maWdbdGhpcy5uYW1lXSkge1xuICAgICAgb3B0aW9ucyA9IG1lcmdlKG9wdGlvbnMsIGRlZmF1bHRFZGl0b3JzQ29uZmlnW3RoaXMubmFtZV0sIHsgYXJyYXlNZXJnZTogb3ZlcndyaXRlTWVyZ2UgfSlcbiAgICB9XG5cbiAgICAvLyBUaGVuIGFwcGx5IG9wdGlvbnMgb2YgbG9jYWwgdXNlclxuICAgIC8vQHRzLWlnbm9yZVxuICAgIGxldCB1c2VyQ29uZmlnID0gd2luZG93LkVkaXRvci5jb25maWc7XG4gICAgaWYgKHVzZXJDb25maWcgJiYgdXNlckNvbmZpZy5kZWZhdWx0RWRpdG9yc0NvbmZpZyAmJiB1c2VyQ29uZmlnLmRlZmF1bHRFZGl0b3JzQ29uZmlnW3RoaXMubmFtZV0pIHtcbiAgICAgIG9wdGlvbnMgPSBtZXJnZShvcHRpb25zLCB1c2VyQ29uZmlnLmRlZmF1bHRFZGl0b3JzQ29uZmlnW3RoaXMubmFtZV0sIHsgYXJyYXlNZXJnZTogb3ZlcndyaXRlTWVyZ2UgfSlcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMudGl0bGUgfHwgb3B0aW9ucy50aXRsZS5sZW5ndGggPT0gMCkgeyBvcHRpb25zLnRpdGxlID0gXCJFZGl0b3JcIiB9XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgZnVuY3Rpb24gc2hvd0RpYWxvZ0NlbGwoY2VsbDogbXhDZWxsKSB7XG4gICAgICB2YXIgc2hhcGUgPSBlZGl0b3JVaS5lZGl0b3IuZ3JhcGgudmlldy5zdGF0ZXNbXCJtYXBcIl1bY2VsbC5teE9iamVjdElkXS5zaGFwZTtcbiAgICAgIGlmIChzaGFwZSkge1xuICAgICAgICBtZS5zaG93RGlhbG9nKGVkaXRvclVpLCBzaGFwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRG91YmxlIGNsaWNcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVEb3VibGVDbGljKSB7XG4gICAgICBlZGl0b3JVaS5lZGl0b3IuZ3JhcGguYWRkTGlzdGVuZXIobXhFdmVudC5ET1VCTEVfQ0xJQ0ssIGZ1bmN0aW9uIChzZW5kZXIsIGV2dCkge1xuICAgICAgICB2YXIgY2VsbCA9IGV2dC5nZXRQcm9wZXJ0eShcImNlbGxcIik7XG4gICAgICAgIGlmIChtZS5pc0NlbGxIYW5kbGVkKGNlbGwpKSB7IFxuICAgICAgICAgIGV2dC5jb25zdW1lKCk7XG4gICAgICAgICAgc2hvd0RpYWxvZ0NlbGwoY2VsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENvbnRleHR1YWxcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRleHR1YWwgJiYgKHRoaXMub3B0aW9ucy5jb250ZXh0dWFsLmxlbmd0aCA+IDApKSB7XG4gICAgICBsZXQgcHJldlBvcHVwTWV0aG9kID0gZWRpdG9yVWkuZWRpdG9yLmdyYXBoLnBvcHVwTWVudUhhbmRsZXIuZmFjdG9yeU1ldGhvZDtcbiAgICAgIGVkaXRvclVpLmVkaXRvci5ncmFwaC5wb3B1cE1lbnVIYW5kbGVyLmZhY3RvcnlNZXRob2QgPSBmdW5jdGlvbihtZW51LCBjZWxsLCBldnQpXG4gICAgICB7IFxuICAgICAgICBwcmV2UG9wdXBNZXRob2QobWVudSwgY2VsbCwgZXZ0KTtcbiAgICAgICAgaWYobWUuaXNDZWxsSGFuZGxlZChjZWxsKSkge1xuICAgICAgICAgIG1lbnUuYWRkSXRlbShtZS5vcHRpb25zLmNvbnRleHR1YWwsIG51bGwsIGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgIHNob3dEaWFsb2dDZWxsKGNlbGwpO1xuICAgICAgICAgIH0pXG4gICAgICB9fVxuICAgIH1cblxuICAgIC8vIFBhbGV0dGUgSXRlbXNcbiAgICBmb3IobGV0IGl0ZW0gb2YgdGhpcy5vcHRpb25zLnBhbGV0dGVJdGVtcykge1xuXG4gICAgICBsZXQgcGFsZXR0ZU5hbWUgPSAodHlwZW9mIGl0ZW0ucGFsZXR0ZSA9PSBcInN0cmluZ1wiKSA/IGl0ZW0ucGFsZXR0ZSA6IGl0ZW0ucGFsZXR0ZS5uYW1lO1xuICAgICAgbGV0IHBhbGV0dGVMYWJlbCA9ICh0eXBlb2YgaXRlbS5wYWxldHRlID09IFwic3RyaW5nXCIpID8gaXRlbS5wYWxldHRlIDogaXRlbS5wYWxldHRlLmxhYmVsO1xuXG4gICAgICAvLyBEZWZhdWx0c1xuICAgICAgdGhpcy5zZXREZWZhdWx0c1BhbGV0dGVJdGVtKGl0ZW0pO1xuXG4gICAgICAvLyBJZiB0aGUgcGFsZXR0ZSBkb2VzIG5vdCBleGlzdHMsIGNyZWF0ZSBpdCAgICAgIFxuICAgICAgaWYgKCEgZWRpdG9yVWkuc2lkZWJhci5wYWxldHRlc1twYWxldHRlTmFtZV0pIHtcbiAgICAgICAgZWRpdG9yVWkuc2lkZWJhci5hZGRQYWxldHRlRnVuY3Rpb25zKHBhbGV0dGVOYW1lLCBwYWxldHRlTGFiZWwsIHRydWUsIFtdKVxuICAgICAgfVxuXG4gICAgICAvLyBBZGQgaXRlbSB0byBwYWxldHRlXG4gICAgICBsZXQgcGFsZXR0ZSA9IGVkaXRvclVpLnNpZGViYXIucGFsZXR0ZXNbcGFsZXR0ZU5hbWVdWzFdO1xuXG4gICAgICBpZiAoaXRlbS5kYXRhKSB7XG4gICAgICAgIGxldCBpdGVtZWx0ID0gZWRpdG9yVWkuc2lkZWJhci5hZGREYXRhRW50cnkoaXRlbS5uYW1lLCBpdGVtLndpZHRoLCBpdGVtLmhlaWdodCwgaXRlbS5sYWJlbCwgaXRlbS5kYXRhKTtcbiAgICAgICAgaWYgKChwYWxldHRlKSAmJiAocGFsZXR0ZS5maXJzdENoaWxkKSkgcGFsZXR0ZS5maXJzdENoaWxkLmFwcGVuZENoaWxkKGl0ZW1lbHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgbGV0IG5vZGUgPSAgbXhVdGlscy5wYXJzZVhtbChpdGVtLm5vZGUpLmdldFJvb3ROb2RlKCkuZmlyc3RDaGlsZDtcbiAgICAgICAgIC8vIGlmICghbm9kZSkgeyBsZXQgZG9jID0gbXhVdGlscy5jcmVhdGVYbWxEb2N1bWVudCgpOyBub2RlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2VkaXRvcicpIH1cbiAgICAgICAgIGxldCBjZWxsID0gbmV3IG14Q2VsbChub2RlLCBuZXcgbXhHZW9tZXRyeSgwLCAwLCBpdGVtLndpZHRoLCBpdGVtLmhlaWdodCksIFwic2hhcGU9aW1hZ2U7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTtsYWJlbEJhY2tncm91bmRDb2xvcj0jZmZmZmZmO3ZlcnRpY2FsQWxpZ249dG9wO2FzcGVjdD1maXhlZDtpbWFnZUFzcGVjdD0wO2ltYWdlPWRhdGE6XCIraXRlbS5pY29uK1wiO1wiK2l0ZW0uc3R5bGUpO1xuICAgICAgICAgY2VsbC52ZXJ0ZXggPSB0cnVlO1xuICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUobWUub3B0aW9ucy5hdHRyaWJ1dGVOYW1lLCBpdGVtLnRleHQpO1xuICAgICAgICAgbGV0IGl0ZW1lbHQgPSBlZGl0b3JVaS5zaWRlYmFyLmNyZWF0ZVZlcnRleFRlbXBsYXRlRnJvbUNlbGxzKFtjZWxsXSwgaXRlbS53aWR0aCwgaXRlbS5oZWlnaHQsIGl0ZW0ubGFiZWwsIHRydWUsIHRydWUpXG4gICAgICAgICBpZiAoKHBhbGV0dGUpICYmIChwYWxldHRlLmZpcnN0Q2hpbGQpKSBwYWxldHRlLmZpcnN0Q2hpbGQuYXBwZW5kQ2hpbGQoaXRlbWVsdClcbiAgICAgIH1cblxuICAgIH1cblxuICB9XG5cbiAgc2V0RGVmYXVsdHNQYWxldHRlSXRlbShpdGVtOiBCYXNlRWRpdG9yUGFsZXR0ZUl0ZW0pIHtcbiAgICAgIGlmICghaXRlbS5sYWJlbCkgIGl0ZW0ubGFiZWwgPSBpdGVtLm5hbWVcbiAgICAgIGlmICghaXRlbS53aWR0aCkgIGl0ZW0ud2lkdGggPSA1MFxuICAgICAgaWYgKCFpdGVtLmhlaWdodCkgaXRlbS5oZWlnaHQgPSA1MFxuXG4gICAgICBpZiAoIWl0ZW0uaWNvbiAmJiAhaXRlbS5kYXRhKSBpdGVtLmljb24gPSBcImltYWdlL3N2Zyt4bWwsXCIrYnRvYSgnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA4MCA4MFwiPjxyZWN0IHg9XCIyMFwiIHk9XCIyMFwiIHdpZHRoPVwiNDBcIiBoZWlnaHQ9XCI0MFwiLz48L3N2Zz4nKVxuICAgICAgaWYgKCFpdGVtLnN0eWxlICYmICFpdGVtLmRhdGEpIGl0ZW0uc3R5bGUgPSBcIlwiXG4gICAgICBpZiAoIWl0ZW0ubm9kZSAmJiAhaXRlbS5kYXRhKSBpdGVtLm5vZGUgPSBcIjxlZGl0b3IgLz5cIlxuICAgICAgaWYgKCFpdGVtLnRleHQgJiYgIWl0ZW0uZGF0YSkgaXRlbS50ZXh0ID0gXCIgXCJcbiAgfVxuXG4gIGlzQ2VsbEhhbmRsZWQoY2VsbDogbXhDZWxsKSB7XG4gICAgaWYgKCFjZWxsKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIC8vQHRzLWlnbm9yZSBpc05vZGUgZG9lcyBub3QgcmVxdWlyZSBub2RlIG5hbWVcbiAgICBpZiAobXhVdGlscy5pc05vZGUoY2VsbC52YWx1ZSkpIHtcbiAgICAgIGlmIChjZWxsLmdldEF0dHJpYnV0ZSh0aGlzLm9wdGlvbnMuYXR0cmlidXRlTmFtZSwgJycpICE9ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgXG4gIHNob3dEaWFsb2coZWRpdG9yVWk6IGFueSwgc2hhcGU6IG14U2hhcGUpIHtcbiAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgLy8gTWFpbiBlbGVtZW50XG4gICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJkaXNwbGF5OiBmbGV4OyBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyBoZWlnaHQ6IGluaGVyaXQ7XCI7XG4gICAgZGl2LmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgaWQ9XCJlZGl0b3JfJHttZS5uYW1lfV9kaXZcIiBzdHlsZT1cImZsZXg6IDE7IC8qdGV4dC1hbGlnbjogY2VudGVyOyovICBvdmVyZmxvdy15OiBzY3JvbGw7XCI+PC9kaXY+XG4gICAgICA8ZGl2IGlkPVwicGx1Z2luX2VkaXRvcl8ke21lLm5hbWV9X2J1dHRvbnNcIiBzdHlsZT1cImZsZXg6IGluaXRpYWw7IHRleHQtYWxpZ246IHJpZ2h0OyBhbGlnbi1zZWxmOiBmbGV4LWVuZDsgcGFkZGluZzogOHB4O1wiPjwvZGl2PlxuICAgICAgYDtcblxuICAgIGxldCBidXR0b25zID0gZGl2LnF1ZXJ5U2VsZWN0b3IoYCNwbHVnaW5fZWRpdG9yXyR7bWUubmFtZX1fYnV0dG9uc2ApO1xuXG4gICAgLy8gQ3JlYXRlIG14V2luZG93XG4gICAgbGV0IHdpbl93aWR0aCA9IDgwMDtcbiAgICBsZXQgd2luX2hlaWdodCA9IDY0MDtcbiAgICBpZiAoZWRpdG9yVWkuZGlhZ3JhbUNvbnRhaW5lci5jbGllbnRXaWR0aCA8IHdpbl93aWR0aCkgd2luX3dpZHRoID0gZWRpdG9yVWkuZGlhZ3JhbUNvbnRhaW5lci5jbGllbnRXaWR0aCAtIDIwO1xuICAgIGlmIChlZGl0b3JVaS5kaWFncmFtQ29udGFpbmVyLmNsaWVudEhlaWdodCA8IHdpbl9oZWlnaHQpIHdpbl9oZWlnaHQgPSBlZGl0b3JVaS5kaWFncmFtQ29udGFpbmVyLmNsaWVudEhlaWdodCAtIDIwO1xuXG4gICAgdmFyIHdpbiA9IG5ldyBteFdpbmRvdyh0aGlzLm9wdGlvbnMudGl0bGUsIGRpdiwgXG4gICAgICAoZWRpdG9yVWkuZGlhZ3JhbUNvbnRhaW5lci5jbGllbnRXaWR0aCAtIHdpbl93aWR0aCkgLyAyICsgZWRpdG9yVWkuZGlhZ3JhbUNvbnRhaW5lci5vZmZzZXRMZWZ0LCBcbiAgICAgIChlZGl0b3JVaS5kaWFncmFtQ29udGFpbmVyLmNsaWVudEhlaWdodCAtIHdpbl9oZWlnaHQpIC8gMiArIGVkaXRvclVpLmRpYWdyYW1Db250YWluZXIub2Zmc2V0VG9wLCBcbiAgICAgIHdpbl93aWR0aCwgXG4gICAgICB3aW5faGVpZ2h0LCBcbiAgICAgIHRydWUsIHRydWUpO1xuICAgIHdpbi5zZXRSZXNpemFibGUodHJ1ZSk7XG4gICAgd2luLnNldE1heGltaXphYmxlKHRydWUpO1xuICAgIHdpbi5zZXRDbG9zYWJsZSh0cnVlKTtcblxuICAgIC8vIENhbmNlbCBidXR0b24gYmVoYXZpb3JcbiAgICB2YXIgY2FuY2VsQnRuID0gbXhVdGlscy5idXR0b24obXhSZXNvdXJjZXMuZ2V0KCdjbG9zZScpLCBmdW5jdGlvbiAoKSB7IG1lLmNhbmNlbChlZGl0b3JVaSwgZGl2LCB3aW4sIHNoYXBlKTsgfSk7XG4gICAgY2FuY2VsQnRuLmNsYXNzTmFtZSA9ICdnZUJ0bic7XG4gICAgaWYgKGVkaXRvclVpLmVkaXRvci5jYW5jZWxGaXJzdCkgeyAgYnV0dG9ucy5hcHBlbmRDaGlsZChjYW5jZWxCdG4pOyB9XG5cbiAgICAvLyBPSyBidXR0b24gYmVoYXZpb3JcbiAgICB2YXIgb2tCdG4gPSBteFV0aWxzLmJ1dHRvbihteFJlc291cmNlcy5nZXQoJ2FwcGx5JyksIGZ1bmN0aW9uIChldnQpIHsgbWUudmFsaWRhdGUoZWRpdG9yVWksIGRpdiwgd2luLCBzaGFwZSk7IH0pO1xuICAgIGJ1dHRvbnMuYXBwZW5kQ2hpbGQob2tCdG4pO1xuICAgIG9rQnRuLmNsYXNzTmFtZSA9ICdnZUJ0biBnZVByaW1hcnlCdG4nO1xuICAgIGlmICghZWRpdG9yVWkuZWRpdG9yLmNhbmNlbEZpcnN0KSB7IGJ1dHRvbnMuYXBwZW5kQ2hpbGQoY2FuY2VsQnRuKTsgfVxuXG4gICAgLy8gUHJldmVudCBkcmF3aW8ga2V5ZG93biBsaXN0ZW5lcnMgdG8gYWxsb3cgY3V0L2NvcHkvcGFzdGVcbiAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB9KTtcblxuICAgIC8vIENhbGwgZnVuY3Rpb24gdG8gYWRkIGFjdHVhbCBlZGl0b3JcbiAgICBtZS5vbkZpbGxXaW5kb3coZWRpdG9yVWksIGRpdiwgd2luLCBzaGFwZSk7XG5cbiAgICAvLyBTaG93IFdpbmRvd1xuICAgIHdpbi5zaG93KCk7XG5cbiAgICAvLyBDYWxsIGZ1bmN0aW9uIHRvIGZvY3VzIGVkaXRvclxuICAgIG1lLm9uU2hvd1dpbmRvdyhlZGl0b3JVaSwgZGl2LCB3aW4sIHNoYXBlKTtcblxuICB9XG5cbiAgLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdGhpbmdcbiAgb25GaWxsV2luZG93KGVkaXRvclVpOiBhbnksIGRpdjogSFRNTERpdkVsZW1lbnQsIHdpbjogbXhXaW5kb3csIHNoYXBlOiBteFNoYXBlKSB7XG5cbiAgfVxuXG4gIC8vIERlZmF1bHQgaW1wbGVtZW50YXRpb24gZG9lcyBub3RoaW5nXG4gIG9uU2hvd1dpbmRvdyhlZGl0b3JVaTogYW55LCBkaXY6IEhUTUxEaXZFbGVtZW50LCB3aW46IG14V2luZG93LCBzaGFwZTogbXhTaGFwZSkge1xuICAgIGlmICh0aGlzLmVkaXRvclVpICYmIFxuICAgICAgICB0aGlzLmVkaXRvclVpLmVkaXRvciAmJiBcbiAgICAgICAgdGhpcy5lZGl0b3JVaS5lZGl0b3IuZ3JhcGggJiYgXG4gICAgICAgIHRoaXMuZWRpdG9yVWkuZWRpdG9yLmdyYXBoLnRvb2x0aXBIYW5kbGVyICYmIFxuICAgICAgICB0aGlzLmVkaXRvclVpLmVkaXRvci5ncmFwaC50b29sdGlwSGFuZGxlci5oaWRlKVxuICAgICAgICAgICAgdGhpcy5lZGl0b3JVaS5lZGl0b3IuZ3JhcGgudG9vbHRpcEhhbmRsZXIuaGlkZSgpO1xuICB9XG5cblxuICAvLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHZhbGlkYXRlXG4gIGFzeW5jIHZhbGlkYXRlKGVkaXRvclVpOiBhbnksIGRpdjogSFRNTERpdkVsZW1lbnQsIHdpbjogbXhXaW5kb3csIHNoYXBlOiBteFNoYXBlKSB7XG4gICAgaWYgKGVkaXRvclVpLnNwaW5uZXIuc3Bpbihkb2N1bWVudC5ib2R5LCBteFJlc291cmNlcy5nZXQoJ2luc2VydGluZycpKSkge1xuICAgICAgdmFyIGdyYXBoID0gZWRpdG9yVWkuZWRpdG9yLmdyYXBoO1xuICAgICAgZ3JhcGguZ2V0TW9kZWwoKS5iZWdpblVwZGF0ZSgpO1xuICAgICAgdGhpcy5zZXRTaGFwZVZhbHVlKGVkaXRvclVpLCBzaGFwZSwgYXdhaXQgdGhpcy5nZXRFZGl0b3JWYWx1ZShlZGl0b3JVaSwgZGl2LCB3aW4pKTtcbiAgICAgIGdyYXBoLmdldE1vZGVsKCkuZW5kVXBkYXRlKCk7XG4gICAgICBlZGl0b3JVaS5zcGlubmVyLnN0b3AoKTtcbiAgICAgIGlmIChzaGFwZS5zdGF0ZS5jZWxsICE9IG51bGwpIHtcbiAgICAgICAgZ3JhcGguc2V0U2VsZWN0aW9uQ2VsbChzaGFwZS5zdGF0ZS5jZWxsKTtcbiAgICAgICAgZ3JhcGguc2Nyb2xsQ2VsbFRvVmlzaWJsZShzaGFwZS5zdGF0ZS5jZWxsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2luLmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8vIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgY2FuY2VsXG4gIGNhbmNlbChlZGl0b3JVaTogYW55LCBkaXY6IEhUTUxEaXZFbGVtZW50LCB3aW46IG14V2luZG93LCBzaGFwZTogbXhTaGFwZSkge1xuICAgIHdpbi5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIGdldCBlZGl0b3IgdmFsdWUsIHVzZWQgaW4gZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB2YWxpZGF0ZVxuICBhc3luYyBnZXRFZGl0b3JWYWx1ZShlZGl0b3JVaTogYW55LCBkaXY/OiBIVE1MRGl2RWxlbWVudCwgd2luPzogbXhXaW5kb3cpIDogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gXCJcIiAgXG4gIH1cblxuICAvLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIGdldCBzaGFwZSB2YWx1ZVxuICBnZXRTaGFwZVZhbHVlKGVkaXRvclVpOiBhbnksIHNoYXBlOiBteFNoYXBlKSA6IHN0cmluZyB7XG4gICAgaWYgKHNoYXBlICYmIHNoYXBlLnN0YXRlICYmIHNoYXBlLnN0YXRlLmNlbGwpXG4gICAgICByZXR1cm4gc2hhcGUuc3RhdGUuY2VsbC5nZXRBdHRyaWJ1dGUodGhpcy5vcHRpb25zLmF0dHJpYnV0ZU5hbWUsICcnKVxuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byBzZXQgc2hhcGUgdmFsdWVcbiAgc2V0U2hhcGVWYWx1ZShlZGl0b3JVaTogYW55LCBzaGFwZTogbXhTaGFwZSwgdGV4dDogc3RyaW5nKSB7XG4gICAgaWYgKHNoYXBlICYmIHNoYXBlLnN0YXRlICYmIHNoYXBlLnN0YXRlLmNlbGwgJiYgc2hhcGUuc3RhdGUuY2VsbC52YWx1ZSkge1xuICAgICAgICAvL0B0cy1pZ25vcmUgIGlzTm9kZSBkb2VzIG5vdCByZXF1aXJlIGFsd2F5cyB0aGUgbm9kZSBuYW1lXG4gICAgICAgIGlmIChteFV0aWxzLmlzTm9kZShzaGFwZS5zdGF0ZS5jZWxsLnZhbHVlKSkge1xuICAgICAgICAgIHNoYXBlLnN0YXRlLmNlbGwuc2V0QXR0cmlidXRlKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVOYW1lLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG5cblxufVxuXG5cblxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgfHxcbiAgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgdmFyIGRlc2NyaXB0b3JzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXNjcmlwdG9yc1trZXlzW2ldXSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXlzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3JzO1xuICB9O1xuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbnZhciBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbCgndXRpbC5wcm9taXNpZnkuY3VzdG9tJykgOiB1bmRlZmluZWQ7XG5cbmV4cG9ydHMucHJvbWlzaWZ5ID0gZnVuY3Rpb24gcHJvbWlzaWZ5KG9yaWdpbmFsKSB7XG4gIGlmICh0eXBlb2Ygb3JpZ2luYWwgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sICYmIG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF0pIHtcbiAgICB2YXIgZm4gPSBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdO1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInV0aWwucHJvbWlzaWZ5LmN1c3RvbVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgICAgdmFsdWU6IGZuLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICBmdW5jdGlvbiBmbigpIHtcbiAgICB2YXIgcHJvbWlzZVJlc29sdmUsIHByb21pc2VSZWplY3Q7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBwcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICBwcm9taXNlUmVqZWN0ID0gcmVqZWN0O1xuICAgIH0pO1xuXG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuICAgIGFyZ3MucHVzaChmdW5jdGlvbiAoZXJyLCB2YWx1ZSkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBwcm9taXNlUmVqZWN0KGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlUmVzb2x2ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBwcm9taXNlUmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZm4sIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgdmFsdWU6IGZuLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhcbiAgICBmbixcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKVxuICApO1xufVxuXG5leHBvcnRzLnByb21pc2lmeS5jdXN0b20gPSBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xcblxuZnVuY3Rpb24gY2FsbGJhY2tpZnlPblJlamVjdGVkKHJlYXNvbiwgY2IpIHtcbiAgLy8gYCFyZWFzb25gIGd1YXJkIGluc3BpcmVkIGJ5IGJsdWViaXJkIChSZWY6IGh0dHBzOi8vZ29vLmdsL3Q1SVM2TSkuXG4gIC8vIEJlY2F1c2UgYG51bGxgIGlzIGEgc3BlY2lhbCBlcnJvciB2YWx1ZSBpbiBjYWxsYmFja3Mgd2hpY2ggbWVhbnMgXCJubyBlcnJvclxuICAvLyBvY2N1cnJlZFwiLCB3ZSBlcnJvci13cmFwIHNvIHRoZSBjYWxsYmFjayBjb25zdW1lciBjYW4gZGlzdGluZ3Vpc2ggYmV0d2VlblxuICAvLyBcInRoZSBwcm9taXNlIHJlamVjdGVkIHdpdGggbnVsbFwiIG9yIFwidGhlIHByb21pc2UgZnVsZmlsbGVkIHdpdGggdW5kZWZpbmVkXCIuXG4gIGlmICghcmVhc29uKSB7XG4gICAgdmFyIG5ld1JlYXNvbiA9IG5ldyBFcnJvcignUHJvbWlzZSB3YXMgcmVqZWN0ZWQgd2l0aCBhIGZhbHN5IHZhbHVlJyk7XG4gICAgbmV3UmVhc29uLnJlYXNvbiA9IHJlYXNvbjtcbiAgICByZWFzb24gPSBuZXdSZWFzb247XG4gIH1cbiAgcmV0dXJuIGNiKHJlYXNvbik7XG59XG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5KG9yaWdpbmFsKSB7XG4gIGlmICh0eXBlb2Ygb3JpZ2luYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICB9XG5cbiAgLy8gV2UgRE8gTk9UIHJldHVybiB0aGUgcHJvbWlzZSBhcyBpdCBnaXZlcyB0aGUgdXNlciBhIGZhbHNlIHNlbnNlIHRoYXRcbiAgLy8gdGhlIHByb21pc2UgaXMgYWN0dWFsbHkgc29tZWhvdyByZWxhdGVkIHRvIHRoZSBjYWxsYmFjaydzIGV4ZWN1dGlvblxuICAvLyBhbmQgdGhhdCB0aGUgY2FsbGJhY2sgdGhyb3dpbmcgd2lsbCByZWplY3QgdGhlIHByb21pc2UuXG4gIGZ1bmN0aW9uIGNhbGxiYWNraWZpZWQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgdmFyIG1heWJlQ2IgPSBhcmdzLnBvcCgpO1xuICAgIGlmICh0eXBlb2YgbWF5YmVDYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxhc3QgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBtYXliZUNiLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICAvLyBJbiB0cnVlIG5vZGUgc3R5bGUgd2UgcHJvY2VzcyB0aGUgY2FsbGJhY2sgb24gYG5leHRUaWNrYCB3aXRoIGFsbCB0aGVcbiAgICAvLyBpbXBsaWNhdGlvbnMgKHN0YWNrLCBgdW5jYXVnaHRFeGNlcHRpb25gLCBgYXN5bmNfaG9va3NgKVxuICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXQpIHsgcHJvY2Vzcy5uZXh0VGljayhjYiwgbnVsbCwgcmV0KSB9LFxuICAgICAgICAgICAgZnVuY3Rpb24ocmVqKSB7IHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2tpZnlPblJlamVjdGVkLCByZWosIGNiKSB9KTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihjYWxsYmFja2lmaWVkLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2FsbGJhY2tpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbCkpO1xuICByZXR1cm4gY2FsbGJhY2tpZmllZDtcbn1cbmV4cG9ydHMuY2FsbGJhY2tpZnkgPSBjYWxsYmFja2lmeTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5cblxuY2xhc3MgQnJlYWsgZXh0ZW5kcyBQYXJjaG1lbnQuRW1iZWQge1xuICBzdGF0aWMgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGluc2VydEludG8ocGFyZW50LCByZWYpIHtcbiAgICBpZiAocGFyZW50LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc3VwZXIuaW5zZXJ0SW50byhwYXJlbnQsIHJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgbGVuZ3RoKCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFsdWUoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5CcmVhay5ibG90TmFtZSA9ICdicmVhayc7XG5CcmVhay50YWdOYW1lID0gJ0JSJztcblxuXG5leHBvcnQgZGVmYXVsdCBCcmVhaztcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcblxuY2xhc3MgVGV4dEJsb3QgZXh0ZW5kcyBQYXJjaG1lbnQuVGV4dCB7IH1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dEJsb3Q7XG4iLCJpbXBvcnQgVGV4dCBmcm9tICcuL3RleHQnO1xuaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuXG5cbmNsYXNzIElubGluZSBleHRlbmRzIFBhcmNobWVudC5JbmxpbmUge1xuICBzdGF0aWMgY29tcGFyZShzZWxmLCBvdGhlcikge1xuICAgIGxldCBzZWxmSW5kZXggPSBJbmxpbmUub3JkZXIuaW5kZXhPZihzZWxmKTtcbiAgICBsZXQgb3RoZXJJbmRleCA9IElubGluZS5vcmRlci5pbmRleE9mKG90aGVyKTtcbiAgICBpZiAoc2VsZkluZGV4ID49IDAgfHwgb3RoZXJJbmRleCA+PSAwKSB7XG4gICAgICByZXR1cm4gc2VsZkluZGV4IC0gb3RoZXJJbmRleDtcbiAgICB9IGVsc2UgaWYgKHNlbGYgPT09IG90aGVyKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2UgaWYgKHNlbGYgPCBvdGhlcikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChJbmxpbmUuY29tcGFyZSh0aGlzLnN0YXRpY3MuYmxvdE5hbWUsIG5hbWUpIDwgMCAmJiBQYXJjaG1lbnQucXVlcnkobmFtZSwgUGFyY2htZW50LlNjb3BlLkJMT1QpKSB7XG4gICAgICBsZXQgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBibG90LndyYXAobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5mb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgb3B0aW1pemUoY29udGV4dCkge1xuICAgIHN1cGVyLm9wdGltaXplKGNvbnRleHQpO1xuICAgIGlmICh0aGlzLnBhcmVudCBpbnN0YW5jZW9mIElubGluZSAmJlxuICAgICAgICBJbmxpbmUuY29tcGFyZSh0aGlzLnN0YXRpY3MuYmxvdE5hbWUsIHRoaXMucGFyZW50LnN0YXRpY3MuYmxvdE5hbWUpID4gMCkge1xuICAgICAgbGV0IHBhcmVudCA9IHRoaXMucGFyZW50Lmlzb2xhdGUodGhpcy5vZmZzZXQoKSwgdGhpcy5sZW5ndGgoKSk7XG4gICAgICB0aGlzLm1vdmVDaGlsZHJlbihwYXJlbnQpO1xuICAgICAgcGFyZW50LndyYXAodGhpcyk7XG4gICAgfVxuICB9XG59XG5JbmxpbmUuYWxsb3dlZENoaWxkcmVuID0gW0lubGluZSwgUGFyY2htZW50LkVtYmVkLCBUZXh0XTtcbi8vIExvd2VyIGluZGV4IG1lYW5zIGRlZXBlciBpbiB0aGUgRE9NIHRyZWUsIHNpbmNlIG5vdCBmb3VuZCAoLTEpIGlzIGZvciBlbWJlZHNcbklubGluZS5vcmRlciA9IFtcbiAgJ2N1cnNvcicsICdpbmxpbmUnLCAgIC8vIE11c3QgYmUgbG93ZXJcbiAgJ3VuZGVybGluZScsICdzdHJpa2UnLCAnaXRhbGljJywgJ2JvbGQnLCAnc2NyaXB0JyxcbiAgJ2xpbmsnLCAnY29kZScgICAgICAgIC8vIE11c3QgYmUgaGlnaGVyXG5dO1xuXG5cbmV4cG9ydCBkZWZhdWx0IElubGluZTtcbiIsImltcG9ydCBleHRlbmQgZnJvbSAnZXh0ZW5kJztcbmltcG9ydCBEZWx0YSBmcm9tICdxdWlsbC1kZWx0YSc7XG5pbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgQnJlYWsgZnJvbSAnLi9icmVhayc7XG5pbXBvcnQgSW5saW5lIGZyb20gJy4vaW5saW5lJztcbmltcG9ydCBUZXh0QmxvdCBmcm9tICcuL3RleHQnO1xuXG5cbmNvbnN0IE5FV0xJTkVfTEVOR1RIID0gMTtcblxuXG5jbGFzcyBCbG9ja0VtYmVkIGV4dGVuZHMgUGFyY2htZW50LkVtYmVkIHtcbiAgYXR0YWNoKCkge1xuICAgIHN1cGVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IG5ldyBQYXJjaG1lbnQuQXR0cmlidXRvci5TdG9yZSh0aGlzLmRvbU5vZGUpO1xuICB9XG5cbiAgZGVsdGEoKSB7XG4gICAgcmV0dXJuIG5ldyBEZWx0YSgpLmluc2VydCh0aGlzLnZhbHVlKCksIGV4dGVuZCh0aGlzLmZvcm1hdHMoKSwgdGhpcy5hdHRyaWJ1dGVzLnZhbHVlcygpKSk7XG4gIH1cblxuICBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICBsZXQgYXR0cmlidXRlID0gUGFyY2htZW50LnF1ZXJ5KG5hbWUsIFBhcmNobWVudC5TY29wZS5CTE9DS19BVFRSSUJVVEUpO1xuICAgIGlmIChhdHRyaWJ1dGUgIT0gbnVsbCkge1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzLmF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgfVxuXG4gIGluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICBsZXQgYmxvY2sgPSBQYXJjaG1lbnQuY3JlYXRlKEJsb2NrLmJsb3ROYW1lKTtcbiAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShibG9jaywgaW5kZXggPT09IDAgPyB0aGlzIDogdGhpcy5uZXh0KTtcbiAgICAgIGJsb2NrLmluc2VydEF0KDAsIHZhbHVlLnNsaWNlKDAsIC0xKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLmluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICB9XG4gIH1cbn1cbkJsb2NrRW1iZWQuc2NvcGUgPSBQYXJjaG1lbnQuU2NvcGUuQkxPQ0tfQkxPVDtcbi8vIEl0IGlzIGltcG9ydGFudCBmb3IgY3Vyc29yIGJlaGF2aW9yIEJsb2NrRW1iZWRzIHVzZSB0YWdzIHRoYXQgYXJlIGJsb2NrIGxldmVsIGVsZW1lbnRzXG5cblxuY2xhc3MgQmxvY2sgZXh0ZW5kcyBQYXJjaG1lbnQuQmxvY2sge1xuICBjb25zdHJ1Y3Rvcihkb21Ob2RlKSB7XG4gICAgc3VwZXIoZG9tTm9kZSk7XG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9XG5cbiAgZGVsdGEoKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUuZGVsdGEgPT0gbnVsbCkge1xuICAgICAgdGhpcy5jYWNoZS5kZWx0YSA9IHRoaXMuZGVzY2VuZGFudHMoUGFyY2htZW50LkxlYWYpLnJlZHVjZSgoZGVsdGEsIGxlYWYpID0+IHtcbiAgICAgICAgaWYgKGxlYWYubGVuZ3RoKCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gZGVsdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlbHRhLmluc2VydChsZWFmLnZhbHVlKCksIGJ1YmJsZUZvcm1hdHMobGVhZikpO1xuICAgICAgICB9XG4gICAgICB9LCBuZXcgRGVsdGEoKSkuaW5zZXJ0KCdcXG4nLCBidWJibGVGb3JtYXRzKHRoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZGVsdGE7XG4gIH1cblxuICBkZWxldGVBdChpbmRleCwgbGVuZ3RoKSB7XG4gICAgc3VwZXIuZGVsZXRlQXQoaW5kZXgsIGxlbmd0aCk7XG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9XG5cbiAgZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobGVuZ3RoIDw9IDApIHJldHVybjtcbiAgICBpZiAoUGFyY2htZW50LnF1ZXJ5KG5hbWUsIFBhcmNobWVudC5TY29wZS5CTE9DSykpIHtcbiAgICAgIGlmIChpbmRleCArIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICB0aGlzLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLmZvcm1hdEF0KGluZGV4LCBNYXRoLm1pbihsZW5ndGgsIHRoaXMubGVuZ3RoKCkgLSBpbmRleCAtIDEpLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgfVxuXG4gIGluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgaWYgKGRlZiAhPSBudWxsKSByZXR1cm4gc3VwZXIuaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpO1xuICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBsZXQgbGluZXMgPSB2YWx1ZS5zcGxpdCgnXFxuJyk7XG4gICAgbGV0IHRleHQgPSBsaW5lcy5zaGlmdCgpO1xuICAgIGlmICh0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChpbmRleCA8IHRoaXMubGVuZ3RoKCkgLSAxIHx8IHRoaXMuY2hpbGRyZW4udGFpbCA9PSBudWxsKSB7XG4gICAgICAgIHN1cGVyLmluc2VydEF0KE1hdGgubWluKGluZGV4LCB0aGlzLmxlbmd0aCgpIC0gMSksIHRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi50YWlsLmluc2VydEF0KHRoaXMuY2hpbGRyZW4udGFpbC5sZW5ndGgoKSwgdGV4dCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuICAgIGxldCBibG9jayA9IHRoaXM7XG4gICAgbGluZXMucmVkdWNlKGZ1bmN0aW9uKGluZGV4LCBsaW5lKSB7XG4gICAgICBibG9jayA9IGJsb2NrLnNwbGl0KGluZGV4LCB0cnVlKTtcbiAgICAgIGJsb2NrLmluc2VydEF0KDAsIGxpbmUpO1xuICAgICAgcmV0dXJuIGxpbmUubGVuZ3RoO1xuICAgIH0sIGluZGV4ICsgdGV4dC5sZW5ndGgpO1xuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZikge1xuICAgIGxldCBoZWFkID0gdGhpcy5jaGlsZHJlbi5oZWFkO1xuICAgIHN1cGVyLmluc2VydEJlZm9yZShibG90LCByZWYpO1xuICAgIGlmIChoZWFkIGluc3RhbmNlb2YgQnJlYWspIHtcbiAgICAgIGhlYWQucmVtb3ZlKCk7XG4gICAgfVxuICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgfVxuXG4gIGxlbmd0aCgpIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPT0gbnVsbCkge1xuICAgICAgdGhpcy5jYWNoZS5sZW5ndGggPSBzdXBlci5sZW5ndGgoKSArIE5FV0xJTkVfTEVOR1RIO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWNoZS5sZW5ndGg7XG4gIH1cblxuICBtb3ZlQ2hpbGRyZW4odGFyZ2V0LCByZWYpIHtcbiAgICBzdXBlci5tb3ZlQ2hpbGRyZW4odGFyZ2V0LCByZWYpO1xuICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgfVxuXG4gIG9wdGltaXplKGNvbnRleHQpIHtcbiAgICBzdXBlci5vcHRpbWl6ZShjb250ZXh0KTtcbiAgICB0aGlzLmNhY2hlID0ge307XG4gIH1cblxuICBwYXRoKGluZGV4KSB7XG4gICAgcmV0dXJuIHN1cGVyLnBhdGgoaW5kZXgsIHRydWUpO1xuICB9XG5cbiAgcmVtb3ZlQ2hpbGQoY2hpbGQpIHtcbiAgICBzdXBlci5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9XG5cbiAgc3BsaXQoaW5kZXgsIGZvcmNlID0gZmFsc2UpIHtcbiAgICBpZiAoZm9yY2UgJiYgKGluZGV4ID09PSAwIHx8IGluZGV4ID49IHRoaXMubGVuZ3RoKCkgLSBORVdMSU5FX0xFTkdUSCkpIHtcbiAgICAgIGxldCBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0KTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmV4dCA9IHN1cGVyLnNwbGl0KGluZGV4LCBmb3JjZSk7XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG4gIH1cbn1cbkJsb2NrLmJsb3ROYW1lID0gJ2Jsb2NrJztcbkJsb2NrLnRhZ05hbWUgPSAnUCc7XG5CbG9jay5kZWZhdWx0Q2hpbGQgPSAnYnJlYWsnO1xuQmxvY2suYWxsb3dlZENoaWxkcmVuID0gW0lubGluZSwgUGFyY2htZW50LkVtYmVkLCBUZXh0QmxvdF07XG5cblxuZnVuY3Rpb24gYnViYmxlRm9ybWF0cyhibG90LCBmb3JtYXRzID0ge30pIHtcbiAgaWYgKGJsb3QgPT0gbnVsbCkgcmV0dXJuIGZvcm1hdHM7XG4gIGlmICh0eXBlb2YgYmxvdC5mb3JtYXRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm9ybWF0cyA9IGV4dGVuZChmb3JtYXRzLCBibG90LmZvcm1hdHMoKSk7XG4gIH1cbiAgaWYgKGJsb3QucGFyZW50ID09IG51bGwgfHwgYmxvdC5wYXJlbnQuYmxvdE5hbWUgPT0gJ3Njcm9sbCcgfHwgYmxvdC5wYXJlbnQuc3RhdGljcy5zY29wZSAhPT0gYmxvdC5zdGF0aWNzLnNjb3BlKSB7XG4gICAgcmV0dXJuIGZvcm1hdHM7XG4gIH1cbiAgcmV0dXJuIGJ1YmJsZUZvcm1hdHMoYmxvdC5wYXJlbnQsIGZvcm1hdHMpO1xufVxuXG5cbmV4cG9ydCB7IGJ1YmJsZUZvcm1hdHMsIEJsb2NrRW1iZWQsIEJsb2NrIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBEZWx0YSBmcm9tICdxdWlsbC1kZWx0YSc7XG5pbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgQmxvY2sgZnJvbSAnLi4vYmxvdHMvYmxvY2snO1xuaW1wb3J0IElubGluZSBmcm9tICcuLi9ibG90cy9pbmxpbmUnO1xuaW1wb3J0IFRleHRCbG90IGZyb20gJy4uL2Jsb3RzL3RleHQnO1xuXG5cbmNsYXNzIENvZGUgZXh0ZW5kcyBJbmxpbmUge31cbkNvZGUuYmxvdE5hbWUgPSAnY29kZSc7XG5Db2RlLnRhZ05hbWUgPSAnQ09ERSc7XG5cblxuY2xhc3MgQ29kZUJsb2NrIGV4dGVuZHMgQmxvY2sge1xuICBzdGF0aWMgY3JlYXRlKHZhbHVlKSB7XG4gICAgbGV0IGRvbU5vZGUgPSBzdXBlci5jcmVhdGUodmFsdWUpO1xuICAgIGRvbU5vZGUuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgZmFsc2UpO1xuICAgIHJldHVybiBkb21Ob2RlO1xuICB9XG5cbiAgc3RhdGljIGZvcm1hdHMoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBkZWx0YSgpIHtcbiAgICBsZXQgdGV4dCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudDtcbiAgICBpZiAodGV4dC5lbmRzV2l0aCgnXFxuJykpIHsgICAgICAvLyBTaG91bGQgYWx3YXlzIGJlIHRydWVcbiAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQuc3BsaXQoJ1xcbicpLnJlZHVjZSgoZGVsdGEsIGZyYWcpID0+IHtcbiAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQoZnJhZykuaW5zZXJ0KCdcXG4nLCB0aGlzLmZvcm1hdHMoKSk7XG4gICAgfSwgbmV3IERlbHRhKCkpO1xuICB9XG5cbiAgZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKG5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiB2YWx1ZSkgcmV0dXJuO1xuICAgIGxldCBbdGV4dCwgXSA9IHRoaXMuZGVzY2VuZGFudChUZXh0QmxvdCwgdGhpcy5sZW5ndGgoKSAtIDEpO1xuICAgIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICAgIHRleHQuZGVsZXRlQXQodGV4dC5sZW5ndGgoKSAtIDEsIDEpO1xuICAgIH1cbiAgICBzdXBlci5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICB9XG5cbiAgZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKFBhcmNobWVudC5xdWVyeShuYW1lLCBQYXJjaG1lbnQuU2NvcGUuQkxPQ0spID09IG51bGwgfHxcbiAgICAgICAgKG5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiB2YWx1ZSA9PT0gdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5leHROZXdsaW5lID0gdGhpcy5uZXdsaW5lSW5kZXgoaW5kZXgpO1xuICAgIGlmIChuZXh0TmV3bGluZSA8IDAgfHwgbmV4dE5ld2xpbmUgPj0gaW5kZXggKyBsZW5ndGgpIHJldHVybjtcbiAgICBsZXQgcHJldk5ld2xpbmUgPSB0aGlzLm5ld2xpbmVJbmRleChpbmRleCwgdHJ1ZSkgKyAxO1xuICAgIGxldCBpc29sYXRlTGVuZ3RoID0gbmV4dE5ld2xpbmUgLSBwcmV2TmV3bGluZSArIDE7XG4gICAgbGV0IGJsb3QgPSB0aGlzLmlzb2xhdGUocHJldk5ld2xpbmUsIGlzb2xhdGVMZW5ndGgpO1xuICAgIGxldCBuZXh0ID0gYmxvdC5uZXh0O1xuICAgIGJsb3QuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICBpZiAobmV4dCBpbnN0YW5jZW9mIENvZGVCbG9jaykge1xuICAgICAgbmV4dC5mb3JtYXRBdCgwLCBpbmRleCAtIHByZXZOZXdsaW5lICsgbGVuZ3RoIC0gaXNvbGF0ZUxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgaWYgKGRlZiAhPSBudWxsKSByZXR1cm47XG4gICAgbGV0IFt0ZXh0LCBvZmZzZXRdID0gdGhpcy5kZXNjZW5kYW50KFRleHRCbG90LCBpbmRleCk7XG4gICAgdGV4dC5pbnNlcnRBdChvZmZzZXQsIHZhbHVlKTtcbiAgfVxuXG4gIGxlbmd0aCgpIHtcbiAgICBsZXQgbGVuZ3RoID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICBpZiAoIXRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgIHJldHVybiBsZW5ndGggKyAxO1xuICAgIH1cbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9XG5cbiAgbmV3bGluZUluZGV4KHNlYXJjaEluZGV4LCByZXZlcnNlID0gZmFsc2UpIHtcbiAgICBpZiAoIXJldmVyc2UpIHtcbiAgICAgIGxldCBvZmZzZXQgPSB0aGlzLmRvbU5vZGUudGV4dENvbnRlbnQuc2xpY2Uoc2VhcmNoSW5kZXgpLmluZGV4T2YoJ1xcbicpO1xuICAgICAgcmV0dXJuIG9mZnNldCA+IC0xID8gc2VhcmNoSW5kZXggKyBvZmZzZXQgOiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5zbGljZSgwLCBzZWFyY2hJbmRleCkubGFzdEluZGV4T2YoJ1xcbicpO1xuICAgIH1cbiAgfVxuXG4gIG9wdGltaXplKGNvbnRleHQpIHtcbiAgICBpZiAoIXRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoUGFyY2htZW50LmNyZWF0ZSgndGV4dCcsICdcXG4nKSk7XG4gICAgfVxuICAgIHN1cGVyLm9wdGltaXplKGNvbnRleHQpO1xuICAgIGxldCBuZXh0ID0gdGhpcy5uZXh0O1xuICAgIGlmIChuZXh0ICE9IG51bGwgJiYgbmV4dC5wcmV2ID09PSB0aGlzICYmXG4gICAgICAgIG5leHQuc3RhdGljcy5ibG90TmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmXG4gICAgICAgIHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSkgPT09IG5leHQuc3RhdGljcy5mb3JtYXRzKG5leHQuZG9tTm9kZSkpIHtcbiAgICAgIG5leHQub3B0aW1pemUoY29udGV4dCk7XG4gICAgICBuZXh0Lm1vdmVDaGlsZHJlbih0aGlzKTtcbiAgICAgIG5leHQucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgcmVwbGFjZSh0YXJnZXQpIHtcbiAgICBzdXBlci5yZXBsYWNlKHRhcmdldCk7XG4gICAgW10uc2xpY2UuY2FsbCh0aGlzLmRvbU5vZGUucXVlcnlTZWxlY3RvckFsbCgnKicpKS5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGxldCBibG90ID0gUGFyY2htZW50LmZpbmQobm9kZSk7XG4gICAgICBpZiAoYmxvdCA9PSBudWxsKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH0gZWxzZSBpZiAoYmxvdCBpbnN0YW5jZW9mIFBhcmNobWVudC5FbWJlZCkge1xuICAgICAgICBibG90LnJlbW92ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvdC51bndyYXAoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuQ29kZUJsb2NrLmJsb3ROYW1lID0gJ2NvZGUtYmxvY2snO1xuQ29kZUJsb2NrLnRhZ05hbWUgPSAnUFJFJztcbkNvZGVCbG9jay5UQUIgPSAnICAnO1xuXG5cbmV4cG9ydCB7IENvZGUsIENvZGVCbG9jayBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgVGV4dEJsb3QgZnJvbSAnLi90ZXh0JztcblxuXG5jbGFzcyBDdXJzb3IgZXh0ZW5kcyBQYXJjaG1lbnQuRW1iZWQge1xuICBzdGF0aWMgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGRvbU5vZGUsIHNlbGVjdGlvbikge1xuICAgIHN1cGVyKGRvbU5vZGUpO1xuICAgIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICAgIHRoaXMudGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShDdXJzb3IuQ09OVEVOVFMpO1xuICAgIHRoaXMuZG9tTm9kZS5hcHBlbmRDaGlsZCh0aGlzLnRleHROb2RlKTtcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICB9XG5cbiAgZGV0YWNoKCkge1xuICAgIC8vIHN1cGVyLmRldGFjaCgpIHdpbGwgYWxzbyBjbGVhciBkb21Ob2RlLl9fYmxvdFxuICAgIGlmICh0aGlzLnBhcmVudCAhPSBudWxsKSB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9sZW5ndGggIT09IDApIHtcbiAgICAgIHJldHVybiBzdXBlci5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBsZXQgdGFyZ2V0ID0gdGhpcywgaW5kZXggPSAwO1xuICAgIHdoaWxlICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQuc3RhdGljcy5zY29wZSAhPT0gUGFyY2htZW50LlNjb3BlLkJMT0NLX0JMT1QpIHtcbiAgICAgIGluZGV4ICs9IHRhcmdldC5vZmZzZXQodGFyZ2V0LnBhcmVudCk7XG4gICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50O1xuICAgIH1cbiAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2xlbmd0aCA9IEN1cnNvci5DT05URU5UUy5sZW5ndGg7XG4gICAgICB0YXJnZXQub3B0aW1pemUoKTtcbiAgICAgIHRhcmdldC5mb3JtYXRBdChpbmRleCwgQ3Vyc29yLkNPTlRFTlRTLmxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB9XG4gIH1cblxuICBpbmRleChub2RlLCBvZmZzZXQpIHtcbiAgICBpZiAobm9kZSA9PT0gdGhpcy50ZXh0Tm9kZSkgcmV0dXJuIDA7XG4gICAgcmV0dXJuIHN1cGVyLmluZGV4KG5vZGUsIG9mZnNldCk7XG4gIH1cblxuICBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbiAgfVxuXG4gIHBvc2l0aW9uKCkge1xuICAgIHJldHVybiBbdGhpcy50ZXh0Tm9kZSwgdGhpcy50ZXh0Tm9kZS5kYXRhLmxlbmd0aF07XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgc3VwZXIucmVtb3ZlKCk7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICB9XG5cbiAgcmVzdG9yZSgpIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb24uY29tcG9zaW5nIHx8IHRoaXMucGFyZW50ID09IG51bGwpIHJldHVybjtcbiAgICBsZXQgdGV4dE5vZGUgPSB0aGlzLnRleHROb2RlO1xuICAgIGxldCByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmdldE5hdGl2ZVJhbmdlKCk7XG4gICAgbGV0IHJlc3RvcmVUZXh0LCBzdGFydCwgZW5kO1xuICAgIGlmIChyYW5nZSAhPSBudWxsICYmIHJhbmdlLnN0YXJ0Lm5vZGUgPT09IHRleHROb2RlICYmIHJhbmdlLmVuZC5ub2RlID09PSB0ZXh0Tm9kZSkge1xuICAgICAgW3Jlc3RvcmVUZXh0LCBzdGFydCwgZW5kXSA9IFt0ZXh0Tm9kZSwgcmFuZ2Uuc3RhcnQub2Zmc2V0LCByYW5nZS5lbmQub2Zmc2V0XTtcbiAgICB9XG4gICAgLy8gTGluayBmb3JtYXQgd2lsbCBpbnNlcnQgdGV4dCBvdXRzaWRlIG9mIGFuY2hvciB0YWdcbiAgICB3aGlsZSAodGhpcy5kb21Ob2RlLmxhc3RDaGlsZCAhPSBudWxsICYmIHRoaXMuZG9tTm9kZS5sYXN0Q2hpbGQgIT09IHRoaXMudGV4dE5vZGUpIHtcbiAgICAgIHRoaXMuZG9tTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmRvbU5vZGUubGFzdENoaWxkLCB0aGlzLmRvbU5vZGUpO1xuICAgIH1cbiAgICBpZiAodGhpcy50ZXh0Tm9kZS5kYXRhICE9PSBDdXJzb3IuQ09OVEVOVFMpIHtcbiAgICAgIGxldCB0ZXh0ID0gdGhpcy50ZXh0Tm9kZS5kYXRhLnNwbGl0KEN1cnNvci5DT05URU5UUykuam9pbignJyk7XG4gICAgICBpZiAodGhpcy5uZXh0IGluc3RhbmNlb2YgVGV4dEJsb3QpIHtcbiAgICAgICAgcmVzdG9yZVRleHQgPSB0aGlzLm5leHQuZG9tTm9kZTtcbiAgICAgICAgdGhpcy5uZXh0Lmluc2VydEF0KDAsIHRleHQpO1xuICAgICAgICB0aGlzLnRleHROb2RlLmRhdGEgPSBDdXJzb3IuQ09OVEVOVFM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRleHROb2RlLmRhdGEgPSB0ZXh0O1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoUGFyY2htZW50LmNyZWF0ZSh0aGlzLnRleHROb2RlKSwgdGhpcyk7XG4gICAgICAgIHRoaXMudGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShDdXJzb3IuQ09OVEVOVFMpO1xuICAgICAgICB0aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQodGhpcy50ZXh0Tm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgaWYgKHN0YXJ0ICE9IG51bGwpIHtcbiAgICAgIFtzdGFydCwgZW5kXSA9IFtzdGFydCwgZW5kXS5tYXAoZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihyZXN0b3JlVGV4dC5kYXRhLmxlbmd0aCwgb2Zmc2V0IC0gMSkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydE5vZGU6IHJlc3RvcmVUZXh0LFxuICAgICAgICBzdGFydE9mZnNldDogc3RhcnQsXG4gICAgICAgIGVuZE5vZGU6IHJlc3RvcmVUZXh0LFxuICAgICAgICBlbmRPZmZzZXQ6IGVuZFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgaWYgKG11dGF0aW9ucy5zb21lKChtdXRhdGlvbikgPT4ge1xuICAgICAgcmV0dXJuIG11dGF0aW9uLnR5cGUgPT09ICdjaGFyYWN0ZXJEYXRhJyAmJiBtdXRhdGlvbi50YXJnZXQgPT09IHRoaXMudGV4dE5vZGU7XG4gICAgfSkpIHtcbiAgICAgIGxldCByYW5nZSA9IHRoaXMucmVzdG9yZSgpO1xuICAgICAgaWYgKHJhbmdlKSBjb250ZXh0LnJhbmdlID0gcmFuZ2U7XG4gICAgfVxuICB9XG5cbiAgdmFsdWUoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5DdXJzb3IuYmxvdE5hbWUgPSAnY3Vyc29yJztcbkN1cnNvci5jbGFzc05hbWUgPSAncWwtY3Vyc29yJztcbkN1cnNvci50YWdOYW1lID0gJ3NwYW4nO1xuQ3Vyc29yLkNPTlRFTlRTID0gXCJcXHVGRUZGXCI7ICAgLy8gWmVybyB3aWR0aCBubyBicmVhayBzcGFjZVxuXG5cbmV4cG9ydCBkZWZhdWx0IEN1cnNvcjtcbiIsImltcG9ydCBEZWx0YSBmcm9tICdxdWlsbC1kZWx0YSc7XG5pbXBvcnQgRGVsdGFPcCBmcm9tICdxdWlsbC1kZWx0YS9saWIvb3AnO1xuaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuaW1wb3J0IENvZGVCbG9jayBmcm9tICcuLi9mb3JtYXRzL2NvZGUnO1xuaW1wb3J0IEN1cnNvckJsb3QgZnJvbSAnLi4vYmxvdHMvY3Vyc29yJztcbmltcG9ydCBCbG9jaywgeyBidWJibGVGb3JtYXRzIH0gZnJvbSAnLi4vYmxvdHMvYmxvY2snO1xuaW1wb3J0IEJyZWFrIGZyb20gJy4uL2Jsb3RzL2JyZWFrJztcbmltcG9ydCBjbG9uZSBmcm9tICdjbG9uZSc7XG5pbXBvcnQgZXF1YWwgZnJvbSAnZGVlcC1lcXVhbCc7XG5pbXBvcnQgZXh0ZW5kIGZyb20gJ2V4dGVuZCc7XG5cblxuY29uc3QgQVNDSUkgPSAvXlsgLX5dKiQvO1xuXG5cbmNsYXNzIEVkaXRvciB7XG4gIGNvbnN0cnVjdG9yKHNjcm9sbCkge1xuICAgIHRoaXMuc2Nyb2xsID0gc2Nyb2xsO1xuICAgIHRoaXMuZGVsdGEgPSB0aGlzLmdldERlbHRhKCk7XG4gIH1cblxuICBhcHBseURlbHRhKGRlbHRhKSB7XG4gICAgbGV0IGNvbnN1bWVOZXh0TmV3bGluZSA9IGZhbHNlO1xuICAgIHRoaXMuc2Nyb2xsLnVwZGF0ZSgpO1xuICAgIGxldCBzY3JvbGxMZW5ndGggPSB0aGlzLnNjcm9sbC5sZW5ndGgoKTtcbiAgICB0aGlzLnNjcm9sbC5iYXRjaFN0YXJ0KCk7XG4gICAgZGVsdGEgPSBub3JtYWxpemVEZWx0YShkZWx0YSk7XG4gICAgZGVsdGEucmVkdWNlKChpbmRleCwgb3ApID0+IHtcbiAgICAgIGxldCBsZW5ndGggPSBvcC5yZXRhaW4gfHwgb3AuZGVsZXRlIHx8IG9wLmluc2VydC5sZW5ndGggfHwgMTtcbiAgICAgIGxldCBhdHRyaWJ1dGVzID0gb3AuYXR0cmlidXRlcyB8fCB7fTtcbiAgICAgIGlmIChvcC5pbnNlcnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBsZXQgdGV4dCA9IG9wLmluc2VydDtcbiAgICAgICAgICBpZiAodGV4dC5lbmRzV2l0aCgnXFxuJykgJiYgY29uc3VtZU5leHROZXdsaW5lKSB7XG4gICAgICAgICAgICBjb25zdW1lTmV4dE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4ID49IHNjcm9sbExlbmd0aCAmJiAhdGV4dC5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgICAgICAgIGNvbnN1bWVOZXh0TmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2Nyb2xsLmluc2VydEF0KGluZGV4LCB0ZXh0KTtcbiAgICAgICAgICBsZXQgW2xpbmUsIG9mZnNldF0gPSB0aGlzLnNjcm9sbC5saW5lKGluZGV4KTtcbiAgICAgICAgICBsZXQgZm9ybWF0cyA9IGV4dGVuZCh7fSwgYnViYmxlRm9ybWF0cyhsaW5lKSk7XG4gICAgICAgICAgaWYgKGxpbmUgaW5zdGFuY2VvZiBCbG9jaykge1xuICAgICAgICAgICAgbGV0IFtsZWFmLCBdID0gbGluZS5kZXNjZW5kYW50KFBhcmNobWVudC5MZWFmLCBvZmZzZXQpO1xuICAgICAgICAgICAgZm9ybWF0cyA9IGV4dGVuZChmb3JtYXRzLCBidWJibGVGb3JtYXRzKGxlYWYpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXR0cmlidXRlcyA9IERlbHRhT3AuYXR0cmlidXRlcy5kaWZmKGZvcm1hdHMsIGF0dHJpYnV0ZXMpIHx8IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcC5pbnNlcnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgbGV0IGtleSA9IE9iamVjdC5rZXlzKG9wLmluc2VydClbMF07ICAvLyBUaGVyZSBzaG91bGQgb25seSBiZSBvbmUga2V5XG4gICAgICAgICAgaWYgKGtleSA9PSBudWxsKSByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgdGhpcy5zY3JvbGwuaW5zZXJ0QXQoaW5kZXgsIGtleSwgb3AuaW5zZXJ0W2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHNjcm9sbExlbmd0aCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgIHRoaXMuc2Nyb2xsLmZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIGF0dHJpYnV0ZXNbbmFtZV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW5kZXggKyBsZW5ndGg7XG4gICAgfSwgMCk7XG4gICAgZGVsdGEucmVkdWNlKChpbmRleCwgb3ApID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb3AuZGVsZXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLnNjcm9sbC5kZWxldGVBdChpbmRleCwgb3AuZGVsZXRlKTtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGluZGV4ICsgKG9wLnJldGFpbiB8fCBvcC5pbnNlcnQubGVuZ3RoIHx8IDEpO1xuICAgIH0sIDApO1xuICAgIHRoaXMuc2Nyb2xsLmJhdGNoRW5kKCk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKGRlbHRhKTtcbiAgfVxuXG4gIGRlbGV0ZVRleHQoaW5kZXgsIGxlbmd0aCkge1xuICAgIHRoaXMuc2Nyb2xsLmRlbGV0ZUF0KGluZGV4LCBsZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZShuZXcgRGVsdGEoKS5yZXRhaW4oaW5kZXgpLmRlbGV0ZShsZW5ndGgpKTtcbiAgfVxuXG4gIGZvcm1hdExpbmUoaW5kZXgsIGxlbmd0aCwgZm9ybWF0cyA9IHt9KSB7XG4gICAgdGhpcy5zY3JvbGwudXBkYXRlKCk7XG4gICAgT2JqZWN0LmtleXMoZm9ybWF0cykuZm9yRWFjaCgoZm9ybWF0KSA9PiB7XG4gICAgICBpZiAodGhpcy5zY3JvbGwud2hpdGVsaXN0ICE9IG51bGwgJiYgIXRoaXMuc2Nyb2xsLndoaXRlbGlzdFtmb3JtYXRdKSByZXR1cm47XG4gICAgICBsZXQgbGluZXMgPSB0aGlzLnNjcm9sbC5saW5lcyhpbmRleCwgTWF0aC5tYXgobGVuZ3RoLCAxKSk7XG4gICAgICBsZXQgbGVuZ3RoUmVtYWluaW5nID0gbGVuZ3RoO1xuICAgICAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICBsZXQgbGluZUxlbmd0aCA9IGxpbmUubGVuZ3RoKCk7XG4gICAgICAgIGlmICghKGxpbmUgaW5zdGFuY2VvZiBDb2RlQmxvY2spKSB7XG4gICAgICAgICAgbGluZS5mb3JtYXQoZm9ybWF0LCBmb3JtYXRzW2Zvcm1hdF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBjb2RlSW5kZXggPSBpbmRleCAtIGxpbmUub2Zmc2V0KHRoaXMuc2Nyb2xsKTtcbiAgICAgICAgICBsZXQgY29kZUxlbmd0aCA9IGxpbmUubmV3bGluZUluZGV4KGNvZGVJbmRleCArIGxlbmd0aFJlbWFpbmluZykgLSBjb2RlSW5kZXggKyAxO1xuICAgICAgICAgIGxpbmUuZm9ybWF0QXQoY29kZUluZGV4LCBjb2RlTGVuZ3RoLCBmb3JtYXQsIGZvcm1hdHNbZm9ybWF0XSk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoUmVtYWluaW5nIC09IGxpbmVMZW5ndGg7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLnNjcm9sbC5vcHRpbWl6ZSgpO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZShuZXcgRGVsdGEoKS5yZXRhaW4oaW5kZXgpLnJldGFpbihsZW5ndGgsIGNsb25lKGZvcm1hdHMpKSk7XG4gIH1cblxuICBmb3JtYXRUZXh0KGluZGV4LCBsZW5ndGgsIGZvcm1hdHMgPSB7fSkge1xuICAgIE9iamVjdC5rZXlzKGZvcm1hdHMpLmZvckVhY2goKGZvcm1hdCkgPT4ge1xuICAgICAgdGhpcy5zY3JvbGwuZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgZm9ybWF0LCBmb3JtYXRzW2Zvcm1hdF0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZShuZXcgRGVsdGEoKS5yZXRhaW4oaW5kZXgpLnJldGFpbihsZW5ndGgsIGNsb25lKGZvcm1hdHMpKSk7XG4gIH1cblxuICBnZXRDb250ZW50cyhpbmRleCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsdGEuc2xpY2UoaW5kZXgsIGluZGV4ICsgbGVuZ3RoKTtcbiAgfVxuXG4gIGdldERlbHRhKCkge1xuICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcygpLnJlZHVjZSgoZGVsdGEsIGxpbmUpID0+IHtcbiAgICAgIHJldHVybiBkZWx0YS5jb25jYXQobGluZS5kZWx0YSgpKTtcbiAgICB9LCBuZXcgRGVsdGEoKSk7XG4gIH1cblxuICBnZXRGb3JtYXQoaW5kZXgsIGxlbmd0aCA9IDApIHtcbiAgICBsZXQgbGluZXMgPSBbXSwgbGVhdmVzID0gW107XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5zY3JvbGwucGF0aChpbmRleCkuZm9yRWFjaChmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIGxldCBbYmxvdCwgXSA9IHBhdGg7XG4gICAgICAgIGlmIChibG90IGluc3RhbmNlb2YgQmxvY2spIHtcbiAgICAgICAgICBsaW5lcy5wdXNoKGJsb3QpO1xuICAgICAgICB9IGVsc2UgaWYgKGJsb3QgaW5zdGFuY2VvZiBQYXJjaG1lbnQuTGVhZikge1xuICAgICAgICAgIGxlYXZlcy5wdXNoKGJsb3QpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZXMgPSB0aGlzLnNjcm9sbC5saW5lcyhpbmRleCwgbGVuZ3RoKTtcbiAgICAgIGxlYXZlcyA9IHRoaXMuc2Nyb2xsLmRlc2NlbmRhbnRzKFBhcmNobWVudC5MZWFmLCBpbmRleCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IGZvcm1hdHNBcnIgPSBbbGluZXMsIGxlYXZlc10ubWFwKGZ1bmN0aW9uKGJsb3RzKSB7XG4gICAgICBpZiAoYmxvdHMubGVuZ3RoID09PSAwKSByZXR1cm4ge307XG4gICAgICBsZXQgZm9ybWF0cyA9IGJ1YmJsZUZvcm1hdHMoYmxvdHMuc2hpZnQoKSk7XG4gICAgICB3aGlsZSAoT2JqZWN0LmtleXMoZm9ybWF0cykubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgYmxvdCA9IGJsb3RzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChibG90ID09IG51bGwpIHJldHVybiBmb3JtYXRzO1xuICAgICAgICBmb3JtYXRzID0gY29tYmluZUZvcm1hdHMoYnViYmxlRm9ybWF0cyhibG90KSwgZm9ybWF0cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZm9ybWF0cztcbiAgICB9KTtcbiAgICByZXR1cm4gZXh0ZW5kLmFwcGx5KGV4dGVuZCwgZm9ybWF0c0Fycik7XG4gIH1cblxuICBnZXRUZXh0KGluZGV4LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb250ZW50cyhpbmRleCwgbGVuZ3RoKS5maWx0ZXIoZnVuY3Rpb24ob3ApIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJztcbiAgICB9KS5tYXAoZnVuY3Rpb24ob3ApIHtcbiAgICAgIHJldHVybiBvcC5pbnNlcnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH1cblxuICBpbnNlcnRFbWJlZChpbmRleCwgZW1iZWQsIHZhbHVlKSB7XG4gICAgdGhpcy5zY3JvbGwuaW5zZXJ0QXQoaW5kZXgsIGVtYmVkLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBEZWx0YSgpLnJldGFpbihpbmRleCkuaW5zZXJ0KHsgW2VtYmVkXTogdmFsdWUgfSkpO1xuICB9XG5cbiAgaW5zZXJ0VGV4dChpbmRleCwgdGV4dCwgZm9ybWF0cyA9IHt9KSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKS5yZXBsYWNlKC9cXHIvZywgJ1xcbicpO1xuICAgIHRoaXMuc2Nyb2xsLmluc2VydEF0KGluZGV4LCB0ZXh0KTtcbiAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKChmb3JtYXQpID0+IHtcbiAgICAgIHRoaXMuc2Nyb2xsLmZvcm1hdEF0KGluZGV4LCB0ZXh0Lmxlbmd0aCwgZm9ybWF0LCBmb3JtYXRzW2Zvcm1hdF0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZShuZXcgRGVsdGEoKS5yZXRhaW4oaW5kZXgpLmluc2VydCh0ZXh0LCBjbG9uZShmb3JtYXRzKSkpO1xuICB9XG5cbiAgaXNCbGFuaygpIHtcbiAgICBpZiAodGhpcy5zY3JvbGwuY2hpbGRyZW4ubGVuZ3RoID09IDApIHJldHVybiB0cnVlO1xuICAgIGlmICh0aGlzLnNjcm9sbC5jaGlsZHJlbi5sZW5ndGggPiAxKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGJsb2NrID0gdGhpcy5zY3JvbGwuY2hpbGRyZW4uaGVhZDtcbiAgICBpZiAoYmxvY2suc3RhdGljcy5ibG90TmFtZSAhPT0gQmxvY2suYmxvdE5hbWUpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYmxvY2suY2hpbGRyZW4ubGVuZ3RoID4gMSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBibG9jay5jaGlsZHJlbi5oZWFkIGluc3RhbmNlb2YgQnJlYWs7XG4gIH1cblxuICByZW1vdmVGb3JtYXQoaW5kZXgsIGxlbmd0aCkge1xuICAgIGxldCB0ZXh0ID0gdGhpcy5nZXRUZXh0KGluZGV4LCBsZW5ndGgpO1xuICAgIGxldCBbbGluZSwgb2Zmc2V0XSA9IHRoaXMuc2Nyb2xsLmxpbmUoaW5kZXggKyBsZW5ndGgpO1xuICAgIGxldCBzdWZmaXhMZW5ndGggPSAwLCBzdWZmaXggPSBuZXcgRGVsdGEoKTtcbiAgICBpZiAobGluZSAhPSBudWxsKSB7XG4gICAgICBpZiAoIShsaW5lIGluc3RhbmNlb2YgQ29kZUJsb2NrKSkge1xuICAgICAgICBzdWZmaXhMZW5ndGggPSBsaW5lLmxlbmd0aCgpIC0gb2Zmc2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3VmZml4TGVuZ3RoID0gbGluZS5uZXdsaW5lSW5kZXgob2Zmc2V0KSAtIG9mZnNldCArIDE7XG4gICAgICB9XG4gICAgICBzdWZmaXggPSBsaW5lLmRlbHRhKCkuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBzdWZmaXhMZW5ndGggLSAxKS5pbnNlcnQoJ1xcbicpO1xuICAgIH1cbiAgICBsZXQgY29udGVudHMgPSB0aGlzLmdldENvbnRlbnRzKGluZGV4LCBsZW5ndGggKyBzdWZmaXhMZW5ndGgpO1xuICAgIGxldCBkaWZmID0gY29udGVudHMuZGlmZihuZXcgRGVsdGEoKS5pbnNlcnQodGV4dCkuY29uY2F0KHN1ZmZpeCkpO1xuICAgIGxldCBkZWx0YSA9IG5ldyBEZWx0YSgpLnJldGFpbihpbmRleCkuY29uY2F0KGRpZmYpO1xuICAgIHJldHVybiB0aGlzLmFwcGx5RGVsdGEoZGVsdGEpO1xuICB9XG5cbiAgdXBkYXRlKGNoYW5nZSwgbXV0YXRpb25zID0gW10sIGN1cnNvckluZGV4ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG9sZERlbHRhID0gdGhpcy5kZWx0YTtcbiAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBtdXRhdGlvbnNbMF0udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmXG4gICAgICAgIG11dGF0aW9uc1swXS50YXJnZXQuZGF0YS5tYXRjaChBU0NJSSkgJiZcbiAgICAgICAgUGFyY2htZW50LmZpbmQobXV0YXRpb25zWzBdLnRhcmdldCkpIHtcbiAgICAgIC8vIE9wdGltaXphdGlvbiBmb3IgY2hhcmFjdGVyIGNoYW5nZXNcbiAgICAgIGxldCB0ZXh0QmxvdCA9IFBhcmNobWVudC5maW5kKG11dGF0aW9uc1swXS50YXJnZXQpO1xuICAgICAgbGV0IGZvcm1hdHMgPSBidWJibGVGb3JtYXRzKHRleHRCbG90KTtcbiAgICAgIGxldCBpbmRleCA9IHRleHRCbG90Lm9mZnNldCh0aGlzLnNjcm9sbCk7XG4gICAgICBsZXQgb2xkVmFsdWUgPSBtdXRhdGlvbnNbMF0ub2xkVmFsdWUucmVwbGFjZShDdXJzb3JCbG90LkNPTlRFTlRTLCAnJyk7XG4gICAgICBsZXQgb2xkVGV4dCA9IG5ldyBEZWx0YSgpLmluc2VydChvbGRWYWx1ZSk7XG4gICAgICBsZXQgbmV3VGV4dCA9IG5ldyBEZWx0YSgpLmluc2VydCh0ZXh0QmxvdC52YWx1ZSgpKTtcbiAgICAgIGxldCBkaWZmRGVsdGEgPSBuZXcgRGVsdGEoKS5yZXRhaW4oaW5kZXgpLmNvbmNhdChvbGRUZXh0LmRpZmYobmV3VGV4dCwgY3Vyc29ySW5kZXgpKTtcbiAgICAgIGNoYW5nZSA9IGRpZmZEZWx0YS5yZWR1Y2UoZnVuY3Rpb24oZGVsdGEsIG9wKSB7XG4gICAgICAgIGlmIChvcC5pbnNlcnQpIHtcbiAgICAgICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KG9wLmluc2VydCwgZm9ybWF0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlbHRhLnB1c2gob3ApO1xuICAgICAgICB9XG4gICAgICB9LCBuZXcgRGVsdGEoKSk7XG4gICAgICB0aGlzLmRlbHRhID0gb2xkRGVsdGEuY29tcG9zZShjaGFuZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlbHRhID0gdGhpcy5nZXREZWx0YSgpO1xuICAgICAgaWYgKCFjaGFuZ2UgfHwgIWVxdWFsKG9sZERlbHRhLmNvbXBvc2UoY2hhbmdlKSwgdGhpcy5kZWx0YSkpIHtcbiAgICAgICAgY2hhbmdlID0gb2xkRGVsdGEuZGlmZih0aGlzLmRlbHRhLCBjdXJzb3JJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFuZ2U7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBjb21iaW5lRm9ybWF0cyhmb3JtYXRzLCBjb21iaW5lZCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoY29tYmluZWQpLnJlZHVjZShmdW5jdGlvbihtZXJnZWQsIG5hbWUpIHtcbiAgICBpZiAoZm9ybWF0c1tuYW1lXSA9PSBudWxsKSByZXR1cm4gbWVyZ2VkO1xuICAgIGlmIChjb21iaW5lZFtuYW1lXSA9PT0gZm9ybWF0c1tuYW1lXSkge1xuICAgICAgbWVyZ2VkW25hbWVdID0gY29tYmluZWRbbmFtZV07XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNvbWJpbmVkW25hbWVdKSkge1xuICAgICAgaWYgKGNvbWJpbmVkW25hbWVdLmluZGV4T2YoZm9ybWF0c1tuYW1lXSkgPCAwKSB7XG4gICAgICAgIG1lcmdlZFtuYW1lXSA9IGNvbWJpbmVkW25hbWVdLmNvbmNhdChbZm9ybWF0c1tuYW1lXV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXJnZWRbbmFtZV0gPSBbY29tYmluZWRbbmFtZV0sIGZvcm1hdHNbbmFtZV1dO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURlbHRhKGRlbHRhKSB7XG4gIHJldHVybiBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24oZGVsdGEsIG9wKSB7XG4gICAgaWYgKG9wLmluc2VydCA9PT0gMSkge1xuICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBjbG9uZShvcC5hdHRyaWJ1dGVzKTtcbiAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzWydpbWFnZSddO1xuICAgICAgcmV0dXJuIGRlbHRhLmluc2VydCh7IGltYWdlOiBvcC5hdHRyaWJ1dGVzLmltYWdlIH0sIGF0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICBpZiAob3AuYXR0cmlidXRlcyAhPSBudWxsICYmIChvcC5hdHRyaWJ1dGVzLmxpc3QgPT09IHRydWUgfHwgb3AuYXR0cmlidXRlcy5idWxsZXQgPT09IHRydWUpKSB7XG4gICAgICBvcCA9IGNsb25lKG9wKTtcbiAgICAgIGlmIChvcC5hdHRyaWJ1dGVzLmxpc3QpIHtcbiAgICAgICAgb3AuYXR0cmlidXRlcy5saXN0ID0gJ29yZGVyZWQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3AuYXR0cmlidXRlcy5saXN0ID0gJ2J1bGxldCc7XG4gICAgICAgIGRlbGV0ZSBvcC5hdHRyaWJ1dGVzLmJ1bGxldDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcC5pbnNlcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgdGV4dCA9IG9wLmluc2VydC5yZXBsYWNlKC9cXHJcXG4vZywgJ1xcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxuJyk7XG4gICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KHRleHQsIG9wLmF0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsdGEucHVzaChvcCk7XG4gIH0sIG5ldyBEZWx0YSgpKTtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3I7XG4iLCJsZXQgbGV2ZWxzID0gWydlcnJvcicsICd3YXJuJywgJ2xvZycsICdpbmZvJ107XG5sZXQgbGV2ZWwgPSAnd2Fybic7XG5cbmZ1bmN0aW9uIGRlYnVnKG1ldGhvZCwgLi4uYXJncykge1xuICBpZiAobGV2ZWxzLmluZGV4T2YobWV0aG9kKSA8PSBsZXZlbHMuaW5kZXhPZihsZXZlbCkpIHtcbiAgICBjb25zb2xlW21ldGhvZF0oLi4uYXJncyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgfVxufVxuXG5mdW5jdGlvbiBuYW1lc3BhY2UobnMpIHtcbiAgcmV0dXJuIGxldmVscy5yZWR1Y2UoZnVuY3Rpb24obG9nZ2VyLCBtZXRob2QpIHtcbiAgICBsb2dnZXJbbWV0aG9kXSA9IGRlYnVnLmJpbmQoY29uc29sZSwgbWV0aG9kLCBucyk7XG4gICAgcmV0dXJuIGxvZ2dlcjtcbiAgfSwge30pO1xufVxuXG5kZWJ1Zy5sZXZlbCA9IG5hbWVzcGFjZS5sZXZlbCA9IGZ1bmN0aW9uKG5ld0xldmVsKSB7XG4gIGxldmVsID0gbmV3TGV2ZWw7XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IG5hbWVzcGFjZTtcbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRlbWl0dGVyMyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxubGV0IGRlYnVnID0gbG9nZ2VyKCdxdWlsbDpldmVudHMnKTtcblxuY29uc3QgRVZFTlRTID0gWydzZWxlY3Rpb25jaGFuZ2UnLCAnbW91c2Vkb3duJywgJ21vdXNldXAnLCAnY2xpY2snXTtcblxuRVZFTlRTLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAoLi4uYXJncykgPT4ge1xuICAgIFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnFsLWNvbnRhaW5lcicpKS5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAvLyBUT0RPIHVzZSBXZWFrTWFwXG4gICAgICBpZiAobm9kZS5fX3F1aWxsICYmIG5vZGUuX19xdWlsbC5lbWl0dGVyKSB7XG4gICAgICAgIG5vZGUuX19xdWlsbC5lbWl0dGVyLmhhbmRsZURPTSguLi5hcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59KTtcblxuXG5jbGFzcyBFbWl0dGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMub24oJ2Vycm9yJywgZGVidWcuZXJyb3IpO1xuICB9XG5cbiAgZW1pdCgpIHtcbiAgICBkZWJ1Zy5sb2cuYXBwbHkoZGVidWcsIGFyZ3VtZW50cyk7XG4gICAgc3VwZXIuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgaGFuZGxlRE9NKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgKHRoaXMubGlzdGVuZXJzW2V2ZW50LnR5cGVdIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHsgbm9kZSwgaGFuZGxlciB9KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBub2RlIHx8IG5vZGUuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBoYW5kbGVyKGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGxpc3RlbkRPTShldmVudE5hbWUsIG5vZGUsIGhhbmRsZXIpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0pIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gPSBbXTtcbiAgICB9XG4gICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXS5wdXNoKHsgbm9kZSwgaGFuZGxlciB9KVxuICB9XG59XG5cbkVtaXR0ZXIuZXZlbnRzID0ge1xuICBFRElUT1JfQ0hBTkdFICAgICAgICA6ICdlZGl0b3ItY2hhbmdlJyxcbiAgU0NST0xMX0JFRk9SRV9VUERBVEUgOiAnc2Nyb2xsLWJlZm9yZS11cGRhdGUnLFxuICBTQ1JPTExfT1BUSU1JWkUgICAgICA6ICdzY3JvbGwtb3B0aW1pemUnLFxuICBTQ1JPTExfVVBEQVRFICAgICAgICA6ICdzY3JvbGwtdXBkYXRlJyxcbiAgU0VMRUNUSU9OX0NIQU5HRSAgICAgOiAnc2VsZWN0aW9uLWNoYW5nZScsXG4gIFRFWFRfQ0hBTkdFICAgICAgICAgIDogJ3RleHQtY2hhbmdlJ1xufTtcbkVtaXR0ZXIuc291cmNlcyA9IHtcbiAgQVBJICAgIDogJ2FwaScsXG4gIFNJTEVOVCA6ICdzaWxlbnQnLFxuICBVU0VSICAgOiAndXNlcidcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgRW1pdHRlcjtcbiIsImNsYXNzIE1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKHF1aWxsLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnF1aWxsID0gcXVpbGw7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxufVxuTW9kdWxlLkRFRkFVTFRTID0ge307XG5cblxuZXhwb3J0IGRlZmF1bHQgTW9kdWxlO1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuaW1wb3J0IGNsb25lIGZyb20gJ2Nsb25lJztcbmltcG9ydCBlcXVhbCBmcm9tICdkZWVwLWVxdWFsJztcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4vZW1pdHRlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxubGV0IGRlYnVnID0gbG9nZ2VyKCdxdWlsbDpzZWxlY3Rpb24nKTtcblxuXG5jbGFzcyBSYW5nZSB7XG4gIGNvbnN0cnVjdG9yKGluZGV4LCBsZW5ndGggPSAwKSB7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICB9XG59XG5cblxuY2xhc3MgU2VsZWN0aW9uIHtcbiAgY29uc3RydWN0b3Ioc2Nyb2xsLCBlbWl0dGVyKSB7XG4gICAgdGhpcy5lbWl0dGVyID0gZW1pdHRlcjtcbiAgICB0aGlzLnNjcm9sbCA9IHNjcm9sbDtcbiAgICB0aGlzLmNvbXBvc2luZyA9IGZhbHNlO1xuICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XG4gICAgdGhpcy5yb290ID0gdGhpcy5zY3JvbGwuZG9tTm9kZTtcbiAgICB0aGlzLmN1cnNvciA9IFBhcmNobWVudC5jcmVhdGUoJ2N1cnNvcicsIHRoaXMpO1xuICAgIC8vIHNhdmVkUmFuZ2UgaXMgbGFzdCBub24tbnVsbCByYW5nZVxuICAgIHRoaXMubGFzdFJhbmdlID0gdGhpcy5zYXZlZFJhbmdlID0gbmV3IFJhbmdlKDAsIDApO1xuICAgIHRoaXMuaGFuZGxlQ29tcG9zaXRpb24oKTtcbiAgICB0aGlzLmhhbmRsZURyYWdnaW5nKCk7XG4gICAgdGhpcy5lbWl0dGVyLmxpc3RlbkRPTSgnc2VsZWN0aW9uY2hhbmdlJywgZG9jdW1lbnQsICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5tb3VzZURvd24pIHtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMsIEVtaXR0ZXIuc291cmNlcy5VU0VSKSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0dGVyLm9uKEVtaXR0ZXIuZXZlbnRzLkVESVRPUl9DSEFOR0UsICh0eXBlLCBkZWx0YSkgPT4ge1xuICAgICAgaWYgKHR5cGUgPT09IEVtaXR0ZXIuZXZlbnRzLlRFWFRfQ0hBTkdFICYmIGRlbHRhLmxlbmd0aCgpID4gMCkge1xuICAgICAgICB0aGlzLnVwZGF0ZShFbWl0dGVyLnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oRW1pdHRlci5ldmVudHMuU0NST0xMX0JFRk9SRV9VUERBVEUsICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5oYXNGb2N1cygpKSByZXR1cm47XG4gICAgICBsZXQgbmF0aXZlID0gdGhpcy5nZXROYXRpdmVSYW5nZSgpO1xuICAgICAgaWYgKG5hdGl2ZSA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAobmF0aXZlLnN0YXJ0Lm5vZGUgPT09IHRoaXMuY3Vyc29yLnRleHROb2RlKSByZXR1cm47ICAvLyBjdXJzb3IucmVzdG9yZSgpIHdpbGwgaGFuZGxlXG4gICAgICAvLyBUT0RPIHVuY2xlYXIgaWYgdGhpcyBoYXMgbmVnYXRpdmUgc2lkZSBlZmZlY3RzXG4gICAgICB0aGlzLmVtaXR0ZXIub25jZShFbWl0dGVyLmV2ZW50cy5TQ1JPTExfVVBEQVRFLCAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5zZXROYXRpdmVSYW5nZShuYXRpdmUuc3RhcnQubm9kZSwgbmF0aXZlLnN0YXJ0Lm9mZnNldCwgbmF0aXZlLmVuZC5ub2RlLCBuYXRpdmUuZW5kLm9mZnNldCk7XG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHt9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oRW1pdHRlci5ldmVudHMuU0NST0xMX09QVElNSVpFLCAobXV0YXRpb25zLCBjb250ZXh0KSA9PiB7XG4gICAgICBpZiAoY29udGV4dC5yYW5nZSkge1xuICAgICAgICBjb25zdCB7IHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQsIGVuZE5vZGUsIGVuZE9mZnNldCB9ID0gY29udGV4dC5yYW5nZTtcbiAgICAgICAgdGhpcy5zZXROYXRpdmVSYW5nZShzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0LCBlbmROb2RlLCBlbmRPZmZzZXQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlKEVtaXR0ZXIuc291cmNlcy5TSUxFTlQpO1xuICB9XG5cbiAgaGFuZGxlQ29tcG9zaXRpb24oKSB7XG4gICAgdGhpcy5yb290LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmNvbXBvc2luZyA9IHRydWU7XG4gICAgfSk7XG4gICAgdGhpcy5yb290LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgKCkgPT4ge1xuICAgICAgdGhpcy5jb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgIGlmICh0aGlzLmN1cnNvci5wYXJlbnQpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmN1cnNvci5yZXN0b3JlKCk7XG4gICAgICAgIGlmICghcmFuZ2UpIHJldHVybjtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXROYXRpdmVSYW5nZShyYW5nZS5zdGFydE5vZGUsIHJhbmdlLnN0YXJ0T2Zmc2V0LCByYW5nZS5lbmROb2RlLCByYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgICB9LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZURyYWdnaW5nKCkge1xuICAgIHRoaXMuZW1pdHRlci5saXN0ZW5ET00oJ21vdXNlZG93bicsIGRvY3VtZW50LmJvZHksICgpID0+IHtcbiAgICAgIHRoaXMubW91c2VEb3duID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIubGlzdGVuRE9NKCdtb3VzZXVwJywgZG9jdW1lbnQuYm9keSwgKCkgPT4ge1xuICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMudXBkYXRlKEVtaXR0ZXIuc291cmNlcy5VU0VSKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZvY3VzKCkge1xuICAgIGlmICh0aGlzLmhhc0ZvY3VzKCkpIHJldHVybjtcbiAgICB0aGlzLnJvb3QuZm9jdXMoKTtcbiAgICB0aGlzLnNldFJhbmdlKHRoaXMuc2F2ZWRSYW5nZSk7XG4gIH1cblxuICBmb3JtYXQoZm9ybWF0LCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLnNjcm9sbC53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhdGhpcy5zY3JvbGwud2hpdGVsaXN0W2Zvcm1hdF0pIHJldHVybjtcbiAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICBsZXQgbmF0aXZlUmFuZ2UgPSB0aGlzLmdldE5hdGl2ZVJhbmdlKCk7XG4gICAgaWYgKG5hdGl2ZVJhbmdlID09IG51bGwgfHwgIW5hdGl2ZVJhbmdlLm5hdGl2ZS5jb2xsYXBzZWQgfHwgUGFyY2htZW50LnF1ZXJ5KGZvcm1hdCwgUGFyY2htZW50LlNjb3BlLkJMT0NLKSkgcmV0dXJuO1xuICAgIGlmIChuYXRpdmVSYW5nZS5zdGFydC5ub2RlICE9PSB0aGlzLmN1cnNvci50ZXh0Tm9kZSkge1xuICAgICAgbGV0IGJsb3QgPSBQYXJjaG1lbnQuZmluZChuYXRpdmVSYW5nZS5zdGFydC5ub2RlLCBmYWxzZSk7XG4gICAgICBpZiAoYmxvdCA9PSBudWxsKSByZXR1cm47XG4gICAgICAvLyBUT0RPIEdpdmUgYmxvdCBhYmlsaXR5IHRvIG5vdCBzcGxpdFxuICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBQYXJjaG1lbnQuTGVhZikge1xuICAgICAgICBsZXQgYWZ0ZXIgPSBibG90LnNwbGl0KG5hdGl2ZVJhbmdlLnN0YXJ0Lm9mZnNldCk7XG4gICAgICAgIGJsb3QucGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLmN1cnNvciwgYWZ0ZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvdC5pbnNlcnRCZWZvcmUodGhpcy5jdXJzb3IsIG5hdGl2ZVJhbmdlLnN0YXJ0Lm5vZGUpOyAgLy8gU2hvdWxkIG5ldmVyIGhhcHBlblxuICAgICAgfVxuICAgICAgdGhpcy5jdXJzb3IuYXR0YWNoKCk7XG4gICAgfVxuICAgIHRoaXMuY3Vyc29yLmZvcm1hdChmb3JtYXQsIHZhbHVlKTtcbiAgICB0aGlzLnNjcm9sbC5vcHRpbWl6ZSgpO1xuICAgIHRoaXMuc2V0TmF0aXZlUmFuZ2UodGhpcy5jdXJzb3IudGV4dE5vZGUsIHRoaXMuY3Vyc29yLnRleHROb2RlLmRhdGEubGVuZ3RoKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgZ2V0Qm91bmRzKGluZGV4LCBsZW5ndGggPSAwKSB7XG4gICAgbGV0IHNjcm9sbExlbmd0aCA9IHRoaXMuc2Nyb2xsLmxlbmd0aCgpO1xuICAgIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHNjcm9sbExlbmd0aCAtIDEpO1xuICAgIGxlbmd0aCA9IE1hdGgubWluKGluZGV4ICsgbGVuZ3RoLCBzY3JvbGxMZW5ndGggLSAxKSAtIGluZGV4O1xuICAgIGxldCBub2RlLCBbbGVhZiwgb2Zmc2V0XSA9IHRoaXMuc2Nyb2xsLmxlYWYoaW5kZXgpO1xuICAgIGlmIChsZWFmID09IG51bGwpIHJldHVybiBudWxsO1xuICAgIFtub2RlLCBvZmZzZXRdID0gbGVhZi5wb3NpdGlvbihvZmZzZXQsIHRydWUpO1xuICAgIGxldCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7XG4gICAgICBbbGVhZiwgb2Zmc2V0XSA9IHRoaXMuc2Nyb2xsLmxlYWYoaW5kZXggKyBsZW5ndGgpO1xuICAgICAgaWYgKGxlYWYgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICBbbm9kZSwgb2Zmc2V0XSA9IGxlYWYucG9zaXRpb24ob2Zmc2V0LCB0cnVlKTtcbiAgICAgIHJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQpO1xuICAgICAgcmV0dXJuIHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc2lkZSA9ICdsZWZ0JztcbiAgICAgIGxldCByZWN0O1xuICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBUZXh0KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPCBub2RlLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0ICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0IC0gMSk7XG4gICAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgc2lkZSA9ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgcmVjdCA9IHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjdCA9IGxlYWYuZG9tTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG9mZnNldCA+IDApIHNpZGUgPSAncmlnaHQnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYm90dG9tOiByZWN0LnRvcCArIHJlY3QuaGVpZ2h0LFxuICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgICBsZWZ0OiByZWN0W3NpZGVdLFxuICAgICAgICByaWdodDogcmVjdFtzaWRlXSxcbiAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgd2lkdGg6IDBcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZ2V0TmF0aXZlUmFuZ2UoKSB7XG4gICAgbGV0IHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgIGlmIChzZWxlY3Rpb24gPT0gbnVsbCB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA8PSAwKSByZXR1cm4gbnVsbDtcbiAgICBsZXQgbmF0aXZlUmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICBpZiAobmF0aXZlUmFuZ2UgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgbGV0IHJhbmdlID0gdGhpcy5ub3JtYWxpemVOYXRpdmUobmF0aXZlUmFuZ2UpO1xuICAgIGRlYnVnLmluZm8oJ2dldE5hdGl2ZVJhbmdlJywgcmFuZ2UpO1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuXG4gIGdldFJhbmdlKCkge1xuICAgIGxldCBub3JtYWxpemVkID0gdGhpcy5nZXROYXRpdmVSYW5nZSgpO1xuICAgIGlmIChub3JtYWxpemVkID09IG51bGwpIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgbGV0IHJhbmdlID0gdGhpcy5ub3JtYWxpemVkVG9SYW5nZShub3JtYWxpemVkKTtcbiAgICByZXR1cm4gW3JhbmdlLCBub3JtYWxpemVkXTtcbiAgfVxuXG4gIGhhc0ZvY3VzKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzLnJvb3Q7XG4gIH1cblxuICBub3JtYWxpemVkVG9SYW5nZShyYW5nZSkge1xuICAgIGxldCBwb3NpdGlvbnMgPSBbW3JhbmdlLnN0YXJ0Lm5vZGUsIHJhbmdlLnN0YXJ0Lm9mZnNldF1dO1xuICAgIGlmICghcmFuZ2UubmF0aXZlLmNvbGxhcHNlZCkge1xuICAgICAgcG9zaXRpb25zLnB1c2goW3JhbmdlLmVuZC5ub2RlLCByYW5nZS5lbmQub2Zmc2V0XSk7XG4gICAgfVxuICAgIGxldCBpbmRleGVzID0gcG9zaXRpb25zLm1hcCgocG9zaXRpb24pID0+IHtcbiAgICAgIGxldCBbbm9kZSwgb2Zmc2V0XSA9IHBvc2l0aW9uO1xuICAgICAgbGV0IGJsb3QgPSBQYXJjaG1lbnQuZmluZChub2RlLCB0cnVlKTtcbiAgICAgIGxldCBpbmRleCA9IGJsb3Qub2Zmc2V0KHRoaXMuc2Nyb2xsKTtcbiAgICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChibG90IGluc3RhbmNlb2YgUGFyY2htZW50LkNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gaW5kZXggKyBibG90Lmxlbmd0aCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ICsgYmxvdC5pbmRleChub2RlLCBvZmZzZXQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBlbmQgPSBNYXRoLm1pbihNYXRoLm1heCguLi5pbmRleGVzKSwgdGhpcy5zY3JvbGwubGVuZ3RoKCkgLSAxKTtcbiAgICBsZXQgc3RhcnQgPSBNYXRoLm1pbihlbmQsIC4uLmluZGV4ZXMpO1xuICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnQsIGVuZC1zdGFydCk7XG4gIH1cblxuICBub3JtYWxpemVOYXRpdmUobmF0aXZlUmFuZ2UpIHtcbiAgICBpZiAoIWNvbnRhaW5zKHRoaXMucm9vdCwgbmF0aXZlUmFuZ2Uuc3RhcnRDb250YWluZXIpIHx8XG4gICAgICAgICghbmF0aXZlUmFuZ2UuY29sbGFwc2VkICYmICFjb250YWlucyh0aGlzLnJvb3QsIG5hdGl2ZVJhbmdlLmVuZENvbnRhaW5lcikpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IHJhbmdlID0ge1xuICAgICAgc3RhcnQ6IHsgbm9kZTogbmF0aXZlUmFuZ2Uuc3RhcnRDb250YWluZXIsIG9mZnNldDogbmF0aXZlUmFuZ2Uuc3RhcnRPZmZzZXQgfSxcbiAgICAgIGVuZDogeyBub2RlOiBuYXRpdmVSYW5nZS5lbmRDb250YWluZXIsIG9mZnNldDogbmF0aXZlUmFuZ2UuZW5kT2Zmc2V0IH0sXG4gICAgICBuYXRpdmU6IG5hdGl2ZVJhbmdlXG4gICAgfTtcbiAgICBbcmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZF0uZm9yRWFjaChmdW5jdGlvbihwb3NpdGlvbikge1xuICAgICAgbGV0IG5vZGUgPSBwb3NpdGlvbi5ub2RlLCBvZmZzZXQgPSBwb3NpdGlvbi5vZmZzZXQ7XG4gICAgICB3aGlsZSAoIShub2RlIGluc3RhbmNlb2YgVGV4dCkgJiYgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiBvZmZzZXQpIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSBvZmZzZXQpIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5sYXN0Q2hpbGQ7XG4gICAgICAgICAgb2Zmc2V0ID0gbm9kZSBpbnN0YW5jZW9mIFRleHQgPyBub2RlLmRhdGEubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBvc2l0aW9uLm5vZGUgPSBub2RlLCBwb3NpdGlvbi5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG5cbiAgcmFuZ2VUb05hdGl2ZShyYW5nZSkge1xuICAgIGxldCBpbmRleGVzID0gcmFuZ2UuY29sbGFwc2VkID8gW3JhbmdlLmluZGV4XSA6IFtyYW5nZS5pbmRleCwgcmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGhdO1xuICAgIGxldCBhcmdzID0gW107XG4gICAgbGV0IHNjcm9sbExlbmd0aCA9IHRoaXMuc2Nyb2xsLmxlbmd0aCgpO1xuICAgIGluZGV4ZXMuZm9yRWFjaCgoaW5kZXgsIGkpID0+IHtcbiAgICAgIGluZGV4ID0gTWF0aC5taW4oc2Nyb2xsTGVuZ3RoIC0gMSwgaW5kZXgpO1xuICAgICAgbGV0IG5vZGUsIFtsZWFmLCBvZmZzZXRdID0gdGhpcy5zY3JvbGwubGVhZihpbmRleCk7XG4gICAgICBbbm9kZSwgb2Zmc2V0XSA9IGxlYWYucG9zaXRpb24ob2Zmc2V0LCBpICE9PSAwKTtcbiAgICAgIGFyZ3MucHVzaChub2RlLCBvZmZzZXQpO1xuICAgIH0pO1xuICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH1cblxuICBzY3JvbGxJbnRvVmlldyhzY3JvbGxpbmdDb250YWluZXIpIHtcbiAgICBsZXQgcmFuZ2UgPSB0aGlzLmxhc3RSYW5nZTtcbiAgICBpZiAocmFuZ2UgPT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCBib3VuZHMgPSB0aGlzLmdldEJvdW5kcyhyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoKTtcbiAgICBpZiAoYm91bmRzID09IG51bGwpIHJldHVybjtcbiAgICBsZXQgbGltaXQgPSB0aGlzLnNjcm9sbC5sZW5ndGgoKS0xO1xuICAgIGxldCBbZmlyc3QsIF0gPSB0aGlzLnNjcm9sbC5saW5lKE1hdGgubWluKHJhbmdlLmluZGV4LCBsaW1pdCkpO1xuICAgIGxldCBsYXN0ID0gZmlyc3Q7XG4gICAgaWYgKHJhbmdlLmxlbmd0aCA+IDApIHtcbiAgICAgIFtsYXN0LCBdID0gdGhpcy5zY3JvbGwubGluZShNYXRoLm1pbihyYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCwgbGltaXQpKTtcbiAgICB9XG4gICAgaWYgKGZpcnN0ID09IG51bGwgfHwgbGFzdCA9PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHNjcm9sbEJvdW5kcyA9IHNjcm9sbGluZ0NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoYm91bmRzLnRvcCA8IHNjcm9sbEJvdW5kcy50b3ApIHtcbiAgICAgIHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgLT0gKHNjcm9sbEJvdW5kcy50b3AgLSBib3VuZHMudG9wKTtcbiAgICB9IGVsc2UgaWYgKGJvdW5kcy5ib3R0b20gPiBzY3JvbGxCb3VuZHMuYm90dG9tKSB7XG4gICAgICBzY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wICs9IChib3VuZHMuYm90dG9tIC0gc2Nyb2xsQm91bmRzLmJvdHRvbSk7XG4gICAgfVxuICB9XG5cbiAgc2V0TmF0aXZlUmFuZ2Uoc3RhcnROb2RlLCBzdGFydE9mZnNldCwgZW5kTm9kZSA9IHN0YXJ0Tm9kZSwgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQsIGZvcmNlID0gZmFsc2UpIHtcbiAgICBkZWJ1Zy5pbmZvKCdzZXROYXRpdmVSYW5nZScsIHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQsIGVuZE5vZGUsIGVuZE9mZnNldCk7XG4gICAgaWYgKHN0YXJ0Tm9kZSAhPSBudWxsICYmICh0aGlzLnJvb3QucGFyZW50Tm9kZSA9PSBudWxsIHx8IHN0YXJ0Tm9kZS5wYXJlbnROb2RlID09IG51bGwgfHwgZW5kTm9kZS5wYXJlbnROb2RlID09IG51bGwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgICBpZiAoc2VsZWN0aW9uID09IG51bGwpIHJldHVybjtcbiAgICBpZiAoc3RhcnROb2RlICE9IG51bGwpIHtcbiAgICAgIGlmICghdGhpcy5oYXNGb2N1cygpKSB0aGlzLnJvb3QuZm9jdXMoKTtcbiAgICAgIGxldCBuYXRpdmUgPSAodGhpcy5nZXROYXRpdmVSYW5nZSgpIHx8IHt9KS5uYXRpdmU7XG4gICAgICBpZiAobmF0aXZlID09IG51bGwgfHwgZm9yY2UgfHxcbiAgICAgICAgICBzdGFydE5vZGUgIT09IG5hdGl2ZS5zdGFydENvbnRhaW5lciB8fFxuICAgICAgICAgIHN0YXJ0T2Zmc2V0ICE9PSBuYXRpdmUuc3RhcnRPZmZzZXQgfHxcbiAgICAgICAgICBlbmROb2RlICE9PSBuYXRpdmUuZW5kQ29udGFpbmVyIHx8XG4gICAgICAgICAgZW5kT2Zmc2V0ICE9PSBuYXRpdmUuZW5kT2Zmc2V0KSB7XG5cbiAgICAgICAgaWYgKHN0YXJ0Tm9kZS50YWdOYW1lID09IFwiQlJcIikge1xuICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gW10uaW5kZXhPZi5jYWxsKHN0YXJ0Tm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXMsIHN0YXJ0Tm9kZSk7XG4gICAgICAgICAgc3RhcnROb2RlID0gc3RhcnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZE5vZGUudGFnTmFtZSA9PSBcIkJSXCIpIHtcbiAgICAgICAgICBlbmRPZmZzZXQgPSBbXS5pbmRleE9mLmNhbGwoZW5kTm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXMsIGVuZE5vZGUpO1xuICAgICAgICAgIGVuZE5vZGUgPSBlbmROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnROb2RlLCBzdGFydE9mZnNldCk7XG4gICAgICAgIHJhbmdlLnNldEVuZChlbmROb2RlLCBlbmRPZmZzZXQpO1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIHRoaXMucm9vdC5ibHVyKCk7XG4gICAgICBkb2N1bWVudC5ib2R5LmZvY3VzKCk7ICAvLyByb290LmJsdXIoKSBub3QgZW5vdWdoIG9uIElFMTErVHJhdmlzK1NhdWNlTGFicyAoYnV0IG5vdCBsb2NhbCBWTXMpXG4gICAgfVxuICB9XG5cbiAgc2V0UmFuZ2UocmFuZ2UsIGZvcmNlID0gZmFsc2UsIHNvdXJjZSA9IEVtaXR0ZXIuc291cmNlcy5BUEkpIHtcbiAgICBpZiAodHlwZW9mIGZvcmNlID09PSAnc3RyaW5nJykge1xuICAgICAgc291cmNlID0gZm9yY2U7XG4gICAgICBmb3JjZSA9IGZhbHNlO1xuICAgIH1cbiAgICBkZWJ1Zy5pbmZvKCdzZXRSYW5nZScsIHJhbmdlKTtcbiAgICBpZiAocmFuZ2UgIT0gbnVsbCkge1xuICAgICAgbGV0IGFyZ3MgPSB0aGlzLnJhbmdlVG9OYXRpdmUocmFuZ2UpO1xuICAgICAgdGhpcy5zZXROYXRpdmVSYW5nZSguLi5hcmdzLCBmb3JjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0TmF0aXZlUmFuZ2UobnVsbCk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlKHNvdXJjZSk7XG4gIH1cblxuICB1cGRhdGUoc291cmNlID0gRW1pdHRlci5zb3VyY2VzLlVTRVIpIHtcbiAgICBsZXQgb2xkUmFuZ2UgPSB0aGlzLmxhc3RSYW5nZTtcbiAgICBsZXQgW2xhc3RSYW5nZSwgbmF0aXZlUmFuZ2VdID0gdGhpcy5nZXRSYW5nZSgpO1xuICAgIHRoaXMubGFzdFJhbmdlID0gbGFzdFJhbmdlO1xuICAgIGlmICh0aGlzLmxhc3RSYW5nZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLnNhdmVkUmFuZ2UgPSB0aGlzLmxhc3RSYW5nZTtcbiAgICB9XG4gICAgaWYgKCFlcXVhbChvbGRSYW5nZSwgdGhpcy5sYXN0UmFuZ2UpKSB7XG4gICAgICBpZiAoIXRoaXMuY29tcG9zaW5nICYmIG5hdGl2ZVJhbmdlICE9IG51bGwgJiYgbmF0aXZlUmFuZ2UubmF0aXZlLmNvbGxhcHNlZCAmJiBuYXRpdmVSYW5nZS5zdGFydC5ub2RlICE9PSB0aGlzLmN1cnNvci50ZXh0Tm9kZSkge1xuICAgICAgICB0aGlzLmN1cnNvci5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgICBsZXQgYXJncyA9IFtFbWl0dGVyLmV2ZW50cy5TRUxFQ1RJT05fQ0hBTkdFLCBjbG9uZSh0aGlzLmxhc3RSYW5nZSksIGNsb25lKG9sZFJhbmdlKSwgc291cmNlXTtcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KEVtaXR0ZXIuZXZlbnRzLkVESVRPUl9DSEFOR0UsIC4uLmFyZ3MpO1xuICAgICAgaWYgKHNvdXJjZSAhPT0gRW1pdHRlci5zb3VyY2VzLlNJTEVOVCkge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCguLi5hcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGRlc2NlbmRhbnQpIHtcbiAgdHJ5IHtcbiAgICAvLyBGaXJlZm94IGluc2VydHMgaW5hY2Nlc3NpYmxlIG5vZGVzIGFyb3VuZCB2aWRlbyBlbGVtZW50c1xuICAgIGRlc2NlbmRhbnQucGFyZW50Tm9kZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBJRTExIGhhcyBidWcgd2l0aCBUZXh0IG5vZGVzXG4gIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvNzgwODc0L25vZGUtY29udGFpbnMtaXMtaW5jb3JyZWN0XG4gIGlmIChkZXNjZW5kYW50IGluc3RhbmNlb2YgVGV4dCkge1xuICAgIGRlc2NlbmRhbnQgPSBkZXNjZW5kYW50LnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHBhcmVudC5jb250YWlucyhkZXNjZW5kYW50KTtcbn1cblxuXG5leHBvcnQgeyBSYW5nZSwgU2VsZWN0aW9uIGFzIGRlZmF1bHQgfTtcbiIsImNsYXNzIFRoZW1lIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnF1aWxsID0gcXVpbGw7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLm1vZHVsZXMgPSB7fTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZHVsZXMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGlmICh0aGlzLm1vZHVsZXNbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmFkZE1vZHVsZShuYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZE1vZHVsZShuYW1lKSB7XG4gICAgbGV0IG1vZHVsZUNsYXNzID0gdGhpcy5xdWlsbC5jb25zdHJ1Y3Rvci5pbXBvcnQoYG1vZHVsZXMvJHtuYW1lfWApO1xuICAgIHRoaXMubW9kdWxlc1tuYW1lXSA9IG5ldyBtb2R1bGVDbGFzcyh0aGlzLnF1aWxsLCB0aGlzLm9wdGlvbnMubW9kdWxlc1tuYW1lXSB8fCB7fSk7XG4gICAgcmV0dXJuIHRoaXMubW9kdWxlc1tuYW1lXTtcbiAgfVxufVxuVGhlbWUuREVGQVVMVFMgPSB7XG4gIG1vZHVsZXM6IHt9XG59O1xuVGhlbWUudGhlbWVzID0ge1xuICAnZGVmYXVsdCc6IFRoZW1lXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lO1xuIiwiaW1wb3J0ICcuL3BvbHlmaWxsJztcbmltcG9ydCBEZWx0YSBmcm9tICdxdWlsbC1kZWx0YSc7XG5pbXBvcnQgRWRpdG9yIGZyb20gJy4vZWRpdG9yJztcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4vZW1pdHRlcic7XG5pbXBvcnQgTW9kdWxlIGZyb20gJy4vbW9kdWxlJztcbmltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBTZWxlY3Rpb24sIHsgUmFuZ2UgfSBmcm9tICcuL3NlbGVjdGlvbic7XG5pbXBvcnQgZXh0ZW5kIGZyb20gJ2V4dGVuZCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBUaGVtZSBmcm9tICcuL3RoZW1lJztcblxubGV0IGRlYnVnID0gbG9nZ2VyKCdxdWlsbCcpO1xuXG5cbmNsYXNzIFF1aWxsIHtcbiAgc3RhdGljIGRlYnVnKGxpbWl0KSB7XG4gICAgaWYgKGxpbWl0ID09PSB0cnVlKSB7XG4gICAgICBsaW1pdCA9ICdsb2cnO1xuICAgIH1cbiAgICBsb2dnZXIubGV2ZWwobGltaXQpO1xuICB9XG5cbiAgc3RhdGljIGZpbmQobm9kZSkge1xuICAgIHJldHVybiBub2RlLl9fcXVpbGwgfHwgUGFyY2htZW50LmZpbmQobm9kZSk7XG4gIH1cblxuICBzdGF0aWMgaW1wb3J0KG5hbWUpIHtcbiAgICBpZiAodGhpcy5pbXBvcnRzW25hbWVdID09IG51bGwpIHtcbiAgICAgIGRlYnVnLmVycm9yKGBDYW5ub3QgaW1wb3J0ICR7bmFtZX0uIEFyZSB5b3Ugc3VyZSBpdCB3YXMgcmVnaXN0ZXJlZD9gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW1wb3J0c1tuYW1lXTtcbiAgfVxuXG4gIHN0YXRpYyByZWdpc3RlcihwYXRoLCB0YXJnZXQsIG92ZXJ3cml0ZSA9IGZhbHNlKSB7XG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgbGV0IG5hbWUgPSBwYXRoLmF0dHJOYW1lIHx8IHBhdGguYmxvdE5hbWU7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIHJlZ2lzdGVyKEJsb3QgfCBBdHRyaWJ1dG9yLCBvdmVyd3JpdGUpXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ2Zvcm1hdHMvJyArIG5hbWUsIHBhdGgsIHRhcmdldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyhwYXRoKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICB0aGlzLnJlZ2lzdGVyKGtleSwgcGF0aFtrZXldLCB0YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaW1wb3J0c1twYXRoXSAhPSBudWxsICYmICFvdmVyd3JpdGUpIHtcbiAgICAgICAgZGVidWcud2FybihgT3ZlcndyaXRpbmcgJHtwYXRofSB3aXRoYCwgdGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW1wb3J0c1twYXRoXSA9IHRhcmdldDtcbiAgICAgIGlmICgocGF0aC5zdGFydHNXaXRoKCdibG90cy8nKSB8fCBwYXRoLnN0YXJ0c1dpdGgoJ2Zvcm1hdHMvJykpICYmXG4gICAgICAgICAgdGFyZ2V0LmJsb3ROYW1lICE9PSAnYWJzdHJhY3QnKSB7XG4gICAgICAgIFBhcmNobWVudC5yZWdpc3Rlcih0YXJnZXQpO1xuICAgICAgfSBlbHNlIGlmIChwYXRoLnN0YXJ0c1dpdGgoJ21vZHVsZXMnKSAmJiB0eXBlb2YgdGFyZ2V0LnJlZ2lzdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRhcmdldC5yZWdpc3RlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5vcHRpb25zID0gZXhwYW5kQ29uZmlnKGNvbnRhaW5lciwgb3B0aW9ucyk7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyO1xuICAgIGlmICh0aGlzLmNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZGVidWcuZXJyb3IoJ0ludmFsaWQgUXVpbGwgY29udGFpbmVyJywgY29udGFpbmVyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWJ1Zykge1xuICAgICAgUXVpbGwuZGVidWcodGhpcy5vcHRpb25zLmRlYnVnKTtcbiAgICB9XG4gICAgbGV0IGh0bWwgPSB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwudHJpbSgpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLWNvbnRhaW5lcicpO1xuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuY29udGFpbmVyLl9fcXVpbGwgPSB0aGlzO1xuICAgIHRoaXMucm9vdCA9IHRoaXMuYWRkQ29udGFpbmVyKCdxbC1lZGl0b3InKTtcbiAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZCgncWwtYmxhbmsnKTtcbiAgICB0aGlzLnJvb3Quc2V0QXR0cmlidXRlKCdkYXRhLWdyYW1tJywgZmFsc2UpO1xuICAgIHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyID0gdGhpcy5vcHRpb25zLnNjcm9sbGluZ0NvbnRhaW5lciB8fCB0aGlzLnJvb3Q7XG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICB0aGlzLnNjcm9sbCA9IFBhcmNobWVudC5jcmVhdGUodGhpcy5yb290LCB7XG4gICAgICBlbWl0dGVyOiB0aGlzLmVtaXR0ZXIsXG4gICAgICB3aGl0ZWxpc3Q6IHRoaXMub3B0aW9ucy5mb3JtYXRzXG4gICAgfSk7XG4gICAgdGhpcy5lZGl0b3IgPSBuZXcgRWRpdG9yKHRoaXMuc2Nyb2xsKTtcbiAgICB0aGlzLnNlbGVjdGlvbiA9IG5ldyBTZWxlY3Rpb24odGhpcy5zY3JvbGwsIHRoaXMuZW1pdHRlcik7XG4gICAgdGhpcy50aGVtZSA9IG5ldyB0aGlzLm9wdGlvbnMudGhlbWUodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmtleWJvYXJkID0gdGhpcy50aGVtZS5hZGRNb2R1bGUoJ2tleWJvYXJkJyk7XG4gICAgdGhpcy5jbGlwYm9hcmQgPSB0aGlzLnRoZW1lLmFkZE1vZHVsZSgnY2xpcGJvYXJkJyk7XG4gICAgdGhpcy5oaXN0b3J5ID0gdGhpcy50aGVtZS5hZGRNb2R1bGUoJ2hpc3RvcnknKTtcbiAgICB0aGlzLnRoZW1lLmluaXQoKTtcbiAgICB0aGlzLmVtaXR0ZXIub24oRW1pdHRlci5ldmVudHMuRURJVE9SX0NIQU5HRSwgKHR5cGUpID0+IHtcbiAgICAgIGlmICh0eXBlID09PSBFbWl0dGVyLmV2ZW50cy5URVhUX0NIQU5HRSkge1xuICAgICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnRvZ2dsZSgncWwtYmxhbmsnLCB0aGlzLmVkaXRvci5pc0JsYW5rKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdHRlci5vbihFbWl0dGVyLmV2ZW50cy5TQ1JPTExfVVBEQVRFLCAoc291cmNlLCBtdXRhdGlvbnMpID0+IHtcbiAgICAgIGxldCByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmxhc3RSYW5nZTtcbiAgICAgIGxldCBpbmRleCA9IHJhbmdlICYmIHJhbmdlLmxlbmd0aCA9PT0gMCA/IHJhbmdlLmluZGV4IDogdW5kZWZpbmVkO1xuICAgICAgbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IudXBkYXRlKG51bGwsIG11dGF0aW9ucywgaW5kZXgpO1xuICAgICAgfSwgc291cmNlKTtcbiAgICB9KTtcbiAgICBsZXQgY29udGVudHMgPSB0aGlzLmNsaXBib2FyZC5jb252ZXJ0KGA8ZGl2IGNsYXNzPSdxbC1lZGl0b3InIHN0eWxlPVwid2hpdGUtc3BhY2U6IG5vcm1hbDtcIj4ke2h0bWx9PHA+PGJyPjwvcD48L2Rpdj5gKTtcbiAgICB0aGlzLnNldENvbnRlbnRzKGNvbnRlbnRzKTtcbiAgICB0aGlzLmhpc3RvcnkuY2xlYXIoKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyKSB7XG4gICAgICB0aGlzLnJvb3Quc2V0QXR0cmlidXRlKCdkYXRhLXBsYWNlaG9sZGVyJywgdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZWFkT25seSkge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgYWRkQ29udGFpbmVyKGNvbnRhaW5lciwgcmVmTm9kZSA9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIGNvbnRhaW5lciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBjbGFzc05hbWUgPSBjb250YWluZXI7XG4gICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZShjb250YWluZXIsIHJlZk5vZGUpO1xuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cblxuICBibHVyKCkge1xuICAgIHRoaXMuc2VsZWN0aW9uLnNldFJhbmdlKG51bGwpO1xuICB9XG5cbiAgZGVsZXRlVGV4dChpbmRleCwgbGVuZ3RoLCBzb3VyY2UpIHtcbiAgICBbaW5kZXgsIGxlbmd0aCwgLCBzb3VyY2VdID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCwgc291cmNlKTtcbiAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmRlbGV0ZVRleHQoaW5kZXgsIGxlbmd0aCk7XG4gICAgfSwgc291cmNlLCBpbmRleCwgLTEqbGVuZ3RoKTtcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5lbmFibGUoZmFsc2UpO1xuICB9XG5cbiAgZW5hYmxlKGVuYWJsZWQgPSB0cnVlKSB7XG4gICAgdGhpcy5zY3JvbGwuZW5hYmxlKGVuYWJsZWQpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ3FsLWRpc2FibGVkJywgIWVuYWJsZWQpO1xuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgbGV0IHNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcDtcbiAgICB0aGlzLnNlbGVjdGlvbi5mb2N1cygpO1xuICAgIHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICB0aGlzLnNjcm9sbEludG9WaWV3KCk7XG4gIH1cblxuICBmb3JtYXQobmFtZSwgdmFsdWUsIHNvdXJjZSA9IEVtaXR0ZXIuc291cmNlcy5BUEkpIHtcbiAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgbGV0IHJhbmdlID0gdGhpcy5nZXRTZWxlY3Rpb24odHJ1ZSk7XG4gICAgICBsZXQgY2hhbmdlID0gbmV3IERlbHRhKCk7XG4gICAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY2hhbmdlO1xuICAgICAgfSBlbHNlIGlmIChQYXJjaG1lbnQucXVlcnkobmFtZSwgUGFyY2htZW50LlNjb3BlLkJMT0NLKSkge1xuICAgICAgICBjaGFuZ2UgPSB0aGlzLmVkaXRvci5mb3JtYXRMaW5lKHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgsIHsgW25hbWVdOiB2YWx1ZSB9KTtcbiAgICAgIH0gZWxzZSBpZiAocmFuZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFuZ2UgPSB0aGlzLmVkaXRvci5mb3JtYXRUZXh0KHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgsIHsgW25hbWVdOiB2YWx1ZSB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U2VsZWN0aW9uKHJhbmdlLCBFbWl0dGVyLnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfSwgc291cmNlKTtcbiAgfVxuXG4gIGZvcm1hdExpbmUoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUsIHNvdXJjZSkge1xuICAgIGxldCBmb3JtYXRzO1xuICAgIFtpbmRleCwgbGVuZ3RoLCBmb3JtYXRzLCBzb3VyY2VdID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUsIHNvdXJjZSk7XG4gICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmVkaXRvci5mb3JtYXRMaW5lKGluZGV4LCBsZW5ndGgsIGZvcm1hdHMpO1xuICAgIH0sIHNvdXJjZSwgaW5kZXgsIDApO1xuICB9XG5cbiAgZm9ybWF0VGV4dChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKSB7XG4gICAgbGV0IGZvcm1hdHM7XG4gICAgW2luZGV4LCBsZW5ndGgsIGZvcm1hdHMsIHNvdXJjZV0gPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKTtcbiAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmZvcm1hdFRleHQoaW5kZXgsIGxlbmd0aCwgZm9ybWF0cyk7XG4gICAgfSwgc291cmNlLCBpbmRleCwgMCk7XG4gIH1cblxuICBnZXRCb3VuZHMoaW5kZXgsIGxlbmd0aCA9IDApIHtcbiAgICBsZXQgYm91bmRzO1xuICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICBib3VuZHMgPSB0aGlzLnNlbGVjdGlvbi5nZXRCb3VuZHMoaW5kZXgsIGxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kcyA9IHRoaXMuc2VsZWN0aW9uLmdldEJvdW5kcyhpbmRleC5pbmRleCwgaW5kZXgubGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IGNvbnRhaW5lckJvdW5kcyA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICBib3R0b206IGJvdW5kcy5ib3R0b20gLSBjb250YWluZXJCb3VuZHMudG9wLFxuICAgICAgaGVpZ2h0OiBib3VuZHMuaGVpZ2h0LFxuICAgICAgbGVmdDogYm91bmRzLmxlZnQgLSBjb250YWluZXJCb3VuZHMubGVmdCxcbiAgICAgIHJpZ2h0OiBib3VuZHMucmlnaHQgLSBjb250YWluZXJCb3VuZHMubGVmdCxcbiAgICAgIHRvcDogYm91bmRzLnRvcCAtIGNvbnRhaW5lckJvdW5kcy50b3AsXG4gICAgICB3aWR0aDogYm91bmRzLndpZHRoXG4gICAgfTtcbiAgfVxuXG4gIGdldENvbnRlbnRzKGluZGV4ID0gMCwgbGVuZ3RoID0gdGhpcy5nZXRMZW5ndGgoKSAtIGluZGV4KSB7XG4gICAgW2luZGV4LCBsZW5ndGhdID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldENvbnRlbnRzKGluZGV4LCBsZW5ndGgpO1xuICB9XG5cbiAgZ2V0Rm9ybWF0KGluZGV4ID0gdGhpcy5nZXRTZWxlY3Rpb24odHJ1ZSksIGxlbmd0aCA9IDApIHtcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldEZvcm1hdChpbmRleCwgbGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldEZvcm1hdChpbmRleC5pbmRleCwgaW5kZXgubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBnZXRJbmRleChibG90KSB7XG4gICAgcmV0dXJuIGJsb3Qub2Zmc2V0KHRoaXMuc2Nyb2xsKTtcbiAgfVxuXG4gIGdldExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JvbGwubGVuZ3RoKCk7XG4gIH1cblxuICBnZXRMZWFmKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsLmxlYWYoaW5kZXgpO1xuICB9XG5cbiAgZ2V0TGluZShpbmRleCkge1xuICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lKGluZGV4KTtcbiAgfVxuXG4gIGdldExpbmVzKGluZGV4ID0gMCwgbGVuZ3RoID0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGwubGluZXMoaW5kZXguaW5kZXgsIGluZGV4Lmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcyhpbmRleCwgbGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBnZXRNb2R1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnRoZW1lLm1vZHVsZXNbbmFtZV07XG4gIH1cblxuICBnZXRTZWxlY3Rpb24oZm9jdXMgPSBmYWxzZSkge1xuICAgIGlmIChmb2N1cykgdGhpcy5mb2N1cygpO1xuICAgIHRoaXMudXBkYXRlKCk7ICAvLyBNYWtlIHN1cmUgd2UgYWNjZXNzIGdldFJhbmdlIHdpdGggZWRpdG9yIGluIGNvbnNpc3RlbnQgc3RhdGVcbiAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKVswXTtcbiAgfVxuXG4gIGdldFRleHQoaW5kZXggPSAwLCBsZW5ndGggPSB0aGlzLmdldExlbmd0aCgpIC0gaW5kZXgpIHtcbiAgICBbaW5kZXgsIGxlbmd0aF0gPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0VGV4dChpbmRleCwgbGVuZ3RoKTtcbiAgfVxuXG4gIGhhc0ZvY3VzKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbi5oYXNGb2N1cygpO1xuICB9XG5cbiAgaW5zZXJ0RW1iZWQoaW5kZXgsIGVtYmVkLCB2YWx1ZSwgc291cmNlID0gUXVpbGwuc291cmNlcy5BUEkpIHtcbiAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmluc2VydEVtYmVkKGluZGV4LCBlbWJlZCwgdmFsdWUpO1xuICAgIH0sIHNvdXJjZSwgaW5kZXgpO1xuICB9XG5cbiAgaW5zZXJ0VGV4dChpbmRleCwgdGV4dCwgbmFtZSwgdmFsdWUsIHNvdXJjZSkge1xuICAgIGxldCBmb3JtYXRzO1xuICAgIFtpbmRleCwgLCBmb3JtYXRzLCBzb3VyY2VdID0gb3ZlcmxvYWQoaW5kZXgsIDAsIG5hbWUsIHZhbHVlLCBzb3VyY2UpO1xuICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuaW5zZXJ0VGV4dChpbmRleCwgdGV4dCwgZm9ybWF0cyk7XG4gICAgfSwgc291cmNlLCBpbmRleCwgdGV4dC5sZW5ndGgpO1xuICB9XG5cbiAgaXNFbmFibGVkKCkge1xuICAgIHJldHVybiAhdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1kaXNhYmxlZCcpO1xuICB9XG5cbiAgb2ZmKCkge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub2ZmLmFwcGx5KHRoaXMuZW1pdHRlciwgYXJndW1lbnRzKTtcbiAgfVxuXG4gIG9uKCkge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24uYXBwbHkodGhpcy5lbWl0dGVyLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgb25jZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uY2UuYXBwbHkodGhpcy5lbWl0dGVyLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcGFzdGVIVE1MKGluZGV4LCBodG1sLCBzb3VyY2UpIHtcbiAgICB0aGlzLmNsaXBib2FyZC5kYW5nZXJvdXNseVBhc3RlSFRNTChpbmRleCwgaHRtbCwgc291cmNlKTtcbiAgfVxuXG4gIHJlbW92ZUZvcm1hdChpbmRleCwgbGVuZ3RoLCBzb3VyY2UpIHtcbiAgICBbaW5kZXgsIGxlbmd0aCwgLCBzb3VyY2VdID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCwgc291cmNlKTtcbiAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLnJlbW92ZUZvcm1hdChpbmRleCwgbGVuZ3RoKTtcbiAgICB9LCBzb3VyY2UsIGluZGV4KTtcbiAgfVxuXG4gIHNjcm9sbEludG9WaWV3KCkge1xuICAgIHRoaXMuc2VsZWN0aW9uLnNjcm9sbEludG9WaWV3KHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyKTtcbiAgfVxuXG4gIHNldENvbnRlbnRzKGRlbHRhLCBzb3VyY2UgPSBFbWl0dGVyLnNvdXJjZXMuQVBJKSB7XG4gICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsICgpID0+IHtcbiAgICAgIGRlbHRhID0gbmV3IERlbHRhKGRlbHRhKTtcbiAgICAgIGxldCBsZW5ndGggPSB0aGlzLmdldExlbmd0aCgpO1xuICAgICAgbGV0IGRlbGV0ZWQgPSB0aGlzLmVkaXRvci5kZWxldGVUZXh0KDAsIGxlbmd0aCk7XG4gICAgICBsZXQgYXBwbGllZCA9IHRoaXMuZWRpdG9yLmFwcGx5RGVsdGEoZGVsdGEpO1xuICAgICAgbGV0IGxhc3RPcCA9IGFwcGxpZWQub3BzW2FwcGxpZWQub3BzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxhc3RPcCAhPSBudWxsICYmIHR5cGVvZihsYXN0T3AuaW5zZXJ0KSA9PT0gJ3N0cmluZycgJiYgbGFzdE9wLmluc2VydFtsYXN0T3AuaW5zZXJ0Lmxlbmd0aC0xXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgdGhpcy5lZGl0b3IuZGVsZXRlVGV4dCh0aGlzLmdldExlbmd0aCgpIC0gMSwgMSk7XG4gICAgICAgIGFwcGxpZWQuZGVsZXRlKDEpO1xuICAgICAgfVxuICAgICAgbGV0IHJldCA9IGRlbGV0ZWQuY29tcG9zZShhcHBsaWVkKTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSwgc291cmNlKTtcbiAgfVxuXG4gIHNldFNlbGVjdGlvbihpbmRleCwgbGVuZ3RoLCBzb3VyY2UpIHtcbiAgICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgICAgdGhpcy5zZWxlY3Rpb24uc2V0UmFuZ2UobnVsbCwgbGVuZ3RoIHx8IFF1aWxsLnNvdXJjZXMuQVBJKTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2luZGV4LCBsZW5ndGgsICwgc291cmNlXSA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIHNvdXJjZSk7XG4gICAgICB0aGlzLnNlbGVjdGlvbi5zZXRSYW5nZShuZXcgUmFuZ2UoaW5kZXgsIGxlbmd0aCksIHNvdXJjZSk7XG4gICAgICBpZiAoc291cmNlICE9PSBFbWl0dGVyLnNvdXJjZXMuU0lMRU5UKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uLnNjcm9sbEludG9WaWV3KHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRUZXh0KHRleHQsIHNvdXJjZSA9IEVtaXR0ZXIuc291cmNlcy5BUEkpIHtcbiAgICBsZXQgZGVsdGEgPSBuZXcgRGVsdGEoKS5pbnNlcnQodGV4dCk7XG4gICAgcmV0dXJuIHRoaXMuc2V0Q29udGVudHMoZGVsdGEsIHNvdXJjZSk7XG4gIH1cblxuICB1cGRhdGUoc291cmNlID0gRW1pdHRlci5zb3VyY2VzLlVTRVIpIHtcbiAgICBsZXQgY2hhbmdlID0gdGhpcy5zY3JvbGwudXBkYXRlKHNvdXJjZSk7ICAgLy8gV2lsbCB1cGRhdGUgc2VsZWN0aW9uIGJlZm9yZSBzZWxlY3Rpb24udXBkYXRlKCkgZG9lcyBpZiB0ZXh0IGNoYW5nZXNcbiAgICB0aGlzLnNlbGVjdGlvbi51cGRhdGUoc291cmNlKTtcbiAgICByZXR1cm4gY2hhbmdlO1xuICB9XG5cbiAgdXBkYXRlQ29udGVudHMoZGVsdGEsIHNvdXJjZSA9IEVtaXR0ZXIuc291cmNlcy5BUEkpIHtcbiAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgZGVsdGEgPSBuZXcgRGVsdGEoZGVsdGEpO1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmFwcGx5RGVsdGEoZGVsdGEsIHNvdXJjZSk7XG4gICAgfSwgc291cmNlLCB0cnVlKTtcbiAgfVxufVxuUXVpbGwuREVGQVVMVFMgPSB7XG4gIGJvdW5kczogbnVsbCxcbiAgZm9ybWF0czogbnVsbCxcbiAgbW9kdWxlczoge30sXG4gIHBsYWNlaG9sZGVyOiAnJyxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBzY3JvbGxpbmdDb250YWluZXI6IG51bGwsXG4gIHN0cmljdDogdHJ1ZSxcbiAgdGhlbWU6ICdkZWZhdWx0J1xufTtcblF1aWxsLmV2ZW50cyA9IEVtaXR0ZXIuZXZlbnRzO1xuUXVpbGwuc291cmNlcyA9IEVtaXR0ZXIuc291cmNlcztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuUXVpbGwudmVyc2lvbiA9IHR5cGVvZihRVUlMTF9WRVJTSU9OKSA9PT0gJ3VuZGVmaW5lZCcgPyAnZGV2JyA6IFFVSUxMX1ZFUlNJT047XG5cblF1aWxsLmltcG9ydHMgPSB7XG4gICdkZWx0YScgICAgICAgOiBEZWx0YSxcbiAgJ3BhcmNobWVudCcgICA6IFBhcmNobWVudCxcbiAgJ2NvcmUvbW9kdWxlJyA6IE1vZHVsZSxcbiAgJ2NvcmUvdGhlbWUnICA6IFRoZW1lXG59O1xuXG5cbmZ1bmN0aW9uIGV4cGFuZENvbmZpZyhjb250YWluZXIsIHVzZXJDb25maWcpIHtcbiAgdXNlckNvbmZpZyA9IGV4dGVuZCh0cnVlLCB7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgbW9kdWxlczoge1xuICAgICAgY2xpcGJvYXJkOiB0cnVlLFxuICAgICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgICBoaXN0b3J5OiB0cnVlXG4gICAgfVxuICB9LCB1c2VyQ29uZmlnKTtcbiAgaWYgKCF1c2VyQ29uZmlnLnRoZW1lIHx8IHVzZXJDb25maWcudGhlbWUgPT09IFF1aWxsLkRFRkFVTFRTLnRoZW1lKSB7XG4gICAgdXNlckNvbmZpZy50aGVtZSA9IFRoZW1lO1xuICB9IGVsc2Uge1xuICAgIHVzZXJDb25maWcudGhlbWUgPSBRdWlsbC5pbXBvcnQoYHRoZW1lcy8ke3VzZXJDb25maWcudGhlbWV9YCk7XG4gICAgaWYgKHVzZXJDb25maWcudGhlbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRoZW1lICR7dXNlckNvbmZpZy50aGVtZX0uIERpZCB5b3UgcmVnaXN0ZXIgaXQ/YCk7XG4gICAgfVxuICB9XG4gIGxldCB0aGVtZUNvbmZpZyA9IGV4dGVuZCh0cnVlLCB7fSwgdXNlckNvbmZpZy50aGVtZS5ERUZBVUxUUyk7XG4gIFt0aGVtZUNvbmZpZywgdXNlckNvbmZpZ10uZm9yRWFjaChmdW5jdGlvbihjb25maWcpIHtcbiAgICBjb25maWcubW9kdWxlcyA9IGNvbmZpZy5tb2R1bGVzIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZy5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgaWYgKGNvbmZpZy5tb2R1bGVzW21vZHVsZV0gPT09IHRydWUpIHtcbiAgICAgICAgY29uZmlnLm1vZHVsZXNbbW9kdWxlXSA9IHt9O1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgbGV0IG1vZHVsZU5hbWVzID0gT2JqZWN0LmtleXModGhlbWVDb25maWcubW9kdWxlcykuY29uY2F0KE9iamVjdC5rZXlzKHVzZXJDb25maWcubW9kdWxlcykpO1xuICBsZXQgbW9kdWxlQ29uZmlnID0gbW9kdWxlTmFtZXMucmVkdWNlKGZ1bmN0aW9uKGNvbmZpZywgbmFtZSkge1xuICAgIGxldCBtb2R1bGVDbGFzcyA9IFF1aWxsLmltcG9ydChgbW9kdWxlcy8ke25hbWV9YCk7XG4gICAgaWYgKG1vZHVsZUNsYXNzID09IG51bGwpIHtcbiAgICAgIGRlYnVnLmVycm9yKGBDYW5ub3QgbG9hZCAke25hbWV9IG1vZHVsZS4gQXJlIHlvdSBzdXJlIHlvdSByZWdpc3RlcmVkIGl0P2ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWdbbmFtZV0gPSBtb2R1bGVDbGFzcy5ERUZBVUxUUyB8fCB7fTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSwge30pO1xuICAvLyBTcGVjaWFsIGNhc2UgdG9vbGJhciBzaG9ydGhhbmRcbiAgaWYgKHVzZXJDb25maWcubW9kdWxlcyAhPSBudWxsICYmIHVzZXJDb25maWcubW9kdWxlcy50b29sYmFyICYmXG4gICAgICB1c2VyQ29uZmlnLm1vZHVsZXMudG9vbGJhci5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KSB7XG4gICAgdXNlckNvbmZpZy5tb2R1bGVzLnRvb2xiYXIgPSB7XG4gICAgICBjb250YWluZXI6IHVzZXJDb25maWcubW9kdWxlcy50b29sYmFyXG4gICAgfTtcbiAgfVxuICB1c2VyQ29uZmlnID0gZXh0ZW5kKHRydWUsIHt9LCBRdWlsbC5ERUZBVUxUUywgeyBtb2R1bGVzOiBtb2R1bGVDb25maWcgfSwgdGhlbWVDb25maWcsIHVzZXJDb25maWcpO1xuICBbJ2JvdW5kcycsICdjb250YWluZXInLCAnc2Nyb2xsaW5nQ29udGFpbmVyJ10uZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAodHlwZW9mIHVzZXJDb25maWdba2V5XSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHVzZXJDb25maWdba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodXNlckNvbmZpZ1trZXldKTtcbiAgICB9XG4gIH0pO1xuICB1c2VyQ29uZmlnLm1vZHVsZXMgPSBPYmplY3Qua2V5cyh1c2VyQ29uZmlnLm1vZHVsZXMpLnJlZHVjZShmdW5jdGlvbihjb25maWcsIG5hbWUpIHtcbiAgICBpZiAodXNlckNvbmZpZy5tb2R1bGVzW25hbWVdKSB7XG4gICAgICBjb25maWdbbmFtZV0gPSB1c2VyQ29uZmlnLm1vZHVsZXNbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHVzZXJDb25maWc7XG59XG5cbi8vIEhhbmRsZSBzZWxlY3Rpb24gcHJlc2VydmF0aW9uIGFuZCBURVhUX0NIQU5HRSBlbWlzc2lvblxuLy8gY29tbW9uIHRvIG1vZGlmaWNhdGlvbiBBUElzXG5mdW5jdGlvbiBtb2RpZnkobW9kaWZpZXIsIHNvdXJjZSwgaW5kZXgsIHNoaWZ0KSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuc3RyaWN0ICYmICF0aGlzLmlzRW5hYmxlZCgpICYmIHNvdXJjZSA9PT0gRW1pdHRlci5zb3VyY2VzLlVTRVIpIHtcbiAgICByZXR1cm4gbmV3IERlbHRhKCk7XG4gIH1cbiAgbGV0IHJhbmdlID0gaW5kZXggPT0gbnVsbCA/IG51bGwgOiB0aGlzLmdldFNlbGVjdGlvbigpO1xuICBsZXQgb2xkRGVsdGEgPSB0aGlzLmVkaXRvci5kZWx0YTtcbiAgbGV0IGNoYW5nZSA9IG1vZGlmaWVyKCk7XG4gIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgaWYgKGluZGV4ID09PSB0cnVlKSBpbmRleCA9IHJhbmdlLmluZGV4O1xuICAgIGlmIChzaGlmdCA9PSBudWxsKSB7XG4gICAgICByYW5nZSA9IHNoaWZ0UmFuZ2UocmFuZ2UsIGNoYW5nZSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICByYW5nZSA9IHNoaWZ0UmFuZ2UocmFuZ2UsIGluZGV4LCBzaGlmdCwgc291cmNlKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTZWxlY3Rpb24ocmFuZ2UsIEVtaXR0ZXIuc291cmNlcy5TSUxFTlQpO1xuICB9XG4gIGlmIChjaGFuZ2UubGVuZ3RoKCkgPiAwKSB7XG4gICAgbGV0IGFyZ3MgPSBbRW1pdHRlci5ldmVudHMuVEVYVF9DSEFOR0UsIGNoYW5nZSwgb2xkRGVsdGEsIHNvdXJjZV07XG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoRW1pdHRlci5ldmVudHMuRURJVE9SX0NIQU5HRSwgLi4uYXJncyk7XG4gICAgaWYgKHNvdXJjZSAhPT0gRW1pdHRlci5zb3VyY2VzLlNJTEVOVCkge1xuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoLi4uYXJncyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjaGFuZ2U7XG59XG5cbmZ1bmN0aW9uIG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlLCBzb3VyY2UpIHtcbiAgbGV0IGZvcm1hdHMgPSB7fTtcbiAgaWYgKHR5cGVvZiBpbmRleC5pbmRleCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGluZGV4Lmxlbmd0aCA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBBbGxvdyBmb3IgdGhyb3dhd2F5IGVuZCAodXNlZCBieSBpbnNlcnRUZXh0L2luc2VydEVtYmVkKVxuICAgIGlmICh0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJykge1xuICAgICAgc291cmNlID0gdmFsdWUsIHZhbHVlID0gbmFtZSwgbmFtZSA9IGxlbmd0aCwgbGVuZ3RoID0gaW5kZXgubGVuZ3RoLCBpbmRleCA9IGluZGV4LmluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSBpbmRleC5sZW5ndGgsIGluZGV4ID0gaW5kZXguaW5kZXg7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInKSB7XG4gICAgc291cmNlID0gdmFsdWUsIHZhbHVlID0gbmFtZSwgbmFtZSA9IGxlbmd0aCwgbGVuZ3RoID0gMDtcbiAgfVxuICAvLyBIYW5kbGUgZm9ybWF0IGJlaW5nIG9iamVjdCwgdHdvIGZvcm1hdCBuYW1lL3ZhbHVlIHN0cmluZ3Mgb3IgZXhjbHVkZWRcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgIGZvcm1hdHMgPSBuYW1lO1xuICAgIHNvdXJjZSA9IHZhbHVlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBmb3JtYXRzW25hbWVdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdXJjZSA9IG5hbWU7XG4gICAgfVxuICB9XG4gIC8vIEhhbmRsZSBvcHRpb25hbCBzb3VyY2VcbiAgc291cmNlID0gc291cmNlIHx8IEVtaXR0ZXIuc291cmNlcy5BUEk7XG4gIHJldHVybiBbaW5kZXgsIGxlbmd0aCwgZm9ybWF0cywgc291cmNlXTtcbn1cblxuZnVuY3Rpb24gc2hpZnRSYW5nZShyYW5nZSwgaW5kZXgsIGxlbmd0aCwgc291cmNlKSB7XG4gIGlmIChyYW5nZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgbGV0IHN0YXJ0LCBlbmQ7XG4gIGlmIChpbmRleCBpbnN0YW5jZW9mIERlbHRhKSB7XG4gICAgW3N0YXJ0LCBlbmRdID0gW3JhbmdlLmluZGV4LCByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aF0ubWFwKGZ1bmN0aW9uKHBvcykge1xuICAgICAgcmV0dXJuIGluZGV4LnRyYW5zZm9ybVBvc2l0aW9uKHBvcywgc291cmNlICE9PSBFbWl0dGVyLnNvdXJjZXMuVVNFUik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgW3N0YXJ0LCBlbmRdID0gW3JhbmdlLmluZGV4LCByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aF0ubWFwKGZ1bmN0aW9uKHBvcykge1xuICAgICAgaWYgKHBvcyA8IGluZGV4IHx8IChwb3MgPT09IGluZGV4ICYmIHNvdXJjZSA9PT0gRW1pdHRlci5zb3VyY2VzLlVTRVIpKSByZXR1cm4gcG9zO1xuICAgICAgaWYgKGxlbmd0aCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBwb3MgKyBsZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoaW5kZXgsIHBvcyArIGxlbmd0aCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBSYW5nZShzdGFydCwgZW5kIC0gc3RhcnQpO1xufVxuXG5cbmV4cG9ydCB7IGV4cGFuZENvbmZpZywgb3ZlcmxvYWQsIFF1aWxsIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBCbG9jaywgeyBCbG9ja0VtYmVkIH0gZnJvbSAnLi9ibG9jayc7XG5cblxuY2xhc3MgQ29udGFpbmVyIGV4dGVuZHMgUGFyY2htZW50LkNvbnRhaW5lciB7IH1cbkNvbnRhaW5lci5hbGxvd2VkQ2hpbGRyZW4gPSBbQmxvY2ssIEJsb2NrRW1iZWQsIENvbnRhaW5lcl07XG5cblxuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyO1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuaW1wb3J0IFRleHRCbG90IGZyb20gJy4vdGV4dCc7XG5cbmNvbnN0IEdVQVJEX1RFWFQgPSBcIlxcdUZFRkZcIjtcblxuXG5jbGFzcyBFbWJlZCBleHRlbmRzIFBhcmNobWVudC5FbWJlZCB7XG4gIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICBzdXBlcihub2RlKTtcbiAgICB0aGlzLmNvbnRlbnROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMuY29udGVudE5vZGUuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCBmYWxzZSk7XG4gICAgW10uc2xpY2UuY2FsbCh0aGlzLmRvbU5vZGUuY2hpbGROb2RlcykuZm9yRWFjaCgoY2hpbGROb2RlKSA9PiB7XG4gICAgICB0aGlzLmNvbnRlbnROb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XG4gICAgfSk7XG4gICAgdGhpcy5sZWZ0R3VhcmQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShHVUFSRF9URVhUKTtcbiAgICB0aGlzLnJpZ2h0R3VhcmQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShHVUFSRF9URVhUKTtcbiAgICB0aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQodGhpcy5sZWZ0R3VhcmQpO1xuICAgIHRoaXMuZG9tTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnROb2RlKTtcbiAgICB0aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQodGhpcy5yaWdodEd1YXJkKTtcbiAgfVxuXG4gIGluZGV4KG5vZGUsIG9mZnNldCkge1xuICAgIGlmIChub2RlID09PSB0aGlzLmxlZnRHdWFyZCkgcmV0dXJuIDA7XG4gICAgaWYgKG5vZGUgPT09IHRoaXMucmlnaHRHdWFyZCkgcmV0dXJuIDE7XG4gICAgcmV0dXJuIHN1cGVyLmluZGV4KG5vZGUsIG9mZnNldCk7XG4gIH1cblxuICByZXN0b3JlKG5vZGUpIHtcbiAgICBsZXQgcmFuZ2UsIHRleHROb2RlO1xuICAgIGxldCB0ZXh0ID0gbm9kZS5kYXRhLnNwbGl0KEdVQVJEX1RFWFQpLmpvaW4oJycpO1xuICAgIGlmIChub2RlID09PSB0aGlzLmxlZnRHdWFyZCkge1xuICAgICAgaWYgKHRoaXMucHJldiBpbnN0YW5jZW9mIFRleHRCbG90KSB7XG4gICAgICAgIGxldCBwcmV2TGVuZ3RoID0gdGhpcy5wcmV2Lmxlbmd0aCgpO1xuICAgICAgICB0aGlzLnByZXYuaW5zZXJ0QXQocHJldkxlbmd0aCwgdGV4dCk7XG4gICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgIHN0YXJ0Tm9kZTogdGhpcy5wcmV2LmRvbU5vZGUsXG4gICAgICAgICAgc3RhcnRPZmZzZXQ6IHByZXZMZW5ndGggKyB0ZXh0Lmxlbmd0aFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKFBhcmNobWVudC5jcmVhdGUodGV4dE5vZGUpLCB0aGlzKTtcbiAgICAgICAgcmFuZ2UgPSB7XG4gICAgICAgICAgc3RhcnROb2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgICBzdGFydE9mZnNldDogdGV4dC5sZW5ndGhcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUgPT09IHRoaXMucmlnaHRHdWFyZCkge1xuICAgICAgaWYgKHRoaXMubmV4dCBpbnN0YW5jZW9mIFRleHRCbG90KSB7XG4gICAgICAgIHRoaXMubmV4dC5pbnNlcnRBdCgwLCB0ZXh0KTtcbiAgICAgICAgcmFuZ2UgPSB7XG4gICAgICAgICAgc3RhcnROb2RlOiB0aGlzLm5leHQuZG9tTm9kZSxcbiAgICAgICAgICBzdGFydE9mZnNldDogdGV4dC5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKFBhcmNobWVudC5jcmVhdGUodGV4dE5vZGUpLCB0aGlzLm5leHQpO1xuICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICBzdGFydE5vZGU6IHRleHROb2RlLFxuICAgICAgICAgIHN0YXJ0T2Zmc2V0OiB0ZXh0Lmxlbmd0aFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBub2RlLmRhdGEgPSBHVUFSRF9URVhUO1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuXG4gIHVwZGF0ZShtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICBtdXRhdGlvbnMuZm9yRWFjaCgobXV0YXRpb24pID0+IHtcbiAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hhcmFjdGVyRGF0YScgJiZcbiAgICAgICAgICAobXV0YXRpb24udGFyZ2V0ID09PSB0aGlzLmxlZnRHdWFyZCB8fCBtdXRhdGlvbi50YXJnZXQgPT09IHRoaXMucmlnaHRHdWFyZCkpIHtcbiAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5yZXN0b3JlKG11dGF0aW9uLnRhcmdldCk7XG4gICAgICAgIGlmIChyYW5nZSkgY29udGV4dC5yYW5nZSA9IHJhbmdlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgRW1iZWQ7XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgRW1pdHRlciBmcm9tICcuLi9jb3JlL2VtaXR0ZXInO1xuaW1wb3J0IEJsb2NrLCB7IEJsb2NrRW1iZWQgfSBmcm9tICcuL2Jsb2NrJztcbmltcG9ydCBCcmVhayBmcm9tICcuL2JyZWFrJztcbmltcG9ydCBDb2RlQmxvY2sgZnJvbSAnLi4vZm9ybWF0cy9jb2RlJztcbmltcG9ydCBDb250YWluZXIgZnJvbSAnLi9jb250YWluZXInO1xuXG5cbmZ1bmN0aW9uIGlzTGluZShibG90KSB7XG4gIHJldHVybiAoYmxvdCBpbnN0YW5jZW9mIEJsb2NrIHx8IGJsb3QgaW5zdGFuY2VvZiBCbG9ja0VtYmVkKTtcbn1cblxuXG5jbGFzcyBTY3JvbGwgZXh0ZW5kcyBQYXJjaG1lbnQuU2Nyb2xsIHtcbiAgY29uc3RydWN0b3IoZG9tTm9kZSwgY29uZmlnKSB7XG4gICAgc3VwZXIoZG9tTm9kZSk7XG4gICAgdGhpcy5lbWl0dGVyID0gY29uZmlnLmVtaXR0ZXI7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLndoaXRlbGlzdCkpIHtcbiAgICAgIHRoaXMud2hpdGVsaXN0ID0gY29uZmlnLndoaXRlbGlzdC5yZWR1Y2UoZnVuY3Rpb24od2hpdGVsaXN0LCBmb3JtYXQpIHtcbiAgICAgICAgd2hpdGVsaXN0W2Zvcm1hdF0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gd2hpdGVsaXN0O1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgICAvLyBTb21lIHJlYXNvbiBmaXhlcyBjb21wb3NpdGlvbiBpc3N1ZXMgd2l0aCBjaGFyYWN0ZXIgbGFuZ3VhZ2VzIGluIFdpbmRvd3MvQ2hyb21lLCBTYWZhcmlcbiAgICB0aGlzLmRvbU5vZGUuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgZnVuY3Rpb24oKSB7fSk7XG4gICAgdGhpcy5vcHRpbWl6ZSgpO1xuICAgIHRoaXMuZW5hYmxlKCk7XG4gIH1cblxuICBiYXRjaFN0YXJ0KCkge1xuICAgIHRoaXMuYmF0Y2ggPSB0cnVlO1xuICB9XG5cbiAgYmF0Y2hFbmQoKSB7XG4gICAgdGhpcy5iYXRjaCA9IGZhbHNlO1xuICAgIHRoaXMub3B0aW1pemUoKTtcbiAgfVxuXG4gIGRlbGV0ZUF0KGluZGV4LCBsZW5ndGgpIHtcbiAgICBsZXQgW2ZpcnN0LCBvZmZzZXRdID0gdGhpcy5saW5lKGluZGV4KTtcbiAgICBsZXQgW2xhc3QsIF0gPSB0aGlzLmxpbmUoaW5kZXggKyBsZW5ndGgpO1xuICAgIHN1cGVyLmRlbGV0ZUF0KGluZGV4LCBsZW5ndGgpO1xuICAgIGlmIChsYXN0ICE9IG51bGwgJiYgZmlyc3QgIT09IGxhc3QgJiYgb2Zmc2V0ID4gMCkge1xuICAgICAgaWYgKGZpcnN0IGluc3RhbmNlb2YgQmxvY2tFbWJlZCB8fCBsYXN0IGluc3RhbmNlb2YgQmxvY2tFbWJlZCkge1xuICAgICAgICB0aGlzLm9wdGltaXplKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChmaXJzdCBpbnN0YW5jZW9mIENvZGVCbG9jaykge1xuICAgICAgICBsZXQgbmV3bGluZUluZGV4ID0gZmlyc3QubmV3bGluZUluZGV4KGZpcnN0Lmxlbmd0aCgpLCB0cnVlKTtcbiAgICAgICAgaWYgKG5ld2xpbmVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgZmlyc3QgPSBmaXJzdC5zcGxpdChuZXdsaW5lSW5kZXggKyAxKTtcbiAgICAgICAgICBpZiAoZmlyc3QgPT09IGxhc3QpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW1pemUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobGFzdCBpbnN0YW5jZW9mIENvZGVCbG9jaykge1xuICAgICAgICBsZXQgbmV3bGluZUluZGV4ID0gbGFzdC5uZXdsaW5lSW5kZXgoMCk7XG4gICAgICAgIGlmIChuZXdsaW5lSW5kZXggPiAtMSkge1xuICAgICAgICAgIGxhc3Quc3BsaXQobmV3bGluZUluZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCByZWYgPSBsYXN0LmNoaWxkcmVuLmhlYWQgaW5zdGFuY2VvZiBCcmVhayA/IG51bGwgOiBsYXN0LmNoaWxkcmVuLmhlYWQ7XG4gICAgICBmaXJzdC5tb3ZlQ2hpbGRyZW4obGFzdCwgcmVmKTtcbiAgICAgIGZpcnN0LnJlbW92ZSgpO1xuICAgIH1cbiAgICB0aGlzLm9wdGltaXplKCk7XG4gIH1cblxuICBlbmFibGUoZW5hYmxlZCA9IHRydWUpIHtcbiAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCBlbmFibGVkKTtcbiAgfVxuXG4gIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIGZvcm1hdCwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhdGhpcy53aGl0ZWxpc3RbZm9ybWF0XSkgcmV0dXJuO1xuICAgIHN1cGVyLmZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIGZvcm1hdCwgdmFsdWUpO1xuICAgIHRoaXMub3B0aW1pemUoKTtcbiAgfVxuXG4gIGluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgaWYgKGRlZiAhPSBudWxsICYmIHRoaXMud2hpdGVsaXN0ICE9IG51bGwgJiYgIXRoaXMud2hpdGVsaXN0W3ZhbHVlXSkgcmV0dXJuO1xuICAgIGlmIChpbmRleCA+PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICBpZiAoZGVmID09IG51bGwgfHwgUGFyY2htZW50LnF1ZXJ5KHZhbHVlLCBQYXJjaG1lbnQuU2NvcGUuQkxPQ0spID09IG51bGwpIHtcbiAgICAgICAgbGV0IGJsb3QgPSBQYXJjaG1lbnQuY3JlYXRlKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQpO1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGJsb3QpO1xuICAgICAgICBpZiAoZGVmID09IG51bGwgJiYgdmFsdWUuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgYmxvdC5pbnNlcnRBdCgwLCB2YWx1ZSwgZGVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBlbWJlZCA9IFBhcmNobWVudC5jcmVhdGUodmFsdWUsIGRlZik7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoZW1iZWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5pbnNlcnRBdChpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgfVxuICAgIHRoaXMub3B0aW1pemUoKTtcbiAgfVxuXG4gIGluc2VydEJlZm9yZShibG90LCByZWYpIHtcbiAgICBpZiAoYmxvdC5zdGF0aWNzLnNjb3BlID09PSBQYXJjaG1lbnQuU2NvcGUuSU5MSU5FX0JMT1QpIHtcbiAgICAgIGxldCB3cmFwcGVyID0gUGFyY2htZW50LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtcbiAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoYmxvdCk7XG4gICAgICBibG90ID0gd3JhcHBlcjtcbiAgICB9XG4gICAgc3VwZXIuaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZik7XG4gIH1cblxuICBsZWFmKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aChpbmRleCkucG9wKCkgfHwgW251bGwsIC0xXTtcbiAgfVxuXG4gIGxpbmUoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpbmUoaW5kZXggLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGVzY2VuZGFudChpc0xpbmUsIGluZGV4KTtcbiAgfVxuXG4gIGxpbmVzKGluZGV4ID0gMCwgbGVuZ3RoID0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgIGxldCBnZXRMaW5lcyA9IChibG90LCBpbmRleCwgbGVuZ3RoKSA9PiB7XG4gICAgICBsZXQgbGluZXMgPSBbXSwgbGVuZ3RoTGVmdCA9IGxlbmd0aDtcbiAgICAgIGJsb3QuY2hpbGRyZW4uZm9yRWFjaEF0KGluZGV4LCBsZW5ndGgsIGZ1bmN0aW9uKGNoaWxkLCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc0xpbmUoY2hpbGQpKSB7XG4gICAgICAgICAgbGluZXMucHVzaChjaGlsZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGQgaW5zdGFuY2VvZiBQYXJjaG1lbnQuQ29udGFpbmVyKSB7XG4gICAgICAgICAgbGluZXMgPSBsaW5lcy5jb25jYXQoZ2V0TGluZXMoY2hpbGQsIGluZGV4LCBsZW5ndGhMZWZ0KSk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoTGVmdCAtPSBsZW5ndGg7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBsaW5lcztcbiAgICB9O1xuICAgIHJldHVybiBnZXRMaW5lcyh0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgfVxuXG4gIG9wdGltaXplKG11dGF0aW9ucyA9IFtdLCBjb250ZXh0ID0ge30pIHtcbiAgICBpZiAodGhpcy5iYXRjaCA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgIHN1cGVyLm9wdGltaXplKG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdChFbWl0dGVyLmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsIG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgcGF0aChpbmRleCkge1xuICAgIHJldHVybiBzdXBlci5wYXRoKGluZGV4KS5zbGljZSgxKTsgIC8vIEV4Y2x1ZGUgc2VsZlxuICB9XG5cbiAgdXBkYXRlKG11dGF0aW9ucykge1xuICAgIGlmICh0aGlzLmJhdGNoID09PSB0cnVlKSByZXR1cm47XG4gICAgbGV0IHNvdXJjZSA9IEVtaXR0ZXIuc291cmNlcy5VU0VSO1xuICAgIGlmICh0eXBlb2YgbXV0YXRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgc291cmNlID0gbXV0YXRpb25zO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobXV0YXRpb25zKSkge1xuICAgICAgbXV0YXRpb25zID0gdGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpO1xuICAgIH1cbiAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KEVtaXR0ZXIuZXZlbnRzLlNDUk9MTF9CRUZPUkVfVVBEQVRFLCBzb3VyY2UsIG11dGF0aW9ucyk7XG4gICAgfVxuICAgIHN1cGVyLnVwZGF0ZShtdXRhdGlvbnMuY29uY2F0KFtdKSk7ICAgLy8gcGFzcyBjb3B5XG4gICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdChFbWl0dGVyLmV2ZW50cy5TQ1JPTExfVVBEQVRFLCBzb3VyY2UsIG11dGF0aW9ucyk7XG4gICAgfVxuICB9XG59XG5TY3JvbGwuYmxvdE5hbWUgPSAnc2Nyb2xsJztcblNjcm9sbC5jbGFzc05hbWUgPSAncWwtZWRpdG9yJztcblNjcm9sbC50YWdOYW1lID0gJ0RJVic7XG5TY3JvbGwuZGVmYXVsdENoaWxkID0gJ2Jsb2NrJztcblNjcm9sbC5hbGxvd2VkQ2hpbGRyZW4gPSBbQmxvY2ssIEJsb2NrRW1iZWQsIENvbnRhaW5lcl07XG5cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsO1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuXG5sZXQgY29uZmlnID0ge1xuICBzY29wZTogUGFyY2htZW50LlNjb3BlLkJMT0NLLFxuICB3aGl0ZWxpc3Q6IFsncmlnaHQnLCAnY2VudGVyJywgJ2p1c3RpZnknXVxufTtcblxubGV0IEFsaWduQXR0cmlidXRlID0gbmV3IFBhcmNobWVudC5BdHRyaWJ1dG9yLkF0dHJpYnV0ZSgnYWxpZ24nLCAnYWxpZ24nLCBjb25maWcpO1xubGV0IEFsaWduQ2xhc3MgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuQ2xhc3MoJ2FsaWduJywgJ3FsLWFsaWduJywgY29uZmlnKTtcbmxldCBBbGlnblN0eWxlID0gbmV3IFBhcmNobWVudC5BdHRyaWJ1dG9yLlN0eWxlKCdhbGlnbicsICd0ZXh0LWFsaWduJywgY29uZmlnKTtcblxuZXhwb3J0IHsgQWxpZ25BdHRyaWJ1dGUsIEFsaWduQ2xhc3MsIEFsaWduU3R5bGUgfTtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcblxuY2xhc3MgQ29sb3JBdHRyaWJ1dG9yIGV4dGVuZHMgUGFyY2htZW50LkF0dHJpYnV0b3IuU3R5bGUge1xuICB2YWx1ZShkb21Ob2RlKSB7XG4gICAgbGV0IHZhbHVlID0gc3VwZXIudmFsdWUoZG9tTm9kZSk7XG4gICAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKCdyZ2IoJykpIHJldHVybiB2YWx1ZTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL15bXlxcZF0rLywgJycpLnJlcGxhY2UoL1teXFxkXSskLywgJycpO1xuICAgIHJldHVybiAnIycgKyB2YWx1ZS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbihjb21wb25lbnQpIHtcbiAgICAgIHJldHVybiAoJzAwJyArIHBhcnNlSW50KGNvbXBvbmVudCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG4gICAgfSkuam9pbignJyk7XG4gIH1cbn1cblxubGV0IENvbG9yQ2xhc3MgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuQ2xhc3MoJ2NvbG9yJywgJ3FsLWNvbG9yJywge1xuICBzY29wZTogUGFyY2htZW50LlNjb3BlLklOTElORVxufSk7XG5sZXQgQ29sb3JTdHlsZSA9IG5ldyBDb2xvckF0dHJpYnV0b3IoJ2NvbG9yJywgJ2NvbG9yJywge1xuICBzY29wZTogUGFyY2htZW50LlNjb3BlLklOTElORVxufSk7XG5cbmV4cG9ydCB7IENvbG9yQXR0cmlidXRvciwgQ29sb3JDbGFzcywgQ29sb3JTdHlsZSB9O1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuaW1wb3J0IHsgQ29sb3JBdHRyaWJ1dG9yIH0gZnJvbSAnLi9jb2xvcic7XG5cbmxldCBCYWNrZ3JvdW5kQ2xhc3MgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuQ2xhc3MoJ2JhY2tncm91bmQnLCAncWwtYmcnLCB7XG4gIHNjb3BlOiBQYXJjaG1lbnQuU2NvcGUuSU5MSU5FXG59KTtcbmxldCBCYWNrZ3JvdW5kU3R5bGUgPSBuZXcgQ29sb3JBdHRyaWJ1dG9yKCdiYWNrZ3JvdW5kJywgJ2JhY2tncm91bmQtY29sb3InLCB7XG4gIHNjb3BlOiBQYXJjaG1lbnQuU2NvcGUuSU5MSU5FXG59KTtcblxuZXhwb3J0IHsgQmFja2dyb3VuZENsYXNzLCBCYWNrZ3JvdW5kU3R5bGUgfTtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcblxubGV0IGNvbmZpZyA9IHtcbiAgc2NvcGU6IFBhcmNobWVudC5TY29wZS5CTE9DSyxcbiAgd2hpdGVsaXN0OiBbJ3J0bCddXG59O1xuXG5sZXQgRGlyZWN0aW9uQXR0cmlidXRlID0gbmV3IFBhcmNobWVudC5BdHRyaWJ1dG9yLkF0dHJpYnV0ZSgnZGlyZWN0aW9uJywgJ2RpcicsIGNvbmZpZyk7XG5sZXQgRGlyZWN0aW9uQ2xhc3MgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuQ2xhc3MoJ2RpcmVjdGlvbicsICdxbC1kaXJlY3Rpb24nLCBjb25maWcpO1xubGV0IERpcmVjdGlvblN0eWxlID0gbmV3IFBhcmNobWVudC5BdHRyaWJ1dG9yLlN0eWxlKCdkaXJlY3Rpb24nLCAnZGlyZWN0aW9uJywgY29uZmlnKTtcblxuZXhwb3J0IHsgRGlyZWN0aW9uQXR0cmlidXRlLCBEaXJlY3Rpb25DbGFzcywgRGlyZWN0aW9uU3R5bGUgfTtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcblxubGV0IGNvbmZpZyA9IHtcbiAgc2NvcGU6IFBhcmNobWVudC5TY29wZS5JTkxJTkUsXG4gIHdoaXRlbGlzdDogWydzZXJpZicsICdtb25vc3BhY2UnXVxufTtcblxubGV0IEZvbnRDbGFzcyA9IG5ldyBQYXJjaG1lbnQuQXR0cmlidXRvci5DbGFzcygnZm9udCcsICdxbC1mb250JywgY29uZmlnKTtcblxuY2xhc3MgRm9udFN0eWxlQXR0cmlidXRvciBleHRlbmRzIFBhcmNobWVudC5BdHRyaWJ1dG9yLlN0eWxlIHtcbiAgdmFsdWUobm9kZSkge1xuICAgIHJldHVybiBzdXBlci52YWx1ZShub2RlKS5yZXBsYWNlKC9bXCInXS9nLCAnJyk7XG4gIH1cbn1cblxubGV0IEZvbnRTdHlsZSA9IG5ldyBGb250U3R5bGVBdHRyaWJ1dG9yKCdmb250JywgJ2ZvbnQtZmFtaWx5JywgY29uZmlnKTtcblxuZXhwb3J0IHsgRm9udFN0eWxlLCBGb250Q2xhc3MgfTtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcblxubGV0IFNpemVDbGFzcyA9IG5ldyBQYXJjaG1lbnQuQXR0cmlidXRvci5DbGFzcygnc2l6ZScsICdxbC1zaXplJywge1xuICBzY29wZTogUGFyY2htZW50LlNjb3BlLklOTElORSxcbiAgd2hpdGVsaXN0OiBbJ3NtYWxsJywgJ2xhcmdlJywgJ2h1Z2UnXVxufSk7XG5sZXQgU2l6ZVN0eWxlID0gbmV3IFBhcmNobWVudC5BdHRyaWJ1dG9yLlN0eWxlKCdzaXplJywgJ2ZvbnQtc2l6ZScsIHtcbiAgc2NvcGU6IFBhcmNobWVudC5TY29wZS5JTkxJTkUsXG4gIHdoaXRlbGlzdDogWycxMHB4JywgJzE4cHgnLCAnMzJweCddXG59KTtcblxuZXhwb3J0IHsgU2l6ZUNsYXNzLCBTaXplU3R5bGUgfTtcbiIsImltcG9ydCBleHRlbmQgZnJvbSAnZXh0ZW5kJztcbmltcG9ydCBEZWx0YSBmcm9tICdxdWlsbC1kZWx0YSc7XG5pbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgUXVpbGwgZnJvbSAnLi4vY29yZS9xdWlsbCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2NvcmUvbG9nZ2VyJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vY29yZS9tb2R1bGUnO1xuXG5pbXBvcnQgeyBBbGlnbkF0dHJpYnV0ZSwgQWxpZ25TdHlsZSB9IGZyb20gJy4uL2Zvcm1hdHMvYWxpZ24nO1xuaW1wb3J0IHsgQmFja2dyb3VuZFN0eWxlIH0gZnJvbSAnLi4vZm9ybWF0cy9iYWNrZ3JvdW5kJztcbmltcG9ydCBDb2RlQmxvY2sgZnJvbSAnLi4vZm9ybWF0cy9jb2RlJztcbmltcG9ydCB7IENvbG9yU3R5bGUgfSBmcm9tICcuLi9mb3JtYXRzL2NvbG9yJztcbmltcG9ydCB7IERpcmVjdGlvbkF0dHJpYnV0ZSwgRGlyZWN0aW9uU3R5bGUgfSBmcm9tICcuLi9mb3JtYXRzL2RpcmVjdGlvbic7XG5pbXBvcnQgeyBGb250U3R5bGUgfSBmcm9tICcuLi9mb3JtYXRzL2ZvbnQnO1xuaW1wb3J0IHsgU2l6ZVN0eWxlIH0gZnJvbSAnLi4vZm9ybWF0cy9zaXplJztcblxubGV0IGRlYnVnID0gbG9nZ2VyKCdxdWlsbDpjbGlwYm9hcmQnKTtcblxuXG5jb25zdCBET01fS0VZID0gJ19fcWwtbWF0Y2hlcic7XG5cbmNvbnN0IENMSVBCT0FSRF9DT05GSUcgPSBbXG4gIFtOb2RlLlRFWFRfTk9ERSwgbWF0Y2hUZXh0XSxcbiAgW05vZGUuVEVYVF9OT0RFLCBtYXRjaE5ld2xpbmVdLFxuICBbJ2JyJywgbWF0Y2hCcmVha10sXG4gIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hOZXdsaW5lXSxcbiAgW05vZGUuRUxFTUVOVF9OT0RFLCBtYXRjaEJsb3RdLFxuICBbTm9kZS5FTEVNRU5UX05PREUsIG1hdGNoU3BhY2luZ10sXG4gIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hBdHRyaWJ1dG9yXSxcbiAgW05vZGUuRUxFTUVOVF9OT0RFLCBtYXRjaFN0eWxlc10sXG4gIFsnbGknLCBtYXRjaEluZGVudF0sXG4gIFsnYicsIG1hdGNoQWxpYXMuYmluZChtYXRjaEFsaWFzLCAnYm9sZCcpXSxcbiAgWydpJywgbWF0Y2hBbGlhcy5iaW5kKG1hdGNoQWxpYXMsICdpdGFsaWMnKV0sXG4gIFsnc3R5bGUnLCBtYXRjaElnbm9yZV1cbl07XG5cbmNvbnN0IEFUVFJJQlVURV9BVFRSSUJVVE9SUyA9IFtcbiAgQWxpZ25BdHRyaWJ1dGUsXG4gIERpcmVjdGlvbkF0dHJpYnV0ZVxuXS5yZWR1Y2UoZnVuY3Rpb24obWVtbywgYXR0cikge1xuICBtZW1vW2F0dHIua2V5TmFtZV0gPSBhdHRyO1xuICByZXR1cm4gbWVtbztcbn0sIHt9KTtcblxuY29uc3QgU1RZTEVfQVRUUklCVVRPUlMgPSBbXG4gIEFsaWduU3R5bGUsXG4gIEJhY2tncm91bmRTdHlsZSxcbiAgQ29sb3JTdHlsZSxcbiAgRGlyZWN0aW9uU3R5bGUsXG4gIEZvbnRTdHlsZSxcbiAgU2l6ZVN0eWxlXG5dLnJlZHVjZShmdW5jdGlvbihtZW1vLCBhdHRyKSB7XG4gIG1lbW9bYXR0ci5rZXlOYW1lXSA9IGF0dHI7XG4gIHJldHVybiBtZW1vO1xufSwge30pO1xuXG5cbmNsYXNzIENsaXBib2FyZCBleHRlbmRzIE1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgc3VwZXIocXVpbGwsIG9wdGlvbnMpO1xuICAgIHRoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMub25QYXN0ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMucXVpbGwuYWRkQ29udGFpbmVyKCdxbC1jbGlwYm9hcmQnKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xuICAgIHRoaXMuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAtMSk7XG4gICAgdGhpcy5tYXRjaGVycyA9IFtdO1xuICAgIENMSVBCT0FSRF9DT05GSUcuY29uY2F0KHRoaXMub3B0aW9ucy5tYXRjaGVycykuZm9yRWFjaCgoW3NlbGVjdG9yLCBtYXRjaGVyXSkgPT4ge1xuICAgICAgaWYgKCFvcHRpb25zLm1hdGNoVmlzdWFsICYmIG1hdGNoZXIgPT09IG1hdGNoU3BhY2luZykgcmV0dXJuO1xuICAgICAgdGhpcy5hZGRNYXRjaGVyKHNlbGVjdG9yLCBtYXRjaGVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZE1hdGNoZXIoc2VsZWN0b3IsIG1hdGNoZXIpIHtcbiAgICB0aGlzLm1hdGNoZXJzLnB1c2goW3NlbGVjdG9yLCBtYXRjaGVyXSk7XG4gIH1cblxuICBjb252ZXJ0KGh0bWwpIHtcbiAgICBpZiAodHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSBodG1sLnJlcGxhY2UoL1xcPlxccj9cXG4gK1xcPC9nLCAnPjwnKTsgLy8gUmVtb3ZlIHNwYWNlcyBiZXR3ZWVuIHRhZ3NcbiAgICAgIHJldHVybiB0aGlzLmNvbnZlcnQoKTtcbiAgICB9XG4gICAgY29uc3QgZm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHRoaXMucXVpbGwuc2VsZWN0aW9uLnNhdmVkUmFuZ2UuaW5kZXgpO1xuICAgIGlmIChmb3JtYXRzW0NvZGVCbG9jay5ibG90TmFtZV0pIHtcbiAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmNvbnRhaW5lci5pbm5lclRleHQ7XG4gICAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgIHJldHVybiBuZXcgRGVsdGEoKS5pbnNlcnQodGV4dCwgeyBbQ29kZUJsb2NrLmJsb3ROYW1lXTogZm9ybWF0c1tDb2RlQmxvY2suYmxvdE5hbWVdIH0pO1xuICAgIH1cbiAgICBsZXQgW2VsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzXSA9IHRoaXMucHJlcGFyZU1hdGNoaW5nKCk7XG4gICAgbGV0IGRlbHRhID0gdHJhdmVyc2UodGhpcy5jb250YWluZXIsIGVsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzKTtcbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgbmV3bGluZVxuICAgIGlmIChkZWx0YUVuZHNXaXRoKGRlbHRhLCAnXFxuJykgJiYgZGVsdGEub3BzW2RlbHRhLm9wcy5sZW5ndGggLSAxXS5hdHRyaWJ1dGVzID09IG51bGwpIHtcbiAgICAgIGRlbHRhID0gZGVsdGEuY29tcG9zZShuZXcgRGVsdGEoKS5yZXRhaW4oZGVsdGEubGVuZ3RoKCkgLSAxKS5kZWxldGUoMSkpO1xuICAgIH1cbiAgICBkZWJ1Zy5sb2coJ2NvbnZlcnQnLCB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwsIGRlbHRhKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICByZXR1cm4gZGVsdGE7XG4gIH1cblxuICBkYW5nZXJvdXNseVBhc3RlSFRNTChpbmRleCwgaHRtbCwgc291cmNlID0gUXVpbGwuc291cmNlcy5BUEkpIHtcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5xdWlsbC5zZXRDb250ZW50cyh0aGlzLmNvbnZlcnQoaW5kZXgpLCBodG1sKTtcbiAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKDAsIFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhc3RlID0gdGhpcy5jb252ZXJ0KGh0bWwpO1xuICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhuZXcgRGVsdGEoKS5yZXRhaW4oaW5kZXgpLmNvbmNhdChwYXN0ZSksIHNvdXJjZSk7XG4gICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCArIHBhc3RlLmxlbmd0aCgpLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgfVxuICB9XG5cbiAgb25QYXN0ZShlKSB7XG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCB8fCAhdGhpcy5xdWlsbC5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgbGV0IGRlbHRhID0gbmV3IERlbHRhKCkucmV0YWluKHJhbmdlLmluZGV4KTtcbiAgICBsZXQgc2Nyb2xsVG9wID0gdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wO1xuICAgIHRoaXMuY29udGFpbmVyLmZvY3VzKCk7XG4gICAgdGhpcy5xdWlsbC5zZWxlY3Rpb24udXBkYXRlKFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGRlbHRhID0gZGVsdGEuY29uY2F0KHRoaXMuY29udmVydCgpKS5kZWxldGUocmFuZ2UubGVuZ3RoKTtcbiAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAvLyByYW5nZS5sZW5ndGggY29udHJpYnV0ZXMgdG8gZGVsdGEubGVuZ3RoKClcbiAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGRlbHRhLmxlbmd0aCgpIC0gcmFuZ2UubGVuZ3RoLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB0aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICB0aGlzLnF1aWxsLmZvY3VzKCk7XG4gICAgfSwgMSk7XG4gIH1cblxuICBwcmVwYXJlTWF0Y2hpbmcoKSB7XG4gICAgbGV0IGVsZW1lbnRNYXRjaGVycyA9IFtdLCB0ZXh0TWF0Y2hlcnMgPSBbXTtcbiAgICB0aGlzLm1hdGNoZXJzLmZvckVhY2goKHBhaXIpID0+IHtcbiAgICAgIGxldCBbc2VsZWN0b3IsIG1hdGNoZXJdID0gcGFpcjtcbiAgICAgIHN3aXRjaCAoc2VsZWN0b3IpIHtcbiAgICAgICAgY2FzZSBOb2RlLlRFWFRfTk9ERTpcbiAgICAgICAgICB0ZXh0TWF0Y2hlcnMucHVzaChtYXRjaGVyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICBlbGVtZW50TWF0Y2hlcnMucHVzaChtYXRjaGVyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwodGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciksIChub2RlKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPIHVzZSB3ZWFrbWFwXG4gICAgICAgICAgICBub2RlW0RPTV9LRVldID0gbm9kZVtET01fS0VZXSB8fCBbXTtcbiAgICAgICAgICAgIG5vZGVbRE9NX0tFWV0ucHVzaChtYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gW2VsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzXTtcbiAgfVxufVxuQ2xpcGJvYXJkLkRFRkFVTFRTID0ge1xuICBtYXRjaGVyczogW10sXG4gIG1hdGNoVmlzdWFsOiB0cnVlXG59O1xuXG5cbmZ1bmN0aW9uIGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXQsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhmb3JtYXQpLnJlZHVjZShmdW5jdGlvbihkZWx0YSwga2V5KSB7XG4gICAgICByZXR1cm4gYXBwbHlGb3JtYXQoZGVsdGEsIGtleSwgZm9ybWF0W2tleV0pO1xuICAgIH0sIGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGVsdGEucmVkdWNlKGZ1bmN0aW9uKGRlbHRhLCBvcCkge1xuICAgICAgaWYgKG9wLmF0dHJpYnV0ZXMgJiYgb3AuYXR0cmlidXRlc1tmb3JtYXRdKSB7XG4gICAgICAgIHJldHVybiBkZWx0YS5wdXNoKG9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQob3AuaW5zZXJ0LCBleHRlbmQoe30sIHtbZm9ybWF0XTogdmFsdWV9LCBvcC5hdHRyaWJ1dGVzKSk7XG4gICAgICB9XG4gICAgfSwgbmV3IERlbHRhKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShub2RlKSB7XG4gIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkgcmV0dXJuIHt9O1xuICBjb25zdCBET01fS0VZID0gJ19fcWwtY29tcHV0ZWQtc3R5bGUnO1xuICByZXR1cm4gbm9kZVtET01fS0VZXSB8fCAobm9kZVtET01fS0VZXSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpKTtcbn1cblxuZnVuY3Rpb24gZGVsdGFFbmRzV2l0aChkZWx0YSwgdGV4dCkge1xuICBsZXQgZW5kVGV4dCA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSBkZWx0YS5vcHMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIGVuZFRleHQubGVuZ3RoIDwgdGV4dC5sZW5ndGg7IC0taSkge1xuICAgIGxldCBvcCAgPSBkZWx0YS5vcHNbaV07XG4gICAgaWYgKHR5cGVvZiBvcC5pbnNlcnQgIT09ICdzdHJpbmcnKSBicmVhaztcbiAgICBlbmRUZXh0ID0gb3AuaW5zZXJ0ICsgZW5kVGV4dDtcbiAgfVxuICByZXR1cm4gZW5kVGV4dC5zbGljZSgtMSp0ZXh0Lmxlbmd0aCkgPT09IHRleHQ7XG59XG5cbmZ1bmN0aW9uIGlzTGluZShub2RlKSB7XG4gIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7ICAgLy8gRXhjbHVkZSBlbWJlZCBibG9ja3NcbiAgbGV0IHN0eWxlID0gY29tcHV0ZVN0eWxlKG5vZGUpO1xuICByZXR1cm4gWydibG9jaycsICdsaXN0LWl0ZW0nXS5pbmRleE9mKHN0eWxlLmRpc3BsYXkpID4gLTE7XG59XG5cbmZ1bmN0aW9uIHRyYXZlcnNlKG5vZGUsIGVsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzKSB7ICAvLyBQb3N0LW9yZGVyXG4gIGlmIChub2RlLm5vZGVUeXBlID09PSBub2RlLlRFWFRfTk9ERSkge1xuICAgIHJldHVybiB0ZXh0TWF0Y2hlcnMucmVkdWNlKGZ1bmN0aW9uKGRlbHRhLCBtYXRjaGVyKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcihub2RlLCBkZWx0YSk7XG4gICAgfSwgbmV3IERlbHRhKCkpO1xuICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IG5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuIFtdLnJlZHVjZS5jYWxsKG5vZGUuY2hpbGROb2RlcyB8fCBbXSwgKGRlbHRhLCBjaGlsZE5vZGUpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbkRlbHRhID0gdHJhdmVyc2UoY2hpbGROb2RlLCBlbGVtZW50TWF0Y2hlcnMsIHRleHRNYXRjaGVycyk7XG4gICAgICBpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSBub2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICBjaGlsZHJlbkRlbHRhID0gZWxlbWVudE1hdGNoZXJzLnJlZHVjZShmdW5jdGlvbihjaGlsZHJlbkRlbHRhLCBtYXRjaGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXIoY2hpbGROb2RlLCBjaGlsZHJlbkRlbHRhKTtcbiAgICAgICAgfSwgY2hpbGRyZW5EZWx0YSk7XG4gICAgICAgIGNoaWxkcmVuRGVsdGEgPSAoY2hpbGROb2RlW0RPTV9LRVldIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24oY2hpbGRyZW5EZWx0YSwgbWF0Y2hlcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaGVyKGNoaWxkTm9kZSwgY2hpbGRyZW5EZWx0YSk7XG4gICAgICAgIH0sIGNoaWxkcmVuRGVsdGEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlbHRhLmNvbmNhdChjaGlsZHJlbkRlbHRhKTtcbiAgICB9LCBuZXcgRGVsdGEoKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEZWx0YSgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gbWF0Y2hBbGlhcyhmb3JtYXQsIG5vZGUsIGRlbHRhKSB7XG4gIHJldHVybiBhcHBseUZvcm1hdChkZWx0YSwgZm9ybWF0LCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hBdHRyaWJ1dG9yKG5vZGUsIGRlbHRhKSB7XG4gIGxldCBhdHRyaWJ1dGVzID0gUGFyY2htZW50LkF0dHJpYnV0b3IuQXR0cmlidXRlLmtleXMobm9kZSk7XG4gIGxldCBjbGFzc2VzID0gUGFyY2htZW50LkF0dHJpYnV0b3IuQ2xhc3Mua2V5cyhub2RlKTtcbiAgbGV0IHN0eWxlcyA9IFBhcmNobWVudC5BdHRyaWJ1dG9yLlN0eWxlLmtleXMobm9kZSk7XG4gIGxldCBmb3JtYXRzID0ge307XG4gIGF0dHJpYnV0ZXMuY29uY2F0KGNsYXNzZXMpLmNvbmNhdChzdHlsZXMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBsZXQgYXR0ciA9IFBhcmNobWVudC5xdWVyeShuYW1lLCBQYXJjaG1lbnQuU2NvcGUuQVRUUklCVVRFKTtcbiAgICBpZiAoYXR0ciAhPSBudWxsKSB7XG4gICAgICBmb3JtYXRzW2F0dHIuYXR0ck5hbWVdID0gYXR0ci52YWx1ZShub2RlKTtcbiAgICAgIGlmIChmb3JtYXRzW2F0dHIuYXR0ck5hbWVdKSByZXR1cm47XG4gICAgfVxuICAgIGF0dHIgPSBBVFRSSUJVVEVfQVRUUklCVVRPUlNbbmFtZV07XG4gICAgaWYgKGF0dHIgIT0gbnVsbCAmJiAoYXR0ci5hdHRyTmFtZSA9PT0gbmFtZSB8fCBhdHRyLmtleU5hbWUgPT09IG5hbWUpKSB7XG4gICAgICBmb3JtYXRzW2F0dHIuYXR0ck5hbWVdID0gYXR0ci52YWx1ZShub2RlKSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGF0dHIgPSBTVFlMRV9BVFRSSUJVVE9SU1tuYW1lXVxuICAgIGlmIChhdHRyICE9IG51bGwgJiYgKGF0dHIuYXR0ck5hbWUgPT09IG5hbWUgfHwgYXR0ci5rZXlOYW1lID09PSBuYW1lKSkge1xuICAgICAgYXR0ciA9IFNUWUxFX0FUVFJJQlVUT1JTW25hbWVdO1xuICAgICAgZm9ybWF0c1thdHRyLmF0dHJOYW1lXSA9IGF0dHIudmFsdWUobm9kZSkgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEgPSBhcHBseUZvcm1hdChkZWx0YSwgZm9ybWF0cyk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaEJsb3Qobm9kZSwgZGVsdGEpIHtcbiAgbGV0IG1hdGNoID0gUGFyY2htZW50LnF1ZXJ5KG5vZGUpO1xuICBpZiAobWF0Y2ggPT0gbnVsbCkgcmV0dXJuIGRlbHRhO1xuICBpZiAobWF0Y2gucHJvdG90eXBlIGluc3RhbmNlb2YgUGFyY2htZW50LkVtYmVkKSB7XG4gICAgbGV0IGVtYmVkID0ge307XG4gICAgbGV0IHZhbHVlID0gbWF0Y2gudmFsdWUobm9kZSk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGVtYmVkW21hdGNoLmJsb3ROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsdGEgPSBuZXcgRGVsdGEoKS5pbnNlcnQoZW1iZWQsIG1hdGNoLmZvcm1hdHMobm9kZSkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgbWF0Y2guZm9ybWF0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlbHRhID0gYXBwbHlGb3JtYXQoZGVsdGEsIG1hdGNoLmJsb3ROYW1lLCBtYXRjaC5mb3JtYXRzKG5vZGUpKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoQnJlYWsobm9kZSwgZGVsdGEpIHtcbiAgaWYgKCFkZWx0YUVuZHNXaXRoKGRlbHRhLCAnXFxuJykpIHtcbiAgICBkZWx0YS5pbnNlcnQoJ1xcbicpO1xuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hJZ25vcmUoKSB7XG4gIHJldHVybiBuZXcgRGVsdGEoKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hJbmRlbnQobm9kZSwgZGVsdGEpIHtcbiAgbGV0IG1hdGNoID0gUGFyY2htZW50LnF1ZXJ5KG5vZGUpO1xuICBpZiAobWF0Y2ggPT0gbnVsbCB8fCBtYXRjaC5ibG90TmFtZSAhPT0gJ2xpc3QtaXRlbScgfHwgIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIHJldHVybiBkZWx0YTtcbiAgfVxuICBsZXQgaW5kZW50ID0gLTEsIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgd2hpbGUgKCFwYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1jbGlwYm9hcmQnKSkge1xuICAgIGlmICgoUGFyY2htZW50LnF1ZXJ5KHBhcmVudCkgfHwge30pLmJsb3ROYW1lID09PSAnbGlzdCcpIHtcbiAgICAgIGluZGVudCArPSAxO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgfVxuICBpZiAoaW5kZW50IDw9IDApIHJldHVybiBkZWx0YTtcbiAgcmV0dXJuIGRlbHRhLmNvbXBvc2UobmV3IERlbHRhKCkucmV0YWluKGRlbHRhLmxlbmd0aCgpIC0gMSkucmV0YWluKDEsIHsgaW5kZW50OiBpbmRlbnR9KSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoTmV3bGluZShub2RlLCBkZWx0YSkge1xuICBpZiAoIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIGlmIChpc0xpbmUobm9kZSkgfHwgKGRlbHRhLmxlbmd0aCgpID4gMCAmJiBub2RlLm5leHRTaWJsaW5nICYmIGlzTGluZShub2RlLm5leHRTaWJsaW5nKSkpIHtcbiAgICAgIGRlbHRhLmluc2VydCgnXFxuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hTcGFjaW5nKG5vZGUsIGRlbHRhKSB7XG4gIGlmIChpc0xpbmUobm9kZSkgJiYgbm9kZS5uZXh0RWxlbWVudFNpYmxpbmcgIT0gbnVsbCAmJiAhZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcblxcbicpKSB7XG4gICAgbGV0IG5vZGVIZWlnaHQgPSBub2RlLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoY29tcHV0ZVN0eWxlKG5vZGUpLm1hcmdpblRvcCkgKyBwYXJzZUZsb2F0KGNvbXB1dGVTdHlsZShub2RlKS5tYXJnaW5Cb3R0b20pO1xuICAgIGlmIChub2RlLm5leHRFbGVtZW50U2libGluZy5vZmZzZXRUb3AgPiBub2RlLm9mZnNldFRvcCArIG5vZGVIZWlnaHQqMS41KSB7XG4gICAgICBkZWx0YS5pbnNlcnQoJ1xcbicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoU3R5bGVzKG5vZGUsIGRlbHRhKSB7XG4gIGxldCBmb3JtYXRzID0ge307XG4gIGxldCBzdHlsZSA9IG5vZGUuc3R5bGUgfHwge307XG4gIGlmIChzdHlsZS5mb250U3R5bGUgJiYgY29tcHV0ZVN0eWxlKG5vZGUpLmZvbnRTdHlsZSA9PT0gJ2l0YWxpYycpIHtcbiAgICBmb3JtYXRzLml0YWxpYyA9IHRydWU7XG4gIH1cbiAgaWYgKHN0eWxlLmZvbnRXZWlnaHQgJiYgKGNvbXB1dGVTdHlsZShub2RlKS5mb250V2VpZ2h0LnN0YXJ0c1dpdGgoJ2JvbGQnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoY29tcHV0ZVN0eWxlKG5vZGUpLmZvbnRXZWlnaHQpID49IDcwMCkpIHtcbiAgICBmb3JtYXRzLmJvbGQgPSB0cnVlO1xuICB9XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEgPSBhcHBseUZvcm1hdChkZWx0YSwgZm9ybWF0cyk7XG4gIH1cbiAgaWYgKHBhcnNlRmxvYXQoc3R5bGUudGV4dEluZGVudCB8fCAwKSA+IDApIHsgIC8vIENvdWxkIGJlIDAuNWluXG4gICAgZGVsdGEgPSBuZXcgRGVsdGEoKS5pbnNlcnQoJ1xcdCcpLmNvbmNhdChkZWx0YSk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaFRleHQobm9kZSwgZGVsdGEpIHtcbiAgbGV0IHRleHQgPSBub2RlLmRhdGE7XG4gIC8vIFdvcmQgcmVwcmVzZW50cyBlbXB0eSBsaW5lIHdpdGggPG86cD4mbmJzcDs8L286cD5cbiAgaWYgKG5vZGUucGFyZW50Tm9kZS50YWdOYW1lID09PSAnTzpQJykge1xuICAgIHJldHVybiBkZWx0YS5pbnNlcnQodGV4dC50cmltKCkpO1xuICB9XG4gIGlmICh0ZXh0LnRyaW0oKS5sZW5ndGggPT09IDAgJiYgbm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygncWwtY2xpcGJvYXJkJykpIHtcbiAgICByZXR1cm4gZGVsdGE7XG4gIH1cbiAgaWYgKCFjb21wdXRlU3R5bGUobm9kZS5wYXJlbnROb2RlKS53aGl0ZVNwYWNlLnN0YXJ0c1dpdGgoJ3ByZScpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtc3R5bGVcbiAgICBsZXQgcmVwbGFjZXIgPSBmdW5jdGlvbihjb2xsYXBzZSwgbWF0Y2gpIHtcbiAgICAgIG1hdGNoID0gbWF0Y2gucmVwbGFjZSgvW15cXHUwMGEwXS9nLCAnJyk7ICAgIC8vIFxcdTAwYTAgaXMgbmJzcDtcbiAgICAgIHJldHVybiBtYXRjaC5sZW5ndGggPCAxICYmIGNvbGxhcHNlID8gJyAnIDogbWF0Y2g7XG4gICAgfTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgJyAnKS5yZXBsYWNlKC9cXG4vZywgJyAnKTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHNcXHMrL2csIHJlcGxhY2VyLmJpbmQocmVwbGFjZXIsIHRydWUpKTsgIC8vIGNvbGxhcHNlIHdoaXRlc3BhY2VcbiAgICBpZiAoKG5vZGUucHJldmlvdXNTaWJsaW5nID09IG51bGwgJiYgaXNMaW5lKG5vZGUucGFyZW50Tm9kZSkpIHx8XG4gICAgICAgIChub2RlLnByZXZpb3VzU2libGluZyAhPSBudWxsICYmIGlzTGluZShub2RlLnByZXZpb3VzU2libGluZykpKSB7XG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eXFxzKy8sIHJlcGxhY2VyLmJpbmQocmVwbGFjZXIsIGZhbHNlKSk7XG4gICAgfVxuICAgIGlmICgobm9kZS5uZXh0U2libGluZyA9PSBudWxsICYmIGlzTGluZShub2RlLnBhcmVudE5vZGUpKSB8fFxuICAgICAgICAobm9kZS5uZXh0U2libGluZyAhPSBudWxsICYmIGlzTGluZShub2RlLm5leHRTaWJsaW5nKSkpIHtcbiAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xccyskLywgcmVwbGFjZXIuYmluZChyZXBsYWNlciwgZmFsc2UpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlbHRhLmluc2VydCh0ZXh0KTtcbn1cblxuXG5leHBvcnQgeyBDbGlwYm9hcmQgYXMgZGVmYXVsdCwgbWF0Y2hBdHRyaWJ1dG9yLCBtYXRjaEJsb3QsIG1hdGNoTmV3bGluZSwgbWF0Y2hTcGFjaW5nLCBtYXRjaFRleHQgfTtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBRdWlsbCBmcm9tICcuLi9jb3JlL3F1aWxsJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vY29yZS9tb2R1bGUnO1xuXG5cbmNsYXNzIEhpc3RvcnkgZXh0ZW5kcyBNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucykge1xuICAgIHN1cGVyKHF1aWxsLCBvcHRpb25zKTtcbiAgICB0aGlzLmxhc3RSZWNvcmRlZCA9IDA7XG4gICAgdGhpcy5pZ25vcmVDaGFuZ2UgPSBmYWxzZTtcbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgdGhpcy5xdWlsbC5vbihRdWlsbC5ldmVudHMuRURJVE9SX0NIQU5HRSwgKGV2ZW50TmFtZSwgZGVsdGEsIG9sZERlbHRhLCBzb3VyY2UpID0+IHtcbiAgICAgIGlmIChldmVudE5hbWUgIT09IFF1aWxsLmV2ZW50cy5URVhUX0NIQU5HRSB8fCB0aGlzLmlnbm9yZUNoYW5nZSkgcmV0dXJuO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudXNlck9ubHkgfHwgc291cmNlID09PSBRdWlsbC5zb3VyY2VzLlVTRVIpIHtcbiAgICAgICAgdGhpcy5yZWNvcmQoZGVsdGEsIG9sZERlbHRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtKGRlbHRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnF1aWxsLmtleWJvYXJkLmFkZEJpbmRpbmcoeyBrZXk6ICdaJywgc2hvcnRLZXk6IHRydWUgfSwgdGhpcy51bmRvLmJpbmQodGhpcykpO1xuICAgIHRoaXMucXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7IGtleTogJ1onLCBzaG9ydEtleTogdHJ1ZSwgc2hpZnRLZXk6IHRydWUgfSwgdGhpcy5yZWRvLmJpbmQodGhpcykpO1xuICAgIGlmICgvV2luL2kudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pKSB7XG4gICAgICB0aGlzLnF1aWxsLmtleWJvYXJkLmFkZEJpbmRpbmcoeyBrZXk6ICdZJywgc2hvcnRLZXk6IHRydWUgfSwgdGhpcy5yZWRvLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZShzb3VyY2UsIGRlc3QpIHtcbiAgICBpZiAodGhpcy5zdGFja1tzb3VyY2VdLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGxldCBkZWx0YSA9IHRoaXMuc3RhY2tbc291cmNlXS5wb3AoKTtcbiAgICB0aGlzLnN0YWNrW2Rlc3RdLnB1c2goZGVsdGEpO1xuICAgIHRoaXMubGFzdFJlY29yZGVkID0gMDtcbiAgICB0aGlzLmlnbm9yZUNoYW5nZSA9IHRydWU7XG4gICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YVtzb3VyY2VdLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgIHRoaXMuaWdub3JlQ2hhbmdlID0gZmFsc2U7XG4gICAgbGV0IGluZGV4ID0gZ2V0TGFzdENoYW5nZUluZGV4KGRlbHRhW3NvdXJjZV0pO1xuICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGluZGV4KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc3RhY2sgPSB7IHVuZG86IFtdLCByZWRvOiBbXSB9O1xuICB9XG5cbiAgY3V0b2ZmKCkge1xuICAgIHRoaXMubGFzdFJlY29yZGVkID0gMDtcbiAgfVxuXG4gIHJlY29yZChjaGFuZ2VEZWx0YSwgb2xkRGVsdGEpIHtcbiAgICBpZiAoY2hhbmdlRGVsdGEub3BzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHRoaXMuc3RhY2sucmVkbyA9IFtdO1xuICAgIGxldCB1bmRvRGVsdGEgPSB0aGlzLnF1aWxsLmdldENvbnRlbnRzKCkuZGlmZihvbGREZWx0YSk7XG4gICAgbGV0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgaWYgKHRoaXMubGFzdFJlY29yZGVkICsgdGhpcy5vcHRpb25zLmRlbGF5ID4gdGltZXN0YW1wICYmIHRoaXMuc3RhY2sudW5kby5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgZGVsdGEgPSB0aGlzLnN0YWNrLnVuZG8ucG9wKCk7XG4gICAgICB1bmRvRGVsdGEgPSB1bmRvRGVsdGEuY29tcG9zZShkZWx0YS51bmRvKTtcbiAgICAgIGNoYW5nZURlbHRhID0gZGVsdGEucmVkby5jb21wb3NlKGNoYW5nZURlbHRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXN0UmVjb3JkZWQgPSB0aW1lc3RhbXA7XG4gICAgfVxuICAgIHRoaXMuc3RhY2sudW5kby5wdXNoKHtcbiAgICAgIHJlZG86IGNoYW5nZURlbHRhLFxuICAgICAgdW5kbzogdW5kb0RlbHRhXG4gICAgfSk7XG4gICAgaWYgKHRoaXMuc3RhY2sudW5kby5sZW5ndGggPiB0aGlzLm9wdGlvbnMubWF4U3RhY2spIHtcbiAgICAgIHRoaXMuc3RhY2sudW5kby5zaGlmdCgpO1xuICAgIH1cbiAgfVxuXG4gIHJlZG8oKSB7XG4gICAgdGhpcy5jaGFuZ2UoJ3JlZG8nLCAndW5kbycpO1xuICB9XG5cbiAgdHJhbnNmb3JtKGRlbHRhKSB7XG4gICAgdGhpcy5zdGFjay51bmRvLmZvckVhY2goZnVuY3Rpb24oY2hhbmdlKSB7XG4gICAgICBjaGFuZ2UudW5kbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UudW5kbywgdHJ1ZSk7XG4gICAgICBjaGFuZ2UucmVkbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UucmVkbywgdHJ1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5zdGFjay5yZWRvLmZvckVhY2goZnVuY3Rpb24oY2hhbmdlKSB7XG4gICAgICBjaGFuZ2UudW5kbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UudW5kbywgdHJ1ZSk7XG4gICAgICBjaGFuZ2UucmVkbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UucmVkbywgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cblxuICB1bmRvKCkge1xuICAgIHRoaXMuY2hhbmdlKCd1bmRvJywgJ3JlZG8nKTtcbiAgfVxufVxuSGlzdG9yeS5ERUZBVUxUUyA9IHtcbiAgZGVsYXk6IDEwMDAsXG4gIG1heFN0YWNrOiAxMDAsXG4gIHVzZXJPbmx5OiBmYWxzZVxufTtcblxuZnVuY3Rpb24gZW5kc1dpdGhOZXdsaW5lQ2hhbmdlKGRlbHRhKSB7XG4gIGxldCBsYXN0T3AgPSBkZWx0YS5vcHNbZGVsdGEub3BzLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdE9wID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKGxhc3RPcC5pbnNlcnQgIT0gbnVsbCkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdE9wLmluc2VydCA9PT0gJ3N0cmluZycgJiYgbGFzdE9wLmluc2VydC5lbmRzV2l0aCgnXFxuJyk7XG4gIH1cbiAgaWYgKGxhc3RPcC5hdHRyaWJ1dGVzICE9IG51bGwpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobGFzdE9wLmF0dHJpYnV0ZXMpLnNvbWUoZnVuY3Rpb24oYXR0cikge1xuICAgICAgcmV0dXJuIFBhcmNobWVudC5xdWVyeShhdHRyLCBQYXJjaG1lbnQuU2NvcGUuQkxPQ0spICE9IG51bGw7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRMYXN0Q2hhbmdlSW5kZXgoZGVsdGEpIHtcbiAgbGV0IGRlbGV0ZUxlbmd0aCA9IGRlbHRhLnJlZHVjZShmdW5jdGlvbihsZW5ndGgsIG9wKSB7XG4gICAgbGVuZ3RoICs9IChvcC5kZWxldGUgfHwgMCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfSwgMCk7XG4gIGxldCBjaGFuZ2VJbmRleCA9IGRlbHRhLmxlbmd0aCgpIC0gZGVsZXRlTGVuZ3RoO1xuICBpZiAoZW5kc1dpdGhOZXdsaW5lQ2hhbmdlKGRlbHRhKSkge1xuICAgIGNoYW5nZUluZGV4IC09IDE7XG4gIH1cbiAgcmV0dXJuIGNoYW5nZUluZGV4O1xufVxuXG5cbmV4cG9ydCB7IEhpc3RvcnkgYXMgZGVmYXVsdCwgZ2V0TGFzdENoYW5nZUluZGV4IH07XG4iLCJpbXBvcnQgY2xvbmUgZnJvbSAnY2xvbmUnO1xuaW1wb3J0IGVxdWFsIGZyb20gJ2RlZXAtZXF1YWwnO1xuaW1wb3J0IGV4dGVuZCBmcm9tICdleHRlbmQnO1xuaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJztcbmltcG9ydCBEZWx0YU9wIGZyb20gJ3F1aWxsLWRlbHRhL2xpYi9vcCc7XG5pbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgUXVpbGwgZnJvbSAnLi4vY29yZS9xdWlsbCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2NvcmUvbG9nZ2VyJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vY29yZS9tb2R1bGUnO1xuXG5sZXQgZGVidWcgPSBsb2dnZXIoJ3F1aWxsOmtleWJvYXJkJyk7XG5cbmNvbnN0IFNIT1JUS0VZID0gL01hYy9pLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSA/ICdtZXRhS2V5JyA6ICdjdHJsS2V5JztcblxuXG5jbGFzcyBLZXlib2FyZCBleHRlbmRzIE1vZHVsZSB7XG4gIHN0YXRpYyBtYXRjaChldnQsIGJpbmRpbmcpIHtcbiAgICBiaW5kaW5nID0gbm9ybWFsaXplKGJpbmRpbmcpO1xuICAgIGlmIChbJ2FsdEtleScsICdjdHJsS2V5JywgJ21ldGFLZXknLCAnc2hpZnRLZXknXS5zb21lKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuICghIWJpbmRpbmdba2V5XSAhPT0gZXZ0W2tleV0gJiYgYmluZGluZ1trZXldICE9PSBudWxsKTtcbiAgICB9KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYmluZGluZy5rZXkgPT09IChldnQud2hpY2ggfHwgZXZ0LmtleUNvZGUpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihxdWlsbCwgb3B0aW9ucyk7XG4gICAgdGhpcy5iaW5kaW5ncyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5iaW5kaW5ncykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgaWYgKG5hbWUgPT09ICdsaXN0IGF1dG9maWxsJyAmJlxuICAgICAgICAgIHF1aWxsLnNjcm9sbC53aGl0ZWxpc3QgIT0gbnVsbCAmJlxuICAgICAgICAgICFxdWlsbC5zY3JvbGwud2hpdGVsaXN0WydsaXN0J10pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5iaW5kaW5nc1tuYW1lXSkge1xuICAgICAgICB0aGlzLmFkZEJpbmRpbmcodGhpcy5vcHRpb25zLmJpbmRpbmdzW25hbWVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsIHNoaWZ0S2V5OiBudWxsIH0sIGhhbmRsZUVudGVyKTtcbiAgICB0aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsIG1ldGFLZXk6IG51bGwsIGN0cmxLZXk6IG51bGwsIGFsdEtleTogbnVsbCB9LCBmdW5jdGlvbigpIHt9KTtcbiAgICBpZiAoL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAvLyBOZWVkIHRvIGhhbmRsZSBkZWxldGUgYW5kIGJhY2tzcGFjZSBmb3IgRmlyZWZveCBpbiB0aGUgZ2VuZXJhbCBjYXNlICMxMTcxXG4gICAgICB0aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuQkFDS1NQQUNFIH0sIHsgY29sbGFwc2VkOiB0cnVlIH0sIGhhbmRsZUJhY2tzcGFjZSk7XG4gICAgICB0aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuREVMRVRFIH0sIHsgY29sbGFwc2VkOiB0cnVlIH0sIGhhbmRsZURlbGV0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UgfSwgeyBjb2xsYXBzZWQ6IHRydWUsIHByZWZpeDogL14uPyQvIH0sIGhhbmRsZUJhY2tzcGFjZSk7XG4gICAgICB0aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuREVMRVRFIH0sIHsgY29sbGFwc2VkOiB0cnVlLCBzdWZmaXg6IC9eLj8kLyB9LCBoYW5kbGVEZWxldGUpO1xuICAgIH1cbiAgICB0aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuQkFDS1NQQUNFIH0sIHsgY29sbGFwc2VkOiBmYWxzZSB9LCBoYW5kbGVEZWxldGVSYW5nZSk7XG4gICAgdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkRFTEVURSB9LCB7IGNvbGxhcHNlZDogZmFsc2UgfSwgaGFuZGxlRGVsZXRlUmFuZ2UpO1xuICAgIHRoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UsIGFsdEtleTogbnVsbCwgY3RybEtleTogbnVsbCwgbWV0YUtleTogbnVsbCwgc2hpZnRLZXk6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2xsYXBzZWQ6IHRydWUsIG9mZnNldDogMCB9LFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVCYWNrc3BhY2UpO1xuICAgIHRoaXMubGlzdGVuKCk7XG4gIH1cblxuICBhZGRCaW5kaW5nKGtleSwgY29udGV4dCA9IHt9LCBoYW5kbGVyID0ge30pIHtcbiAgICBsZXQgYmluZGluZyA9IG5vcm1hbGl6ZShrZXkpO1xuICAgIGlmIChiaW5kaW5nID09IG51bGwgfHwgYmluZGluZy5rZXkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGRlYnVnLndhcm4oJ0F0dGVtcHRlZCB0byBhZGQgaW52YWxpZCBrZXlib2FyZCBiaW5kaW5nJywgYmluZGluZyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGV4dCA9IHsgaGFuZGxlcjogY29udGV4dCB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGhhbmRsZXIgPSB7IGhhbmRsZXI6IGhhbmRsZXIgfTtcbiAgICB9XG4gICAgYmluZGluZyA9IGV4dGVuZChiaW5kaW5nLCBjb250ZXh0LCBoYW5kbGVyKTtcbiAgICB0aGlzLmJpbmRpbmdzW2JpbmRpbmcua2V5XSA9IHRoaXMuYmluZGluZ3NbYmluZGluZy5rZXldIHx8IFtdO1xuICAgIHRoaXMuYmluZGluZ3NbYmluZGluZy5rZXldLnB1c2goYmluZGluZyk7XG4gIH1cblxuICBsaXN0ZW4oKSB7XG4gICAgdGhpcy5xdWlsbC5yb290LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZ0KSA9PiB7XG4gICAgICBpZiAoZXZ0LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICAgIGxldCB3aGljaCA9IGV2dC53aGljaCB8fCBldnQua2V5Q29kZTtcbiAgICAgIGxldCBiaW5kaW5ncyA9ICh0aGlzLmJpbmRpbmdzW3doaWNoXSB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uKGJpbmRpbmcpIHtcbiAgICAgICAgcmV0dXJuIEtleWJvYXJkLm1hdGNoKGV2dCwgYmluZGluZyk7XG4gICAgICB9KTtcbiAgICAgIGlmIChiaW5kaW5ncy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGxldCByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICBpZiAocmFuZ2UgPT0gbnVsbCB8fCAhdGhpcy5xdWlsbC5oYXNGb2N1cygpKSByZXR1cm47XG4gICAgICBsZXQgW2xpbmUsIG9mZnNldF0gPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpO1xuICAgICAgbGV0IFtsZWFmU3RhcnQsIG9mZnNldFN0YXJ0XSA9IHRoaXMucXVpbGwuZ2V0TGVhZihyYW5nZS5pbmRleCk7XG4gICAgICBsZXQgW2xlYWZFbmQsIG9mZnNldEVuZF0gPSByYW5nZS5sZW5ndGggPT09IDAgPyBbbGVhZlN0YXJ0LCBvZmZzZXRTdGFydF0gOiB0aGlzLnF1aWxsLmdldExlYWYocmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGgpO1xuICAgICAgbGV0IHByZWZpeFRleHQgPSBsZWFmU3RhcnQgaW5zdGFuY2VvZiBQYXJjaG1lbnQuVGV4dCA/IGxlYWZTdGFydC52YWx1ZSgpLnNsaWNlKDAsIG9mZnNldFN0YXJ0KSA6ICcnO1xuICAgICAgbGV0IHN1ZmZpeFRleHQgPSBsZWFmRW5kIGluc3RhbmNlb2YgUGFyY2htZW50LlRleHQgPyBsZWFmRW5kLnZhbHVlKCkuc2xpY2Uob2Zmc2V0RW5kKSA6ICcnO1xuICAgICAgbGV0IGN1ckNvbnRleHQgPSB7XG4gICAgICAgIGNvbGxhcHNlZDogcmFuZ2UubGVuZ3RoID09PSAwLFxuICAgICAgICBlbXB0eTogcmFuZ2UubGVuZ3RoID09PSAwICYmIGxpbmUubGVuZ3RoKCkgPD0gMSxcbiAgICAgICAgZm9ybWF0OiB0aGlzLnF1aWxsLmdldEZvcm1hdChyYW5nZSksXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBwcmVmaXg6IHByZWZpeFRleHQsXG4gICAgICAgIHN1ZmZpeDogc3VmZml4VGV4dFxuICAgICAgfTtcbiAgICAgIGxldCBwcmV2ZW50ZWQgPSBiaW5kaW5ncy5zb21lKChiaW5kaW5nKSA9PiB7XG4gICAgICAgIGlmIChiaW5kaW5nLmNvbGxhcHNlZCAhPSBudWxsICYmIGJpbmRpbmcuY29sbGFwc2VkICE9PSBjdXJDb250ZXh0LmNvbGxhcHNlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYmluZGluZy5lbXB0eSAhPSBudWxsICYmIGJpbmRpbmcuZW1wdHkgIT09IGN1ckNvbnRleHQuZW1wdHkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGJpbmRpbmcub2Zmc2V0ICE9IG51bGwgJiYgYmluZGluZy5vZmZzZXQgIT09IGN1ckNvbnRleHQub2Zmc2V0KSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmcuZm9ybWF0KSkge1xuICAgICAgICAgIC8vIGFueSBmb3JtYXQgaXMgcHJlc2VudFxuICAgICAgICAgIGlmIChiaW5kaW5nLmZvcm1hdC5ldmVyeShmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VyQ29udGV4dC5mb3JtYXRbbmFtZV0gPT0gbnVsbDtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYmluZGluZy5mb3JtYXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gYWxsIGZvcm1hdHMgbXVzdCBtYXRjaFxuICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoYmluZGluZy5mb3JtYXQpLmV2ZXJ5KGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChiaW5kaW5nLmZvcm1hdFtuYW1lXSA9PT0gdHJ1ZSkgcmV0dXJuIGN1ckNvbnRleHQuZm9ybWF0W25hbWVdICE9IG51bGw7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5mb3JtYXRbbmFtZV0gPT09IGZhbHNlKSByZXR1cm4gY3VyQ29udGV4dC5mb3JtYXRbbmFtZV0gPT0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBlcXVhbChiaW5kaW5nLmZvcm1hdFtuYW1lXSwgY3VyQ29udGV4dC5mb3JtYXRbbmFtZV0pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChiaW5kaW5nLnByZWZpeCAhPSBudWxsICYmICFiaW5kaW5nLnByZWZpeC50ZXN0KGN1ckNvbnRleHQucHJlZml4KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYmluZGluZy5zdWZmaXggIT0gbnVsbCAmJiAhYmluZGluZy5zdWZmaXgudGVzdChjdXJDb250ZXh0LnN1ZmZpeCkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGJpbmRpbmcuaGFuZGxlci5jYWxsKHRoaXMsIHJhbmdlLCBjdXJDb250ZXh0KSAhPT0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHByZXZlbnRlZCkge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5LZXlib2FyZC5rZXlzID0ge1xuICBCQUNLU1BBQ0U6IDgsXG4gIFRBQjogOSxcbiAgRU5URVI6IDEzLFxuICBFU0NBUEU6IDI3LFxuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBSSUdIVDogMzksXG4gIERPV046IDQwLFxuICBERUxFVEU6IDQ2XG59O1xuXG5LZXlib2FyZC5ERUZBVUxUUyA9IHtcbiAgYmluZGluZ3M6IHtcbiAgICAnYm9sZCcgICAgICA6IG1ha2VGb3JtYXRIYW5kbGVyKCdib2xkJyksXG4gICAgJ2l0YWxpYycgICAgOiBtYWtlRm9ybWF0SGFuZGxlcignaXRhbGljJyksXG4gICAgJ3VuZGVybGluZScgOiBtYWtlRm9ybWF0SGFuZGxlcigndW5kZXJsaW5lJyksXG4gICAgJ2luZGVudCc6IHtcbiAgICAgIC8vIGhpZ2hsaWdodCB0YWIgb3IgdGFiIGF0IGJlZ2lubmluZyBvZiBsaXN0LCBpbmRlbnQgb3IgYmxvY2txdW90ZVxuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICAgIGZvcm1hdDogWydibG9ja3F1b3RlJywgJ2luZGVudCcsICdsaXN0J10sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5jb2xsYXBzZWQgJiYgY29udGV4dC5vZmZzZXQgIT09IDApIHJldHVybiB0cnVlO1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgJysxJywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdvdXRkZW50Jzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICAgIHNoaWZ0S2V5OiB0cnVlLFxuICAgICAgZm9ybWF0OiBbJ2Jsb2NrcXVvdGUnLCAnaW5kZW50JywgJ2xpc3QnXSxcbiAgICAgIC8vIGhpZ2hsaWdodCB0YWIgb3IgdGFiIGF0IGJlZ2lubmluZyBvZiBsaXN0LCBpbmRlbnQgb3IgYmxvY2txdW90ZVxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuY29sbGFwc2VkICYmIGNvbnRleHQub2Zmc2V0ICE9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsICctMScsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICAnb3V0ZGVudCBiYWNrc3BhY2UnOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuQkFDS1NQQUNFLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgc2hpZnRLZXk6IG51bGwsXG4gICAgICBtZXRhS2V5OiBudWxsLFxuICAgICAgY3RybEtleTogbnVsbCxcbiAgICAgIGFsdEtleTogbnVsbCxcbiAgICAgIGZvcm1hdDogWydpbmRlbnQnLCAnbGlzdCddLFxuICAgICAgb2Zmc2V0OiAwLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuZm9ybWF0LmluZGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsICctMScsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5mb3JtYXQubGlzdCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCBmYWxzZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgJ2luZGVudCBjb2RlLWJsb2NrJzogbWFrZUNvZGVCbG9ja0hhbmRsZXIodHJ1ZSksXG4gICAgJ291dGRlbnQgY29kZS1ibG9jayc6IG1ha2VDb2RlQmxvY2tIYW5kbGVyKGZhbHNlKSxcbiAgICAncmVtb3ZlIHRhYic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5UQUIsXG4gICAgICBzaGlmdEtleTogdHJ1ZSxcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIHByZWZpeDogL1xcdCQvLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5kZWxldGVUZXh0KHJhbmdlLmluZGV4IC0gMSwgMSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICd0YWInOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuVEFCLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO1xuICAgICAgICBsZXQgZGVsdGEgPSBuZXcgRGVsdGEoKS5yZXRhaW4ocmFuZ2UuaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRlbGV0ZShyYW5nZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmluc2VydCgnXFx0Jyk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnbGlzdCBlbXB0eSBlbnRlcic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUixcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogWydsaXN0J10sXG4gICAgICBlbXB0eTogdHJ1ZSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgZmFsc2UsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIGlmIChjb250ZXh0LmZvcm1hdC5pbmRlbnQpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgZmFsc2UsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdjaGVja2xpc3QgZW50ZXInOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBmb3JtYXQ6IHsgbGlzdDogJ2NoZWNrZWQnIH0sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICBsZXQgW2xpbmUsIG9mZnNldF0gPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpO1xuICAgICAgICBsZXQgZm9ybWF0cyA9IGV4dGVuZCh7fSwgbGluZS5mb3JtYXRzKCksIHsgbGlzdDogJ2NoZWNrZWQnIH0pO1xuICAgICAgICBsZXQgZGVsdGEgPSBuZXcgRGVsdGEoKS5yZXRhaW4ocmFuZ2UuaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmluc2VydCgnXFxuJywgZm9ybWF0cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmV0YWluKGxpbmUubGVuZ3RoKCkgLSBvZmZzZXQgLSAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXRhaW4oMSwgeyBsaXN0OiAndW5jaGVja2VkJyB9KTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgIHRoaXMucXVpbGwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdoZWFkZXIgZW50ZXInOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBmb3JtYXQ6IFsnaGVhZGVyJ10sXG4gICAgICBzdWZmaXg6IC9eJC8sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICBsZXQgW2xpbmUsIG9mZnNldF0gPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpO1xuICAgICAgICBsZXQgZGVsdGEgPSBuZXcgRGVsdGEoKS5yZXRhaW4ocmFuZ2UuaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmluc2VydCgnXFxuJywgY29udGV4dC5mb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJldGFpbihsaW5lLmxlbmd0aCgpIC0gb2Zmc2V0IC0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmV0YWluKDEsIHsgaGVhZGVyOiBudWxsIH0pO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2xpc3QgYXV0b2ZpbGwnOiB7XG4gICAgICBrZXk6ICcgJyxcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogeyBsaXN0OiBmYWxzZSB9LFxuICAgICAgcHJlZml4OiAvXlxccyo/KFxcZCtcXC58LXxcXCp8XFxbID9cXF18XFxbeFxcXSkkLyxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIGxldCBsZW5ndGggPSBjb250ZXh0LnByZWZpeC5sZW5ndGg7XG4gICAgICAgIGxldCBbbGluZSwgb2Zmc2V0XSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCk7XG4gICAgICAgIGlmIChvZmZzZXQgPiBsZW5ndGgpIHJldHVybiB0cnVlO1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIHN3aXRjaCAoY29udGV4dC5wcmVmaXgudHJpbSgpKSB7XG4gICAgICAgICAgY2FzZSAnW10nOiBjYXNlICdbIF0nOlxuICAgICAgICAgICAgdmFsdWUgPSAndW5jaGVja2VkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1t4XSc6XG4gICAgICAgICAgICB2YWx1ZSA9ICdjaGVja2VkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJy0nOiBjYXNlICcqJzpcbiAgICAgICAgICAgIHZhbHVlID0gJ2J1bGxldCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFsdWUgPSAnb3JkZXJlZCc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5xdWlsbC5pbnNlcnRUZXh0KHJhbmdlLmluZGV4LCAnICcsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKTtcbiAgICAgICAgbGV0IGRlbHRhID0gbmV3IERlbHRhKCkucmV0YWluKHJhbmdlLmluZGV4IC0gb2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kZWxldGUobGVuZ3RoICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmV0YWluKGxpbmUubGVuZ3RoKCkgLSAyIC0gb2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXRhaW4oMSwgeyBsaXN0OiB2YWx1ZSB9KTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCAtIGxlbmd0aCwgUXVpbGwuc291cmNlcy5TSUxFTlQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2NvZGUgZXhpdCc6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUixcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogWydjb2RlLWJsb2NrJ10sXG4gICAgICBwcmVmaXg6IC9cXG5cXG4kLyxcbiAgICAgIHN1ZmZpeDogL15cXHMrJC8sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICBjb25zdCBbbGluZSwgb2Zmc2V0XSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCk7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gbmV3IERlbHRhKClcbiAgICAgICAgICAucmV0YWluKHJhbmdlLmluZGV4ICsgbGluZS5sZW5ndGgoKSAtIG9mZnNldCAtIDIpXG4gICAgICAgICAgLnJldGFpbigxLCB7ICdjb2RlLWJsb2NrJzogbnVsbCB9KVxuICAgICAgICAgIC5kZWxldGUoMSk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICAnZW1iZWQgbGVmdCc6IG1ha2VFbWJlZEFycm93SGFuZGxlcihLZXlib2FyZC5rZXlzLkxFRlQsIGZhbHNlKSxcbiAgICAnZW1iZWQgbGVmdCBzaGlmdCc6IG1ha2VFbWJlZEFycm93SGFuZGxlcihLZXlib2FyZC5rZXlzLkxFRlQsIHRydWUpLFxuICAgICdlbWJlZCByaWdodCc6IG1ha2VFbWJlZEFycm93SGFuZGxlcihLZXlib2FyZC5rZXlzLlJJR0hULCBmYWxzZSksXG4gICAgJ2VtYmVkIHJpZ2h0IHNoaWZ0JzogbWFrZUVtYmVkQXJyb3dIYW5kbGVyKEtleWJvYXJkLmtleXMuUklHSFQsIHRydWUpXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1ha2VFbWJlZEFycm93SGFuZGxlcihrZXksIHNoaWZ0S2V5KSB7XG4gIGNvbnN0IHdoZXJlID0ga2V5ID09PSBLZXlib2FyZC5rZXlzLkxFRlQgPyAncHJlZml4JyA6ICdzdWZmaXgnO1xuICByZXR1cm4ge1xuICAgIGtleSxcbiAgICBzaGlmdEtleSxcbiAgICBhbHRLZXk6IG51bGwsXG4gICAgW3doZXJlXTogL14kLyxcbiAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgbGV0IGluZGV4ID0gcmFuZ2UuaW5kZXg7XG4gICAgICBpZiAoa2V5ID09PSBLZXlib2FyZC5rZXlzLlJJR0hUKSB7XG4gICAgICAgIGluZGV4ICs9IChyYW5nZS5sZW5ndGggKyAxKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtsZWFmLCBdID0gdGhpcy5xdWlsbC5nZXRMZWFmKGluZGV4KTtcbiAgICAgIGlmICghKGxlYWYgaW5zdGFuY2VvZiBQYXJjaG1lbnQuRW1iZWQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChrZXkgPT09IEtleWJvYXJkLmtleXMuTEVGVCkge1xuICAgICAgICBpZiAoc2hpZnRLZXkpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCAtIDEsIHJhbmdlLmxlbmd0aCArIDEsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggLSAxLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2hpZnRLZXkpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoICsgMSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCArIDEsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cblxuZnVuY3Rpb24gaGFuZGxlQmFja3NwYWNlKHJhbmdlLCBjb250ZXh0KSB7XG4gIGlmIChyYW5nZS5pbmRleCA9PT0gMCB8fCB0aGlzLnF1aWxsLmdldExlbmd0aCgpIDw9IDEpIHJldHVybjtcbiAgbGV0IFtsaW5lLCBdID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KTtcbiAgbGV0IGZvcm1hdHMgPSB7fTtcbiAgaWYgKGNvbnRleHQub2Zmc2V0ID09PSAwKSB7XG4gICAgbGV0IFtwcmV2LCBdID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4IC0gMSk7XG4gICAgaWYgKHByZXYgIT0gbnVsbCAmJiBwcmV2Lmxlbmd0aCgpID4gMSkge1xuICAgICAgbGV0IGN1ckZvcm1hdHMgPSBsaW5lLmZvcm1hdHMoKTtcbiAgICAgIGxldCBwcmV2Rm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlLmluZGV4LTEsIDEpO1xuICAgICAgZm9ybWF0cyA9IERlbHRhT3AuYXR0cmlidXRlcy5kaWZmKGN1ckZvcm1hdHMsIHByZXZGb3JtYXRzKSB8fCB7fTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGFzdHJhbCBzeW1ib2xzXG4gIGxldCBsZW5ndGggPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXSQvLnRlc3QoY29udGV4dC5wcmVmaXgpID8gMiA6IDE7XG4gIHRoaXMucXVpbGwuZGVsZXRlVGV4dChyYW5nZS5pbmRleC1sZW5ndGgsIGxlbmd0aCwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1aWxsLmZvcm1hdExpbmUocmFuZ2UuaW5kZXgtbGVuZ3RoLCBsZW5ndGgsIGZvcm1hdHMsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gIH1cbiAgdGhpcy5xdWlsbC5mb2N1cygpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEZWxldGUocmFuZ2UsIGNvbnRleHQpIHtcbiAgLy8gQ2hlY2sgZm9yIGFzdHJhbCBzeW1ib2xzXG4gIGxldCBsZW5ndGggPSAvXltcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vLnRlc3QoY29udGV4dC5zdWZmaXgpID8gMiA6IDE7XG4gIGlmIChyYW5nZS5pbmRleCA+PSB0aGlzLnF1aWxsLmdldExlbmd0aCgpIC0gbGVuZ3RoKSByZXR1cm47XG4gIGxldCBmb3JtYXRzID0ge30sIG5leHRMZW5ndGggPSAwO1xuICBsZXQgW2xpbmUsIF0gPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpO1xuICBpZiAoY29udGV4dC5vZmZzZXQgPj0gbGluZS5sZW5ndGgoKSAtIDEpIHtcbiAgICBsZXQgW25leHQsIF0gPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXggKyAxKTtcbiAgICBpZiAobmV4dCkge1xuICAgICAgbGV0IGN1ckZvcm1hdHMgPSBsaW5lLmZvcm1hdHMoKTtcbiAgICAgIGxldCBuZXh0Rm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlLmluZGV4LCAxKTtcbiAgICAgIGZvcm1hdHMgPSBEZWx0YU9wLmF0dHJpYnV0ZXMuZGlmZihjdXJGb3JtYXRzLCBuZXh0Rm9ybWF0cykgfHwge307XG4gICAgICBuZXh0TGVuZ3RoID0gbmV4dC5sZW5ndGgoKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5xdWlsbC5kZWxldGVUZXh0KHJhbmdlLmluZGV4LCBsZW5ndGgsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5xdWlsbC5mb3JtYXRMaW5lKHJhbmdlLmluZGV4ICsgbmV4dExlbmd0aCAtIDEsIGxlbmd0aCwgZm9ybWF0cywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVSYW5nZShyYW5nZSkge1xuICBsZXQgbGluZXMgPSB0aGlzLnF1aWxsLmdldExpbmVzKHJhbmdlKTtcbiAgbGV0IGZvcm1hdHMgPSB7fTtcbiAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICBsZXQgZmlyc3RGb3JtYXRzID0gbGluZXNbMF0uZm9ybWF0cygpO1xuICAgIGxldCBsYXN0Rm9ybWF0cyA9IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLmZvcm1hdHMoKTtcbiAgICBmb3JtYXRzID0gRGVsdGFPcC5hdHRyaWJ1dGVzLmRpZmYobGFzdEZvcm1hdHMsIGZpcnN0Rm9ybWF0cykgfHwge307XG4gIH1cbiAgdGhpcy5xdWlsbC5kZWxldGVUZXh0KHJhbmdlLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICBpZiAoT2JqZWN0LmtleXMoZm9ybWF0cykubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucXVpbGwuZm9ybWF0TGluZShyYW5nZS5pbmRleCwgMSwgZm9ybWF0cywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgfVxuICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCwgUXVpbGwuc291cmNlcy5TSUxFTlQpO1xuICB0aGlzLnF1aWxsLmZvY3VzKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVudGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gIGlmIChyYW5nZS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5xdWlsbC5zY3JvbGwuZGVsZXRlQXQocmFuZ2UuaW5kZXgsIHJhbmdlLmxlbmd0aCk7ICAvLyBTbyB3ZSBkbyBub3QgdHJpZ2dlciB0ZXh0LWNoYW5nZVxuICB9XG4gIGxldCBsaW5lRm9ybWF0cyA9IE9iamVjdC5rZXlzKGNvbnRleHQuZm9ybWF0KS5yZWR1Y2UoZnVuY3Rpb24obGluZUZvcm1hdHMsIGZvcm1hdCkge1xuICAgIGlmIChQYXJjaG1lbnQucXVlcnkoZm9ybWF0LCBQYXJjaG1lbnQuU2NvcGUuQkxPQ0spICYmICFBcnJheS5pc0FycmF5KGNvbnRleHQuZm9ybWF0W2Zvcm1hdF0pKSB7XG4gICAgICBsaW5lRm9ybWF0c1tmb3JtYXRdID0gY29udGV4dC5mb3JtYXRbZm9ybWF0XTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVGb3JtYXRzO1xuICB9LCB7fSk7XG4gIHRoaXMucXVpbGwuaW5zZXJ0VGV4dChyYW5nZS5pbmRleCwgJ1xcbicsIGxpbmVGb3JtYXRzLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAvLyBFYXJsaWVyIHNjcm9sbC5kZWxldGVBdCBtaWdodCBoYXZlIG1lc3NlZCB1cCBvdXIgc2VsZWN0aW9uLFxuICAvLyBzbyBpbnNlcnRUZXh0J3MgYnVpbHQgaW4gc2VsZWN0aW9uIHByZXNlcnZhdGlvbiBpcyBub3QgcmVsaWFibGVcbiAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gIHRoaXMucXVpbGwuZm9jdXMoKTtcbiAgT2JqZWN0LmtleXMoY29udGV4dC5mb3JtYXQpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBpZiAobGluZUZvcm1hdHNbbmFtZV0gIT0gbnVsbCkgcmV0dXJuO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRleHQuZm9ybWF0W25hbWVdKSkgcmV0dXJuO1xuICAgIGlmIChuYW1lID09PSAnbGluaycpIHJldHVybjtcbiAgICB0aGlzLnF1aWxsLmZvcm1hdChuYW1lLCBjb250ZXh0LmZvcm1hdFtuYW1lXSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VDb2RlQmxvY2tIYW5kbGVyKGluZGVudCkge1xuICByZXR1cm4ge1xuICAgIGtleTogS2V5Ym9hcmQua2V5cy5UQUIsXG4gICAgc2hpZnRLZXk6ICFpbmRlbnQsXG4gICAgZm9ybWF0OiB7J2NvZGUtYmxvY2snOiB0cnVlIH0sXG4gICAgaGFuZGxlcjogZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgIGxldCBDb2RlQmxvY2sgPSBQYXJjaG1lbnQucXVlcnkoJ2NvZGUtYmxvY2snKTtcbiAgICAgIGxldCBpbmRleCA9IHJhbmdlLmluZGV4LCBsZW5ndGggPSByYW5nZS5sZW5ndGg7XG4gICAgICBsZXQgW2Jsb2NrLCBvZmZzZXRdID0gdGhpcy5xdWlsbC5zY3JvbGwuZGVzY2VuZGFudChDb2RlQmxvY2ssIGluZGV4KTtcbiAgICAgIGlmIChibG9jayA9PSBudWxsKSByZXR1cm47XG4gICAgICBsZXQgc2Nyb2xsSW5kZXggPSB0aGlzLnF1aWxsLmdldEluZGV4KGJsb2NrKTtcbiAgICAgIGxldCBzdGFydCA9IGJsb2NrLm5ld2xpbmVJbmRleChvZmZzZXQsIHRydWUpICsgMTtcbiAgICAgIGxldCBlbmQgPSBibG9jay5uZXdsaW5lSW5kZXgoc2Nyb2xsSW5kZXggKyBvZmZzZXQgKyBsZW5ndGgpO1xuICAgICAgbGV0IGxpbmVzID0gYmxvY2suZG9tTm9kZS50ZXh0Q29udGVudC5zbGljZShzdGFydCwgZW5kKS5zcGxpdCgnXFxuJyk7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgICAgbGluZXMuZm9yRWFjaCgobGluZSwgaSkgPT4ge1xuICAgICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgICAgYmxvY2suaW5zZXJ0QXQoc3RhcnQgKyBvZmZzZXQsIENvZGVCbG9jay5UQUIpO1xuICAgICAgICAgIG9mZnNldCArPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgaW5kZXggKz0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbmd0aCArPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKENvZGVCbG9jay5UQUIpKSB7XG4gICAgICAgICAgYmxvY2suZGVsZXRlQXQoc3RhcnQgKyBvZmZzZXQsIENvZGVCbG9jay5UQUIubGVuZ3RoKTtcbiAgICAgICAgICBvZmZzZXQgLT0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIGluZGV4IC09IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZW5ndGggLT0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9mZnNldCArPSBsaW5lLmxlbmd0aCArIDE7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucXVpbGwudXBkYXRlKFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCwgbGVuZ3RoLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlRm9ybWF0SGFuZGxlcihmb3JtYXQpIHtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGZvcm1hdFswXS50b1VwcGVyQ2FzZSgpLFxuICAgIHNob3J0S2V5OiB0cnVlLFxuICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICB0aGlzLnF1aWxsLmZvcm1hdChmb3JtYXQsICFjb250ZXh0LmZvcm1hdFtmb3JtYXRdLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGJpbmRpbmcpIHtcbiAgaWYgKHR5cGVvZiBiaW5kaW5nID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYmluZGluZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplKHsga2V5OiBiaW5kaW5nIH0pO1xuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZyA9PT0gJ29iamVjdCcpIHtcbiAgICBiaW5kaW5nID0gY2xvbmUoYmluZGluZywgZmFsc2UpO1xuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZy5rZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKEtleWJvYXJkLmtleXNbYmluZGluZy5rZXkudG9VcHBlckNhc2UoKV0gIT0gbnVsbCkge1xuICAgICAgYmluZGluZy5rZXkgPSBLZXlib2FyZC5rZXlzW2JpbmRpbmcua2V5LnRvVXBwZXJDYXNlKCldO1xuICAgIH0gZWxzZSBpZiAoYmluZGluZy5rZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICBiaW5kaW5nLmtleSA9IGJpbmRpbmcua2V5LnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGlmIChiaW5kaW5nLnNob3J0S2V5KSB7XG4gICAgYmluZGluZ1tTSE9SVEtFWV0gPSBiaW5kaW5nLnNob3J0S2V5O1xuICAgIGRlbGV0ZSBiaW5kaW5nLnNob3J0S2V5O1xuICB9XG4gIHJldHVybiBiaW5kaW5nO1xufVxuXG5cbmV4cG9ydCB7IEtleWJvYXJkIGFzIGRlZmF1bHQsIFNIT1JUS0VZIH07XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgUXVpbGwgZnJvbSAnLi9jb3JlL3F1aWxsJztcblxuaW1wb3J0IEJsb2NrLCB7IEJsb2NrRW1iZWQgfSBmcm9tICcuL2Jsb3RzL2Jsb2NrJztcbmltcG9ydCBCcmVhayBmcm9tICcuL2Jsb3RzL2JyZWFrJztcbmltcG9ydCBDb250YWluZXIgZnJvbSAnLi9ibG90cy9jb250YWluZXInO1xuaW1wb3J0IEN1cnNvciBmcm9tICcuL2Jsb3RzL2N1cnNvcic7XG5pbXBvcnQgRW1iZWQgZnJvbSAnLi9ibG90cy9lbWJlZCc7XG5pbXBvcnQgSW5saW5lIGZyb20gJy4vYmxvdHMvaW5saW5lJztcbmltcG9ydCBTY3JvbGwgZnJvbSAnLi9ibG90cy9zY3JvbGwnO1xuaW1wb3J0IFRleHRCbG90IGZyb20gJy4vYmxvdHMvdGV4dCc7XG5cbmltcG9ydCBDbGlwYm9hcmQgZnJvbSAnLi9tb2R1bGVzL2NsaXBib2FyZCc7XG5pbXBvcnQgSGlzdG9yeSBmcm9tICcuL21vZHVsZXMvaGlzdG9yeSc7XG5pbXBvcnQgS2V5Ym9hcmQgZnJvbSAnLi9tb2R1bGVzL2tleWJvYXJkJztcblxuUXVpbGwucmVnaXN0ZXIoe1xuICAnYmxvdHMvYmxvY2snICAgICAgICA6IEJsb2NrLFxuICAnYmxvdHMvYmxvY2svZW1iZWQnICA6IEJsb2NrRW1iZWQsXG4gICdibG90cy9icmVhaycgICAgICAgIDogQnJlYWssXG4gICdibG90cy9jb250YWluZXInICAgIDogQ29udGFpbmVyLFxuICAnYmxvdHMvY3Vyc29yJyAgICAgICA6IEN1cnNvcixcbiAgJ2Jsb3RzL2VtYmVkJyAgICAgICAgOiBFbWJlZCxcbiAgJ2Jsb3RzL2lubGluZScgICAgICAgOiBJbmxpbmUsXG4gICdibG90cy9zY3JvbGwnICAgICAgIDogU2Nyb2xsLFxuICAnYmxvdHMvdGV4dCcgICAgICAgICA6IFRleHRCbG90LFxuXG4gICdtb2R1bGVzL2NsaXBib2FyZCcgIDogQ2xpcGJvYXJkLFxuICAnbW9kdWxlcy9oaXN0b3J5JyAgICA6IEhpc3RvcnksXG4gICdtb2R1bGVzL2tleWJvYXJkJyAgIDogS2V5Ym9hcmRcbn0pO1xuXG5QYXJjaG1lbnQucmVnaXN0ZXIoQmxvY2ssIEJyZWFrLCBDdXJzb3IsIElubGluZSwgU2Nyb2xsLCBUZXh0QmxvdCk7XG5cblxuZXhwb3J0IGRlZmF1bHQgUXVpbGw7XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5cbmNsYXNzIElkZW50QXR0cmlidXRvciBleHRlbmRzIFBhcmNobWVudC5BdHRyaWJ1dG9yLkNsYXNzIHtcbiAgYWRkKG5vZGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSAnKzEnIHx8IHZhbHVlID09PSAnLTEnKSB7XG4gICAgICBsZXQgaW5kZW50ID0gdGhpcy52YWx1ZShub2RlKSB8fCAwO1xuICAgICAgdmFsdWUgPSAodmFsdWUgPT09ICcrMScgPyAoaW5kZW50ICsgMSkgOiAoaW5kZW50IC0gMSkpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucmVtb3ZlKG5vZGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdXBlci5hZGQobm9kZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGNhbkFkZChub2RlLCB2YWx1ZSkge1xuICAgIHJldHVybiBzdXBlci5jYW5BZGQobm9kZSwgdmFsdWUpIHx8IHN1cGVyLmNhbkFkZChub2RlLCBwYXJzZUludCh2YWx1ZSkpO1xuICB9XG5cbiAgdmFsdWUobm9kZSkge1xuICAgIHJldHVybiBwYXJzZUludChzdXBlci52YWx1ZShub2RlKSkgfHwgdW5kZWZpbmVkOyAgLy8gRG9uJ3QgcmV0dXJuIE5hTlxuICB9XG59XG5cbmxldCBJbmRlbnRDbGFzcyA9IG5ldyBJZGVudEF0dHJpYnV0b3IoJ2luZGVudCcsICdxbC1pbmRlbnQnLCB7XG4gIHNjb3BlOiBQYXJjaG1lbnQuU2NvcGUuQkxPQ0ssXG4gIHdoaXRlbGlzdDogWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDhdXG59KTtcblxuZXhwb3J0IHsgSW5kZW50Q2xhc3MgfTtcbiIsImltcG9ydCBCbG9jayBmcm9tICcuLi9ibG90cy9ibG9jayc7XG5cblxuY2xhc3MgQmxvY2txdW90ZSBleHRlbmRzIEJsb2NrIHt9XG5CbG9ja3F1b3RlLmJsb3ROYW1lID0gJ2Jsb2NrcXVvdGUnO1xuQmxvY2txdW90ZS50YWdOYW1lID0gJ2Jsb2NrcXVvdGUnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJsb2NrcXVvdGU7XG4iLCJpbXBvcnQgQmxvY2sgZnJvbSAnLi4vYmxvdHMvYmxvY2snO1xuXG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIEJsb2NrIHtcbiAgc3RhdGljIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgIHJldHVybiB0aGlzLnRhZ05hbWUuaW5kZXhPZihkb21Ob2RlLnRhZ05hbWUpICsgMTtcbiAgfVxufVxuSGVhZGVyLmJsb3ROYW1lID0gJ2hlYWRlcic7XG5IZWFkZXIudGFnTmFtZSA9IFsnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnXTtcblxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgQmxvY2sgZnJvbSAnLi4vYmxvdHMvYmxvY2snO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICcuLi9ibG90cy9jb250YWluZXInO1xuXG5cbmNsYXNzIExpc3RJdGVtIGV4dGVuZHMgQmxvY2sge1xuICBzdGF0aWMgZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgcmV0dXJuIGRvbU5vZGUudGFnTmFtZSA9PT0gdGhpcy50YWdOYW1lID8gdW5kZWZpbmVkIDogc3VwZXIuZm9ybWF0cyhkb21Ob2RlKTtcbiAgfVxuXG4gIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChuYW1lID09PSBMaXN0LmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgdGhpcy5yZXBsYWNlV2l0aChQYXJjaG1lbnQuY3JlYXRlKHRoaXMuc3RhdGljcy5zY29wZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICBpZiAodGhpcy5wcmV2ID09IG51bGwgJiYgdGhpcy5uZXh0ID09IG51bGwpIHtcbiAgICAgIHRoaXMucGFyZW50LnJlbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICByZXBsYWNlV2l0aChuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMucGFyZW50Lmlzb2xhdGUodGhpcy5vZmZzZXQodGhpcy5wYXJlbnQpLCB0aGlzLmxlbmd0aCgpKTtcbiAgICBpZiAobmFtZSA9PT0gdGhpcy5wYXJlbnQuc3RhdGljcy5ibG90TmFtZSkge1xuICAgICAgdGhpcy5wYXJlbnQucmVwbGFjZVdpdGgobmFtZSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFyZW50LnVud3JhcCgpO1xuICAgICAgcmV0dXJuIHN1cGVyLnJlcGxhY2VXaXRoKG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbkxpc3RJdGVtLmJsb3ROYW1lID0gJ2xpc3QtaXRlbSc7XG5MaXN0SXRlbS50YWdOYW1lID0gJ0xJJztcblxuXG5jbGFzcyBMaXN0IGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgc3RhdGljIGNyZWF0ZSh2YWx1ZSkge1xuICAgIGxldCB0YWdOYW1lID0gdmFsdWUgPT09ICdvcmRlcmVkJyA/ICdPTCcgOiAnVUwnO1xuICAgIGxldCBub2RlID0gc3VwZXIuY3JlYXRlKHRhZ05hbWUpO1xuICAgIGlmICh2YWx1ZSA9PT0gJ2NoZWNrZWQnIHx8IHZhbHVlID09PSAndW5jaGVja2VkJykge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcsIHZhbHVlID09PSAnY2hlY2tlZCcpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSAnT0wnKSByZXR1cm4gJ29yZGVyZWQnO1xuICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09ICdVTCcpIHtcbiAgICAgIGlmIChkb21Ob2RlLmhhc0F0dHJpYnV0ZSgnZGF0YS1jaGVja2VkJykpIHtcbiAgICAgICAgcmV0dXJuIGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWNoZWNrZWQnKSA9PT0gJ3RydWUnID8gJ2NoZWNrZWQnIDogJ3VuY2hlY2tlZCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ2J1bGxldCc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihkb21Ob2RlKSB7XG4gICAgc3VwZXIoZG9tTm9kZSk7XG4gICAgY29uc3QgbGlzdEV2ZW50SGFuZGxlciA9IChlKSA9PiB7XG4gICAgICBpZiAoZS50YXJnZXQucGFyZW50Tm9kZSAhPT0gZG9tTm9kZSkgcmV0dXJuO1xuICAgICAgbGV0IGZvcm1hdCA9IHRoaXMuc3RhdGljcy5mb3JtYXRzKGRvbU5vZGUpO1xuICAgICAgbGV0IGJsb3QgPSBQYXJjaG1lbnQuZmluZChlLnRhcmdldCk7XG4gICAgICBpZiAoZm9ybWF0ID09PSAnY2hlY2tlZCcpIHtcbiAgICAgICAgYmxvdC5mb3JtYXQoJ2xpc3QnLCAndW5jaGVja2VkJyk7XG4gICAgICB9IGVsc2UgaWYoZm9ybWF0ID09PSAndW5jaGVja2VkJykge1xuICAgICAgICBibG90LmZvcm1hdCgnbGlzdCcsICdjaGVja2VkJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgbGlzdEV2ZW50SGFuZGxlcik7XG4gICAgZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBsaXN0RXZlbnRIYW5kbGVyKTtcbiAgfVxuXG4gIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4udGFpbC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGZvcm1hdHMoKSB7XG4gICAgLy8gV2UgZG9uJ3QgaW5oZXJpdCBmcm9tIEZvcm1hdEJsb3RcbiAgICByZXR1cm4geyBbdGhpcy5zdGF0aWNzLmJsb3ROYW1lXTogdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSB9O1xuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZikge1xuICAgIGlmIChibG90IGluc3RhbmNlb2YgTGlzdEl0ZW0pIHtcbiAgICAgIHN1cGVyLmluc2VydEJlZm9yZShibG90LCByZWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgaW5kZXggPSByZWYgPT0gbnVsbCA/IHRoaXMubGVuZ3RoKCkgOiByZWYub2Zmc2V0KHRoaXMpO1xuICAgICAgbGV0IGFmdGVyID0gdGhpcy5zcGxpdChpbmRleCk7XG4gICAgICBhZnRlci5wYXJlbnQuaW5zZXJ0QmVmb3JlKGJsb3QsIGFmdGVyKTtcbiAgICB9XG4gIH1cblxuICBvcHRpbWl6ZShjb250ZXh0KSB7XG4gICAgc3VwZXIub3B0aW1pemUoY29udGV4dCk7XG4gICAgbGV0IG5leHQgPSB0aGlzLm5leHQ7XG4gICAgaWYgKG5leHQgIT0gbnVsbCAmJiBuZXh0LnByZXYgPT09IHRoaXMgJiZcbiAgICAgICAgbmV4dC5zdGF0aWNzLmJsb3ROYW1lID09PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgJiZcbiAgICAgICAgbmV4dC5kb21Ob2RlLnRhZ05hbWUgPT09IHRoaXMuZG9tTm9kZS50YWdOYW1lICYmXG4gICAgICAgIG5leHQuZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcpID09PSB0aGlzLmRvbU5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWNoZWNrZWQnKSkge1xuICAgICAgbmV4dC5tb3ZlQ2hpbGRyZW4odGhpcyk7XG4gICAgICBuZXh0LnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlcGxhY2UodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5zdGF0aWNzLmJsb3ROYW1lICE9PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUpIHtcbiAgICAgIGxldCBpdGVtID0gUGFyY2htZW50LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtcbiAgICAgIHRhcmdldC5tb3ZlQ2hpbGRyZW4oaXRlbSk7XG4gICAgICB0aGlzLmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgIH1cbiAgICBzdXBlci5yZXBsYWNlKHRhcmdldCk7XG4gIH1cbn1cbkxpc3QuYmxvdE5hbWUgPSAnbGlzdCc7XG5MaXN0LnNjb3BlID0gUGFyY2htZW50LlNjb3BlLkJMT0NLX0JMT1Q7XG5MaXN0LnRhZ05hbWUgPSBbJ09MJywgJ1VMJ107XG5MaXN0LmRlZmF1bHRDaGlsZCA9ICdsaXN0LWl0ZW0nO1xuTGlzdC5hbGxvd2VkQ2hpbGRyZW4gPSBbTGlzdEl0ZW1dO1xuXG5cbmV4cG9ydCB7IExpc3RJdGVtLCBMaXN0IGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBJbmxpbmUgZnJvbSAnLi4vYmxvdHMvaW5saW5lJztcblxuY2xhc3MgQm9sZCBleHRlbmRzIElubGluZSB7XG4gIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZSgpO1xuICB9XG5cbiAgc3RhdGljIGZvcm1hdHMoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBvcHRpbWl6ZShjb250ZXh0KSB7XG4gICAgc3VwZXIub3B0aW1pemUoY29udGV4dCk7XG4gICAgaWYgKHRoaXMuZG9tTm9kZS50YWdOYW1lICE9PSB0aGlzLnN0YXRpY3MudGFnTmFtZVswXSkge1xuICAgICAgdGhpcy5yZXBsYWNlV2l0aCh0aGlzLnN0YXRpY3MuYmxvdE5hbWUpO1xuICAgIH1cbiAgfVxufVxuQm9sZC5ibG90TmFtZSA9ICdib2xkJztcbkJvbGQudGFnTmFtZSA9IFsnU1RST05HJywgJ0InXTtcblxuZXhwb3J0IGRlZmF1bHQgQm9sZDtcbiIsImltcG9ydCBCb2xkIGZyb20gJy4vYm9sZCc7XG5cbmNsYXNzIEl0YWxpYyBleHRlbmRzIEJvbGQgeyB9XG5JdGFsaWMuYmxvdE5hbWUgPSAnaXRhbGljJztcbkl0YWxpYy50YWdOYW1lID0gWydFTScsICdJJ107XG5cbmV4cG9ydCBkZWZhdWx0IEl0YWxpYztcbiIsImltcG9ydCBJbmxpbmUgZnJvbSAnLi4vYmxvdHMvaW5saW5lJztcblxuXG5jbGFzcyBMaW5rIGV4dGVuZHMgSW5saW5lIHtcbiAgc3RhdGljIGNyZWF0ZSh2YWx1ZSkge1xuICAgIGxldCBub2RlID0gc3VwZXIuY3JlYXRlKHZhbHVlKTtcbiAgICB2YWx1ZSA9IHRoaXMuc2FuaXRpemUodmFsdWUpO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgdmFsdWUpO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdyZWwnLCAnbm9vcGVuZXIgbm9yZWZlcnJlcicpO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBzdGF0aWMgZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgcmV0dXJuIGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gIH1cblxuICBzdGF0aWMgc2FuaXRpemUodXJsKSB7XG4gICAgcmV0dXJuIHNhbml0aXplKHVybCwgdGhpcy5QUk9UT0NPTF9XSElURUxJU1QpID8gdXJsIDogdGhpcy5TQU5JVElaRURfVVJMO1xuICB9XG5cbiAgZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKG5hbWUgIT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSB8fCAhdmFsdWUpIHJldHVybiBzdXBlci5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgIHZhbHVlID0gdGhpcy5jb25zdHJ1Y3Rvci5zYW5pdGl6ZSh2YWx1ZSk7XG4gICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIHZhbHVlKTtcbiAgfVxufVxuTGluay5ibG90TmFtZSA9ICdsaW5rJztcbkxpbmsudGFnTmFtZSA9ICdBJztcbkxpbmsuU0FOSVRJWkVEX1VSTCA9ICdhYm91dDpibGFuayc7XG5MaW5rLlBST1RPQ09MX1dISVRFTElTVCA9IFsnaHR0cCcsICdodHRwcycsICdtYWlsdG8nLCAndGVsJ107XG5cblxuZnVuY3Rpb24gc2FuaXRpemUodXJsLCBwcm90b2NvbHMpIHtcbiAgbGV0IGFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgYW5jaG9yLmhyZWYgPSB1cmw7XG4gIGxldCBwcm90b2NvbCA9IGFuY2hvci5ocmVmLnNsaWNlKDAsIGFuY2hvci5ocmVmLmluZGV4T2YoJzonKSk7XG4gIHJldHVybiBwcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPiAtMTtcbn1cblxuXG5leHBvcnQgeyBMaW5rIGFzIGRlZmF1bHQsIHNhbml0aXplIH07XG4iLCJpbXBvcnQgSW5saW5lIGZyb20gJy4uL2Jsb3RzL2lubGluZSc7XG5cbmNsYXNzIFNjcmlwdCBleHRlbmRzIElubGluZSB7XG4gIHN0YXRpYyBjcmVhdGUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09ICdzdXBlcicpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdXAnKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnc3ViJykge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N1YicpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3VwZXIuY3JlYXRlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgaWYgKGRvbU5vZGUudGFnTmFtZSA9PT0gJ1NVQicpIHJldHVybiAnc3ViJztcbiAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSAnU1VQJykgcmV0dXJuICdzdXBlcic7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuU2NyaXB0LmJsb3ROYW1lID0gJ3NjcmlwdCc7XG5TY3JpcHQudGFnTmFtZSA9IFsnU1VCJywgJ1NVUCddO1xuXG5leHBvcnQgZGVmYXVsdCBTY3JpcHQ7XG4iLCJpbXBvcnQgSW5saW5lIGZyb20gJy4uL2Jsb3RzL2lubGluZSc7XG5cbmNsYXNzIFN0cmlrZSBleHRlbmRzIElubGluZSB7IH1cblN0cmlrZS5ibG90TmFtZSA9ICdzdHJpa2UnO1xuU3RyaWtlLnRhZ05hbWUgPSAnUyc7XG5cbmV4cG9ydCBkZWZhdWx0IFN0cmlrZTtcbiIsImltcG9ydCBJbmxpbmUgZnJvbSAnLi4vYmxvdHMvaW5saW5lJztcblxuY2xhc3MgVW5kZXJsaW5lIGV4dGVuZHMgSW5saW5lIHsgfVxuVW5kZXJsaW5lLmJsb3ROYW1lID0gJ3VuZGVybGluZSc7XG5VbmRlcmxpbmUudGFnTmFtZSA9ICdVJztcblxuZXhwb3J0IGRlZmF1bHQgVW5kZXJsaW5lO1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuaW1wb3J0IHsgc2FuaXRpemUgfSBmcm9tICcuLi9mb3JtYXRzL2xpbmsnO1xuXG5jb25zdCBBVFRSSUJVVEVTID0gW1xuICAnYWx0JyxcbiAgJ2hlaWdodCcsXG4gICd3aWR0aCdcbl07XG5cblxuY2xhc3MgSW1hZ2UgZXh0ZW5kcyBQYXJjaG1lbnQuRW1iZWQge1xuICBzdGF0aWMgY3JlYXRlKHZhbHVlKSB7XG4gICAgbGV0IG5vZGUgPSBzdXBlci5jcmVhdGUodmFsdWUpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnc3JjJywgdGhpcy5zYW5pdGl6ZSh2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICByZXR1cm4gQVRUUklCVVRFUy5yZWR1Y2UoZnVuY3Rpb24oZm9ybWF0cywgYXR0cmlidXRlKSB7XG4gICAgICBpZiAoZG9tTm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICBmb3JtYXRzW2F0dHJpYnV0ZV0gPSBkb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdHM7XG4gICAgfSwge30pO1xuICB9XG5cbiAgc3RhdGljIG1hdGNoKHVybCkge1xuICAgIHJldHVybiAvXFwuKGpwZT9nfGdpZnxwbmcpJC8udGVzdCh1cmwpIHx8IC9eZGF0YTppbWFnZVxcLy4rO2Jhc2U2NC8udGVzdCh1cmwpO1xuICB9XG5cbiAgc3RhdGljIHNhbml0aXplKHVybCkge1xuICAgIHJldHVybiBzYW5pdGl6ZSh1cmwsIFsnaHR0cCcsICdodHRwcycsICdkYXRhJ10pID8gdXJsIDogJy8vOjAnO1xuICB9XG5cbiAgc3RhdGljIHZhbHVlKGRvbU5vZGUpIHtcbiAgICByZXR1cm4gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICB9XG5cbiAgZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKEFUVFJJQlVURVMuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRvbU5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuSW1hZ2UuYmxvdE5hbWUgPSAnaW1hZ2UnO1xuSW1hZ2UudGFnTmFtZSA9ICdJTUcnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlO1xuIiwiaW1wb3J0IHsgQmxvY2tFbWJlZCB9IGZyb20gJy4uL2Jsb3RzL2Jsb2NrJztcbmltcG9ydCBMaW5rIGZyb20gJy4uL2Zvcm1hdHMvbGluayc7XG5cbmNvbnN0IEFUVFJJQlVURVMgPSBbXG4gICdoZWlnaHQnLFxuICAnd2lkdGgnXG5dO1xuXG5cbmNsYXNzIFZpZGVvIGV4dGVuZHMgQmxvY2tFbWJlZCB7XG4gIHN0YXRpYyBjcmVhdGUodmFsdWUpIHtcbiAgICBsZXQgbm9kZSA9IHN1cGVyLmNyZWF0ZSh2YWx1ZSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2ZyYW1lYm9yZGVyJywgJzAnKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnYWxsb3dmdWxsc2NyZWVuJywgdHJ1ZSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHRoaXMuc2FuaXRpemUodmFsdWUpKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICByZXR1cm4gQVRUUklCVVRFUy5yZWR1Y2UoZnVuY3Rpb24oZm9ybWF0cywgYXR0cmlidXRlKSB7XG4gICAgICBpZiAoZG9tTm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICBmb3JtYXRzW2F0dHJpYnV0ZV0gPSBkb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdHM7XG4gICAgfSwge30pO1xuICB9XG5cbiAgc3RhdGljIHNhbml0aXplKHVybCkge1xuICAgIHJldHVybiBMaW5rLnNhbml0aXplKHVybCk7XG4gIH1cblxuICBzdGF0aWMgdmFsdWUoZG9tTm9kZSkge1xuICAgIHJldHVybiBkb21Ob2RlLmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gIH1cblxuICBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoQVRUUklCVVRFUy5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZG9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5WaWRlby5ibG90TmFtZSA9ICd2aWRlbyc7XG5WaWRlby5jbGFzc05hbWUgPSAncWwtdmlkZW8nO1xuVmlkZW8udGFnTmFtZSA9ICdJRlJBTUUnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvO1xuIiwiaW1wb3J0IEVtYmVkIGZyb20gJy4uL2Jsb3RzL2VtYmVkJztcbmltcG9ydCBRdWlsbCBmcm9tICcuLi9jb3JlL3F1aWxsJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vY29yZS9tb2R1bGUnO1xuXG5cbmNsYXNzIEZvcm11bGFCbG90IGV4dGVuZHMgRW1iZWQge1xuICBzdGF0aWMgY3JlYXRlKHZhbHVlKSB7XG4gICAgbGV0IG5vZGUgPSBzdXBlci5jcmVhdGUodmFsdWUpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB3aW5kb3cua2F0ZXgucmVuZGVyKHZhbHVlLCBub2RlLCB7XG4gICAgICAgIHRocm93T25FcnJvcjogZmFsc2UsXG4gICAgICAgIGVycm9yQ29sb3I6ICcjZjAwJ1xuICAgICAgfSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBzdGF0aWMgdmFsdWUoZG9tTm9kZSkge1xuICAgIHJldHVybiBkb21Ob2RlLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICB9XG59XG5Gb3JtdWxhQmxvdC5ibG90TmFtZSA9ICdmb3JtdWxhJztcbkZvcm11bGFCbG90LmNsYXNzTmFtZSA9ICdxbC1mb3JtdWxhJztcbkZvcm11bGFCbG90LnRhZ05hbWUgPSAnU1BBTic7XG5cblxuY2xhc3MgRm9ybXVsYSBleHRlbmRzIE1vZHVsZSB7XG4gIHN0YXRpYyByZWdpc3RlcigpIHtcbiAgICBRdWlsbC5yZWdpc3RlcihGb3JtdWxhQmxvdCwgdHJ1ZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh3aW5kb3cua2F0ZXggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3JtdWxhIG1vZHVsZSByZXF1aXJlcyBLYVRlWC4nKTtcbiAgICB9XG4gIH1cbn1cblxuXG5leHBvcnQgeyBGb3JtdWxhQmxvdCwgRm9ybXVsYSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgUXVpbGwgZnJvbSAnLi4vY29yZS9xdWlsbCc7XG5pbXBvcnQgTW9kdWxlIGZyb20gJy4uL2NvcmUvbW9kdWxlJztcbmltcG9ydCBDb2RlQmxvY2sgZnJvbSAnLi4vZm9ybWF0cy9jb2RlJztcblxuXG5jbGFzcyBTeW50YXhDb2RlQmxvY2sgZXh0ZW5kcyBDb2RlQmxvY2sge1xuICByZXBsYWNlV2l0aChibG9jaykge1xuICAgIHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudDtcbiAgICB0aGlzLmF0dGFjaCgpO1xuICAgIHN1cGVyLnJlcGxhY2VXaXRoKGJsb2NrKTtcbiAgfVxuXG4gIGhpZ2hsaWdodChoaWdobGlnaHQpIHtcbiAgICBsZXQgdGV4dCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudDtcbiAgICBpZiAodGhpcy5jYWNoZWRUZXh0ICE9PSB0ZXh0KSB7XG4gICAgICBpZiAodGV4dC50cmltKCkubGVuZ3RoID4gMCB8fCB0aGlzLmNhY2hlZFRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmRvbU5vZGUuaW5uZXJIVE1MID0gaGlnaGxpZ2h0KHRleHQpO1xuICAgICAgICB0aGlzLmRvbU5vZGUubm9ybWFsaXplKCk7XG4gICAgICAgIHRoaXMuYXR0YWNoKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhY2hlZFRleHQgPSB0ZXh0O1xuICAgIH1cbiAgfVxufVxuU3ludGF4Q29kZUJsb2NrLmNsYXNzTmFtZSA9ICdxbC1zeW50YXgnO1xuXG5cbmxldCBDb2RlVG9rZW4gPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuQ2xhc3MoJ3Rva2VuJywgJ2hsanMnLCB7XG4gIHNjb3BlOiBQYXJjaG1lbnQuU2NvcGUuSU5MSU5FXG59KTtcblxuXG5jbGFzcyBTeW50YXggZXh0ZW5kcyBNb2R1bGUge1xuICBzdGF0aWMgcmVnaXN0ZXIoKSB7XG4gICAgUXVpbGwucmVnaXN0ZXIoQ29kZVRva2VuLCB0cnVlKTtcbiAgICBRdWlsbC5yZWdpc3RlcihTeW50YXhDb2RlQmxvY2ssIHRydWUpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihxdWlsbCwgb3B0aW9ucyk7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N5bnRheCBtb2R1bGUgcmVxdWlyZXMgaGlnaGxpZ2h0LmpzLiBQbGVhc2UgaW5jbHVkZSB0aGUgbGlicmFyeSBvbiB0aGUgcGFnZSBiZWZvcmUgUXVpbGwuJyk7XG4gICAgfVxuICAgIGxldCB0aW1lciA9IG51bGw7XG4gICAgdGhpcy5xdWlsbC5vbihRdWlsbC5ldmVudHMuU0NST0xMX09QVElNSVpFLCAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHQoKTtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgfSwgdGhpcy5vcHRpb25zLmludGVydmFsKTtcbiAgICB9KTtcbiAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICB9XG5cbiAgaGlnaGxpZ2h0KCkge1xuICAgIGlmICh0aGlzLnF1aWxsLnNlbGVjdGlvbi5jb21wb3NpbmcpIHJldHVybjtcbiAgICB0aGlzLnF1aWxsLnVwZGF0ZShRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgIGxldCByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdGhpcy5xdWlsbC5zY3JvbGwuZGVzY2VuZGFudHMoU3ludGF4Q29kZUJsb2NrKS5mb3JFYWNoKChjb2RlKSA9PiB7XG4gICAgICBjb2RlLmhpZ2hsaWdodCh0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KTtcbiAgICB9KTtcbiAgICB0aGlzLnF1aWxsLnVwZGF0ZShRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgaWYgKHJhbmdlICE9IG51bGwpIHtcbiAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgfVxuICB9XG59XG5TeW50YXguREVGQVVMVFMgPSB7XG4gIGhpZ2hsaWdodDogKGZ1bmN0aW9uKCkge1xuICAgIGlmICh3aW5kb3cuaGxqcyA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICAgICAgbGV0IHJlc3VsdCA9IHdpbmRvdy5obGpzLmhpZ2hsaWdodEF1dG8odGV4dCk7XG4gICAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICAgIH07XG4gIH0pKCksXG4gIGludGVydmFsOiAxMDAwXG59O1xuXG5cbmV4cG9ydCB7IFN5bnRheENvZGVCbG9jayBhcyBDb2RlQmxvY2ssIENvZGVUb2tlbiwgU3ludGF4IGFzIGRlZmF1bHR9O1xuIiwiaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJztcbmltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBRdWlsbCBmcm9tICcuLi9jb3JlL3F1aWxsJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vY29yZS9sb2dnZXInO1xuaW1wb3J0IE1vZHVsZSBmcm9tICcuLi9jb3JlL21vZHVsZSc7XG5cbmxldCBkZWJ1ZyA9IGxvZ2dlcigncXVpbGw6dG9vbGJhcicpO1xuXG5cbmNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucykge1xuICAgIHN1cGVyKHF1aWxsLCBvcHRpb25zKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMuY29udGFpbmVyKSkge1xuICAgICAgbGV0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgYWRkQ29udHJvbHMoY29udGFpbmVyLCB0aGlzLm9wdGlvbnMuY29udGFpbmVyKTtcbiAgICAgIHF1aWxsLmNvbnRhaW5lci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb250YWluZXIsIHF1aWxsLmNvbnRhaW5lcik7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuY29udGFpbmVyID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5jb250YWluZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5jb250YWluZXI7XG4gICAgfVxuICAgIGlmICghKHRoaXMuY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZGVidWcuZXJyb3IoJ0NvbnRhaW5lciByZXF1aXJlZCBmb3IgdG9vbGJhcicsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLXRvb2xiYXInKTtcbiAgICB0aGlzLmNvbnRyb2xzID0gW107XG4gICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5oYW5kbGVycykuZm9yRWFjaCgoZm9ybWF0KSA9PiB7XG4gICAgICB0aGlzLmFkZEhhbmRsZXIoZm9ybWF0LCB0aGlzLm9wdGlvbnMuaGFuZGxlcnNbZm9ybWF0XSk7XG4gICAgfSk7XG4gICAgW10uZm9yRWFjaC5jYWxsKHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbiwgc2VsZWN0JyksIChpbnB1dCkgPT4ge1xuICAgICAgdGhpcy5hdHRhY2goaW5wdXQpO1xuICAgIH0pO1xuICAgIHRoaXMucXVpbGwub24oUXVpbGwuZXZlbnRzLkVESVRPUl9DSEFOR0UsICh0eXBlLCByYW5nZSkgPT4ge1xuICAgICAgaWYgKHR5cGUgPT09IFF1aWxsLmV2ZW50cy5TRUxFQ1RJT05fQ0hBTkdFKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKHJhbmdlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnF1aWxsLm9uKFF1aWxsLmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsICgpID0+IHtcbiAgICAgIGxldCBbcmFuZ2UsIF0gPSB0aGlzLnF1aWxsLnNlbGVjdGlvbi5nZXRSYW5nZSgpOyAgLy8gcXVpbGwuZ2V0U2VsZWN0aW9uIHRyaWdnZXJzIHVwZGF0ZVxuICAgICAgdGhpcy51cGRhdGUocmFuZ2UpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkSGFuZGxlcihmb3JtYXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLmhhbmRsZXJzW2Zvcm1hdF0gPSBoYW5kbGVyO1xuICB9XG5cbiAgYXR0YWNoKGlucHV0KSB7XG4gICAgbGV0IGZvcm1hdCA9IFtdLmZpbmQuY2FsbChpbnB1dC5jbGFzc0xpc3QsIChjbGFzc05hbWUpID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZigncWwtJykgPT09IDA7XG4gICAgfSk7XG4gICAgaWYgKCFmb3JtYXQpIHJldHVybjtcbiAgICBmb3JtYXQgPSBmb3JtYXQuc2xpY2UoJ3FsLScubGVuZ3RoKTtcbiAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbZm9ybWF0XSA9PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5xdWlsbC5zY3JvbGwud2hpdGVsaXN0ICE9IG51bGwgJiYgdGhpcy5xdWlsbC5zY3JvbGwud2hpdGVsaXN0W2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgICBkZWJ1Zy53YXJuKCdpZ25vcmluZyBhdHRhY2hpbmcgdG8gZGlzYWJsZWQgZm9ybWF0JywgZm9ybWF0LCBpbnB1dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChQYXJjaG1lbnQucXVlcnkoZm9ybWF0KSA9PSBudWxsKSB7XG4gICAgICAgIGRlYnVnLndhcm4oJ2lnbm9yaW5nIGF0dGFjaGluZyB0byBub25leGlzdGVudCBmb3JtYXQnLCBmb3JtYXQsIGlucHV0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgZXZlbnROYW1lID0gaW5wdXQudGFnTmFtZSA9PT0gJ1NFTEVDVCcgPyAnY2hhbmdlJyA6ICdjbGljayc7XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIChlKSA9PiB7XG4gICAgICBsZXQgdmFsdWU7XG4gICAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgICAgaWYgKGlucHV0LnNlbGVjdGVkSW5kZXggPCAwKSByZXR1cm47XG4gICAgICAgIGxldCBzZWxlY3RlZCA9IGlucHV0Lm9wdGlvbnNbaW5wdXQuc2VsZWN0ZWRJbmRleF07XG4gICAgICAgIGlmIChzZWxlY3RlZC5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gc2VsZWN0ZWQudmFsdWUgfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWFjdGl2ZScpKSB7XG4gICAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGlucHV0LnZhbHVlIHx8ICFpbnB1dC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5xdWlsbC5mb2N1cygpO1xuICAgICAgbGV0IFtyYW5nZSwgXSA9IHRoaXMucXVpbGwuc2VsZWN0aW9uLmdldFJhbmdlKCk7XG4gICAgICBpZiAodGhpcy5oYW5kbGVyc1tmb3JtYXRdICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVyc1tmb3JtYXRdLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChQYXJjaG1lbnQucXVlcnkoZm9ybWF0KS5wcm90b3R5cGUgaW5zdGFuY2VvZiBQYXJjaG1lbnQuRW1iZWQpIHtcbiAgICAgICAgdmFsdWUgPSBwcm9tcHQoYEVudGVyICR7Zm9ybWF0fWApO1xuICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMobmV3IERlbHRhKClcbiAgICAgICAgICAucmV0YWluKHJhbmdlLmluZGV4KVxuICAgICAgICAgIC5kZWxldGUocmFuZ2UubGVuZ3RoKVxuICAgICAgICAgIC5pbnNlcnQoeyBbZm9ybWF0XTogdmFsdWUgfSlcbiAgICAgICAgLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoZm9ybWF0LCB2YWx1ZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlKHJhbmdlKTtcbiAgICB9KTtcbiAgICAvLyBUT0RPIHVzZSB3ZWFrbWFwXG4gICAgdGhpcy5jb250cm9scy5wdXNoKFtmb3JtYXQsIGlucHV0XSk7XG4gIH1cblxuICB1cGRhdGUocmFuZ2UpIHtcbiAgICBsZXQgZm9ybWF0cyA9IHJhbmdlID09IG51bGwgPyB7fSA6IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlKTtcbiAgICB0aGlzLmNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24ocGFpcikge1xuICAgICAgbGV0IFtmb3JtYXQsIGlucHV0XSA9IHBhaXI7XG4gICAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgICAgbGV0IG9wdGlvbjtcbiAgICAgICAgaWYgKHJhbmdlID09IG51bGwpIHtcbiAgICAgICAgICBvcHRpb24gPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdHNbZm9ybWF0XSA9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9uID0gaW5wdXQucXVlcnlTZWxlY3Rvcignb3B0aW9uW3NlbGVjdGVkXScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGZvcm1hdHNbZm9ybWF0XSkpIHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBmb3JtYXRzW2Zvcm1hdF07XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxcIi9nLCAnXFxcXFwiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wdGlvbiA9IGlucHV0LnF1ZXJ5U2VsZWN0b3IoYG9wdGlvblt2YWx1ZT1cIiR7dmFsdWV9XCJdYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgaW5wdXQudmFsdWUgPSAnJzsgICAvLyBUT0RPIG1ha2UgY29uZmlndXJhYmxlP1xuICAgICAgICAgIGlucHV0LnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xuICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ3FsLWFjdGl2ZScpO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0Lmhhc0F0dHJpYnV0ZSgndmFsdWUnKSkge1xuICAgICAgICAgIC8vIGJvdGggYmVpbmcgbnVsbCBzaG91bGQgbWF0Y2ggKGRlZmF1bHQgdmFsdWVzKVxuICAgICAgICAgIC8vICcxJyBzaG91bGQgbWF0Y2ggd2l0aCAxIChoZWFkZXJzKVxuICAgICAgICAgIGxldCBpc0FjdGl2ZSA9IGZvcm1hdHNbZm9ybWF0XSA9PT0gaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKGZvcm1hdHNbZm9ybWF0XSAhPSBudWxsICYmIGZvcm1hdHNbZm9ybWF0XS50b1N0cmluZygpID09PSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKGZvcm1hdHNbZm9ybWF0XSA9PSBudWxsICYmICFpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpO1xuICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC50b2dnbGUoJ3FsLWFjdGl2ZScsIGlzQWN0aXZlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QudG9nZ2xlKCdxbC1hY3RpdmUnLCBmb3JtYXRzW2Zvcm1hdF0gIT0gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuVG9vbGJhci5ERUZBVUxUUyA9IHt9O1xuXG5cbmZ1bmN0aW9uIGFkZEJ1dHRvbihjb250YWluZXIsIGZvcm1hdCwgdmFsdWUpIHtcbiAgbGV0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcbiAgaW5wdXQuY2xhc3NMaXN0LmFkZCgncWwtJyArIGZvcm1hdCk7XG4gIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpO1xufVxuXG5mdW5jdGlvbiBhZGRDb250cm9scyhjb250YWluZXIsIGdyb3Vwcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZ3JvdXBzWzBdKSkge1xuICAgIGdyb3VwcyA9IFtncm91cHNdO1xuICB9XG4gIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uKGNvbnRyb2xzKSB7XG4gICAgbGV0IGdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGdyb3VwLmNsYXNzTGlzdC5hZGQoJ3FsLWZvcm1hdHMnKTtcbiAgICBjb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgY29udHJvbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYWRkQnV0dG9uKGdyb3VwLCBjb250cm9sKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBmb3JtYXQgPSBPYmplY3Qua2V5cyhjb250cm9sKVswXTtcbiAgICAgICAgbGV0IHZhbHVlID0gY29udHJvbFtmb3JtYXRdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBhZGRTZWxlY3QoZ3JvdXAsIGZvcm1hdCwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZEJ1dHRvbihncm91cCwgZm9ybWF0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkU2VsZWN0KGNvbnRhaW5lciwgZm9ybWF0LCB2YWx1ZXMpIHtcbiAgbGV0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQoJ3FsLScgKyBmb3JtYXQpO1xuICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICB9XG4gICAgaW5wdXQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgfSk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG59XG5cblRvb2xiYXIuREVGQVVMVFMgPSB7XG4gIGNvbnRhaW5lcjogbnVsbCxcbiAgaGFuZGxlcnM6IHtcbiAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgaWYgKHJhbmdlID09IG51bGwpIHJldHVybjtcbiAgICAgIGlmIChyYW5nZS5sZW5ndGggPT0gMCkge1xuICAgICAgICBsZXQgZm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KCk7XG4gICAgICAgIE9iamVjdC5rZXlzKGZvcm1hdHMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgICAvLyBDbGVhbiBmdW5jdGlvbmFsaXR5IGluIGV4aXN0aW5nIGFwcHMgb25seSBjbGVhbiBpbmxpbmUgZm9ybWF0c1xuICAgICAgICAgIGlmIChQYXJjaG1lbnQucXVlcnkobmFtZSwgUGFyY2htZW50LlNjb3BlLklOTElORSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQobmFtZSwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1aWxsLnJlbW92ZUZvcm1hdChyYW5nZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRpcmVjdGlvbjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxldCBhbGlnbiA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KClbJ2FsaWduJ107XG4gICAgICBpZiAodmFsdWUgPT09ICdydGwnICYmIGFsaWduID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2FsaWduJywgJ3JpZ2h0JywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH0gZWxzZSBpZiAoIXZhbHVlICYmIGFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdhbGlnbicsIGZhbHNlLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2RpcmVjdGlvbicsIHZhbHVlLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgIH0sXG4gICAgaW5kZW50OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbGV0IHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGxldCBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UpO1xuICAgICAgbGV0IGluZGVudCA9IHBhcnNlSW50KGZvcm1hdHMuaW5kZW50IHx8IDApO1xuICAgICAgaWYgKHZhbHVlID09PSAnKzEnIHx8IHZhbHVlID09PSAnLTEnKSB7XG4gICAgICAgIGxldCBtb2RpZmllciA9ICh2YWx1ZSA9PT0gJysxJykgPyAxIDogLTE7XG4gICAgICAgIGlmIChmb3JtYXRzLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIG1vZGlmaWVyICo9IC0xO1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgaW5kZW50ICsgbW9kaWZpZXIsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlID0gcHJvbXB0KCdFbnRlciBsaW5rIFVSTDonKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaW5rJywgdmFsdWUsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgfSxcbiAgICBsaXN0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbGV0IHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGxldCBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UpO1xuICAgICAgaWYgKHZhbHVlID09PSAnY2hlY2snKSB7XG4gICAgICAgIGlmIChmb3JtYXRzWydsaXN0J10gPT09ICdjaGVja2VkJyB8fCBmb3JtYXRzWydsaXN0J10gPT09ICd1bmNoZWNrZWQnKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCBmYWxzZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGlzdCcsICd1bmNoZWNrZWQnLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGlzdCcsIHZhbHVlLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbmV4cG9ydCB7IFRvb2xiYXIgYXMgZGVmYXVsdCwgYWRkQ29udHJvbHMgfTtcbiIsImltcG9ydCBLZXlib2FyZCBmcm9tICcuLi9tb2R1bGVzL2tleWJvYXJkJztcbmltcG9ydCBEcm9wZG93bkljb24gZnJvbSAnLi4vYXNzZXRzL2ljb25zL2Ryb3Bkb3duLnN2Zyc7XG5cbmxldCBvcHRpb25zQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIHRvZ2dsZUFyaWFBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKSB7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgIShlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpID09PSAndHJ1ZScpKTtcbn1cblxuY2xhc3MgUGlja2VyIHtcbiAgY29uc3RydWN0b3Ioc2VsZWN0KSB7XG4gICAgdGhpcy5zZWxlY3QgPSBzZWxlY3Q7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgdGhpcy5idWlsZFBpY2tlcigpO1xuICAgIHRoaXMuc2VsZWN0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy5zZWxlY3QucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jb250YWluZXIsIHRoaXMuc2VsZWN0KTtcblxuICAgIHRoaXMubGFiZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xuICAgICAgdGhpcy50b2dnbGVQaWNrZXIoKTtcbiAgICB9KTtcbiAgICB0aGlzLmxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgIHN3aXRjaChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIC8vIEFsbG93cyB0aGUgXCJFbnRlclwiIGtleSB0byBvcGVuIHRoZSBwaWNrZXJcbiAgICAgICAgY2FzZSBLZXlib2FyZC5rZXlzLkVOVEVSOlxuICAgICAgICAgIHRoaXMudG9nZ2xlUGlja2VyKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gQWxsb3dzIHRoZSBcIkVzY2FwZVwiIGtleSB0byBjbG9zZSB0aGUgcGlja2VyXG4gICAgICAgIGNhc2UgS2V5Ym9hcmQua2V5cy5FU0NBUEU6XG4gICAgICAgICAgdGhpcy5lc2NhcGUoKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgdG9nZ2xlUGlja2VyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ3FsLWV4cGFuZGVkJyk7XG4gICAgLy8gVG9nZ2xlIGFyaWEtZXhwYW5kZWQgYW5kIGFyaWEtaGlkZGVuIHRvIG1ha2UgdGhlIHBpY2tlciBhY2Nlc3NpYmxlXG4gICAgdG9nZ2xlQXJpYUF0dHJpYnV0ZSh0aGlzLmxhYmVsLCAnYXJpYS1leHBhbmRlZCcpO1xuICAgIHRvZ2dsZUFyaWFBdHRyaWJ1dGUodGhpcy5vcHRpb25zLCAnYXJpYS1oaWRkZW4nKTtcbiAgfVxuXG4gIGJ1aWxkSXRlbShvcHRpb24pIHtcbiAgICBsZXQgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBpdGVtLnRhYkluZGV4ID0gJzAnO1xuICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuXG4gICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXItaXRlbScpO1xuICAgIGlmIChvcHRpb24uaGFzQXR0cmlidXRlKCd2YWx1ZScpKSB7XG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIG9wdGlvbi5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uLnRleHRDb250ZW50KSB7XG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcsIG9wdGlvbi50ZXh0Q29udGVudCk7XG4gICAgfVxuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0oaXRlbSwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICBzd2l0Y2goZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRW50ZXJcIiBrZXkgdG8gc2VsZWN0IGFuIGl0ZW1cbiAgICAgICAgY2FzZSBLZXlib2FyZC5rZXlzLkVOVEVSOlxuICAgICAgICAgIHRoaXMuc2VsZWN0SXRlbShpdGVtLCB0cnVlKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIC8vIEFsbG93cyB0aGUgXCJFc2NhcGVcIiBrZXkgdG8gY2xvc2UgdGhlIHBpY2tlclxuICAgICAgICBjYXNlIEtleWJvYXJkLmtleXMuRVNDQVBFOlxuICAgICAgICAgIHRoaXMuZXNjYXBlKCk7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgYnVpbGRMYWJlbCgpIHtcbiAgICBsZXQgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgncWwtcGlja2VyLWxhYmVsJyk7XG4gICAgbGFiZWwuaW5uZXJIVE1MID0gRHJvcGRvd25JY29uO1xuICAgIGxhYmVsLnRhYkluZGV4ID0gJzAnO1xuICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcbiAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG5cbiAgYnVpbGRPcHRpb25zKCkge1xuICAgIGxldCBvcHRpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIG9wdGlvbnMuY2xhc3NMaXN0LmFkZCgncWwtcGlja2VyLW9wdGlvbnMnKTtcblxuICAgIC8vIERvbid0IHdhbnQgc2NyZWVuIHJlYWRlcnMgdG8gcmVhZCB0aGlzIHVudGlsIG9wdGlvbnMgYXJlIHZpc2libGVcbiAgICBvcHRpb25zLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIG9wdGlvbnMudGFiSW5kZXggPSAnLTEnO1xuXG4gICAgLy8gTmVlZCBhIHVuaXF1ZSBpZCBmb3IgYXJpYS1jb250cm9sc1xuICAgIG9wdGlvbnMuaWQgPSBgcWwtcGlja2VyLW9wdGlvbnMtJHtvcHRpb25zQ291bnRlcn1gO1xuICAgIG9wdGlvbnNDb3VudGVyICs9IDE7XG4gICAgdGhpcy5sYWJlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCBvcHRpb25zLmlkKTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBbXS5zbGljZS5jYWxsKHRoaXMuc2VsZWN0Lm9wdGlvbnMpLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgICAgbGV0IGl0ZW0gPSB0aGlzLmJ1aWxkSXRlbShvcHRpb24pO1xuICAgICAgb3B0aW9ucy5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RJdGVtKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKG9wdGlvbnMpO1xuICB9XG5cbiAgYnVpbGRQaWNrZXIoKSB7XG4gICAgW10uc2xpY2UuY2FsbCh0aGlzLnNlbGVjdC5hdHRyaWJ1dGVzKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoaXRlbS5uYW1lLCBpdGVtLnZhbHVlKTtcbiAgICB9KTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXInKTtcbiAgICB0aGlzLmxhYmVsID0gdGhpcy5idWlsZExhYmVsKCk7XG4gICAgdGhpcy5idWlsZE9wdGlvbnMoKTtcbiAgfVxuXG4gIGVzY2FwZSgpIHtcbiAgICAvLyBDbG9zZSBtZW51IGFuZCByZXR1cm4gZm9jdXMgdG8gdHJpZ2dlciBsYWJlbFxuICAgIHRoaXMuY2xvc2UoKTtcbiAgICAvLyBOZWVkIHNldFRpbWVvdXQgZm9yIGFjY2Vzc2liaWxpdHkgdG8gZW5zdXJlIHRoYXQgdGhlIGJyb3dzZXIgZXhlY3V0ZXNcbiAgICAvLyBmb2N1cyBvbiB0aGUgbmV4dCBwcm9jZXNzIHRocmVhZCBhbmQgYWZ0ZXIgYW55IERPTSBjb250ZW50IGNoYW5nZXNcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMubGFiZWwuZm9jdXMoKSwgMSk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdxbC1leHBhbmRlZCcpO1xuICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgdGhpcy5vcHRpb25zLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9XG5cbiAgc2VsZWN0SXRlbShpdGVtLCB0cmlnZ2VyID0gZmFsc2UpIHtcbiAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucWwtc2VsZWN0ZWQnKTtcbiAgICBpZiAoaXRlbSA9PT0gc2VsZWN0ZWQpIHJldHVybjtcbiAgICBpZiAoc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgICAgc2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgncWwtc2VsZWN0ZWQnKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0gPT0gbnVsbCkgcmV0dXJuO1xuICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgncWwtc2VsZWN0ZWQnKTtcbiAgICB0aGlzLnNlbGVjdC5zZWxlY3RlZEluZGV4ID0gW10uaW5kZXhPZi5jYWxsKGl0ZW0ucGFyZW50Tm9kZS5jaGlsZHJlbiwgaXRlbSk7XG4gICAgaWYgKGl0ZW0uaGFzQXR0cmlidXRlKCdkYXRhLXZhbHVlJykpIHtcbiAgICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChpdGVtLmhhc0F0dHJpYnV0ZSgnZGF0YS1sYWJlbCcpKSB7XG4gICAgICB0aGlzLmxhYmVsLnNldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcsIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWxhYmVsJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxhYmVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcpO1xuICAgIH1cbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgaWYgKHR5cGVvZiBFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnNlbGVjdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgRXZlbnQgPT09ICdvYmplY3QnKSB7ICAgICAvLyBJRTExXG4gICAgICAgIGxldCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuICAgICAgICB0aGlzLnNlbGVjdC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgbGV0IG9wdGlvbjtcbiAgICBpZiAodGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleCA+IC0xKSB7XG4gICAgICBsZXQgaXRlbSA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1waWNrZXItb3B0aW9ucycpLmNoaWxkcmVuW3RoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgb3B0aW9uID0gdGhpcy5zZWxlY3Qub3B0aW9uc1t0aGlzLnNlbGVjdC5zZWxlY3RlZEluZGV4XTtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKG51bGwpO1xuICAgIH1cbiAgICBsZXQgaXNBY3RpdmUgPSBvcHRpb24gIT0gbnVsbCAmJiBvcHRpb24gIT09IHRoaXMuc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvbltzZWxlY3RlZF0nKTtcbiAgICB0aGlzLmxhYmVsLmNsYXNzTGlzdC50b2dnbGUoJ3FsLWFjdGl2ZScsIGlzQWN0aXZlKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IFBpY2tlcjtcbiIsImltcG9ydCBQaWNrZXIgZnJvbSAnLi9waWNrZXInO1xuXG5cbmNsYXNzIENvbG9yUGlja2VyIGV4dGVuZHMgUGlja2VyIHtcbiAgY29uc3RydWN0b3Ioc2VsZWN0LCBsYWJlbCkge1xuICAgIHN1cGVyKHNlbGVjdCk7XG4gICAgdGhpcy5sYWJlbC5pbm5lckhUTUwgPSBsYWJlbDtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1jb2xvci1waWNrZXInKTtcbiAgICBbXS5zbGljZS5jYWxsKHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5xbC1waWNrZXItaXRlbScpLCAwLCA3KS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgncWwtcHJpbWFyeScpO1xuICAgIH0pO1xuICB9XG5cbiAgYnVpbGRJdGVtKG9wdGlvbikge1xuICAgIGxldCBpdGVtID0gc3VwZXIuYnVpbGRJdGVtKG9wdGlvbik7XG4gICAgaXRlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpIHx8ICcnO1xuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgc2VsZWN0SXRlbShpdGVtLCB0cmlnZ2VyKSB7XG4gICAgc3VwZXIuc2VsZWN0SXRlbShpdGVtLCB0cmlnZ2VyKTtcbiAgICBsZXQgY29sb3JMYWJlbCA9IHRoaXMubGFiZWwucXVlcnlTZWxlY3RvcignLnFsLWNvbG9yLWxhYmVsJyk7XG4gICAgbGV0IHZhbHVlID0gaXRlbSA/IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgJycgOiAnJztcbiAgICBpZiAoY29sb3JMYWJlbCkge1xuICAgICAgaWYgKGNvbG9yTGFiZWwudGFnTmFtZSA9PT0gJ2xpbmUnKSB7XG4gICAgICAgIGNvbG9yTGFiZWwuc3R5bGUuc3Ryb2tlID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2xvckxhYmVsLnN0eWxlLmZpbGwgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBDb2xvclBpY2tlcjtcbiIsImltcG9ydCBQaWNrZXIgZnJvbSAnLi9waWNrZXInO1xuXG5cbmNsYXNzIEljb25QaWNrZXIgZXh0ZW5kcyBQaWNrZXIge1xuICBjb25zdHJ1Y3RvcihzZWxlY3QsIGljb25zKSB7XG4gICAgc3VwZXIoc2VsZWN0KTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1pY29uLXBpY2tlcicpO1xuICAgIFtdLmZvckVhY2guY2FsbCh0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucWwtcGlja2VyLWl0ZW0nKSwgKGl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uaW5uZXJIVE1MID0gaWNvbnNbaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSB8fCAnJ107XG4gICAgfSk7XG4gICAgdGhpcy5kZWZhdWx0SXRlbSA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1zZWxlY3RlZCcpO1xuICAgIHRoaXMuc2VsZWN0SXRlbSh0aGlzLmRlZmF1bHRJdGVtKTtcbiAgfVxuXG4gIHNlbGVjdEl0ZW0oaXRlbSwgdHJpZ2dlcikge1xuICAgIHN1cGVyLnNlbGVjdEl0ZW0oaXRlbSwgdHJpZ2dlcik7XG4gICAgaXRlbSA9IGl0ZW0gfHwgdGhpcy5kZWZhdWx0SXRlbTtcbiAgICB0aGlzLmxhYmVsLmlubmVySFRNTCA9IGl0ZW0uaW5uZXJIVE1MO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgSWNvblBpY2tlcjtcbiIsImNsYXNzIFRvb2x0aXAge1xuICBjb25zdHJ1Y3RvcihxdWlsbCwgYm91bmRzQ29udGFpbmVyKSB7XG4gICAgdGhpcy5xdWlsbCA9IHF1aWxsO1xuICAgIHRoaXMuYm91bmRzQ29udGFpbmVyID0gYm91bmRzQ29udGFpbmVyIHx8IGRvY3VtZW50LmJvZHk7XG4gICAgdGhpcy5yb290ID0gcXVpbGwuYWRkQ29udGFpbmVyKCdxbC10b29sdGlwJyk7XG4gICAgdGhpcy5yb290LmlubmVySFRNTCA9IHRoaXMuY29uc3RydWN0b3IuVEVNUExBVEU7XG4gICAgaWYgKHRoaXMucXVpbGwucm9vdCA9PT0gdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIpIHtcbiAgICAgIHRoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMucm9vdC5zdHlsZS5tYXJnaW5Ub3AgPSAoLTEqdGhpcy5xdWlsbC5yb290LnNjcm9sbFRvcCkgKyAncHgnO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuaGlkZSgpO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZCgncWwtaGlkZGVuJyk7XG4gIH1cblxuICBwb3NpdGlvbihyZWZlcmVuY2UpIHtcbiAgICBsZXQgbGVmdCA9IHJlZmVyZW5jZS5sZWZ0ICsgcmVmZXJlbmNlLndpZHRoLzIgLSB0aGlzLnJvb3Qub2Zmc2V0V2lkdGgvMjtcbiAgICAvLyByb290LnNjcm9sbFRvcCBzaG91bGQgYmUgMCBpZiBzY3JvbGxDb250YWluZXIgIT09IHJvb3RcbiAgICBsZXQgdG9wID0gcmVmZXJlbmNlLmJvdHRvbSArIHRoaXMucXVpbGwucm9vdC5zY3JvbGxUb3A7XG4gICAgdGhpcy5yb290LnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcbiAgICB0aGlzLnJvb3Quc3R5bGUudG9wID0gdG9wICsgJ3B4JztcbiAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtZmxpcCcpO1xuICAgIGxldCBjb250YWluZXJCb3VuZHMgPSB0aGlzLmJvdW5kc0NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgcm9vdEJvdW5kcyA9IHRoaXMucm9vdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgc2hpZnQgPSAwO1xuICAgIGlmIChyb290Qm91bmRzLnJpZ2h0ID4gY29udGFpbmVyQm91bmRzLnJpZ2h0KSB7XG4gICAgICBzaGlmdCA9IGNvbnRhaW5lckJvdW5kcy5yaWdodCAtIHJvb3RCb3VuZHMucmlnaHQ7XG4gICAgICB0aGlzLnJvb3Quc3R5bGUubGVmdCA9IChsZWZ0ICsgc2hpZnQpICsgJ3B4JztcbiAgICB9XG4gICAgaWYgKHJvb3RCb3VuZHMubGVmdCA8IGNvbnRhaW5lckJvdW5kcy5sZWZ0KSB7XG4gICAgICBzaGlmdCA9IGNvbnRhaW5lckJvdW5kcy5sZWZ0IC0gcm9vdEJvdW5kcy5sZWZ0O1xuICAgICAgdGhpcy5yb290LnN0eWxlLmxlZnQgPSAobGVmdCArIHNoaWZ0KSArICdweCc7XG4gICAgfVxuICAgIGlmIChyb290Qm91bmRzLmJvdHRvbSA+IGNvbnRhaW5lckJvdW5kcy5ib3R0b20pIHtcbiAgICAgIGxldCBoZWlnaHQgPSByb290Qm91bmRzLmJvdHRvbSAtIHJvb3RCb3VuZHMudG9wO1xuICAgICAgbGV0IHZlcnRpY2FsU2hpZnQgPSByZWZlcmVuY2UuYm90dG9tIC0gcmVmZXJlbmNlLnRvcCArIGhlaWdodDtcbiAgICAgIHRoaXMucm9vdC5zdHlsZS50b3AgPSAodG9wIC0gdmVydGljYWxTaGlmdCkgKyAncHgnO1xuICAgICAgdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoJ3FsLWZsaXAnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoaWZ0O1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtZWRpdGluZycpO1xuICAgIHRoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1oaWRkZW4nKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7XG4iLCJpbXBvcnQgZXh0ZW5kIGZyb20gJ2V4dGVuZCc7XG5pbXBvcnQgRGVsdGEgZnJvbSAncXVpbGwtZGVsdGEnO1xuaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi4vY29yZS9lbWl0dGVyJztcbmltcG9ydCBLZXlib2FyZCBmcm9tICcuLi9tb2R1bGVzL2tleWJvYXJkJztcbmltcG9ydCBUaGVtZSBmcm9tICcuLi9jb3JlL3RoZW1lJztcbmltcG9ydCBDb2xvclBpY2tlciBmcm9tICcuLi91aS9jb2xvci1waWNrZXInO1xuaW1wb3J0IEljb25QaWNrZXIgZnJvbSAnLi4vdWkvaWNvbi1waWNrZXInO1xuaW1wb3J0IFBpY2tlciBmcm9tICcuLi91aS9waWNrZXInO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi4vdWkvdG9vbHRpcCc7XG5cblxuY29uc3QgQUxJR05TID0gWyBmYWxzZSwgJ2NlbnRlcicsICdyaWdodCcsICdqdXN0aWZ5JyBdO1xuXG5jb25zdCBDT0xPUlMgPSBbXG4gIFwiIzAwMDAwMFwiLCBcIiNlNjAwMDBcIiwgXCIjZmY5OTAwXCIsIFwiI2ZmZmYwMFwiLCBcIiMwMDhhMDBcIiwgXCIjMDA2NmNjXCIsIFwiIzk5MzNmZlwiLFxuICBcIiNmZmZmZmZcIiwgXCIjZmFjY2NjXCIsIFwiI2ZmZWJjY1wiLCBcIiNmZmZmY2NcIiwgXCIjY2NlOGNjXCIsIFwiI2NjZTBmNVwiLCBcIiNlYmQ2ZmZcIixcbiAgXCIjYmJiYmJiXCIsIFwiI2YwNjY2NlwiLCBcIiNmZmMyNjZcIiwgXCIjZmZmZjY2XCIsIFwiIzY2Yjk2NlwiLCBcIiM2NmEzZTBcIiwgXCIjYzI4NWZmXCIsXG4gIFwiIzg4ODg4OFwiLCBcIiNhMTAwMDBcIiwgXCIjYjI2YjAwXCIsIFwiI2IyYjIwMFwiLCBcIiMwMDYxMDBcIiwgXCIjMDA0N2IyXCIsIFwiIzZiMjRiMlwiLFxuICBcIiM0NDQ0NDRcIiwgXCIjNWMwMDAwXCIsIFwiIzY2M2QwMFwiLCBcIiM2NjY2MDBcIiwgXCIjMDAzNzAwXCIsIFwiIzAwMjk2NlwiLCBcIiMzZDE0NjZcIlxuXTtcblxuY29uc3QgRk9OVFMgPSBbIGZhbHNlLCAnc2VyaWYnLCAnbW9ub3NwYWNlJyBdO1xuXG5jb25zdCBIRUFERVJTID0gWyAnMScsICcyJywgJzMnLCBmYWxzZSBdO1xuXG5jb25zdCBTSVpFUyA9IFsgJ3NtYWxsJywgZmFsc2UsICdsYXJnZScsICdodWdlJyBdO1xuXG5cbmNsYXNzIEJhc2VUaGVtZSBleHRlbmRzIFRoZW1lIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihxdWlsbCwgb3B0aW9ucyk7XG4gICAgbGV0IGxpc3RlbmVyID0gKGUpID0+IHtcbiAgICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyhxdWlsbC5yb290KSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnRvb2x0aXAgIT0gbnVsbCAmJiAhdGhpcy50b29sdGlwLnJvb3QuY29udGFpbnMoZS50YXJnZXQpICYmXG4gICAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcy50b29sdGlwLnRleHRib3ggJiYgIXRoaXMucXVpbGwuaGFzRm9jdXMoKSkge1xuICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGlja2VycyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucGlja2Vycy5mb3JFYWNoKGZ1bmN0aW9uKHBpY2tlcikge1xuICAgICAgICAgIGlmICghcGlja2VyLmNvbnRhaW5lci5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHBpY2tlci5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBxdWlsbC5lbWl0dGVyLmxpc3RlbkRPTSgnY2xpY2snLCBkb2N1bWVudC5ib2R5LCBsaXN0ZW5lcik7XG4gIH1cblxuICBhZGRNb2R1bGUobmFtZSkge1xuICAgIGxldCBtb2R1bGUgPSBzdXBlci5hZGRNb2R1bGUobmFtZSk7XG4gICAgaWYgKG5hbWUgPT09ICd0b29sYmFyJykge1xuICAgICAgdGhpcy5leHRlbmRUb29sYmFyKG1vZHVsZSk7XG4gICAgfVxuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICBidWlsZEJ1dHRvbnMoYnV0dG9ucywgaWNvbnMpIHtcbiAgICBidXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgbGV0IGNsYXNzTmFtZSA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG4gICAgICBjbGFzc05hbWUuc3BsaXQoL1xccysvKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgIGlmICghbmFtZS5zdGFydHNXaXRoKCdxbC0nKSkgcmV0dXJuO1xuICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgncWwtJy5sZW5ndGgpO1xuICAgICAgICBpZiAoaWNvbnNbbmFtZV0gPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2RpcmVjdGlvbicpIHtcbiAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gaWNvbnNbbmFtZV1bJyddICsgaWNvbnNbbmFtZV1bJ3J0bCddO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpY29uc1tuYW1lXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gaWNvbnNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gYnV0dG9uLnZhbHVlIHx8ICcnO1xuICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIGljb25zW25hbWVdW3ZhbHVlXSkge1xuICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGljb25zW25hbWVdW3ZhbHVlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYnVpbGRQaWNrZXJzKHNlbGVjdHMsIGljb25zKSB7XG4gICAgdGhpcy5waWNrZXJzID0gc2VsZWN0cy5tYXAoKHNlbGVjdCkgPT4ge1xuICAgICAgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWFsaWduJykpIHtcbiAgICAgICAgaWYgKHNlbGVjdC5xdWVyeVNlbGVjdG9yKCdvcHRpb24nKSA9PSBudWxsKSB7XG4gICAgICAgICAgZmlsbFNlbGVjdChzZWxlY3QsIEFMSUdOUyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBJY29uUGlja2VyKHNlbGVjdCwgaWNvbnMuYWxpZ24pO1xuICAgICAgfSBlbHNlIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1iYWNrZ3JvdW5kJykgfHwgc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtY29sb3InKSkge1xuICAgICAgICBsZXQgZm9ybWF0ID0gc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtYmFja2dyb3VuZCcpID8gJ2JhY2tncm91bmQnIDogJ2NvbG9yJztcbiAgICAgICAgaWYgKHNlbGVjdC5xdWVyeVNlbGVjdG9yKCdvcHRpb24nKSA9PSBudWxsKSB7XG4gICAgICAgICAgZmlsbFNlbGVjdChzZWxlY3QsIENPTE9SUywgZm9ybWF0ID09PSAnYmFja2dyb3VuZCcgPyAnI2ZmZmZmZicgOiAnIzAwMDAwMCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3JQaWNrZXIoc2VsZWN0LCBpY29uc1tmb3JtYXRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZWxlY3QucXVlcnlTZWxlY3Rvcignb3B0aW9uJykgPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1mb250JykpIHtcbiAgICAgICAgICAgIGZpbGxTZWxlY3Qoc2VsZWN0LCBGT05UUyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1oZWFkZXInKSkge1xuICAgICAgICAgICAgZmlsbFNlbGVjdChzZWxlY3QsIEhFQURFUlMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtc2l6ZScpKSB7XG4gICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgU0laRVMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFBpY2tlcihzZWxlY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCB1cGRhdGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnBpY2tlcnMuZm9yRWFjaChmdW5jdGlvbihwaWNrZXIpIHtcbiAgICAgICAgcGlja2VyLnVwZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB0aGlzLnF1aWxsLm9uKEVtaXR0ZXIuZXZlbnRzLkVESVRPUl9DSEFOR0UsIHVwZGF0ZSk7XG4gIH1cbn1cbkJhc2VUaGVtZS5ERUZBVUxUUyA9IGV4dGVuZCh0cnVlLCB7fSwgVGhlbWUuREVGQVVMVFMsIHtcbiAgbW9kdWxlczoge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGZvcm11bGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMucXVpbGwudGhlbWUudG9vbHRpcC5lZGl0KCdmb3JtdWxhJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgZmlsZUlucHV0ID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignaW5wdXQucWwtaW1hZ2VbdHlwZT1maWxlXScpO1xuICAgICAgICAgIGlmIChmaWxlSW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgZmlsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnZmlsZScpO1xuICAgICAgICAgICAgZmlsZUlucHV0LnNldEF0dHJpYnV0ZSgnYWNjZXB0JywgJ2ltYWdlL3BuZywgaW1hZ2UvZ2lmLCBpbWFnZS9qcGVnLCBpbWFnZS9ibXAsIGltYWdlL3gtaWNvbicpO1xuICAgICAgICAgICAgZmlsZUlucHV0LmNsYXNzTGlzdC5hZGQoJ3FsLWltYWdlJyk7XG4gICAgICAgICAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZmlsZUlucHV0LmZpbGVzICE9IG51bGwgJiYgZmlsZUlucHV0LmZpbGVzWzBdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKHRydWUpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhuZXcgRGVsdGEoKVxuICAgICAgICAgICAgICAgICAgICAucmV0YWluKHJhbmdlLmluZGV4KVxuICAgICAgICAgICAgICAgICAgICAuZGVsZXRlKHJhbmdlLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgLmluc2VydCh7IGltYWdlOiBlLnRhcmdldC5yZXN1bHQgfSlcbiAgICAgICAgICAgICAgICAgICwgRW1pdHRlci5zb3VyY2VzLlVTRVIpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBFbWl0dGVyLnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgICAgICAgICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGVJbnB1dC5maWxlc1swXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoZmlsZUlucHV0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmlsZUlucHV0LmNsaWNrKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHZpZGVvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXAuZWRpdCgndmlkZW8nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cblxuY2xhc3MgQmFzZVRvb2x0aXAgZXh0ZW5kcyBUb29sdGlwIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIGJvdW5kc0NvbnRhaW5lcikge1xuICAgIHN1cGVyKHF1aWxsLCBib3VuZHNDb250YWluZXIpO1xuICAgIHRoaXMudGV4dGJveCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwidGV4dFwiXScpO1xuICAgIHRoaXMubGlzdGVuKCk7XG4gIH1cblxuICBsaXN0ZW4oKSB7XG4gICAgdGhpcy50ZXh0Ym94LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChLZXlib2FyZC5tYXRjaChldmVudCwgJ2VudGVyJykpIHtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9IGVsc2UgaWYgKEtleWJvYXJkLm1hdGNoKGV2ZW50LCAnZXNjYXBlJykpIHtcbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgfVxuXG4gIGVkaXQobW9kZSA9ICdsaW5rJywgcHJldmlldyA9IG51bGwpIHtcbiAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtaGlkZGVuJyk7XG4gICAgdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoJ3FsLWVkaXRpbmcnKTtcbiAgICBpZiAocHJldmlldyAhPSBudWxsKSB7XG4gICAgICB0aGlzLnRleHRib3gudmFsdWUgPSBwcmV2aWV3O1xuICAgIH0gZWxzZSBpZiAobW9kZSAhPT0gdGhpcy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RlJykpIHtcbiAgICAgIHRoaXMudGV4dGJveC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgICB0aGlzLnBvc2l0aW9uKHRoaXMucXVpbGwuZ2V0Qm91bmRzKHRoaXMucXVpbGwuc2VsZWN0aW9uLnNhdmVkUmFuZ2UpKTtcbiAgICB0aGlzLnRleHRib3guc2VsZWN0KCk7XG4gICAgdGhpcy50ZXh0Ym94LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCB0aGlzLnRleHRib3guZ2V0QXR0cmlidXRlKGBkYXRhLSR7bW9kZX1gKSB8fCAnJyk7XG4gICAgdGhpcy5yb290LnNldEF0dHJpYnV0ZSgnZGF0YS1tb2RlJywgbW9kZSk7XG4gIH1cblxuICByZXN0b3JlRm9jdXMoKSB7XG4gICAgbGV0IHNjcm9sbFRvcCA9IHRoaXMucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcDtcbiAgICB0aGlzLnF1aWxsLmZvY3VzKCk7XG4gICAgdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICB9XG5cbiAgc2F2ZSgpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnRleHRib3gudmFsdWU7XG4gICAgc3dpdGNoKHRoaXMucm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kZScpKSB7XG4gICAgICBjYXNlICdsaW5rJzoge1xuICAgICAgICBsZXQgc2Nyb2xsVG9wID0gdGhpcy5xdWlsbC5yb290LnNjcm9sbFRvcDtcbiAgICAgICAgaWYgKHRoaXMubGlua1JhbmdlKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXRUZXh0KHRoaXMubGlua1JhbmdlLCAnbGluaycsIHZhbHVlLCBFbWl0dGVyLnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgZGVsZXRlIHRoaXMubGlua1JhbmdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVzdG9yZUZvY3VzKCk7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpbmsnLCB2YWx1ZSwgRW1pdHRlci5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucXVpbGwucm9vdC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAndmlkZW8nOiB7XG4gICAgICAgIHZhbHVlID0gZXh0cmFjdFZpZGVvVXJsKHZhbHVlKTtcbiAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgICBjYXNlICdmb3JtdWxhJzoge1xuICAgICAgICBpZiAoIXZhbHVlKSBicmVhaztcbiAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24odHJ1ZSk7XG4gICAgICAgIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgbGV0IGluZGV4ID0gcmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5xdWlsbC5pbnNlcnRFbWJlZChpbmRleCwgdGhpcy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RlJyksIHZhbHVlLCBFbWl0dGVyLnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgaWYgKHRoaXMucm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kZScpID09PSAnZm9ybXVsYScpIHtcbiAgICAgICAgICAgIHRoaXMucXVpbGwuaW5zZXJ0VGV4dChpbmRleCArIDEsICcgJywgRW1pdHRlci5zb3VyY2VzLlVTRVIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCArIDIsIEVtaXR0ZXIuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICAgIHRoaXMudGV4dGJveC52YWx1ZSA9ICcnO1xuICAgIHRoaXMuaGlkZSgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZXh0cmFjdFZpZGVvVXJsKHVybCkge1xuICBsZXQgbWF0Y2ggPSB1cmwubWF0Y2goL14oPzooaHR0cHM/KTpcXC9cXC8pPyg/Oig/Ond3d3xtKVxcLik/eW91dHViZVxcLmNvbVxcL3dhdGNoLip2PShbYS16QS1aMC05Xy1dKykvKSB8fFxuICAgICAgICAgICAgICB1cmwubWF0Y2goL14oPzooaHR0cHM/KTpcXC9cXC8pPyg/Oig/Ond3d3xtKVxcLik/eW91dHVcXC5iZVxcLyhbYS16QS1aMC05Xy1dKykvKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgcmV0dXJuIChtYXRjaFsxXSB8fCAnaHR0cHMnKSArICc6Ly93d3cueW91dHViZS5jb20vZW1iZWQvJyArIG1hdGNoWzJdICsgJz9zaG93aW5mbz0wJztcbiAgfVxuICBpZiAobWF0Y2ggPSB1cmwubWF0Y2goL14oPzooaHR0cHM/KTpcXC9cXC8pPyg/Ond3d1xcLik/dmltZW9cXC5jb21cXC8oXFxkKykvKSkgeyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25kLWFzc2lnblxuICAgIHJldHVybiAobWF0Y2hbMV0gfHwgJ2h0dHBzJykgKyAnOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nICsgbWF0Y2hbMl0gKyAnLyc7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZmlsbFNlbGVjdChzZWxlY3QsIHZhbHVlcywgZGVmYXVsdFZhbHVlID0gZmFsc2UpIHtcbiAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgaWYgKHZhbHVlID09PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xuICAgIH1cbiAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgfSk7XG59XG5cblxuZXhwb3J0IHsgQmFzZVRvb2x0aXAsIEJhc2VUaGVtZSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgZXh0ZW5kIGZyb20gJ2V4dGVuZCc7XG5pbXBvcnQgRW1pdHRlciBmcm9tICcuLi9jb3JlL2VtaXR0ZXInO1xuaW1wb3J0IEJhc2VUaGVtZSwgeyBCYXNlVG9vbHRpcCB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4uL2NvcmUvc2VsZWN0aW9uJztcbmltcG9ydCBpY29ucyBmcm9tICcuLi91aS9pY29ucyc7XG5cblxuY29uc3QgVE9PTEJBUl9DT05GSUcgPSBbXG4gIFsnYm9sZCcsICdpdGFsaWMnLCAnbGluayddLFxuICBbeyBoZWFkZXI6IDEgfSwgeyBoZWFkZXI6IDIgfSwgJ2Jsb2NrcXVvdGUnXVxuXTtcblxuY2xhc3MgQnViYmxlVGhlbWUgZXh0ZW5kcyBCYXNlVGhlbWUge1xuICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLm1vZHVsZXMudG9vbGJhciAhPSBudWxsICYmIG9wdGlvbnMubW9kdWxlcy50b29sYmFyLmNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLm1vZHVsZXMudG9vbGJhci5jb250YWluZXIgPSBUT09MQkFSX0NPTkZJRztcbiAgICB9XG4gICAgc3VwZXIocXVpbGwsIG9wdGlvbnMpO1xuICAgIHRoaXMucXVpbGwuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLWJ1YmJsZScpO1xuICB9XG5cbiAgZXh0ZW5kVG9vbGJhcih0b29sYmFyKSB7XG4gICAgdGhpcy50b29sdGlwID0gbmV3IEJ1YmJsZVRvb2x0aXAodGhpcy5xdWlsbCwgdGhpcy5vcHRpb25zLmJvdW5kcyk7XG4gICAgdGhpcy50b29sdGlwLnJvb3QuYXBwZW5kQ2hpbGQodG9vbGJhci5jb250YWluZXIpO1xuICAgIHRoaXMuYnVpbGRCdXR0b25zKFtdLnNsaWNlLmNhbGwodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykpLCBpY29ucyk7XG4gICAgdGhpcy5idWlsZFBpY2tlcnMoW10uc2xpY2UuY2FsbCh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKSksIGljb25zKTtcbiAgfVxufVxuQnViYmxlVGhlbWUuREVGQVVMVFMgPSBleHRlbmQodHJ1ZSwge30sIEJhc2VUaGVtZS5ERUZBVUxUUywge1xuICBtb2R1bGVzOiB7XG4gICAgdG9vbGJhcjoge1xuICAgICAgaGFuZGxlcnM6IHtcbiAgICAgICAgbGluazogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGluaycsIGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5xdWlsbC50aGVtZS50b29sdGlwLmVkaXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5cbmNsYXNzIEJ1YmJsZVRvb2x0aXAgZXh0ZW5kcyBCYXNlVG9vbHRpcCB7XG4gIGNvbnN0cnVjdG9yKHF1aWxsLCBib3VuZHMpIHtcbiAgICBzdXBlcihxdWlsbCwgYm91bmRzKTtcbiAgICB0aGlzLnF1aWxsLm9uKEVtaXR0ZXIuZXZlbnRzLkVESVRPUl9DSEFOR0UsICh0eXBlLCByYW5nZSwgb2xkUmFuZ2UsIHNvdXJjZSkgPT4ge1xuICAgICAgaWYgKHR5cGUgIT09IEVtaXR0ZXIuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UpIHJldHVybjtcbiAgICAgIGlmIChyYW5nZSAhPSBudWxsICYmIHJhbmdlLmxlbmd0aCA+IDAgJiYgc291cmNlID09PSBFbWl0dGVyLnNvdXJjZXMuVVNFUikge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgLy8gTG9jayBvdXIgd2lkdGggc28gd2Ugd2lsbCBleHBhbmQgYmV5b25kIG91ciBvZmZzZXRQYXJlbnQgYm91bmRhcmllc1xuICAgICAgICB0aGlzLnJvb3Quc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgICAgICB0aGlzLnJvb3Quc3R5bGUud2lkdGggPSAnJztcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLndpZHRoID0gdGhpcy5yb290Lm9mZnNldFdpZHRoICsgJ3B4JztcbiAgICAgICAgbGV0IGxpbmVzID0gdGhpcy5xdWlsbC5nZXRMaW5lcyhyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoKTtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHRoaXMucG9zaXRpb24odGhpcy5xdWlsbC5nZXRCb3VuZHMocmFuZ2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgbGFzdExpbmUgPSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnF1aWxsLmdldEluZGV4KGxhc3RMaW5lKTtcbiAgICAgICAgICBsZXQgbGVuZ3RoID0gTWF0aC5taW4obGFzdExpbmUubGVuZ3RoKCkgLSAxLCByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCAtIGluZGV4KTtcbiAgICAgICAgICBsZXQgYm91bmRzID0gdGhpcy5xdWlsbC5nZXRCb3VuZHMobmV3IFJhbmdlKGluZGV4LCBsZW5ndGgpKTtcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uKGJvdW5kcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcy50ZXh0Ym94ICYmIHRoaXMucXVpbGwuaGFzRm9jdXMoKSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGxpc3RlbigpIHtcbiAgICBzdXBlci5saXN0ZW4oKTtcbiAgICB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignLnFsLWNsb3NlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtZWRpdGluZycpO1xuICAgIH0pO1xuICAgIHRoaXMucXVpbGwub24oRW1pdHRlci5ldmVudHMuU0NST0xMX09QVElNSVpFLCAoKSA9PiB7XG4gICAgICAvLyBMZXQgc2VsZWN0aW9uIGJlIHJlc3RvcmVkIGJ5IHRvb2xiYXIgaGFuZGxlcnMgYmVmb3JlIHJlcG9zaXRpb25pbmdcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucygncWwtaGlkZGVuJykpIHJldHVybjtcbiAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgaWYgKHJhbmdlICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uKHRoaXMucXVpbGwuZ2V0Qm91bmRzKHJhbmdlKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEpO1xuICAgIH0pO1xuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMuc2hvdygpO1xuICB9XG5cbiAgcG9zaXRpb24ocmVmZXJlbmNlKSB7XG4gICAgbGV0IHNoaWZ0ID0gc3VwZXIucG9zaXRpb24ocmVmZXJlbmNlKTtcbiAgICBsZXQgYXJyb3cgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignLnFsLXRvb2x0aXAtYXJyb3cnKTtcbiAgICBhcnJvdy5zdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XG4gICAgaWYgKHNoaWZ0ID09PSAwKSByZXR1cm4gc2hpZnQ7XG4gICAgYXJyb3cuc3R5bGUubWFyZ2luTGVmdCA9ICgtMSpzaGlmdCAtIGFycm93Lm9mZnNldFdpZHRoLzIpICsgJ3B4JztcbiAgfVxufVxuQnViYmxlVG9vbHRpcC5URU1QTEFURSA9IFtcbiAgJzxzcGFuIGNsYXNzPVwicWwtdG9vbHRpcC1hcnJvd1wiPjwvc3Bhbj4nLFxuICAnPGRpdiBjbGFzcz1cInFsLXRvb2x0aXAtZWRpdG9yXCI+JyxcbiAgICAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1mb3JtdWxhPVwiZT1tY14yXCIgZGF0YS1saW5rPVwiaHR0cHM6Ly9xdWlsbGpzLmNvbVwiIGRhdGEtdmlkZW89XCJFbWJlZCBVUkxcIj4nLFxuICAgICc8YSBjbGFzcz1cInFsLWNsb3NlXCI+PC9hPicsXG4gICc8L2Rpdj4nXG5dLmpvaW4oJycpO1xuXG5cbmV4cG9ydCB7IEJ1YmJsZVRvb2x0aXAsIEJ1YmJsZVRoZW1lIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBleHRlbmQgZnJvbSAnZXh0ZW5kJztcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uL2NvcmUvZW1pdHRlcic7XG5pbXBvcnQgQmFzZVRoZW1lLCB7IEJhc2VUb29sdGlwIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCBMaW5rQmxvdCBmcm9tICcuLi9mb3JtYXRzL2xpbmsnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbic7XG5pbXBvcnQgaWNvbnMgZnJvbSAnLi4vdWkvaWNvbnMnO1xuXG5cbmNvbnN0IFRPT0xCQVJfQ09ORklHID0gW1xuICBbeyBoZWFkZXI6IFsnMScsICcyJywgJzMnLCBmYWxzZV0gfV0sXG4gIFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJywgJ2xpbmsnXSxcbiAgW3sgbGlzdDogJ29yZGVyZWQnIH0sIHsgbGlzdDogJ2J1bGxldCcgfV0sXG4gIFsnY2xlYW4nXVxuXTtcblxuY2xhc3MgU25vd1RoZW1lIGV4dGVuZHMgQmFzZVRoZW1lIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5tb2R1bGVzLnRvb2xiYXIgIT0gbnVsbCAmJiBvcHRpb25zLm1vZHVsZXMudG9vbGJhci5jb250YWluZXIgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5tb2R1bGVzLnRvb2xiYXIuY29udGFpbmVyID0gVE9PTEJBUl9DT05GSUc7XG4gICAgfVxuICAgIHN1cGVyKHF1aWxsLCBvcHRpb25zKTtcbiAgICB0aGlzLnF1aWxsLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1zbm93Jyk7XG4gIH1cblxuICBleHRlbmRUb29sYmFyKHRvb2xiYXIpIHtcbiAgICB0b29sYmFyLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1zbm93Jyk7XG4gICAgdGhpcy5idWlsZEJ1dHRvbnMoW10uc2xpY2UuY2FsbCh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKSksIGljb25zKTtcbiAgICB0aGlzLmJ1aWxkUGlja2VycyhbXS5zbGljZS5jYWxsKHRvb2xiYXIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpKSwgaWNvbnMpO1xuICAgIHRoaXMudG9vbHRpcCA9IG5ldyBTbm93VG9vbHRpcCh0aGlzLnF1aWxsLCB0aGlzLm9wdGlvbnMuYm91bmRzKTtcbiAgICBpZiAodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnFsLWxpbmsnKSkge1xuICAgICAgdGhpcy5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHsga2V5OiAnSycsIHNob3J0S2V5OiB0cnVlIH0sIGZ1bmN0aW9uKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIHRvb2xiYXIuaGFuZGxlcnNbJ2xpbmsnXS5jYWxsKHRvb2xiYXIsICFjb250ZXh0LmZvcm1hdC5saW5rKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuU25vd1RoZW1lLkRFRkFVTFRTID0gZXh0ZW5kKHRydWUsIHt9LCBCYXNlVGhlbWUuREVGQVVMVFMsIHtcbiAgbW9kdWxlczoge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgaWYgKHJhbmdlID09IG51bGwgfHwgcmFuZ2UubGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgICAgICAgIGxldCBwcmV2aWV3ID0gdGhpcy5xdWlsbC5nZXRUZXh0KHJhbmdlKTtcbiAgICAgICAgICAgIGlmICgvXlxcUytAXFxTK1xcLlxcUyskLy50ZXN0KHByZXZpZXcpICYmIHByZXZpZXcuaW5kZXhPZignbWFpbHRvOicpICE9PSAwKSB7XG4gICAgICAgICAgICAgIHByZXZpZXcgPSAnbWFpbHRvOicgKyBwcmV2aWV3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRvb2x0aXAgPSB0aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXA7XG4gICAgICAgICAgICB0b29sdGlwLmVkaXQoJ2xpbmsnLCBwcmV2aWV3KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpbmsnLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuXG5jbGFzcyBTbm93VG9vbHRpcCBleHRlbmRzIEJhc2VUb29sdGlwIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIGJvdW5kcykge1xuICAgIHN1cGVyKHF1aWxsLCBib3VuZHMpO1xuICAgIHRoaXMucHJldmlldyA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCdhLnFsLXByZXZpZXcnKTtcbiAgfVxuXG4gIGxpc3RlbigpIHtcbiAgICBzdXBlci5saXN0ZW4oKTtcbiAgICB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignYS5xbC1hY3Rpb24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWVkaXRpbmcnKSkge1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWRpdCgnbGluaycsIHRoaXMucHJldmlldy50ZXh0Q29udGVudCk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCdhLnFsLXJlbW92ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodGhpcy5saW5rUmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmxpbmtSYW5nZTtcbiAgICAgICAgdGhpcy5yZXN0b3JlRm9jdXMoKTtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXRUZXh0KHJhbmdlLCAnbGluaycsIGZhbHNlLCBFbWl0dGVyLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpbmtSYW5nZTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgICB0aGlzLnF1aWxsLm9uKEVtaXR0ZXIuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UsIChyYW5nZSwgb2xkUmFuZ2UsIHNvdXJjZSkgPT4ge1xuICAgICAgaWYgKHJhbmdlID09IG51bGwpIHJldHVybjtcbiAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDAgJiYgc291cmNlID09PSBFbWl0dGVyLnNvdXJjZXMuVVNFUikge1xuICAgICAgICBsZXQgW2xpbmssIG9mZnNldF0gPSB0aGlzLnF1aWxsLnNjcm9sbC5kZXNjZW5kYW50KExpbmtCbG90LCByYW5nZS5pbmRleCk7XG4gICAgICAgIGlmIChsaW5rICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmxpbmtSYW5nZSA9IG5ldyBSYW5nZShyYW5nZS5pbmRleCAtIG9mZnNldCwgbGluay5sZW5ndGgoKSk7XG4gICAgICAgICAgbGV0IHByZXZpZXcgPSBMaW5rQmxvdC5mb3JtYXRzKGxpbmsuZG9tTm9kZSk7XG4gICAgICAgICAgdGhpcy5wcmV2aWV3LnRleHRDb250ZW50ID0gcHJldmlldztcbiAgICAgICAgICB0aGlzLnByZXZpZXcuc2V0QXR0cmlidXRlKCdocmVmJywgcHJldmlldyk7XG4gICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgdGhpcy5wb3NpdGlvbih0aGlzLnF1aWxsLmdldEJvdW5kcyh0aGlzLmxpbmtSYW5nZSkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubGlua1JhbmdlO1xuICAgICAgfVxuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIHN1cGVyLnNob3coKTtcbiAgICB0aGlzLnJvb3QucmVtb3ZlQXR0cmlidXRlKCdkYXRhLW1vZGUnKTtcbiAgfVxufVxuU25vd1Rvb2x0aXAuVEVNUExBVEUgPSBbXG4gICc8YSBjbGFzcz1cInFsLXByZXZpZXdcIiByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImFib3V0OmJsYW5rXCI+PC9hPicsXG4gICc8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWZvcm11bGE9XCJlPW1jXjJcIiBkYXRhLWxpbms9XCJodHRwczovL3F1aWxsanMuY29tXCIgZGF0YS12aWRlbz1cIkVtYmVkIFVSTFwiPicsXG4gICc8YSBjbGFzcz1cInFsLWFjdGlvblwiPjwvYT4nLFxuICAnPGEgY2xhc3M9XCJxbC1yZW1vdmVcIj48L2E+J1xuXS5qb2luKCcnKTtcblxuXG5leHBvcnQgZGVmYXVsdCBTbm93VGhlbWU7XG4iLCJpbXBvcnQgUXVpbGwgZnJvbSAnLi9jb3JlJztcblxuaW1wb3J0IHsgQWxpZ25DbGFzcywgQWxpZ25TdHlsZSB9IGZyb20gJy4vZm9ybWF0cy9hbGlnbic7XG5pbXBvcnQgeyBEaXJlY3Rpb25BdHRyaWJ1dGUsIERpcmVjdGlvbkNsYXNzLCBEaXJlY3Rpb25TdHlsZSB9IGZyb20gJy4vZm9ybWF0cy9kaXJlY3Rpb24nO1xuaW1wb3J0IHsgSW5kZW50Q2xhc3MgYXMgSW5kZW50IH0gZnJvbSAnLi9mb3JtYXRzL2luZGVudCc7XG5cbmltcG9ydCBCbG9ja3F1b3RlIGZyb20gJy4vZm9ybWF0cy9ibG9ja3F1b3RlJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9mb3JtYXRzL2hlYWRlcic7XG5pbXBvcnQgTGlzdCwgeyBMaXN0SXRlbSB9IGZyb20gJy4vZm9ybWF0cy9saXN0JztcblxuaW1wb3J0IHsgQmFja2dyb3VuZENsYXNzLCBCYWNrZ3JvdW5kU3R5bGUgfSBmcm9tICcuL2Zvcm1hdHMvYmFja2dyb3VuZCc7XG5pbXBvcnQgeyBDb2xvckNsYXNzLCBDb2xvclN0eWxlIH0gZnJvbSAnLi9mb3JtYXRzL2NvbG9yJztcbmltcG9ydCB7IEZvbnRDbGFzcywgRm9udFN0eWxlIH0gZnJvbSAnLi9mb3JtYXRzL2ZvbnQnO1xuaW1wb3J0IHsgU2l6ZUNsYXNzLCBTaXplU3R5bGUgfSBmcm9tICcuL2Zvcm1hdHMvc2l6ZSc7XG5cbmltcG9ydCBCb2xkIGZyb20gJy4vZm9ybWF0cy9ib2xkJztcbmltcG9ydCBJdGFsaWMgZnJvbSAnLi9mb3JtYXRzL2l0YWxpYyc7XG5pbXBvcnQgTGluayBmcm9tICcuL2Zvcm1hdHMvbGluayc7XG5pbXBvcnQgU2NyaXB0IGZyb20gJy4vZm9ybWF0cy9zY3JpcHQnO1xuaW1wb3J0IFN0cmlrZSBmcm9tICcuL2Zvcm1hdHMvc3RyaWtlJztcbmltcG9ydCBVbmRlcmxpbmUgZnJvbSAnLi9mb3JtYXRzL3VuZGVybGluZSc7XG5cbmltcG9ydCBJbWFnZSBmcm9tICcuL2Zvcm1hdHMvaW1hZ2UnO1xuaW1wb3J0IFZpZGVvIGZyb20gJy4vZm9ybWF0cy92aWRlbyc7XG5cbmltcG9ydCBDb2RlQmxvY2ssIHsgQ29kZSBhcyBJbmxpbmVDb2RlIH0gZnJvbSAnLi9mb3JtYXRzL2NvZGUnO1xuXG5pbXBvcnQgRm9ybXVsYSBmcm9tICcuL21vZHVsZXMvZm9ybXVsYSc7XG5pbXBvcnQgU3ludGF4IGZyb20gJy4vbW9kdWxlcy9zeW50YXgnO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSAnLi9tb2R1bGVzL3Rvb2xiYXInO1xuXG5pbXBvcnQgSWNvbnMgZnJvbSAnLi91aS9pY29ucyc7XG5pbXBvcnQgUGlja2VyIGZyb20gJy4vdWkvcGlja2VyJztcbmltcG9ydCBDb2xvclBpY2tlciBmcm9tICcuL3VpL2NvbG9yLXBpY2tlcic7XG5pbXBvcnQgSWNvblBpY2tlciBmcm9tICcuL3VpL2ljb24tcGlja2VyJztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4vdWkvdG9vbHRpcCc7XG5cbmltcG9ydCBCdWJibGVUaGVtZSBmcm9tICcuL3RoZW1lcy9idWJibGUnO1xuaW1wb3J0IFNub3dUaGVtZSBmcm9tICcuL3RoZW1lcy9zbm93JztcblxuXG5RdWlsbC5yZWdpc3Rlcih7XG4gICdhdHRyaWJ1dG9ycy9hdHRyaWJ1dGUvZGlyZWN0aW9uJzogRGlyZWN0aW9uQXR0cmlidXRlLFxuXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9hbGlnbic6IEFsaWduQ2xhc3MsXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9iYWNrZ3JvdW5kJzogQmFja2dyb3VuZENsYXNzLFxuICAnYXR0cmlidXRvcnMvY2xhc3MvY29sb3InOiBDb2xvckNsYXNzLFxuICAnYXR0cmlidXRvcnMvY2xhc3MvZGlyZWN0aW9uJzogRGlyZWN0aW9uQ2xhc3MsXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9mb250JzogRm9udENsYXNzLFxuICAnYXR0cmlidXRvcnMvY2xhc3Mvc2l6ZSc6IFNpemVDbGFzcyxcblxuICAnYXR0cmlidXRvcnMvc3R5bGUvYWxpZ24nOiBBbGlnblN0eWxlLFxuICAnYXR0cmlidXRvcnMvc3R5bGUvYmFja2dyb3VuZCc6IEJhY2tncm91bmRTdHlsZSxcbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL2NvbG9yJzogQ29sb3JTdHlsZSxcbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL2RpcmVjdGlvbic6IERpcmVjdGlvblN0eWxlLFxuICAnYXR0cmlidXRvcnMvc3R5bGUvZm9udCc6IEZvbnRTdHlsZSxcbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL3NpemUnOiBTaXplU3R5bGVcbn0sIHRydWUpO1xuXG5cblF1aWxsLnJlZ2lzdGVyKHtcbiAgJ2Zvcm1hdHMvYWxpZ24nOiBBbGlnbkNsYXNzLFxuICAnZm9ybWF0cy9kaXJlY3Rpb24nOiBEaXJlY3Rpb25DbGFzcyxcbiAgJ2Zvcm1hdHMvaW5kZW50JzogSW5kZW50LFxuXG4gICdmb3JtYXRzL2JhY2tncm91bmQnOiBCYWNrZ3JvdW5kU3R5bGUsXG4gICdmb3JtYXRzL2NvbG9yJzogQ29sb3JTdHlsZSxcbiAgJ2Zvcm1hdHMvZm9udCc6IEZvbnRDbGFzcyxcbiAgJ2Zvcm1hdHMvc2l6ZSc6IFNpemVDbGFzcyxcblxuICAnZm9ybWF0cy9ibG9ja3F1b3RlJzogQmxvY2txdW90ZSxcbiAgJ2Zvcm1hdHMvY29kZS1ibG9jayc6IENvZGVCbG9jayxcbiAgJ2Zvcm1hdHMvaGVhZGVyJzogSGVhZGVyLFxuICAnZm9ybWF0cy9saXN0JzogTGlzdCxcblxuICAnZm9ybWF0cy9ib2xkJzogQm9sZCxcbiAgJ2Zvcm1hdHMvY29kZSc6IElubGluZUNvZGUsXG4gICdmb3JtYXRzL2l0YWxpYyc6IEl0YWxpYyxcbiAgJ2Zvcm1hdHMvbGluayc6IExpbmssXG4gICdmb3JtYXRzL3NjcmlwdCc6IFNjcmlwdCxcbiAgJ2Zvcm1hdHMvc3RyaWtlJzogU3RyaWtlLFxuICAnZm9ybWF0cy91bmRlcmxpbmUnOiBVbmRlcmxpbmUsXG5cbiAgJ2Zvcm1hdHMvaW1hZ2UnOiBJbWFnZSxcbiAgJ2Zvcm1hdHMvdmlkZW8nOiBWaWRlbyxcblxuICAnZm9ybWF0cy9saXN0L2l0ZW0nOiBMaXN0SXRlbSxcblxuICAnbW9kdWxlcy9mb3JtdWxhJzogRm9ybXVsYSxcbiAgJ21vZHVsZXMvc3ludGF4JzogU3ludGF4LFxuICAnbW9kdWxlcy90b29sYmFyJzogVG9vbGJhcixcblxuICAndGhlbWVzL2J1YmJsZSc6IEJ1YmJsZVRoZW1lLFxuICAndGhlbWVzL3Nub3cnOiBTbm93VGhlbWUsXG5cbiAgJ3VpL2ljb25zJzogSWNvbnMsXG4gICd1aS9waWNrZXInOiBQaWNrZXIsXG4gICd1aS9pY29uLXBpY2tlcic6IEljb25QaWNrZXIsXG4gICd1aS9jb2xvci1waWNrZXInOiBDb2xvclBpY2tlcixcbiAgJ3VpL3Rvb2x0aXAnOiBUb29sdGlwXG59LCB0cnVlKTtcblxuXG5leHBvcnQgZGVmYXVsdCBRdWlsbDtcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3F1aWxsLmNvcmUuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcXVpbGwuc25vdy5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgeyBCYXNlRWRpdG9yLCBCYXNlRWRpdG9yUGFsZXR0ZUl0ZW0gfSBmcm9tIFwiLi4vZWRpdG9yLWNvbW1vblwiO1xuaW1wb3J0IHsgbXhXaW5kb3csICBteFNoYXBlIH0gZnJvbSBcIm14Z3JhcGhcIjtcblxuaW1wb3J0ICdxdWlsbCc7XG5cbmltcG9ydCBRdWlsbCBmcm9tICdxdWlsbC9jb3JlJztcblxuaW1wb3J0ICdxdWlsbC9kaXN0L3F1aWxsLmNvcmUuY3NzJ1xuaW1wb3J0ICdxdWlsbC9kaXN0L3F1aWxsLnNub3cuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBRdWlsbFxuXG5sZXQgcXVpbGxEZWZhdWx0VGV4dCA9IFwiRGVmYXVsdFwiO1xuaW1wb3J0IHF1aWxsRGVmYXVsdFNWRyBmcm9tIFwiLi9xdWlsbC5zdmdcIjtcblxuZXhwb3J0IGNsYXNzIFF1aWxsRWRpdG9yUGx1Z2luIGV4dGVuZHMgQmFzZUVkaXRvciB7XG4gIGNvbXBvbmVudDogYW55O1xuXG4gIG9uRmlsbFdpbmRvdyhcbiAgICBlZGl0b3JVaTogYW55LFxuICAgIGRpdjogSFRNTERpdkVsZW1lbnQsXG4gICAgd2luOiBteFdpbmRvdyxcbiAgICBzaGFwZTogbXhTaGFwZVxuICApIHtcbiAgICBsZXQgbWFpbmRpdiA9IGRpdi5xdWVyeVNlbGVjdG9yKGAjZWRpdG9yXyR7dGhpcy5uYW1lfV9kaXZgKTtcbiAgICAobWFpbmRpdiBhcyBIVE1MRWxlbWVudCkuc3R5bGUucGFkZGluZyA9IFwiOHB4IDBweCAwcHggOHB4XCI7XG4gICAgKG1haW5kaXYgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmdldFNoYXBlVmFsdWUoZWRpdG9yVWksIHNoYXBlKTtcbiAgICB0aGlzLmNvbXBvbmVudCA9IG5ldyBRdWlsbChgI2VkaXRvcl8ke3RoaXMubmFtZX1fZGl2YCwge1xuICAgICAgbW9kdWxlczoge1xuICAgICAgICB0b29sYmFyOiAgW1xuICAgICAgICAgIFt7ICdmb250JzogW10gfSwgeyAnc2l6ZSc6IFtdIH1dLFxuICAgICAgICAgIFsgJ2JvbGQnLCAnaXRhbGljJywgJ3VuZGVybGluZScsICdzdHJpa2UnIF0sXG4gICAgICAgICAgW3sgJ2hlYWRlcic6ICcxJyB9LCB7ICdoZWFkZXInOiAnMicgfSwgJ2Jsb2NrcXVvdGUnLCAnY29kZS1ibG9jaycgXSxcbiAgICAgICAgICBbeyAnY29sb3InOiBbXSB9LCB7ICdiYWNrZ3JvdW5kJzogW10gfV0sXG4gICAgICAgICAgW3sgJ2xpc3QnOiAnb3JkZXJlZCcgfSwgeyAnbGlzdCc6ICdidWxsZXQnfSwgeyAnaW5kZW50JzogJy0xJyB9LCB7ICdpbmRlbnQnOiAnKzEnIH1dLFxuICAgICAgICAgIFsgeyAnYWxpZ24nOiBbXSB9XSxcbiAgICAgICAgICBbICdsaW5rJywgJ2ltYWdlJywgJ3ZpZGVvJyBdLFxuICAgICAgICAgIFt7ICdzY3JpcHQnOiAnc3VwZXInIH0sIHsgJ3NjcmlwdCc6ICdzdWInIH1dLFxuICAgICAgICAgIFsgJ2NsZWFuJyBdLFxuICAgICAgICAgIC4uLnRoaXMub3B0aW9ucy5jb25maWcuZXh0cmFfdG9vbGJhclxuICAgICAgICBdLFxuICAgICAgICAuLi50aGlzLm9wdGlvbnMuY29uZmlnLmV4dHJhX21vZHVsZXNcbiAgICAgIH0sXG4gICAgICBwbGFjZWhvbGRlcjogJ0NvbXBvc2UgYW4gZXBpYy4uLicsXG4gICAgICB0aGVtZTogJ3Nub3cnLCAgLy8gb3IgJ2J1YmJsZSdcbiAgICAgIC4uLnRoaXMub3B0aW9ucy5jb25maWdcbiAgICB9KTsgICBcbiAgICAvL3RoaXMuY29tcG9uZW50LnNldENvbnRlbnRzKHZhbHVlKVxuICAgIHRoaXMuY29tcG9uZW50LnJvb3QuaW5uZXJIVE1MID0gdmFsdWVcbiAgfVxuXG4gIG9uU2hvd1dpbmRvdyhcbiAgICBlZGl0b3JVaTogYW55LFxuICAgIGRpdjogSFRNTERpdkVsZW1lbnQsXG4gICAgd2luOiBteFdpbmRvdyxcbiAgICBzaGFwZTogbXhTaGFwZVxuICApIHtcbiAgICBzdXBlci5vblNob3dXaW5kb3coZWRpdG9yVWksIGRpdiwgd2luLCBzaGFwZSk7XG4gIH1cblxuICBhc3luYyBnZXRFZGl0b3JWYWx1ZShlZGl0b3JVaTogYW55LCBkaXY6IEhUTUxEaXZFbGVtZW50LCB3aW46IG14V2luZG93KSB7XG4gICAgLy9yZXR1cm4gKHRoaXMuY29tcG9uZW50IGFzIFF1aWxsKS5nZXRDb250ZW50cygpO1xuICAgIHJldHVybiAodGhpcy5jb21wb25lbnQgYXMgUXVpbGwpLnJvb3QuaW5uZXJIVE1MXG4gIH1cblxuICBzZXREZWZhdWx0c1BhbGV0dGVJdGVtKGl0ZW06IEJhc2VFZGl0b3JQYWxldHRlSXRlbSkge1xuICAgIGlmICghaXRlbS53aWR0aCkgaXRlbS53aWR0aCA9IDUwO1xuICAgIGlmICghaXRlbS5oZWlnaHQpIGl0ZW0uaGVpZ2h0ID0gMjA7XG5cbiAgICAvLyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYXN5bmNhcGkvc3BlYy9tYXN0ZXIvYXNzZXRzL2FzeW5jYXBpLnhtbFxuICAgIGlmICghaXRlbS5pY29uICYmICFpdGVtLmRhdGEpXG4gICAgICBpdGVtLmljb24gPSBcImltYWdlL3N2Zyt4bWwsXCIgKyBidG9hKHF1aWxsRGVmYXVsdFNWRyk7XG4gICAgaWYgKCFpdGVtLm5vZGUgJiYgIWl0ZW0uZGF0YSkgaXRlbS5ub2RlID0gXCI8ZWRpdG9yIC8+XCI7XG4gICAgaWYgKCFpdGVtLnRleHQgJiYgIWl0ZW0uZGF0YSkgaXRlbS50ZXh0ID0gcXVpbGxEZWZhdWx0VGV4dDtcblxuICAgIHN1cGVyLnNldERlZmF1bHRzUGFsZXR0ZUl0ZW0oaXRlbSk7XG4gIH1cbn1cblxubmV3IFF1aWxsRWRpdG9yUGx1Z2luKFwicXVpbGxcIiwge1xuICBhdHRyaWJ1dGVOYW1lOiBcInF1aWxsRGF0YVwiLFxuICBjb250ZXh0dWFsOiBcIkVkaXQgSFRNTCB3aXRoIFF1aWxsXCIsXG4gIHRpdGxlOiBcIlF1aWxsIEVkaXRvclwiLFxuICBwYWxldHRlSXRlbXM6IFtcbiAgICB7XG4gICAgICBuYW1lOiBcInF1aWxsXCIsXG4gICAgICBsYWJlbDogXCJRdWlsbFwiLFxuICAgICAgcGFsZXR0ZTogeyBuYW1lOiBcImVkaXRvcnNcIiwgbGFiZWw6IFwiRWRpdG9yc1wiIH0sXG4gICAgICBzdHlsZTogXCJjb2xsYXBzYWJsZT0wO1wiXG4gICAgfSxcbiAgXSxcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==